

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sat Jan 11 20:15:26 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1,group=3
    17                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=3
    18                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=1
    19                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=1
    20                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=3
    21                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=3
    22                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=3
    23                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1,group=2
    52                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1,group=2
    53                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,space=0,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,space=0,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,space=0,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,space=0,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,space=0,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81   000000                     
    82                           ; Generated 25/07/2024 GMT
    83                           ; 
    84                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution. Publication is not required when
    98                           ;        this file is used in an embedded application.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4520 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116   000FE0                     bsr             equ	4064
   117   000FE9                     fsr0            equ	4073
   118   000FEA                     fsr0h           equ	4074
   119   000FE9                     fsr0l           equ	4073
   120   000FE1                     fsr1            equ	4065
   121   000FE2                     fsr1h           equ	4066
   122   000FE1                     fsr1l           equ	4065
   123   000FD9                     fsr2            equ	4057
   124   000FDA                     fsr2h           equ	4058
   125   000FD9                     fsr2l           equ	4057
   126   000FEF                     indf0           equ	4079
   127   000FE7                     indf1           equ	4071
   128   000FDF                     indf2           equ	4063
   129   000FF2                     intcon          equ	4082
   130   000000                     nvmcon          equ	0
   131   000FF9                     pcl             equ	4089
   132   000FFA                     pclath          equ	4090
   133   000FFB                     pclatu          equ	4091
   134   000FEB                     plusw0          equ	4075
   135   000FE3                     plusw1          equ	4067
   136   000FDB                     plusw2          equ	4059
   137   000FED                     postdec0        equ	4077
   138   000FE5                     postdec1        equ	4069
   139   000FDD                     postdec2        equ	4061
   140   000FEE                     postinc0        equ	4078
   141   000FE6                     postinc1        equ	4070
   142   000FDE                     postinc2        equ	4062
   143   000FEC                     preinc0         equ	4076
   144   000FE4                     preinc1         equ	4068
   145   000FDC                     preinc2         equ	4060
   146   000FF3                     prod            equ	4083
   147   000FF4                     prodh           equ	4084
   148   000FF3                     prodl           equ	4083
   149   000FD8                     status          equ	4056
   150   000FF5                     tablat          equ	4085
   151   000FF6                     tblptr          equ	4086
   152   000FF7                     tblptrh         equ	4087
   153   000FF6                     tblptrl         equ	4086
   154   000FF8                     tblptru         equ	4088
   155   000FFD                     tosl            equ	4093
   156   000FE8                     wreg            equ	4072
   157   000F80                     PORTA           equ	3968	;# 
   158   000F81                     PORTB           equ	3969	;# 
   159   000F82                     PORTC           equ	3970	;# 
   160   000F83                     PORTD           equ	3971	;# 
   161   000F84                     PORTE           equ	3972	;# 
   162   000F89                     LATA            equ	3977	;# 
   163   000F8A                     LATB            equ	3978	;# 
   164   000F8B                     LATC            equ	3979	;# 
   165   000F8C                     LATD            equ	3980	;# 
   166   000F8D                     LATE            equ	3981	;# 
   167   000F92                     TRISA           equ	3986	;# 
   168   000F92                     DDRA            equ	3986	;# 
   169   000F93                     TRISB           equ	3987	;# 
   170   000F93                     DDRB            equ	3987	;# 
   171   000F94                     TRISC           equ	3988	;# 
   172   000F94                     DDRC            equ	3988	;# 
   173   000F95                     TRISD           equ	3989	;# 
   174   000F95                     DDRD            equ	3989	;# 
   175   000F96                     TRISE           equ	3990	;# 
   176   000F96                     DDRE            equ	3990	;# 
   177   000F9B                     OSCTUNE         equ	3995	;# 
   178   000F9D                     PIE1            equ	3997	;# 
   179   000F9E                     PIR1            equ	3998	;# 
   180   000F9F                     IPR1            equ	3999	;# 
   181   000FA0                     PIE2            equ	4000	;# 
   182   000FA1                     PIR2            equ	4001	;# 
   183   000FA2                     IPR2            equ	4002	;# 
   184   000FA6                     EECON1          equ	4006	;# 
   185   000FA7                     EECON2          equ	4007	;# 
   186   000FA8                     EEDATA          equ	4008	;# 
   187   000FA9                     EEADR           equ	4009	;# 
   188   000FAB                     RCSTA           equ	4011	;# 
   189   000FAB                     RCSTA1          equ	4011	;# 
   190   000FAC                     TXSTA           equ	4012	;# 
   191   000FAC                     TXSTA1          equ	4012	;# 
   192   000FAD                     TXREG           equ	4013	;# 
   193   000FAD                     TXREG1          equ	4013	;# 
   194   000FAE                     RCREG           equ	4014	;# 
   195   000FAE                     RCREG1          equ	4014	;# 
   196   000FAF                     SPBRG           equ	4015	;# 
   197   000FAF                     SPBRG1          equ	4015	;# 
   198   000FB0                     SPBRGH          equ	4016	;# 
   199   000FB1                     T3CON           equ	4017	;# 
   200   000FB2                     TMR3            equ	4018	;# 
   201   000FB2                     TMR3L           equ	4018	;# 
   202   000FB3                     TMR3H           equ	4019	;# 
   203   000FB4                     CMCON           equ	4020	;# 
   204   000FB5                     CVRCON          equ	4021	;# 
   205   000FB6                     ECCP1AS         equ	4022	;# 
   206   000FB6                     ECCPAS          equ	4022	;# 
   207   000FB7                     PWM1CON         equ	4023	;# 
   208   000FB7                     ECCP1DEL        equ	4023	;# 
   209   000FB8                     BAUDCON         equ	4024	;# 
   210   000FB8                     BAUDCTL         equ	4024	;# 
   211   000FBA                     CCP2CON         equ	4026	;# 
   212   000FBB                     CCPR2           equ	4027	;# 
   213   000FBB                     CCPR2L          equ	4027	;# 
   214   000FBC                     CCPR2H          equ	4028	;# 
   215   000FBD                     CCP1CON         equ	4029	;# 
   216   000FBE                     CCPR1           equ	4030	;# 
   217   000FBE                     CCPR1L          equ	4030	;# 
   218   000FBF                     CCPR1H          equ	4031	;# 
   219   000FC0                     ADCON2          equ	4032	;# 
   220   000FC1                     ADCON1          equ	4033	;# 
   221   000FC2                     ADCON0          equ	4034	;# 
   222   000FC3                     ADRES           equ	4035	;# 
   223   000FC3                     ADRESL          equ	4035	;# 
   224   000FC4                     ADRESH          equ	4036	;# 
   225   000FC5                     SSPCON2         equ	4037	;# 
   226   000FC6                     SSPCON1         equ	4038	;# 
   227   000FC7                     SSPSTAT         equ	4039	;# 
   228   000FC8                     SSPADD          equ	4040	;# 
   229   000FC9                     SSPBUF          equ	4041	;# 
   230   000FCA                     T2CON           equ	4042	;# 
   231   000FCB                     PR2             equ	4043	;# 
   232   000FCB                     MEMCON          equ	4043	;# 
   233   000FCC                     TMR2            equ	4044	;# 
   234   000FCD                     T1CON           equ	4045	;# 
   235   000FCE                     TMR1            equ	4046	;# 
   236   000FCE                     TMR1L           equ	4046	;# 
   237   000FCF                     TMR1H           equ	4047	;# 
   238   000FD0                     RCON            equ	4048	;# 
   239   000FD1                     WDTCON          equ	4049	;# 
   240   000FD2                     HLVDCON         equ	4050	;# 
   241   000FD2                     LVDCON          equ	4050	;# 
   242   000FD3                     OSCCON          equ	4051	;# 
   243   000FD5                     T0CON           equ	4053	;# 
   244   000FD6                     TMR0            equ	4054	;# 
   245   000FD6                     TMR0L           equ	4054	;# 
   246   000FD7                     TMR0H           equ	4055	;# 
   247   000FD8                     STATUS          equ	4056	;# 
   248   000FD9                     FSR2            equ	4057	;# 
   249   000FD9                     FSR2L           equ	4057	;# 
   250   000FDA                     FSR2H           equ	4058	;# 
   251   000FDB                     PLUSW2          equ	4059	;# 
   252   000FDC                     PREINC2         equ	4060	;# 
   253   000FDD                     POSTDEC2        equ	4061	;# 
   254   000FDE                     POSTINC2        equ	4062	;# 
   255   000FDF                     INDF2           equ	4063	;# 
   256   000FE0                     BSR             equ	4064	;# 
   257   000FE1                     FSR1            equ	4065	;# 
   258   000FE1                     FSR1L           equ	4065	;# 
   259   000FE2                     FSR1H           equ	4066	;# 
   260   000FE3                     PLUSW1          equ	4067	;# 
   261   000FE4                     PREINC1         equ	4068	;# 
   262   000FE5                     POSTDEC1        equ	4069	;# 
   263   000FE6                     POSTINC1        equ	4070	;# 
   264   000FE7                     INDF1           equ	4071	;# 
   265   000FE8                     WREG            equ	4072	;# 
   266   000FE9                     FSR0            equ	4073	;# 
   267   000FE9                     FSR0L           equ	4073	;# 
   268   000FEA                     FSR0H           equ	4074	;# 
   269   000FEB                     PLUSW0          equ	4075	;# 
   270   000FEC                     PREINC0         equ	4076	;# 
   271   000FED                     POSTDEC0        equ	4077	;# 
   272   000FEE                     POSTINC0        equ	4078	;# 
   273   000FEF                     INDF0           equ	4079	;# 
   274   000FF0                     INTCON3         equ	4080	;# 
   275   000FF1                     INTCON2         equ	4081	;# 
   276   000FF2                     INTCON          equ	4082	;# 
   277   000FF3                     PROD            equ	4083	;# 
   278   000FF3                     PRODL           equ	4083	;# 
   279   000FF4                     PRODH           equ	4084	;# 
   280   000FF5                     TABLAT          equ	4085	;# 
   281   000FF6                     TBLPTR          equ	4086	;# 
   282   000FF6                     TBLPTRL         equ	4086	;# 
   283   000FF7                     TBLPTRH         equ	4087	;# 
   284   000FF8                     TBLPTRU         equ	4088	;# 
   285   000FF9                     PCLAT           equ	4089	;# 
   286   000FF9                     PC              equ	4089	;# 
   287   000FF9                     PCL             equ	4089	;# 
   288   000FFA                     PCLATH          equ	4090	;# 
   289   000FFB                     PCLATU          equ	4091	;# 
   290   000FFC                     STKPTR          equ	4092	;# 
   291   000FFD                     TOS             equ	4093	;# 
   292   000FFD                     TOSL            equ	4093	;# 
   293   000FFE                     TOSH            equ	4094	;# 
   294   000FFF                     TOSU            equ	4095	;# 
   295   000F80                     PORTA           equ	3968	;# 
   296   000F81                     PORTB           equ	3969	;# 
   297   000F82                     PORTC           equ	3970	;# 
   298   000F83                     PORTD           equ	3971	;# 
   299   000F84                     PORTE           equ	3972	;# 
   300   000F89                     LATA            equ	3977	;# 
   301   000F8A                     LATB            equ	3978	;# 
   302   000F8B                     LATC            equ	3979	;# 
   303   000F8C                     LATD            equ	3980	;# 
   304   000F8D                     LATE            equ	3981	;# 
   305   000F92                     TRISA           equ	3986	;# 
   306   000F92                     DDRA            equ	3986	;# 
   307   000F93                     TRISB           equ	3987	;# 
   308   000F93                     DDRB            equ	3987	;# 
   309   000F94                     TRISC           equ	3988	;# 
   310   000F94                     DDRC            equ	3988	;# 
   311   000F95                     TRISD           equ	3989	;# 
   312   000F95                     DDRD            equ	3989	;# 
   313   000F96                     TRISE           equ	3990	;# 
   314   000F96                     DDRE            equ	3990	;# 
   315   000F9B                     OSCTUNE         equ	3995	;# 
   316   000F9D                     PIE1            equ	3997	;# 
   317   000F9E                     PIR1            equ	3998	;# 
   318   000F9F                     IPR1            equ	3999	;# 
   319   000FA0                     PIE2            equ	4000	;# 
   320   000FA1                     PIR2            equ	4001	;# 
   321   000FA2                     IPR2            equ	4002	;# 
   322   000FA6                     EECON1          equ	4006	;# 
   323   000FA7                     EECON2          equ	4007	;# 
   324   000FA8                     EEDATA          equ	4008	;# 
   325   000FA9                     EEADR           equ	4009	;# 
   326   000FAB                     RCSTA           equ	4011	;# 
   327   000FAB                     RCSTA1          equ	4011	;# 
   328   000FAC                     TXSTA           equ	4012	;# 
   329   000FAC                     TXSTA1          equ	4012	;# 
   330   000FAD                     TXREG           equ	4013	;# 
   331   000FAD                     TXREG1          equ	4013	;# 
   332   000FAE                     RCREG           equ	4014	;# 
   333   000FAE                     RCREG1          equ	4014	;# 
   334   000FAF                     SPBRG           equ	4015	;# 
   335   000FAF                     SPBRG1          equ	4015	;# 
   336   000FB0                     SPBRGH          equ	4016	;# 
   337   000FB1                     T3CON           equ	4017	;# 
   338   000FB2                     TMR3            equ	4018	;# 
   339   000FB2                     TMR3L           equ	4018	;# 
   340   000FB3                     TMR3H           equ	4019	;# 
   341   000FB4                     CMCON           equ	4020	;# 
   342   000FB5                     CVRCON          equ	4021	;# 
   343   000FB6                     ECCP1AS         equ	4022	;# 
   344   000FB6                     ECCPAS          equ	4022	;# 
   345   000FB7                     PWM1CON         equ	4023	;# 
   346   000FB7                     ECCP1DEL        equ	4023	;# 
   347   000FB8                     BAUDCON         equ	4024	;# 
   348   000FB8                     BAUDCTL         equ	4024	;# 
   349   000FBA                     CCP2CON         equ	4026	;# 
   350   000FBB                     CCPR2           equ	4027	;# 
   351   000FBB                     CCPR2L          equ	4027	;# 
   352   000FBC                     CCPR2H          equ	4028	;# 
   353   000FBD                     CCP1CON         equ	4029	;# 
   354   000FBE                     CCPR1           equ	4030	;# 
   355   000FBE                     CCPR1L          equ	4030	;# 
   356   000FBF                     CCPR1H          equ	4031	;# 
   357   000FC0                     ADCON2          equ	4032	;# 
   358   000FC1                     ADCON1          equ	4033	;# 
   359   000FC2                     ADCON0          equ	4034	;# 
   360   000FC3                     ADRES           equ	4035	;# 
   361   000FC3                     ADRESL          equ	4035	;# 
   362   000FC4                     ADRESH          equ	4036	;# 
   363   000FC5                     SSPCON2         equ	4037	;# 
   364   000FC6                     SSPCON1         equ	4038	;# 
   365   000FC7                     SSPSTAT         equ	4039	;# 
   366   000FC8                     SSPADD          equ	4040	;# 
   367   000FC9                     SSPBUF          equ	4041	;# 
   368   000FCA                     T2CON           equ	4042	;# 
   369   000FCB                     PR2             equ	4043	;# 
   370   000FCB                     MEMCON          equ	4043	;# 
   371   000FCC                     TMR2            equ	4044	;# 
   372   000FCD                     T1CON           equ	4045	;# 
   373   000FCE                     TMR1            equ	4046	;# 
   374   000FCE                     TMR1L           equ	4046	;# 
   375   000FCF                     TMR1H           equ	4047	;# 
   376   000FD0                     RCON            equ	4048	;# 
   377   000FD1                     WDTCON          equ	4049	;# 
   378   000FD2                     HLVDCON         equ	4050	;# 
   379   000FD2                     LVDCON          equ	4050	;# 
   380   000FD3                     OSCCON          equ	4051	;# 
   381   000FD5                     T0CON           equ	4053	;# 
   382   000FD6                     TMR0            equ	4054	;# 
   383   000FD6                     TMR0L           equ	4054	;# 
   384   000FD7                     TMR0H           equ	4055	;# 
   385   000FD8                     STATUS          equ	4056	;# 
   386   000FD9                     FSR2            equ	4057	;# 
   387   000FD9                     FSR2L           equ	4057	;# 
   388   000FDA                     FSR2H           equ	4058	;# 
   389   000FDB                     PLUSW2          equ	4059	;# 
   390   000FDC                     PREINC2         equ	4060	;# 
   391   000FDD                     POSTDEC2        equ	4061	;# 
   392   000FDE                     POSTINC2        equ	4062	;# 
   393   000FDF                     INDF2           equ	4063	;# 
   394   000FE0                     BSR             equ	4064	;# 
   395   000FE1                     FSR1            equ	4065	;# 
   396   000FE1                     FSR1L           equ	4065	;# 
   397   000FE2                     FSR1H           equ	4066	;# 
   398   000FE3                     PLUSW1          equ	4067	;# 
   399   000FE4                     PREINC1         equ	4068	;# 
   400   000FE5                     POSTDEC1        equ	4069	;# 
   401   000FE6                     POSTINC1        equ	4070	;# 
   402   000FE7                     INDF1           equ	4071	;# 
   403   000FE8                     WREG            equ	4072	;# 
   404   000FE9                     FSR0            equ	4073	;# 
   405   000FE9                     FSR0L           equ	4073	;# 
   406   000FEA                     FSR0H           equ	4074	;# 
   407   000FEB                     PLUSW0          equ	4075	;# 
   408   000FEC                     PREINC0         equ	4076	;# 
   409   000FED                     POSTDEC0        equ	4077	;# 
   410   000FEE                     POSTINC0        equ	4078	;# 
   411   000FEF                     INDF0           equ	4079	;# 
   412   000FF0                     INTCON3         equ	4080	;# 
   413   000FF1                     INTCON2         equ	4081	;# 
   414   000FF2                     INTCON          equ	4082	;# 
   415   000FF3                     PROD            equ	4083	;# 
   416   000FF3                     PRODL           equ	4083	;# 
   417   000FF4                     PRODH           equ	4084	;# 
   418   000FF5                     TABLAT          equ	4085	;# 
   419   000FF6                     TBLPTR          equ	4086	;# 
   420   000FF6                     TBLPTRL         equ	4086	;# 
   421   000FF7                     TBLPTRH         equ	4087	;# 
   422   000FF8                     TBLPTRU         equ	4088	;# 
   423   000FF9                     PCLAT           equ	4089	;# 
   424   000FF9                     PC              equ	4089	;# 
   425   000FF9                     PCL             equ	4089	;# 
   426   000FFA                     PCLATH          equ	4090	;# 
   427   000FFB                     PCLATU          equ	4091	;# 
   428   000FFC                     STKPTR          equ	4092	;# 
   429   000FFD                     TOS             equ	4093	;# 
   430   000FFD                     TOSL            equ	4093	;# 
   431   000FFE                     TOSH            equ	4094	;# 
   432   000FFF                     TOSU            equ	4095	;# 
   433   000F80                     PORTA           equ	3968	;# 
   434   000F81                     PORTB           equ	3969	;# 
   435   000F82                     PORTC           equ	3970	;# 
   436   000F83                     PORTD           equ	3971	;# 
   437   000F84                     PORTE           equ	3972	;# 
   438   000F89                     LATA            equ	3977	;# 
   439   000F8A                     LATB            equ	3978	;# 
   440   000F8B                     LATC            equ	3979	;# 
   441   000F8C                     LATD            equ	3980	;# 
   442   000F8D                     LATE            equ	3981	;# 
   443   000F92                     TRISA           equ	3986	;# 
   444   000F92                     DDRA            equ	3986	;# 
   445   000F93                     TRISB           equ	3987	;# 
   446   000F93                     DDRB            equ	3987	;# 
   447   000F94                     TRISC           equ	3988	;# 
   448   000F94                     DDRC            equ	3988	;# 
   449   000F95                     TRISD           equ	3989	;# 
   450   000F95                     DDRD            equ	3989	;# 
   451   000F96                     TRISE           equ	3990	;# 
   452   000F96                     DDRE            equ	3990	;# 
   453   000F9B                     OSCTUNE         equ	3995	;# 
   454   000F9D                     PIE1            equ	3997	;# 
   455   000F9E                     PIR1            equ	3998	;# 
   456   000F9F                     IPR1            equ	3999	;# 
   457   000FA0                     PIE2            equ	4000	;# 
   458   000FA1                     PIR2            equ	4001	;# 
   459   000FA2                     IPR2            equ	4002	;# 
   460   000FA6                     EECON1          equ	4006	;# 
   461   000FA7                     EECON2          equ	4007	;# 
   462   000FA8                     EEDATA          equ	4008	;# 
   463   000FA9                     EEADR           equ	4009	;# 
   464   000FAB                     RCSTA           equ	4011	;# 
   465   000FAB                     RCSTA1          equ	4011	;# 
   466   000FAC                     TXSTA           equ	4012	;# 
   467   000FAC                     TXSTA1          equ	4012	;# 
   468   000FAD                     TXREG           equ	4013	;# 
   469   000FAD                     TXREG1          equ	4013	;# 
   470   000FAE                     RCREG           equ	4014	;# 
   471   000FAE                     RCREG1          equ	4014	;# 
   472   000FAF                     SPBRG           equ	4015	;# 
   473   000FAF                     SPBRG1          equ	4015	;# 
   474   000FB0                     SPBRGH          equ	4016	;# 
   475   000FB1                     T3CON           equ	4017	;# 
   476   000FB2                     TMR3            equ	4018	;# 
   477   000FB2                     TMR3L           equ	4018	;# 
   478   000FB3                     TMR3H           equ	4019	;# 
   479   000FB4                     CMCON           equ	4020	;# 
   480   000FB5                     CVRCON          equ	4021	;# 
   481   000FB6                     ECCP1AS         equ	4022	;# 
   482   000FB6                     ECCPAS          equ	4022	;# 
   483   000FB7                     PWM1CON         equ	4023	;# 
   484   000FB7                     ECCP1DEL        equ	4023	;# 
   485   000FB8                     BAUDCON         equ	4024	;# 
   486   000FB8                     BAUDCTL         equ	4024	;# 
   487   000FBA                     CCP2CON         equ	4026	;# 
   488   000FBB                     CCPR2           equ	4027	;# 
   489   000FBB                     CCPR2L          equ	4027	;# 
   490   000FBC                     CCPR2H          equ	4028	;# 
   491   000FBD                     CCP1CON         equ	4029	;# 
   492   000FBE                     CCPR1           equ	4030	;# 
   493   000FBE                     CCPR1L          equ	4030	;# 
   494   000FBF                     CCPR1H          equ	4031	;# 
   495   000FC0                     ADCON2          equ	4032	;# 
   496   000FC1                     ADCON1          equ	4033	;# 
   497   000FC2                     ADCON0          equ	4034	;# 
   498   000FC3                     ADRES           equ	4035	;# 
   499   000FC3                     ADRESL          equ	4035	;# 
   500   000FC4                     ADRESH          equ	4036	;# 
   501   000FC5                     SSPCON2         equ	4037	;# 
   502   000FC6                     SSPCON1         equ	4038	;# 
   503   000FC7                     SSPSTAT         equ	4039	;# 
   504   000FC8                     SSPADD          equ	4040	;# 
   505   000FC9                     SSPBUF          equ	4041	;# 
   506   000FCA                     T2CON           equ	4042	;# 
   507   000FCB                     PR2             equ	4043	;# 
   508   000FCB                     MEMCON          equ	4043	;# 
   509   000FCC                     TMR2            equ	4044	;# 
   510   000FCD                     T1CON           equ	4045	;# 
   511   000FCE                     TMR1            equ	4046	;# 
   512   000FCE                     TMR1L           equ	4046	;# 
   513   000FCF                     TMR1H           equ	4047	;# 
   514   000FD0                     RCON            equ	4048	;# 
   515   000FD1                     WDTCON          equ	4049	;# 
   516   000FD2                     HLVDCON         equ	4050	;# 
   517   000FD2                     LVDCON          equ	4050	;# 
   518   000FD3                     OSCCON          equ	4051	;# 
   519   000FD5                     T0CON           equ	4053	;# 
   520   000FD6                     TMR0            equ	4054	;# 
   521   000FD6                     TMR0L           equ	4054	;# 
   522   000FD7                     TMR0H           equ	4055	;# 
   523   000FD8                     STATUS          equ	4056	;# 
   524   000FD9                     FSR2            equ	4057	;# 
   525   000FD9                     FSR2L           equ	4057	;# 
   526   000FDA                     FSR2H           equ	4058	;# 
   527   000FDB                     PLUSW2          equ	4059	;# 
   528   000FDC                     PREINC2         equ	4060	;# 
   529   000FDD                     POSTDEC2        equ	4061	;# 
   530   000FDE                     POSTINC2        equ	4062	;# 
   531   000FDF                     INDF2           equ	4063	;# 
   532   000FE0                     BSR             equ	4064	;# 
   533   000FE1                     FSR1            equ	4065	;# 
   534   000FE1                     FSR1L           equ	4065	;# 
   535   000FE2                     FSR1H           equ	4066	;# 
   536   000FE3                     PLUSW1          equ	4067	;# 
   537   000FE4                     PREINC1         equ	4068	;# 
   538   000FE5                     POSTDEC1        equ	4069	;# 
   539   000FE6                     POSTINC1        equ	4070	;# 
   540   000FE7                     INDF1           equ	4071	;# 
   541   000FE8                     WREG            equ	4072	;# 
   542   000FE9                     FSR0            equ	4073	;# 
   543   000FE9                     FSR0L           equ	4073	;# 
   544   000FEA                     FSR0H           equ	4074	;# 
   545   000FEB                     PLUSW0          equ	4075	;# 
   546   000FEC                     PREINC0         equ	4076	;# 
   547   000FED                     POSTDEC0        equ	4077	;# 
   548   000FEE                     POSTINC0        equ	4078	;# 
   549   000FEF                     INDF0           equ	4079	;# 
   550   000FF0                     INTCON3         equ	4080	;# 
   551   000FF1                     INTCON2         equ	4081	;# 
   552   000FF2                     INTCON          equ	4082	;# 
   553   000FF3                     PROD            equ	4083	;# 
   554   000FF3                     PRODL           equ	4083	;# 
   555   000FF4                     PRODH           equ	4084	;# 
   556   000FF5                     TABLAT          equ	4085	;# 
   557   000FF6                     TBLPTR          equ	4086	;# 
   558   000FF6                     TBLPTRL         equ	4086	;# 
   559   000FF7                     TBLPTRH         equ	4087	;# 
   560   000FF8                     TBLPTRU         equ	4088	;# 
   561   000FF9                     PCLAT           equ	4089	;# 
   562   000FF9                     PC              equ	4089	;# 
   563   000FF9                     PCL             equ	4089	;# 
   564   000FFA                     PCLATH          equ	4090	;# 
   565   000FFB                     PCLATU          equ	4091	;# 
   566   000FFC                     STKPTR          equ	4092	;# 
   567   000FFD                     TOS             equ	4093	;# 
   568   000FFD                     TOSL            equ	4093	;# 
   569   000FFE                     TOSH            equ	4094	;# 
   570   000FFF                     TOSU            equ	4095	;# 
   571   000F80                     PORTA           equ	3968	;# 
   572   000F81                     PORTB           equ	3969	;# 
   573   000F82                     PORTC           equ	3970	;# 
   574   000F83                     PORTD           equ	3971	;# 
   575   000F84                     PORTE           equ	3972	;# 
   576   000F89                     LATA            equ	3977	;# 
   577   000F8A                     LATB            equ	3978	;# 
   578   000F8B                     LATC            equ	3979	;# 
   579   000F8C                     LATD            equ	3980	;# 
   580   000F8D                     LATE            equ	3981	;# 
   581   000F92                     TRISA           equ	3986	;# 
   582   000F92                     DDRA            equ	3986	;# 
   583   000F93                     TRISB           equ	3987	;# 
   584   000F93                     DDRB            equ	3987	;# 
   585   000F94                     TRISC           equ	3988	;# 
   586   000F94                     DDRC            equ	3988	;# 
   587   000F95                     TRISD           equ	3989	;# 
   588   000F95                     DDRD            equ	3989	;# 
   589   000F96                     TRISE           equ	3990	;# 
   590   000F96                     DDRE            equ	3990	;# 
   591   000F9B                     OSCTUNE         equ	3995	;# 
   592   000F9D                     PIE1            equ	3997	;# 
   593   000F9E                     PIR1            equ	3998	;# 
   594   000F9F                     IPR1            equ	3999	;# 
   595   000FA0                     PIE2            equ	4000	;# 
   596   000FA1                     PIR2            equ	4001	;# 
   597   000FA2                     IPR2            equ	4002	;# 
   598   000FA6                     EECON1          equ	4006	;# 
   599   000FA7                     EECON2          equ	4007	;# 
   600   000FA8                     EEDATA          equ	4008	;# 
   601   000FA9                     EEADR           equ	4009	;# 
   602   000FAB                     RCSTA           equ	4011	;# 
   603   000FAB                     RCSTA1          equ	4011	;# 
   604   000FAC                     TXSTA           equ	4012	;# 
   605   000FAC                     TXSTA1          equ	4012	;# 
   606   000FAD                     TXREG           equ	4013	;# 
   607   000FAD                     TXREG1          equ	4013	;# 
   608   000FAE                     RCREG           equ	4014	;# 
   609   000FAE                     RCREG1          equ	4014	;# 
   610   000FAF                     SPBRG           equ	4015	;# 
   611   000FAF                     SPBRG1          equ	4015	;# 
   612   000FB0                     SPBRGH          equ	4016	;# 
   613   000FB1                     T3CON           equ	4017	;# 
   614   000FB2                     TMR3            equ	4018	;# 
   615   000FB2                     TMR3L           equ	4018	;# 
   616   000FB3                     TMR3H           equ	4019	;# 
   617   000FB4                     CMCON           equ	4020	;# 
   618   000FB5                     CVRCON          equ	4021	;# 
   619   000FB6                     ECCP1AS         equ	4022	;# 
   620   000FB6                     ECCPAS          equ	4022	;# 
   621   000FB7                     PWM1CON         equ	4023	;# 
   622   000FB7                     ECCP1DEL        equ	4023	;# 
   623   000FB8                     BAUDCON         equ	4024	;# 
   624   000FB8                     BAUDCTL         equ	4024	;# 
   625   000FBA                     CCP2CON         equ	4026	;# 
   626   000FBB                     CCPR2           equ	4027	;# 
   627   000FBB                     CCPR2L          equ	4027	;# 
   628   000FBC                     CCPR2H          equ	4028	;# 
   629   000FBD                     CCP1CON         equ	4029	;# 
   630   000FBE                     CCPR1           equ	4030	;# 
   631   000FBE                     CCPR1L          equ	4030	;# 
   632   000FBF                     CCPR1H          equ	4031	;# 
   633   000FC0                     ADCON2          equ	4032	;# 
   634   000FC1                     ADCON1          equ	4033	;# 
   635   000FC2                     ADCON0          equ	4034	;# 
   636   000FC3                     ADRES           equ	4035	;# 
   637   000FC3                     ADRESL          equ	4035	;# 
   638   000FC4                     ADRESH          equ	4036	;# 
   639   000FC5                     SSPCON2         equ	4037	;# 
   640   000FC6                     SSPCON1         equ	4038	;# 
   641   000FC7                     SSPSTAT         equ	4039	;# 
   642   000FC8                     SSPADD          equ	4040	;# 
   643   000FC9                     SSPBUF          equ	4041	;# 
   644   000FCA                     T2CON           equ	4042	;# 
   645   000FCB                     PR2             equ	4043	;# 
   646   000FCB                     MEMCON          equ	4043	;# 
   647   000FCC                     TMR2            equ	4044	;# 
   648   000FCD                     T1CON           equ	4045	;# 
   649   000FCE                     TMR1            equ	4046	;# 
   650   000FCE                     TMR1L           equ	4046	;# 
   651   000FCF                     TMR1H           equ	4047	;# 
   652   000FD0                     RCON            equ	4048	;# 
   653   000FD1                     WDTCON          equ	4049	;# 
   654   000FD2                     HLVDCON         equ	4050	;# 
   655   000FD2                     LVDCON          equ	4050	;# 
   656   000FD3                     OSCCON          equ	4051	;# 
   657   000FD5                     T0CON           equ	4053	;# 
   658   000FD6                     TMR0            equ	4054	;# 
   659   000FD6                     TMR0L           equ	4054	;# 
   660   000FD7                     TMR0H           equ	4055	;# 
   661   000FD8                     STATUS          equ	4056	;# 
   662   000FD9                     FSR2            equ	4057	;# 
   663   000FD9                     FSR2L           equ	4057	;# 
   664   000FDA                     FSR2H           equ	4058	;# 
   665   000FDB                     PLUSW2          equ	4059	;# 
   666   000FDC                     PREINC2         equ	4060	;# 
   667   000FDD                     POSTDEC2        equ	4061	;# 
   668   000FDE                     POSTINC2        equ	4062	;# 
   669   000FDF                     INDF2           equ	4063	;# 
   670   000FE0                     BSR             equ	4064	;# 
   671   000FE1                     FSR1            equ	4065	;# 
   672   000FE1                     FSR1L           equ	4065	;# 
   673   000FE2                     FSR1H           equ	4066	;# 
   674   000FE3                     PLUSW1          equ	4067	;# 
   675   000FE4                     PREINC1         equ	4068	;# 
   676   000FE5                     POSTDEC1        equ	4069	;# 
   677   000FE6                     POSTINC1        equ	4070	;# 
   678   000FE7                     INDF1           equ	4071	;# 
   679   000FE8                     WREG            equ	4072	;# 
   680   000FE9                     FSR0            equ	4073	;# 
   681   000FE9                     FSR0L           equ	4073	;# 
   682   000FEA                     FSR0H           equ	4074	;# 
   683   000FEB                     PLUSW0          equ	4075	;# 
   684   000FEC                     PREINC0         equ	4076	;# 
   685   000FED                     POSTDEC0        equ	4077	;# 
   686   000FEE                     POSTINC0        equ	4078	;# 
   687   000FEF                     INDF0           equ	4079	;# 
   688   000FF0                     INTCON3         equ	4080	;# 
   689   000FF1                     INTCON2         equ	4081	;# 
   690   000FF2                     INTCON          equ	4082	;# 
   691   000FF3                     PROD            equ	4083	;# 
   692   000FF3                     PRODL           equ	4083	;# 
   693   000FF4                     PRODH           equ	4084	;# 
   694   000FF5                     TABLAT          equ	4085	;# 
   695   000FF6                     TBLPTR          equ	4086	;# 
   696   000FF6                     TBLPTRL         equ	4086	;# 
   697   000FF7                     TBLPTRH         equ	4087	;# 
   698   000FF8                     TBLPTRU         equ	4088	;# 
   699   000FF9                     PCLAT           equ	4089	;# 
   700   000FF9                     PC              equ	4089	;# 
   701   000FF9                     PCL             equ	4089	;# 
   702   000FFA                     PCLATH          equ	4090	;# 
   703   000FFB                     PCLATU          equ	4091	;# 
   704   000FFC                     STKPTR          equ	4092	;# 
   705   000FFD                     TOS             equ	4093	;# 
   706   000FFD                     TOSL            equ	4093	;# 
   707   000FFE                     TOSH            equ	4094	;# 
   708   000FFF                     TOSU            equ	4095	;# 
   709   000F80                     PORTA           equ	3968	;# 
   710   000F81                     PORTB           equ	3969	;# 
   711   000F82                     PORTC           equ	3970	;# 
   712   000F83                     PORTD           equ	3971	;# 
   713   000F84                     PORTE           equ	3972	;# 
   714   000F89                     LATA            equ	3977	;# 
   715   000F8A                     LATB            equ	3978	;# 
   716   000F8B                     LATC            equ	3979	;# 
   717   000F8C                     LATD            equ	3980	;# 
   718   000F8D                     LATE            equ	3981	;# 
   719   000F92                     TRISA           equ	3986	;# 
   720   000F92                     DDRA            equ	3986	;# 
   721   000F93                     TRISB           equ	3987	;# 
   722   000F93                     DDRB            equ	3987	;# 
   723   000F94                     TRISC           equ	3988	;# 
   724   000F94                     DDRC            equ	3988	;# 
   725   000F95                     TRISD           equ	3989	;# 
   726   000F95                     DDRD            equ	3989	;# 
   727   000F96                     TRISE           equ	3990	;# 
   728   000F96                     DDRE            equ	3990	;# 
   729   000F9B                     OSCTUNE         equ	3995	;# 
   730   000F9D                     PIE1            equ	3997	;# 
   731   000F9E                     PIR1            equ	3998	;# 
   732   000F9F                     IPR1            equ	3999	;# 
   733   000FA0                     PIE2            equ	4000	;# 
   734   000FA1                     PIR2            equ	4001	;# 
   735   000FA2                     IPR2            equ	4002	;# 
   736   000FA6                     EECON1          equ	4006	;# 
   737   000FA7                     EECON2          equ	4007	;# 
   738   000FA8                     EEDATA          equ	4008	;# 
   739   000FA9                     EEADR           equ	4009	;# 
   740   000FAB                     RCSTA           equ	4011	;# 
   741   000FAB                     RCSTA1          equ	4011	;# 
   742   000FAC                     TXSTA           equ	4012	;# 
   743   000FAC                     TXSTA1          equ	4012	;# 
   744   000FAD                     TXREG           equ	4013	;# 
   745   000FAD                     TXREG1          equ	4013	;# 
   746   000FAE                     RCREG           equ	4014	;# 
   747   000FAE                     RCREG1          equ	4014	;# 
   748   000FAF                     SPBRG           equ	4015	;# 
   749   000FAF                     SPBRG1          equ	4015	;# 
   750   000FB0                     SPBRGH          equ	4016	;# 
   751   000FB1                     T3CON           equ	4017	;# 
   752   000FB2                     TMR3            equ	4018	;# 
   753   000FB2                     TMR3L           equ	4018	;# 
   754   000FB3                     TMR3H           equ	4019	;# 
   755   000FB4                     CMCON           equ	4020	;# 
   756   000FB5                     CVRCON          equ	4021	;# 
   757   000FB6                     ECCP1AS         equ	4022	;# 
   758   000FB6                     ECCPAS          equ	4022	;# 
   759   000FB7                     PWM1CON         equ	4023	;# 
   760   000FB7                     ECCP1DEL        equ	4023	;# 
   761   000FB8                     BAUDCON         equ	4024	;# 
   762   000FB8                     BAUDCTL         equ	4024	;# 
   763   000FBA                     CCP2CON         equ	4026	;# 
   764   000FBB                     CCPR2           equ	4027	;# 
   765   000FBB                     CCPR2L          equ	4027	;# 
   766   000FBC                     CCPR2H          equ	4028	;# 
   767   000FBD                     CCP1CON         equ	4029	;# 
   768   000FBE                     CCPR1           equ	4030	;# 
   769   000FBE                     CCPR1L          equ	4030	;# 
   770   000FBF                     CCPR1H          equ	4031	;# 
   771   000FC0                     ADCON2          equ	4032	;# 
   772   000FC1                     ADCON1          equ	4033	;# 
   773   000FC2                     ADCON0          equ	4034	;# 
   774   000FC3                     ADRES           equ	4035	;# 
   775   000FC3                     ADRESL          equ	4035	;# 
   776   000FC4                     ADRESH          equ	4036	;# 
   777   000FC5                     SSPCON2         equ	4037	;# 
   778   000FC6                     SSPCON1         equ	4038	;# 
   779   000FC7                     SSPSTAT         equ	4039	;# 
   780   000FC8                     SSPADD          equ	4040	;# 
   781   000FC9                     SSPBUF          equ	4041	;# 
   782   000FCA                     T2CON           equ	4042	;# 
   783   000FCB                     PR2             equ	4043	;# 
   784   000FCB                     MEMCON          equ	4043	;# 
   785   000FCC                     TMR2            equ	4044	;# 
   786   000FCD                     T1CON           equ	4045	;# 
   787   000FCE                     TMR1            equ	4046	;# 
   788   000FCE                     TMR1L           equ	4046	;# 
   789   000FCF                     TMR1H           equ	4047	;# 
   790   000FD0                     RCON            equ	4048	;# 
   791   000FD1                     WDTCON          equ	4049	;# 
   792   000FD2                     HLVDCON         equ	4050	;# 
   793   000FD2                     LVDCON          equ	4050	;# 
   794   000FD3                     OSCCON          equ	4051	;# 
   795   000FD5                     T0CON           equ	4053	;# 
   796   000FD6                     TMR0            equ	4054	;# 
   797   000FD6                     TMR0L           equ	4054	;# 
   798   000FD7                     TMR0H           equ	4055	;# 
   799   000FD8                     STATUS          equ	4056	;# 
   800   000FD9                     FSR2            equ	4057	;# 
   801   000FD9                     FSR2L           equ	4057	;# 
   802   000FDA                     FSR2H           equ	4058	;# 
   803   000FDB                     PLUSW2          equ	4059	;# 
   804   000FDC                     PREINC2         equ	4060	;# 
   805   000FDD                     POSTDEC2        equ	4061	;# 
   806   000FDE                     POSTINC2        equ	4062	;# 
   807   000FDF                     INDF2           equ	4063	;# 
   808   000FE0                     BSR             equ	4064	;# 
   809   000FE1                     FSR1            equ	4065	;# 
   810   000FE1                     FSR1L           equ	4065	;# 
   811   000FE2                     FSR1H           equ	4066	;# 
   812   000FE3                     PLUSW1          equ	4067	;# 
   813   000FE4                     PREINC1         equ	4068	;# 
   814   000FE5                     POSTDEC1        equ	4069	;# 
   815   000FE6                     POSTINC1        equ	4070	;# 
   816   000FE7                     INDF1           equ	4071	;# 
   817   000FE8                     WREG            equ	4072	;# 
   818   000FE9                     FSR0            equ	4073	;# 
   819   000FE9                     FSR0L           equ	4073	;# 
   820   000FEA                     FSR0H           equ	4074	;# 
   821   000FEB                     PLUSW0          equ	4075	;# 
   822   000FEC                     PREINC0         equ	4076	;# 
   823   000FED                     POSTDEC0        equ	4077	;# 
   824   000FEE                     POSTINC0        equ	4078	;# 
   825   000FEF                     INDF0           equ	4079	;# 
   826   000FF0                     INTCON3         equ	4080	;# 
   827   000FF1                     INTCON2         equ	4081	;# 
   828   000FF2                     INTCON          equ	4082	;# 
   829   000FF3                     PROD            equ	4083	;# 
   830   000FF3                     PRODL           equ	4083	;# 
   831   000FF4                     PRODH           equ	4084	;# 
   832   000FF5                     TABLAT          equ	4085	;# 
   833   000FF6                     TBLPTR          equ	4086	;# 
   834   000FF6                     TBLPTRL         equ	4086	;# 
   835   000FF7                     TBLPTRH         equ	4087	;# 
   836   000FF8                     TBLPTRU         equ	4088	;# 
   837   000FF9                     PCLAT           equ	4089	;# 
   838   000FF9                     PC              equ	4089	;# 
   839   000FF9                     PCL             equ	4089	;# 
   840   000FFA                     PCLATH          equ	4090	;# 
   841   000FFB                     PCLATU          equ	4091	;# 
   842   000FFC                     STKPTR          equ	4092	;# 
   843   000FFD                     TOS             equ	4093	;# 
   844   000FFD                     TOSL            equ	4093	;# 
   845   000FFE                     TOSH            equ	4094	;# 
   846   000FFF                     TOSU            equ	4095	;# 
   847                           
   848                           	psect	idataBANK0
   849   006670                     __pidataBANK0:
   850                           	callstack 0
   851                           
   852                           ;initializer for _Stat
   853   006670  01                 	db	1
   854   007C5A                     _LATC2          set	31834
   855   000F8C                     _LATDbits       set	3980
   856   000F9B                     _OSCTUNEbits    set	3995
   857   000F94                     _TRISC          set	3988
   858   000F8B                     _LATC           set	3979
   859   000F95                     _TRISDbits      set	3989
   860   000F92                     _TRISAbits      set	3986
   861   000FC3                     _ADRESL         set	4035
   862   000FC4                     _ADRESH         set	4036
   863   000FC2                     _ADCON0bits     set	4034
   864   000FD3                     _OSCCONbits     set	4051
   865   000FC2                     _ADCON0         set	4034
   866   000FC0                     _ADCON2         set	4032
   867   000FC1                     _ADCON1         set	4033
   868   000FC7                     _SSPSTATbits    set	4039
   869   000FC9                     _SSPBUF         set	4041
   870   000FC8                     _SSPADD         set	4040
   871   000FC6                     _SSPCON1bits    set	4038
   872   000FC6                     _SSPCON1        set	4038
   873   000FC7                     _SSPSTAT        set	4039
   874                           
   875                           	psect	smallconst
   876   000600                     __psmallconst:
   877                           	callstack 0
   878   000600  00                 	db	0
   879   000601                     STR_5:
   880   000601  41                 	db	65	;'A'
   881   000602  44                 	db	68	;'D'
   882   000603  43                 	db	67	;'C'
   883   000604  5F                 	db	95	;'_'
   884   000605  76                 	db	118	;'v'
   885   000606  61                 	db	97	;'a'
   886   000607  6C                 	db	108	;'l'
   887   000608  75                 	db	117	;'u'
   888   000609  65                 	db	101	;'e'
   889   00060A  3A                 	db	58	;':'
   890   00060B  20                 	db	32
   891   00060C  25                 	db	37
   892   00060D  64                 	db	100	;'d'
   893   00060E  0D                 	db	13
   894   00060F  0A                 	db	10
   895   000610  00                 	db	0
   896   000611                     STR_1:
   897   000611  22                 	db	34
   898   000612  2A                 	db	42
   899   000613  2B                 	db	43
   900   000614  2C                 	db	44
   901   000615  3A                 	db	58	;':'
   902   000616  3B                 	db	59	;';'
   903   000617  3C                 	db	60	;'<'
   904   000618  3D                 	db	61	;'='
   905   000619  3E                 	db	62	;'>'
   906   00061A  3F                 	db	63	;'?'
   907   00061B  5B                 	db	91	;'['
   908   00061C  5D                 	db	93	;']'
   909   00061D  7C                 	db	124
   910   00061E  7F                 	db	127
   911   00061F  00                 	db	0
   912   000620                     STR_4:
   913   000620  68                 	db	104	;'h'
   914   000621  65                 	db	101	;'e'
   915   000622  6C                 	db	108	;'l'
   916   000623  6C                 	db	108	;'l'
   917   000624  6F                 	db	111	;'o'
   918   000625  2E                 	db	46
   919   000626  74                 	db	116	;'t'
   920   000627  78                 	db	120	;'x'
   921   000628  74                 	db	116	;'t'
   922   000629  00                 	db	0
   923   000611                     STR_2           equ	STR_1
   924   000610                     STR_3           equ	STR_5+15
   925   00062A  00                 	db	0	; dummy byte at the end
   926   000002                     __activetblptr  equ	2
   927                           
   928                           ; #config settings
   929                           
   930                           	psect	cinit
   931   006400                     __pcinit:
   932                           	callstack 0
   933   006400                     start_initialization:
   934                           	callstack 0
   935   006400                     __initialization:
   936                           	callstack 0
   937                           
   938                           ; Initialize objects allocated to BANK0 (1 bytes)
   939                           ; load TBLPTR registers with __pidataBANK0
   940   006400  0E70               	movlw	low __pidataBANK0
   941   006402  6EF6               	movwf	tblptrl,c
   942   006404  0E66               	movlw	high __pidataBANK0
   943   006406  6EF7               	movwf	tblptrh,c
   944   006408  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   945   00640A  6EF8               	movwf	tblptru,c
   946   00640C  0009               	tblrd		*+	;fetch initializer
   947   00640E  CFF5 F0FA          	movff	tablat,__pdataBANK0
   948                           
   949                           ; Clear objects allocated to BIGRAM (558 bytes)
   950   006412  EE01  F087         	lfsr	0,__pbssBIGRAM
   951   006416  EE12 F02E          	lfsr	1,558
   952   00641A                     clear_0:
   953   00641A  6AEE               	clrf	postinc0,c
   954   00641C  50E5               	movf	postdec1,w,c
   955   00641E  50E1               	movf	fsr1l,w,c
   956   006420  E1FC               	bnz	clear_0
   957   006422  50E2               	movf	fsr1h,w,c
   958   006424  E1FA               	bnz	clear_0
   959                           
   960                           ; Clear objects allocated to BANK1 (64 bytes)
   961   006426  EE01  F047         	lfsr	0,__pbssBANK1
   962   00642A  0E40               	movlw	64
   963   00642C                     clear_1:
   964   00642C  6AEE               	clrf	postinc0,c
   965   00642E  06E8               	decf	wreg,f,c
   966   006430  E1FD               	bnz	clear_1
   967                           
   968                           ; Clear objects allocated to BANK0 (10 bytes)
   969   006432  EE00  F0F0         	lfsr	0,__pbssBANK0
   970   006436  0E0A               	movlw	10
   971   006438                     clear_2:
   972   006438  6AEE               	clrf	postinc0,c
   973   00643A  06E8               	decf	wreg,f,c
   974   00643C  E1FD               	bnz	clear_2
   975   00643E                     end_of_initialization:
   976                           	callstack 0
   977   00643E                     __end_of__initialization:
   978                           	callstack 0
   979   00643E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   980   006440  6EF8               	movwf	tblptru,c
   981   006442  0100               	movlb	0
   982   006444  EF86  F028         	goto	_main	;jump to C main() function
   983                           
   984                           	psect	bssBANK0
   985   0000F0                     __pbssBANK0:
   986                           	callstack 0
   987   0000F0                     _width:
   988                           	callstack 0
   989   0000F0                     	ds	2
   990   0000F2                     _prec:
   991                           	callstack 0
   992   0000F2                     	ds	2
   993   0000F4                     _Fsid:
   994                           	callstack 0
   995   0000F4                     	ds	2
   996   0000F6                     _FatFs@ff$F539:
   997                           	callstack 0
   998   0000F6                     	ds	2
   999   0000F8                     _flags:
  1000                           	callstack 0
  1001   0000F8                     	ds	1
  1002   0000F9                     _CardType:
  1003                           	callstack 0
  1004   0000F9                     	ds	1
  1005                           
  1006                           	psect	dataBANK0
  1007   0000FA                     __pdataBANK0:
  1008                           	callstack 0
  1009   0000FA                     _Stat:
  1010                           	callstack 0
  1011   0000FA                     	ds	1
  1012                           
  1013                           	psect	bssBANK1
  1014   000147                     __pbssBANK1:
  1015                           	callstack 0
  1016   000147                     _dbuf:
  1017                           	callstack 0
  1018   000147                     	ds	32
  1019   000167                     _Fil:
  1020                           	callstack 0
  1021   000167                     	ds	32
  1022                           
  1023                           	psect	bssBIGRAM
  1024   000187                     __pbssBIGRAM:
  1025                           	callstack 0
  1026   000187                     _FatFs:
  1027                           	callstack 0
  1028   000187                     	ds	558
  1029                           
  1030                           	psect	cstackBANK1
  1031   000100                     __pcstackBANK1:
  1032                           	callstack 0
  1033   000100                     main@buffer:
  1034                           	callstack 0
  1035                           
  1036                           ; 64 bytes @ 0x0
  1037   000100                     	ds	64
  1038   000140                     main@res:
  1039                           	callstack 0
  1040                           
  1041                           ; 1 bytes @ 0x40
  1042   000140                     	ds	1
  1043   000141                     main@length:
  1044                           	callstack 0
  1045                           
  1046                           ; 2 bytes @ 0x41
  1047   000141                     	ds	2
  1048   000143                     main@bw:
  1049                           	callstack 0
  1050                           
  1051                           ; 2 bytes @ 0x43
  1052   000143                     	ds	2
  1053   000145                     main@adc_value:
  1054                           	callstack 0
  1055                           
  1056                           ; 2 bytes @ 0x45
  1057   000145                     	ds	2
  1058                           
  1059                           	psect	cstackBANK0
  1060   000080                     __pcstackBANK0:
  1061                           	callstack 0
  1062   000080                     dir_alloc@dp:
  1063                           	callstack 0
  1064   000080                     dir_find@dp:
  1065                           	callstack 0
  1066   000080                     find_volume@br:
  1067                           	callstack 0
  1068   000080                     ??_f_write:
  1069   000080                     ??_f_lseek:
  1070                           
  1071                           ; 1 bytes @ 0x0
  1072   000080                     	ds	1
  1073   000081                     dir_find@c:
  1074                           	callstack 0
  1075   000081                     dir_alloc@nent:
  1076                           	callstack 0
  1077                           
  1078                           ; 2 bytes @ 0x1
  1079   000081                     	ds	1
  1080   000082                     dir_find@dir:
  1081                           	callstack 0
  1082                           
  1083                           ; 2 bytes @ 0x2
  1084   000082                     	ds	1
  1085   000083                     ??_dir_alloc:
  1086                           
  1087                           ; 1 bytes @ 0x3
  1088   000083                     	ds	1
  1089   000084                     dir_find@res:
  1090                           	callstack 0
  1091                           
  1092                           ; 1 bytes @ 0x4
  1093   000084                     	ds	1
  1094   000085                     follow_path@dp:
  1095                           	callstack 0
  1096                           
  1097                           ; 1 bytes @ 0x5
  1098   000085                     	ds	1
  1099   000086                     follow_path@path:
  1100                           	callstack 0
  1101   000086                     dir_alloc@n:
  1102                           	callstack 0
  1103                           
  1104                           ; 2 bytes @ 0x6
  1105   000086                     	ds	1
  1106   000087                     follow_path@dir:
  1107                           	callstack 0
  1108                           
  1109                           ; 2 bytes @ 0x7
  1110   000087                     	ds	1
  1111   000088                     dir_alloc@res:
  1112                           	callstack 0
  1113                           
  1114                           ; 1 bytes @ 0x8
  1115   000088                     	ds	1
  1116   000089                     dir_register@dp:
  1117                           	callstack 0
  1118   000089                     follow_path@ns:
  1119                           	callstack 0
  1120                           
  1121                           ; 1 bytes @ 0x9
  1122   000089                     	ds	1
  1123   00008A                     follow_path@res:
  1124                           	callstack 0
  1125   00008A                     ??_dir_register:
  1126                           
  1127                           ; 1 bytes @ 0xA
  1128   00008A                     	ds	1
  1129   00008B                     dir_register@res:
  1130                           	callstack 0
  1131                           
  1132                           ; 1 bytes @ 0xB
  1133   00008B                     	ds	1
  1134   00008C                     f_write@res:
  1135                           	callstack 0
  1136                           
  1137                           ; 1 bytes @ 0xC
  1138   00008C                     	ds	1
  1139   00008D                     f_write@wbuff:
  1140                           	callstack 0
  1141                           
  1142                           ; 2 bytes @ 0xD
  1143   00008D                     	ds	2
  1144   00008F                     f_write@csect:
  1145                           	callstack 0
  1146                           
  1147                           ; 1 bytes @ 0xF
  1148   00008F                     	ds	1
  1149   000090                     f_lseek@res:
  1150                           	callstack 0
  1151   000090                     f_write@cc:
  1152                           	callstack 0
  1153   000090                     _find_volume$1034:
  1154                           	callstack 0
  1155                           
  1156                           ; 4 bytes @ 0x10
  1157   000090                     	ds	1
  1158   000091                     f_lseek@ifptr:
  1159                           	callstack 0
  1160                           
  1161                           ; 4 bytes @ 0x11
  1162   000091                     	ds	1
  1163   000092                     f_write@sect:
  1164                           	callstack 0
  1165                           
  1166                           ; 4 bytes @ 0x12
  1167   000092                     	ds	2
  1168   000094                     _find_volume$1035:
  1169                           	callstack 0
  1170                           
  1171                           ; 2 bytes @ 0x14
  1172   000094                     	ds	1
  1173   000095                     f_lseek@nsect:
  1174                           	callstack 0
  1175                           
  1176                           ; 4 bytes @ 0x15
  1177   000095                     	ds	1
  1178   000096                     find_volume@szbfat:
  1179                           	callstack 0
  1180   000096                     f_write@clst:
  1181                           	callstack 0
  1182                           
  1183                           ; 4 bytes @ 0x16
  1184   000096                     	ds	3
  1185   000099                     f_lseek@bcs:
  1186                           	callstack 0
  1187                           
  1188                           ; 4 bytes @ 0x19
  1189   000099                     	ds	1
  1190   00009A                     find_volume@pt:
  1191                           	callstack 0
  1192   00009A                     f_write@wcnt:
  1193                           	callstack 0
  1194                           
  1195                           ; 2 bytes @ 0x1A
  1196   00009A                     	ds	2
  1197   00009C                     find_volume@sysect:
  1198                           	callstack 0
  1199                           
  1200                           ; 4 bytes @ 0x1C
  1201   00009C                     	ds	1
  1202   00009D                     f_lseek@clst:
  1203                           	callstack 0
  1204                           
  1205                           ; 4 bytes @ 0x1D
  1206   00009D                     	ds	3
  1207   0000A0                     find_volume@vol:
  1208                           	callstack 0
  1209                           
  1210                           ; 2 bytes @ 0x20
  1211   0000A0                     	ds	2
  1212   0000A2                     find_volume@nrsv:
  1213                           	callstack 0
  1214                           
  1215                           ; 2 bytes @ 0x22
  1216   0000A2                     	ds	2
  1217   0000A4                     find_volume@tsect:
  1218                           	callstack 0
  1219                           
  1220                           ; 4 bytes @ 0x24
  1221   0000A4                     	ds	4
  1222   0000A8                     find_volume@nclst:
  1223                           	callstack 0
  1224                           
  1225                           ; 4 bytes @ 0x28
  1226   0000A8                     	ds	4
  1227   0000AC                     find_volume@stat:
  1228                           	callstack 0
  1229                           
  1230                           ; 1 bytes @ 0x2C
  1231   0000AC                     	ds	1
  1232   0000AD                     find_volume@fasize:
  1233                           	callstack 0
  1234                           
  1235                           ; 4 bytes @ 0x2D
  1236   0000AD                     	ds	4
  1237   0000B1                     find_volume@bsect:
  1238                           	callstack 0
  1239                           
  1240                           ; 4 bytes @ 0x31
  1241   0000B1                     	ds	4
  1242   0000B5                     find_volume@i:
  1243                           	callstack 0
  1244                           
  1245                           ; 2 bytes @ 0x35
  1246   0000B5                     	ds	2
  1247   0000B7                     find_volume@fmt:
  1248                           	callstack 0
  1249                           
  1250                           ; 1 bytes @ 0x37
  1251   0000B7                     	ds	1
  1252   0000B8                     find_volume@fs:
  1253                           	callstack 0
  1254                           
  1255                           ; 2 bytes @ 0x38
  1256   0000B8                     	ds	2
  1257   0000BA                     f_open@fp:
  1258                           	callstack 0
  1259                           
  1260                           ; 2 bytes @ 0x3A
  1261   0000BA                     	ds	2
  1262   0000BC                     f_open@path:
  1263                           	callstack 0
  1264                           
  1265                           ; 1 bytes @ 0x3C
  1266   0000BC                     	ds	1
  1267   0000BD                     f_open@mode:
  1268                           	callstack 0
  1269                           
  1270                           ; 1 bytes @ 0x3D
  1271   0000BD                     	ds	1
  1272   0000BE                     ??_f_open:
  1273                           
  1274                           ; 1 bytes @ 0x3E
  1275   0000BE                     	ds	4
  1276   0000C2                     f_open@sfn:
  1277                           	callstack 0
  1278                           
  1279                           ; 12 bytes @ 0x42
  1280   0000C2                     	ds	12
  1281   0000CE                     f_open@cl:
  1282                           	callstack 0
  1283                           
  1284                           ; 4 bytes @ 0x4E
  1285   0000CE                     	ds	4
  1286   0000D2                     f_open@dw:
  1287                           	callstack 0
  1288                           
  1289                           ; 4 bytes @ 0x52
  1290   0000D2                     	ds	4
  1291   0000D6                     f_open@res:
  1292                           	callstack 0
  1293                           
  1294                           ; 1 bytes @ 0x56
  1295   0000D6                     	ds	1
  1296   0000D7                     f_open@dir:
  1297                           	callstack 0
  1298                           
  1299                           ; 2 bytes @ 0x57
  1300   0000D7                     	ds	2
  1301   0000D9                     f_open@dj:
  1302                           	callstack 0
  1303                           
  1304                           ; 21 bytes @ 0x59
  1305   0000D9                     	ds	21
  1306   0000EE                     ??_main:
  1307                           
  1308                           ; 1 bytes @ 0x6E
  1309   0000EE                     	ds	2
  1310                           
  1311                           	psect	cstackCOMRAM
  1312   000001                     __pcstackCOMRAM:
  1313                           	callstack 0
  1314   000001                     ?_strlen:
  1315                           	callstack 0
  1316   000001                     ?_mem_cmp:
  1317                           	callstack 0
  1318   000001                     ?_chk_chr:
  1319                           	callstack 0
  1320   000001                     ?_get_ldnumber:
  1321                           	callstack 0
  1322   000001                     ?_ADC_Read:
  1323                           	callstack 0
  1324   000001                     ?___awdiv:
  1325                           	callstack 0
  1326   000001                     ?___awmod:
  1327                           	callstack 0
  1328   000001                     ?_ld_clust:
  1329                           	callstack 0
  1330   000001                     ?___lmul:
  1331                           	callstack 0
  1332   000001                     ?___lldiv:
  1333                           	callstack 0
  1334   000001                     SPI_Exchange8bit@data:
  1335                           	callstack 0
  1336   000001                     disk_status@pdrv:
  1337                           	callstack 0
  1338   000001                     chk_chr@str:
  1339                           	callstack 0
  1340   000001                     get_ldnumber@path:
  1341                           	callstack 0
  1342   000001                     mem_cpy@dst:
  1343                           	callstack 0
  1344   000001                     mem_set@dst:
  1345                           	callstack 0
  1346   000001                     mem_cmp@dst:
  1347                           	callstack 0
  1348   000001                     ld_clust@fs:
  1349                           	callstack 0
  1350   000001                     st_clust@dir:
  1351                           	callstack 0
  1352   000001                     ___awdiv@dividend:
  1353                           	callstack 0
  1354   000001                     ___awmod@dividend:
  1355                           	callstack 0
  1356   000001                     fputc@c:
  1357                           	callstack 0
  1358   000001                     strlen@s:
  1359                           	callstack 0
  1360   000001                     ___lmul@multiplier:
  1361                           	callstack 0
  1362   000001                     ___lldiv@dividend:
  1363                           	callstack 0
  1364   000001                     
  1365                           ; 1 bytes @ 0x0
  1366   000001                     	ds	1
  1367   000002                     wait_ready@tmr:
  1368                           	callstack 0
  1369   000002                     rcvr_datablock@buff:
  1370                           	callstack 0
  1371   000002                     chk_chr@chr:
  1372                           	callstack 0
  1373   000002                     validate@obj:
  1374                           	callstack 0
  1375   000002                     
  1376                           ; 1 bytes @ 0x1
  1377   000002                     	ds	1
  1378   000003                     mem_cmp@src:
  1379                           	callstack 0
  1380   000003                     fputc@fp:
  1381                           	callstack 0
  1382   000003                     mem_cpy@src:
  1383                           	callstack 0
  1384   000003                     mem_set@val:
  1385                           	callstack 0
  1386   000003                     ld_clust@dir:
  1387                           	callstack 0
  1388   000003                     ___awdiv@divisor:
  1389                           	callstack 0
  1390   000003                     ___awmod@divisor:
  1391                           	callstack 0
  1392   000003                     strlen@a:
  1393                           	callstack 0
  1394   000003                     st_clust@cl:
  1395                           	callstack 0
  1396   000003                     ??_get_ldnumber:
  1397   000003                     ??_ADC_Read:
  1398                           
  1399                           ; 1 bytes @ 0x2
  1400   000003                     	ds	1
  1401   000004                     rcvr_datablock@btr:
  1402                           	callstack 0
  1403   000004                     xmit_datablock@buff:
  1404                           	callstack 0
  1405   000004                     mem_cmp@cnt:
  1406                           	callstack 0
  1407   000004                     get_ldnumber@vol:
  1408                           	callstack 0
  1409   000004                     ___send_cmd@arg:
  1410                           	callstack 0
  1411   000004                     ??_fputc:
  1412   000004                     ??_chk_chr:
  1413   000004                     ??_validate:
  1414                           
  1415                           ; 1 bytes @ 0x3
  1416   000004                     	ds	1
  1417   000005                     ___awdiv@counter:
  1418                           	callstack 0
  1419   000005                     ___awmod@counter:
  1420                           	callstack 0
  1421   000005                     mem_cpy@cnt:
  1422                           	callstack 0
  1423   000005                     mem_set@cnt:
  1424                           	callstack 0
  1425   000005                     ___lmul@multiplicand:
  1426                           	callstack 0
  1427   000005                     ___lldiv@divisor:
  1428                           	callstack 0
  1429   000005                     ??_ld_clust:
  1430   000005                     
  1431                           ; 1 bytes @ 0x4
  1432   000005                     	ds	1
  1433   000006                     xmit_datablock@token:
  1434                           	callstack 0
  1435   000006                     get_ldnumber@tp:
  1436                           	callstack 0
  1437   000006                     ___awdiv@sign:
  1438                           	callstack 0
  1439   000006                     ___awmod@sign:
  1440                           	callstack 0
  1441   000006                     rcvr_datablock@tmr:
  1442                           	callstack 0
  1443   000006                     ??_mem_cmp:
  1444                           
  1445                           ; 1 bytes @ 0x5
  1446   000006                     	ds	1
  1447   000007                     ?_abs:
  1448                           	callstack 0
  1449   000007                     xmit_datablock@i:
  1450                           	callstack 0
  1451   000007                     mem_cpy@d:
  1452                           	callstack 0
  1453   000007                     mem_set@d:
  1454                           	callstack 0
  1455   000007                     get_ldnumber@i:
  1456                           	callstack 0
  1457   000007                     ___awdiv@quotient:
  1458                           	callstack 0
  1459   000007                     abs@a:
  1460                           	callstack 0
  1461   000007                     
  1462                           ; 1 bytes @ 0x6
  1463   000007                     	ds	1
  1464   000008                     rcvr_datablock@token:
  1465                           	callstack 0
  1466   000008                     ___send_cmd@res:
  1467                           	callstack 0
  1468   000008                     mem_cmp@d:
  1469                           	callstack 0
  1470   000008                     validate@fil:
  1471                           	callstack 0
  1472   000008                     
  1473                           ; 1 bytes @ 0x7
  1474   000008                     	ds	1
  1475   000009                     xmit_datablock@resp:
  1476                           	callstack 0
  1477   000009                     ___send_cmd@n:
  1478                           	callstack 0
  1479   000009                     create_name@dp:
  1480                           	callstack 0
  1481   000009                     get_ldnumber@tt:
  1482                           	callstack 0
  1483   000009                     mem_cpy@s:
  1484                           	callstack 0
  1485   000009                     ___lmul@product:
  1486                           	callstack 0
  1487   000009                     ___lldiv@quotient:
  1488                           	callstack 0
  1489   000009                     ??_abs:
  1490   000009                     
  1491                           ; 1 bytes @ 0x8
  1492   000009                     	ds	1
  1493   00000A                     ___send_cmd@cmd:
  1494                           	callstack 0
  1495   00000A                     create_name@path:
  1496                           	callstack 0
  1497   00000A                     mem_cmp@r:
  1498                           	callstack 0
  1499                           
  1500                           ; 2 bytes @ 0x9
  1501   00000A                     	ds	1
  1502   00000B                     vfpfcnvrt@fp:
  1503                           	callstack 0
  1504   00000B                     send_cmd@arg:
  1505                           	callstack 0
  1506   00000B                     ld_clust@cl:
  1507                           	callstack 0
  1508   00000B                     ??_create_name:
  1509                           
  1510                           ; 1 bytes @ 0xA
  1511   00000B                     	ds	1
  1512   00000C                     mem_cmp@s:
  1513                           	callstack 0
  1514   00000C                     vfpfcnvrt@fmt:
  1515                           	callstack 0
  1516                           
  1517                           ; 1 bytes @ 0xB
  1518   00000C                     	ds	1
  1519   00000D                     ?_clust2sect:
  1520                           	callstack 0
  1521   00000D                     ___lldiv@counter:
  1522                           	callstack 0
  1523   00000D                     vfpfcnvrt@ap:
  1524                           	callstack 0
  1525   00000D                     clust2sect@fs:
  1526                           	callstack 0
  1527   00000D                     _create_name$930:
  1528                           	callstack 0
  1529                           
  1530                           ; 2 bytes @ 0xC
  1531   00000D                     	ds	1
  1532   00000E                     ??_vfpfcnvrt:
  1533                           
  1534                           ; 1 bytes @ 0xD
  1535   00000E                     	ds	1
  1536   00000F                     send_cmd@cmd:
  1537                           	callstack 0
  1538   00000F                     vfpfcnvrt@done:
  1539                           	callstack 0
  1540   00000F                     create_name@si:
  1541                           	callstack 0
  1542   00000F                     clust2sect@clst:
  1543                           	callstack 0
  1544   00000F                     
  1545                           ; 1 bytes @ 0xE
  1546   00000F                     	ds	1
  1547   000010                     send_cmd@res:
  1548                           	callstack 0
  1549   000010                     vfpfcnvrt@cp:
  1550                           	callstack 0
  1551                           
  1552                           ; 1 bytes @ 0xF
  1553   000010                     	ds	1
  1554   000011                     disk_ioctl@cmd:
  1555                           	callstack 0
  1556   000011                     create_name@b:
  1557                           	callstack 0
  1558   000011                     disk_read@buff:
  1559                           	callstack 0
  1560   000011                     disk_write@buff:
  1561                           	callstack 0
  1562   000011                     vfpfcnvrt@convarg:
  1563                           	callstack 0
  1564   000011                     ??_disk_initialize:
  1565                           
  1566                           ; 1 bytes @ 0x10
  1567   000011                     	ds	1
  1568   000012                     disk_initialize@pdrv:
  1569                           	callstack 0
  1570   000012                     disk_ioctl@buff:
  1571                           	callstack 0
  1572   000012                     create_name@ni:
  1573                           	callstack 0
  1574                           
  1575                           ; 2 bytes @ 0x11
  1576   000012                     	ds	1
  1577   000013                     disk_initialize@ocr:
  1578                           	callstack 0
  1579   000013                     disk_read@sector:
  1580                           	callstack 0
  1581   000013                     disk_write@sector:
  1582                           	callstack 0
  1583   000013                     ??_clust2sect:
  1584                           
  1585                           ; 1 bytes @ 0x12
  1586   000013                     	ds	1
  1587   000014                     create_name@d:
  1588                           	callstack 0
  1589   000014                     ??_disk_ioctl:
  1590                           
  1591                           ; 1 bytes @ 0x13
  1592   000014                     	ds	1
  1593   000015                     create_name@p:
  1594                           	callstack 0
  1595   000015                     vfpfcnvrt@c:
  1596                           	callstack 0
  1597                           
  1598                           ; 1 bytes @ 0x14
  1599   000015                     	ds	1
  1600   000016                     ?_vfprintf:
  1601                           	callstack 0
  1602   000016                     vfprintf@fp:
  1603                           	callstack 0
  1604   000016                     create_name@i:
  1605                           	callstack 0
  1606                           
  1607                           ; 2 bytes @ 0x15
  1608   000016                     	ds	1
  1609   000017                     vfprintf@fmt:
  1610                           	callstack 0
  1611   000017                     _disk_initialize$440:
  1612                           	callstack 0
  1613   000017                     disk_read@count:
  1614                           	callstack 0
  1615   000017                     disk_write@count:
  1616                           	callstack 0
  1617                           
  1618                           ; 2 bytes @ 0x16
  1619   000017                     	ds	1
  1620   000018                     create_name@sfn:
  1621                           	callstack 0
  1622   000018                     vfprintf@ap:
  1623                           	callstack 0
  1624                           
  1625                           ; 1 bytes @ 0x17
  1626   000018                     	ds	1
  1627   000019                     disk_initialize@cmd:
  1628                           	callstack 0
  1629   000019                     disk_read@pdrv:
  1630                           	callstack 0
  1631   000019                     create_name@c:
  1632                           	callstack 0
  1633   000019                     vfprintf@cfmt:
  1634                           	callstack 0
  1635   000019                     ??_disk_write:
  1636                           
  1637                           ; 1 bytes @ 0x18
  1638   000019                     	ds	1
  1639   00001A                     ?_sprintf:
  1640                           	callstack 0
  1641   00001A                     disk_initialize@ty:
  1642                           	callstack 0
  1643   00001A                     disk_write@pdrv:
  1644                           	callstack 0
  1645   00001A                     _disk_read$450:
  1646                           	callstack 0
  1647   00001A                     sprintf@s:
  1648                           	callstack 0
  1649                           
  1650                           ; 2 bytes @ 0x19
  1651   00001A                     	ds	1
  1652   00001B                     disk_initialize@tmr:
  1653                           	callstack 0
  1654   00001B                     sync_window@fs:
  1655                           	callstack 0
  1656                           
  1657                           ; 2 bytes @ 0x1A
  1658   00001B                     	ds	1
  1659   00001C                     disk_read@cmd:
  1660                           	callstack 0
  1661   00001C                     sprintf@fmt:
  1662                           	callstack 0
  1663                           
  1664                           ; 1 bytes @ 0x1B
  1665   00001C                     	ds	1
  1666   00001D                     disk_initialize@n:
  1667                           	callstack 0
  1668   00001D                     ??_sync_window:
  1669                           
  1670                           ; 1 bytes @ 0x1C
  1671   00001D                     	ds	2
  1672   00001F                     sprintf@ap:
  1673                           	callstack 0
  1674   00001F                     
  1675                           ; 1 bytes @ 0x1E
  1676   00001F                     	ds	1
  1677   000020                     sprintf@f:
  1678                           	callstack 0
  1679   000020                     disk_ioctl@csd:
  1680                           	callstack 0
  1681                           
  1682                           ; 16 bytes @ 0x1F
  1683   000020                     	ds	9
  1684   000029                     sync_window@res:
  1685                           	callstack 0
  1686                           
  1687                           ; 1 bytes @ 0x28
  1688   000029                     	ds	1
  1689   00002A                     sync_window@nf:
  1690                           	callstack 0
  1691                           
  1692                           ; 2 bytes @ 0x29
  1693   00002A                     	ds	2
  1694   00002C                     sync_window@wsect:
  1695                           	callstack 0
  1696                           
  1697                           ; 4 bytes @ 0x2B
  1698   00002C                     	ds	4
  1699   000030                     disk_ioctl@pdrv:
  1700                           	callstack 0
  1701   000030                     move_window@fs:
  1702                           	callstack 0
  1703                           
  1704                           ; 2 bytes @ 0x2F
  1705   000030                     	ds	1
  1706   000031                     disk_ioctl@csize:
  1707                           	callstack 0
  1708                           
  1709                           ; 4 bytes @ 0x30
  1710   000031                     	ds	1
  1711   000032                     move_window@sector:
  1712                           	callstack 0
  1713                           
  1714                           ; 4 bytes @ 0x31
  1715   000032                     	ds	3
  1716   000035                     disk_ioctl@res:
  1717                           	callstack 0
  1718                           
  1719                           ; 1 bytes @ 0x34
  1720   000035                     	ds	1
  1721   000036                     disk_ioctl@n:
  1722                           	callstack 0
  1723   000036                     
  1724                           ; 1 bytes @ 0x35
  1725   000036                     	ds	1
  1726   000037                     disk_ioctl@ptr:
  1727                           	callstack 0
  1728                           
  1729                           ; 2 bytes @ 0x36
  1730   000037                     	ds	2
  1731   000039                     sync_fs@fs:
  1732                           	callstack 0
  1733                           
  1734                           ; 2 bytes @ 0x38
  1735   000039                     	ds	1
  1736   00003A                     move_window@res:
  1737                           	callstack 0
  1738                           
  1739                           ; 1 bytes @ 0x39
  1740   00003A                     	ds	1
  1741   00003B                     ?_get_fat:
  1742                           	callstack 0
  1743   00003B                     get_fat@fs:
  1744                           	callstack 0
  1745   00003B                     put_fat@fs:
  1746                           	callstack 0
  1747   00003B                     check_fs@fs:
  1748                           	callstack 0
  1749   00003B                     ??_sync_fs:
  1750                           
  1751                           ; 1 bytes @ 0x3A
  1752   00003B                     	ds	2
  1753   00003D                     get_fat@clst:
  1754                           	callstack 0
  1755   00003D                     put_fat@clst:
  1756                           	callstack 0
  1757   00003D                     check_fs@sect:
  1758                           	callstack 0
  1759                           
  1760                           ; 4 bytes @ 0x3C
  1761   00003D                     	ds	4
  1762   000041                     put_fat@val:
  1763                           	callstack 0
  1764   000041                     ??_get_fat:
  1765   000041                     ??_check_fs:
  1766                           
  1767                           ; 1 bytes @ 0x40
  1768   000041                     	ds	2
  1769   000043                     sync_fs@res:
  1770                           	callstack 0
  1771                           
  1772                           ; 1 bytes @ 0x42
  1773   000043                     	ds	1
  1774   000044                     f_sync@fp:
  1775                           	callstack 0
  1776                           
  1777                           ; 2 bytes @ 0x43
  1778   000044                     	ds	1
  1779   000045                     find_volume@rfs:
  1780                           	callstack 0
  1781   000045                     ??_put_fat:
  1782                           
  1783                           ; 1 bytes @ 0x44
  1784   000045                     	ds	1
  1785   000046                     find_volume@path:
  1786                           	callstack 0
  1787   000046                     f_sync@res:
  1788                           	callstack 0
  1789   000046                     
  1790                           ; 1 bytes @ 0x45
  1791   000046                     	ds	1
  1792   000047                     find_volume@wmode:
  1793                           	callstack 0
  1794   000047                     f_sync@dir:
  1795                           	callstack 0
  1796                           
  1797                           ; 2 bytes @ 0x46
  1798   000047                     	ds	1
  1799   000048                     ??_find_volume:
  1800                           
  1801                           ; 1 bytes @ 0x47
  1802   000048                     	ds	1
  1803   000049                     _get_fat$680:
  1804                           	callstack 0
  1805   000049                     f_close@fp:
  1806                           	callstack 0
  1807                           
  1808                           ; 2 bytes @ 0x48
  1809   000049                     	ds	2
  1810   00004B                     f_close@res:
  1811                           	callstack 0
  1812   00004B                     get_fat@val:
  1813                           	callstack 0
  1814   00004B                     
  1815                           ; 1 bytes @ 0x4A
  1816   00004B                     	ds	2
  1817   00004D                     _put_fat$706:
  1818                           	callstack 0
  1819                           
  1820                           ; 2 bytes @ 0x4C
  1821   00004D                     	ds	2
  1822   00004F                     get_fat@wc:
  1823                           	callstack 0
  1824   00004F                     _put_fat$707:
  1825                           	callstack 0
  1826                           
  1827                           ; 2 bytes @ 0x4E
  1828   00004F                     	ds	1
  1829   000050                     f_mount@fs:
  1830                           	callstack 0
  1831                           
  1832                           ; 2 bytes @ 0x4F
  1833   000050                     	ds	1
  1834   000051                     get_fat@p:
  1835                           	callstack 0
  1836   000051                     put_fat@bc:
  1837                           	callstack 0
  1838                           
  1839                           ; 2 bytes @ 0x50
  1840   000051                     	ds	1
  1841   000052                     f_mount@path:
  1842                           	callstack 0
  1843                           
  1844                           ; 1 bytes @ 0x51
  1845   000052                     	ds	1
  1846   000053                     put_fat@res:
  1847                           	callstack 0
  1848   000053                     f_mount@opt:
  1849                           	callstack 0
  1850   000053                     get_fat@bc:
  1851                           	callstack 0
  1852                           
  1853                           ; 2 bytes @ 0x52
  1854   000053                     	ds	1
  1855   000054                     f_mount@res:
  1856                           	callstack 0
  1857   000054                     put_fat@p:
  1858                           	callstack 0
  1859   000054                     
  1860                           ; 1 bytes @ 0x53
  1861   000054                     	ds	1
  1862   000055                     dir_sdi@dp:
  1863                           	callstack 0
  1864   000055                     f_mount@cfs:
  1865                           	callstack 0
  1866                           
  1867                           ; 2 bytes @ 0x54
  1868   000055                     	ds	1
  1869   000056                     ?_create_chain:
  1870                           	callstack 0
  1871   000056                     remove_chain@fs:
  1872                           	callstack 0
  1873   000056                     create_chain@fs:
  1874                           	callstack 0
  1875   000056                     dir_sdi@idx:
  1876                           	callstack 0
  1877                           
  1878                           ; 2 bytes @ 0x55
  1879   000056                     	ds	1
  1880   000057                     f_mount@rp:
  1881                           	callstack 0
  1882                           
  1883                           ; 1 bytes @ 0x56
  1884   000057                     	ds	1
  1885   000058                     f_mount@vol:
  1886                           	callstack 0
  1887   000058                     remove_chain@clst:
  1888                           	callstack 0
  1889   000058                     create_chain@clst:
  1890                           	callstack 0
  1891   000058                     ??_dir_sdi:
  1892                           
  1893                           ; 1 bytes @ 0x57
  1894   000058                     	ds	4
  1895   00005C                     
  1896                           ; 1 bytes @ 0x5B
  1897   00005C                     	ds	3
  1898   00005F                     dir_sdi@ic:
  1899                           	callstack 0
  1900                           
  1901                           ; 2 bytes @ 0x5E
  1902   00005F                     	ds	1
  1903   000060                     remove_chain@res:
  1904                           	callstack 0
  1905   000060                     create_chain@res:
  1906                           	callstack 0
  1907                           
  1908                           ; 1 bytes @ 0x5F
  1909   000060                     	ds	1
  1910   000061                     remove_chain@nxt:
  1911                           	callstack 0
  1912   000061                     create_chain@scl:
  1913                           	callstack 0
  1914   000061                     dir_sdi@sect:
  1915                           	callstack 0
  1916                           
  1917                           ; 4 bytes @ 0x60
  1918   000061                     	ds	4
  1919   000065                     create_chain@ncl:
  1920                           	callstack 0
  1921   000065                     dir_sdi@clst:
  1922                           	callstack 0
  1923                           
  1924                           ; 4 bytes @ 0x64
  1925   000065                     	ds	4
  1926   000069                     create_chain@cs:
  1927                           	callstack 0
  1928                           
  1929                           ; 4 bytes @ 0x68
  1930   000069                     	ds	4
  1931   00006D                     dir_next@dp:
  1932                           	callstack 0
  1933   00006D                     f_write@fp:
  1934                           	callstack 0
  1935   00006D                     f_lseek@fp:
  1936                           	callstack 0
  1937                           
  1938                           ; 2 bytes @ 0x6C
  1939   00006D                     	ds	1
  1940   00006E                     dir_next@stretch:
  1941                           	callstack 0
  1942                           
  1943                           ; 2 bytes @ 0x6D
  1944   00006E                     	ds	1
  1945   00006F                     f_write@buff:
  1946                           	callstack 0
  1947   00006F                     f_lseek@ofs:
  1948                           	callstack 0
  1949                           
  1950                           ; 4 bytes @ 0x6E
  1951   00006F                     	ds	1
  1952   000070                     ??_dir_next:
  1953                           
  1954                           ; 1 bytes @ 0x6F
  1955   000070                     	ds	1
  1956   000071                     f_write@btw:
  1957                           	callstack 0
  1958                           
  1959                           ; 2 bytes @ 0x70
  1960   000071                     	ds	2
  1961   000073                     f_write@bw:
  1962                           	callstack 0
  1963                           
  1964                           ; 2 bytes @ 0x72
  1965   000073                     	ds	5
  1966   000078                     dir_next@c:
  1967                           	callstack 0
  1968                           
  1969                           ; 2 bytes @ 0x77
  1970   000078                     	ds	2
  1971   00007A                     dir_next@i:
  1972                           	callstack 0
  1973                           
  1974                           ; 2 bytes @ 0x79
  1975   00007A                     	ds	2
  1976   00007C                     dir_next@clst:
  1977                           	callstack 0
  1978                           
  1979                           ; 4 bytes @ 0x7B
  1980   00007C                     	ds	4
  1981   000080                     
  1982                           ; 1 bytes @ 0x7F
  1983 ;;
  1984 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1985 ;;
  1986 ;; *************** function _main *****************
  1987 ;; Defined at:
  1988 ;;		line 20 in file "main.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  adc_value       2   69[BANK1 ] unsigned int 
  1993 ;;  buffer         64    0[BANK1 ] unsigned char [64]
  1994 ;;  bw              2   67[BANK1 ] unsigned short 
  1995 ;;  length          2   65[BANK1 ] unsigned short 
  1996 ;;  res             1   64[BANK1 ] enum E2655
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2006 ;;      Params:         0       0       0       0       0       0       0
  2007 ;;      Locals:         0       0      71       0       0       0       0
  2008 ;;      Temps:          0       2       0       0       0       0       0
  2009 ;;      Totals:         0       2      71       0       0       0       0
  2010 ;;Total ram usage:       73 bytes
  2011 ;; Hardware stack levels required when called: 14
  2012 ;; This function calls:
  2013 ;;		_ADC_Read
  2014 ;;		_SYSTEM_Initialize
  2015 ;;		_f_close
  2016 ;;		_f_lseek
  2017 ;;		_f_mount
  2018 ;;		_f_open
  2019 ;;		_f_write
  2020 ;;		_sprintf
  2021 ;;		_strlen
  2022 ;; This function is called by:
  2023 ;;		Startup code after reset
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text0
  2028   00510C                     __ptext0:
  2029                           	callstack 0
  2030   00510C                     _main:
  2031                           	callstack 17
  2032   00510C                     
  2033                           ;main.c: 25:  SYSTEM_Initialize();
  2034   00510C  EC32  F033         	call	_SYSTEM_Initialize	;wreg free
  2035   005110                     
  2036                           ;main.c: 26:     LATDbits.LATD6 = 0;
  2037   005110  9C8C               	bcf	140,6,c	;volatile
  2038   005112                     
  2039                           ;main.c: 27:     TRISDbits.TRISD7 = 0;
  2040   005112  9E95               	bcf	149,7,c	;volatile
  2041   005114                     
  2042                           ;main.c: 28:     LATDbits.LATD7 = 0;
  2043   005114  9E8C               	bcf	140,7,c	;volatile
  2044   005116                     
  2045                           ;main.c: 30:     FRESULT res = f_mount(&FatFs, "", 1);
  2046   005116  0E87               	movlw	low _FatFs
  2047   005118  6E50               	movwf	f_mount@fs^0,c
  2048   00511A  0E01               	movlw	high _FatFs
  2049   00511C  6E51               	movwf	(f_mount@fs+1)^0,c
  2050   00511E  0E10               	movlw	low (STR_5+15)
  2051   005120  6E52               	movwf	f_mount@path^0,c
  2052   005122  0E01               	movlw	1
  2053   005124  6E53               	movwf	f_mount@opt^0,c
  2054   005126  ECCE  F02C         	call	_f_mount	;wreg free
  2055   00512A  0101               	movlb	1	; () banked
  2056   00512C  6F40               	movwf	main@res& (0+255),b
  2057                           
  2058                           ;main.c: 32:     while (res == FR_OK) {
  2059   00512E  EF19  F029         	goto	l6757
  2060   005132                     l811:
  2061                           
  2062                           ; BSR set to: 1
  2063                           ;main.c: 33:         LATDbits.LATD7 = 1;
  2064   005132  8E8C               	bsf	140,7,c	;volatile
  2065   005134                     
  2066                           ; BSR set to: 1
  2067                           ;main.c: 36:         unsigned int adc_value = ADC_Read();
  2068   005134  ECDC  F032         	call	_ADC_Read	;wreg free
  2069   005138  C001  F145         	movff	?_ADC_Read,main@adc_value
  2070   00513C  C002  F146         	movff	?_ADC_Read+1,main@adc_value+1
  2071   005140                     
  2072                           ;main.c: 39:         if (adc_value >= 400 && f_open(&Fil, "hello.txt",
  2073   005140  0E90               	movlw	144
  2074   005142  0101               	movlb	1	; () banked
  2075   005144  5D45               	subwf	main@adc_value& (0+255),w,b
  2076   005146  0E01               	movlw	1
  2077   005148  5946               	subwfb	(main@adc_value+1)& (0+255),w,b
  2078   00514A  A0D8               	btfss	status,0,c
  2079   00514C  EFAA  F028         	goto	u9611
  2080   005150  EFAC  F028         	goto	u9610
  2081   005154                     u9611:
  2082   005154  EF0B  F029         	goto	l812
  2083   005158                     u9610:
  2084   005158                     
  2085                           ; BSR set to: 1
  2086   005158  0E67               	movlw	low _Fil
  2087   00515A  0100               	movlb	0	; () banked
  2088   00515C  6FBA               	movwf	f_open@fp& (0+255),b
  2089   00515E  0E01               	movlw	high _Fil
  2090   005160  6FBB               	movwf	(f_open@fp+1)& (0+255),b
  2091   005162  0E20               	movlw	low STR_4
  2092   005164  6FBC               	movwf	f_open@path& (0+255),b
  2093   005166  0E13               	movlw	19
  2094   005168  6FBD               	movwf	f_open@mode& (0+255),b
  2095   00516A  EC25  F018         	call	_f_open	;wreg free
  2096   00516E  0900               	iorlw	0
  2097   005170  A4D8               	btfss	status,2,c
  2098   005172  EFBD  F028         	goto	u9621
  2099   005176  EFBF  F028         	goto	u9620
  2100   00517A                     u9621:
  2101   00517A  EF0B  F029         	goto	l812
  2102   00517E                     u9620:
  2103   00517E                     
  2104                           ;main.c: 40:             0x10 | 0x01 | 0x02) == FR_OK) {;main.c: 42:             TRISDbi
      +                          ts.TRISD6 = 0;
  2105   00517E  9C95               	bcf	149,6,c	;volatile
  2106                           
  2107                           ;main.c: 43:             LATDbits.LATD6 = 1;
  2108   005180  8C8C               	bsf	140,6,c	;volatile
  2109   005182                     
  2110                           ;main.c: 46:             if (Fil.fsize != 0) f_lseek(&Fil, Fil.fsize);
  2111   005182  0101               	movlb	1	; () banked
  2112   005184  5171               	movf	(_Fil+10)& (0+255),w,b
  2113   005186  1172               	iorwf	(_Fil+11)& (0+255),w,b
  2114   005188  1173               	iorwf	(_Fil+12)& (0+255),w,b
  2115   00518A  1174               	iorwf	(_Fil+13)& (0+255),w,b
  2116   00518C  B4D8               	btfsc	status,2,c
  2117   00518E  EFCB  F028         	goto	u9631
  2118   005192  EFCD  F028         	goto	u9630
  2119   005196                     u9631:
  2120   005196  EFDB  F028         	goto	l6747
  2121   00519A                     u9630:
  2122   00519A                     
  2123                           ; BSR set to: 1
  2124   00519A  0E67               	movlw	low _Fil
  2125   00519C  6E6D               	movwf	f_lseek@fp^0,c
  2126   00519E  0E01               	movlw	high _Fil
  2127   0051A0  6E6E               	movwf	(f_lseek@fp+1)^0,c
  2128   0051A2  C171  F06F         	movff	_Fil+10,f_lseek@ofs
  2129   0051A6  C172  F070         	movff	_Fil+11,f_lseek@ofs+1
  2130   0051AA  C173  F071         	movff	_Fil+12,f_lseek@ofs+2
  2131   0051AE  C174  F072         	movff	_Fil+13,f_lseek@ofs+3
  2132   0051B2  EC0C  F00D         	call	_f_lseek	;wreg free
  2133   0051B6                     l6747:
  2134                           
  2135                           ;main.c: 48:             sprintf(buffer, "ADC_value: %d\r\n", adc_value);
  2136   0051B6  0E00               	movlw	low main@buffer
  2137   0051B8  6E1A               	movwf	sprintf@s^0,c
  2138   0051BA  0E01               	movlw	high main@buffer
  2139   0051BC  6E1B               	movwf	(sprintf@s+1)^0,c
  2140   0051BE  0E01               	movlw	low STR_5
  2141   0051C0  6E1C               	movwf	sprintf@fmt^0,c
  2142   0051C2  C145  F01D         	movff	main@adc_value,?_sprintf+3
  2143   0051C6  C146  F01E         	movff	main@adc_value+1,?_sprintf+4
  2144   0051CA  EC43  F032         	call	_sprintf	;wreg free
  2145   0051CE                     
  2146                           ;main.c: 49:             length = strlen(buffer);
  2147   0051CE  0E00               	movlw	low main@buffer
  2148   0051D0  6E01               	movwf	strlen@s^0,c
  2149   0051D2  0E01               	movlw	high main@buffer
  2150   0051D4  6E02               	movwf	(strlen@s+1)^0,c
  2151   0051D6  EC7D  F032         	call	_strlen	;wreg free
  2152   0051DA  C001  F141         	movff	?_strlen,main@length
  2153   0051DE  C002  F142         	movff	?_strlen+1,main@length+1
  2154   0051E2                     
  2155                           ;main.c: 50:             f_write(&Fil, buffer, length, &bw);
  2156   0051E2  0E67               	movlw	low _Fil
  2157   0051E4  6E6D               	movwf	f_write@fp^0,c
  2158   0051E6  0E01               	movlw	high _Fil
  2159   0051E8  6E6E               	movwf	(f_write@fp+1)^0,c
  2160   0051EA  0E00               	movlw	low main@buffer
  2161   0051EC  6E6F               	movwf	f_write@buff^0,c
  2162   0051EE  0E01               	movlw	high main@buffer
  2163   0051F0  6E70               	movwf	(f_write@buff+1)^0,c
  2164   0051F2  C141  F071         	movff	main@length,f_write@btw
  2165   0051F6  C142  F072         	movff	main@length+1,f_write@btw+1
  2166   0051FA  0E43               	movlw	low main@bw
  2167   0051FC  6E73               	movwf	f_write@bw^0,c
  2168   0051FE  0E01               	movlw	high main@bw
  2169   005200  6E74               	movwf	(f_write@bw+1)^0,c
  2170   005202  ECC8  F008         	call	_f_write	;wreg free
  2171   005206                     
  2172                           ;main.c: 51:             f_close(&Fil);
  2173   005206  0E67               	movlw	low _Fil
  2174   005208  6E49               	movwf	f_close@fp^0,c
  2175   00520A  0E01               	movlw	high _Fil
  2176   00520C  6E4A               	movwf	(f_close@fp+1)^0,c
  2177   00520E  ECDB  F031         	call	_f_close	;wreg free
  2178                           
  2179                           ;main.c: 53:         } else {
  2180   005212  EF0C  F029         	goto	l6755
  2181   005216                     l812:
  2182                           
  2183                           ;main.c: 54:             LATDbits.LATD6 = 0;
  2184   005216  9C8C               	bcf	140,6,c	;volatile
  2185   005218                     l6755:
  2186                           
  2187                           ;main.c: 57:         _delay((unsigned long)((100)*(8000000UL/4000.0)));
  2188   005218  0E02               	movlw	2
  2189   00521A  0100               	movlb	0	; () banked
  2190   00521C  6FEF               	movwf	(??_main+1)& (0+255),b
  2191   00521E  0E04               	movlw	4
  2192   005220  6FEE               	movwf	??_main& (0+255),b
  2193   005222  0EBA               	movlw	186
  2194   005224                     u9657:
  2195   005224  2EE8               	decfsz	wreg,f,c
  2196   005226  D7FE               	bra	u9657
  2197   005228  2FEE               	decfsz	??_main& (0+255),f,b
  2198   00522A  D7FC               	bra	u9657
  2199   00522C  2FEF               	decfsz	(??_main+1)& (0+255),f,b
  2200   00522E  D7FA               	bra	u9657
  2201   005230  0000               	nop	
  2202   005232                     l6757:
  2203                           
  2204                           ;main.c: 32:     while (res == FR_OK) {
  2205   005232  0101               	movlb	1	; () banked
  2206   005234  5140               	movf	main@res& (0+255),w,b
  2207   005236  B4D8               	btfsc	status,2,c
  2208   005238  EF20  F029         	goto	u9641
  2209   00523C  EF22  F029         	goto	u9640
  2210   005240                     u9641:
  2211   005240  EF99  F028         	goto	l811
  2212   005244                     u9640:
  2213   005244                     
  2214                           ; BSR set to: 1
  2215   005244  EF00  F000         	goto	start
  2216   005248                     __end_of_main:
  2217                           	callstack 0
  2218                           
  2219 ;; *************** function _strlen *****************
  2220 ;; Defined at:
  2221 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\strlen.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2224 ;;		 -> main@buffer(64), 
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2227 ;;		 -> main@buffer(64), 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  2    0[COMRAM] unsigned int 
  2230 ;; Registers used:
  2231 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2237 ;;      Params:         2       0       0       0       0       0       0
  2238 ;;      Locals:         2       0       0       0       0       0       0
  2239 ;;      Temps:          0       0       0       0       0       0       0
  2240 ;;      Totals:         4       0       0       0       0       0       0
  2241 ;;Total ram usage:        4 bytes
  2242 ;; Hardware stack levels used: 1
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_main
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text1
  2251   0064FA                     __ptext1:
  2252                           	callstack 0
  2253   0064FA                     _strlen:
  2254                           	callstack 30
  2255   0064FA  C001  F003         	movff	strlen@s,strlen@a
  2256   0064FE  C002  F004         	movff	strlen@s+1,strlen@a+1
  2257   006502  EF85  F032         	goto	l6411
  2258   006506                     l6409:
  2259   006506  4A01               	infsnz	strlen@s^0,f,c
  2260   006508  2A02               	incf	(strlen@s+1)^0,f,c
  2261   00650A                     l6411:
  2262   00650A  C001  FFD9         	movff	strlen@s,fsr2l
  2263   00650E  C002  FFDA         	movff	strlen@s+1,fsr2h
  2264   006512  50DF               	movf	indf2,w,c
  2265   006514  A4D8               	btfss	status,2,c
  2266   006516  EF8F  F032         	goto	u8991
  2267   00651A  EF91  F032         	goto	u8990
  2268   00651E                     u8991:
  2269   00651E  EF83  F032         	goto	l6409
  2270   006522                     u8990:
  2271   006522  5003               	movf	strlen@a^0,w,c
  2272   006524  5C01               	subwf	strlen@s^0,w,c
  2273   006526  6E01               	movwf	?_strlen^0,c
  2274   006528  5004               	movf	(strlen@a+1)^0,w,c
  2275   00652A  5802               	subwfb	(strlen@s+1)^0,w,c
  2276   00652C  6E02               	movwf	(?_strlen+1)^0,c
  2277   00652E  0012               	return		;funcret
  2278   006530                     __end_of_strlen:
  2279                           	callstack 0
  2280                           
  2281 ;; *************** function _sprintf *****************
  2282 ;; Defined at:
  2283 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  s               2   25[COMRAM] PTR unsigned char 
  2286 ;;		 -> main@buffer(64), 
  2287 ;;  fmt             1   27[COMRAM] PTR const unsigned char 
  2288 ;;		 -> STR_5(16), 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  f              11   31[COMRAM] struct _IO_FILE
  2291 ;;  ret             2    0        int 
  2292 ;;  ap              1   30[COMRAM] PTR void [1]
  2293 ;;		 -> ?_sprintf(2), 
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  2   25[COMRAM] int 
  2296 ;; Registers used:
  2297 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2303 ;;      Params:         5       0       0       0       0       0       0
  2304 ;;      Locals:        12       0       0       0       0       0       0
  2305 ;;      Temps:          0       0       0       0       0       0       0
  2306 ;;      Totals:        17       0       0       0       0       0       0
  2307 ;;Total ram usage:       17 bytes
  2308 ;; Hardware stack levels used: 1
  2309 ;; Hardware stack levels required when called: 4
  2310 ;; This function calls:
  2311 ;;		_vfprintf
  2312 ;; This function is called by:
  2313 ;;		_main
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text2
  2318   006486                     __ptext2:
  2319                           	callstack 0
  2320   006486                     _sprintf:
  2321                           	callstack 26
  2322   006486  0E1D               	movlw	low (?_sprintf+3)
  2323   006488  6E1F               	movwf	sprintf@ap^0,c
  2324   00648A  C01A  F020         	movff	sprintf@s,sprintf@f
  2325   00648E  C01B  F021         	movff	sprintf@s+1,sprintf@f+1
  2326   006492  0E00               	movlw	0
  2327   006494  6E23               	movwf	(sprintf@f+3)^0,c
  2328   006496  0E00               	movlw	0
  2329   006498  6E22               	movwf	(sprintf@f+2)^0,c
  2330   00649A  0E00               	movlw	0
  2331   00649C  6E2A               	movwf	(sprintf@f+10)^0,c
  2332   00649E  0E00               	movlw	0
  2333   0064A0  6E29               	movwf	(sprintf@f+9)^0,c
  2334   0064A2  0E20               	movlw	low sprintf@f
  2335   0064A4  6E16               	movwf	vfprintf@fp^0,c
  2336   0064A6  C01C  F017         	movff	sprintf@fmt,vfprintf@fmt
  2337   0064AA  0E1F               	movlw	low sprintf@ap
  2338   0064AC  6E18               	movwf	vfprintf@ap^0,c
  2339   0064AE  EC24  F032         	call	_vfprintf	;wreg free
  2340   0064B2  5022               	movf	(sprintf@f+2)^0,w,c
  2341   0064B4  241A               	addwf	sprintf@s^0,w,c
  2342   0064B6  6ED9               	movwf	fsr2l,c
  2343   0064B8  5023               	movf	(sprintf@f+3)^0,w,c
  2344   0064BA  201B               	addwfc	(sprintf@s+1)^0,w,c
  2345   0064BC  6EDA               	movwf	fsr2h,c
  2346   0064BE  6ADF               	clrf	indf2,c
  2347   0064C0  0012               	return		;funcret
  2348   0064C2                     __end_of_sprintf:
  2349                           	callstack 0
  2350                           
  2351 ;; *************** function _vfprintf *****************
  2352 ;; Defined at:
  2353 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;  fp              1   21[COMRAM] PTR struct _IO_FILE
  2356 ;;		 -> sprintf@f(11), 
  2357 ;;  fmt             1   22[COMRAM] PTR const unsigned char 
  2358 ;;		 -> STR_5(16), 
  2359 ;;  ap              1   23[COMRAM] PTR PTR void 
  2360 ;;		 -> sprintf@ap(1), 
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;  cfmt            1   24[COMRAM] PTR unsigned char 
  2363 ;;		 -> STR_5(16), 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  2   21[COMRAM] int 
  2366 ;; Registers used:
  2367 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2373 ;;      Params:         3       0       0       0       0       0       0
  2374 ;;      Locals:         1       0       0       0       0       0       0
  2375 ;;      Temps:          0       0       0       0       0       0       0
  2376 ;;      Totals:         4       0       0       0       0       0       0
  2377 ;;Total ram usage:        4 bytes
  2378 ;; Hardware stack levels used: 1
  2379 ;; Hardware stack levels required when called: 3
  2380 ;; This function calls:
  2381 ;;		_vfpfcnvrt
  2382 ;; This function is called by:
  2383 ;;		_sprintf
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text3
  2388   006448                     __ptext3:
  2389                           	callstack 0
  2390   006448                     _vfprintf:
  2391                           	callstack 26
  2392   006448                     
  2393                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2394   006448  C017  F019         	movff	vfprintf@fmt,vfprintf@cfmt
  2395                           
  2396                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2397   00644C  EF30  F032         	goto	l5971
  2398   006450                     l5969:
  2399                           
  2400                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2401   006450  C016  F00B         	movff	vfprintf@fp,vfpfcnvrt@fp
  2402   006454  0E19               	movlw	low vfprintf@cfmt
  2403   006456  6E0C               	movwf	vfpfcnvrt@fmt^0,c
  2404   006458  C018  F00D         	movff	vfprintf@ap,vfpfcnvrt@ap
  2405   00645C  ECC4  F023         	call	_vfpfcnvrt	;wreg free
  2406   006460                     l5971:
  2407                           
  2408                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2409   006460  C019  FFF6         	movff	vfprintf@cfmt,tblptrl
  2410   006464                     	if	1	;There is more than 1 active tblptr byte
  2411   006464  0E06               	movlw	high __smallconst
  2412   006466  6EF7               	movwf	tblptrh,c
  2413   006468                     	endif
  2414   006468                     	if	0	;tblptru may be non-zero
  2415   006468                     	endif
  2416   006468                     	if	0	;tblptru may be non-zero
  2417   006468                     	endif
  2418   006468  0008               	tblrd		*
  2419   00646A  50F5               	movf	tablat,w,c
  2420   00646C  0900               	iorlw	0
  2421   00646E  A4D8               	btfss	status,2,c
  2422   006470  EF3C  F032         	goto	u8171
  2423   006474  EF3E  F032         	goto	u8170
  2424   006478                     u8171:
  2425   006478  EF28  F032         	goto	l5969
  2426   00647C                     u8170:
  2427   00647C                     
  2428                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2429   00647C  0E00               	movlw	0
  2430   00647E  6E17               	movwf	(?_vfprintf+1)^0,c
  2431   006480  0E00               	movlw	0
  2432   006482  6E16               	movwf	?_vfprintf^0,c
  2433   006484  0012               	return		;funcret
  2434   006486                     __end_of_vfprintf:
  2435                           	callstack 0
  2436                           
  2437 ;; *************** function _vfpfcnvrt *****************
  2438 ;; Defined at:
  2439 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  2442 ;;		 -> sprintf@f(11), 
  2443 ;;  fmt             1   11[COMRAM] PTR PTR unsigned char 
  2444 ;;		 -> vfprintf@cfmt(1), 
  2445 ;;  ap              1   12[COMRAM] PTR PTR void 
  2446 ;;		 -> sprintf@ap(1), 
  2447 ;; Auto vars:     Size  Location     Type
  2448 ;;  convarg         4   16[COMRAM] struct .
  2449 ;;  c               1   20[COMRAM] unsigned char 
  2450 ;;  cp              1   15[COMRAM] PTR unsigned char 
  2451 ;;		 -> STR_5(16), 
  2452 ;;  done            1   14[COMRAM] _Bool 
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      void 
  2455 ;; Registers used:
  2456 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2462 ;;      Params:         3       0       0       0       0       0       0
  2463 ;;      Locals:         7       0       0       0       0       0       0
  2464 ;;      Temps:          1       0       0       0       0       0       0
  2465 ;;      Totals:        11       0       0       0       0       0       0
  2466 ;;Total ram usage:       11 bytes
  2467 ;; Hardware stack levels used: 1
  2468 ;; Hardware stack levels required when called: 2
  2469 ;; This function calls:
  2470 ;;		___awdiv
  2471 ;;		___awmod
  2472 ;;		_abs
  2473 ;;		_fputc
  2474 ;; This function is called by:
  2475 ;;		_vfprintf
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text4
  2480   004788                     __ptext4:
  2481                           	callstack 0
  2482   004788                     _vfpfcnvrt:
  2483                           	callstack 26
  2484   004788                     
  2485                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2486   004788  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2487   00478A  6ED9               	movwf	fsr2l,c
  2488   00478C  6ADA               	clrf	fsr2h,c
  2489   00478E  CFDF FFF6          	movff	indf2,tblptrl
  2490   004792                     	if	1	;There is more than 1 active tblptr byte
  2491   004792  0E06               	movlw	high __smallconst
  2492   004794  6EF7               	movwf	tblptrh,c
  2493   004796                     	endif
  2494   004796                     	if	0	;tblptru may be non-zero
  2495   004796                     	endif
  2496   004796                     	if	0	;tblptru may be non-zero
  2497   004796                     	endif
  2498   004796  0008               	tblrd		*
  2499   004798  50F5               	movf	tablat,w,c
  2500   00479A  0A25               	xorlw	37
  2501   00479C  A4D8               	btfss	status,2,c
  2502   00479E  EFD3  F023         	goto	u7401
  2503   0047A2  EFD5  F023         	goto	u7400
  2504   0047A6                     u7401:
  2505   0047A6  EF95  F024         	goto	l5553
  2506   0047AA                     u7400:
  2507   0047AA                     
  2508                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2509   0047AA  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2510   0047AC  6ED9               	movwf	fsr2l,c
  2511   0047AE  6ADA               	clrf	fsr2h,c
  2512   0047B0  2ADF               	incf	indf2,f,c
  2513   0047B2                     
  2514                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2515   0047B2  0E00               	movlw	0
  2516   0047B4  0100               	movlb	0	; () banked
  2517   0047B6  6FF1               	movwf	(_width+1)& (0+255),b
  2518   0047B8  0E00               	movlw	0
  2519   0047BA  6FF0               	movwf	_width& (0+255),b
  2520   0047BC  C0F0  F0F8         	movff	_width,_flags
  2521   0047C0                     
  2522                           ; BSR set to: 0
  2523                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2524   0047C0  69F2               	setf	_prec& (0+255),b
  2525   0047C2  69F3               	setf	(_prec+1)& (0+255),b
  2526   0047C4                     
  2527                           ; BSR set to: 0
  2528                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2529   0047C4  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2530   0047C6  6ED9               	movwf	fsr2l,c
  2531   0047C8  6ADA               	clrf	fsr2h,c
  2532   0047CA  50DF               	movf	indf2,w,c
  2533   0047CC  6E10               	movwf	vfpfcnvrt@cp^0,c
  2534   0047CE                     
  2535                           ; BSR set to: 0
  2536                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2537   0047CE  C010  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2538   0047D2                     	if	1	;There is more than 1 active tblptr byte
  2539   0047D2  0E06               	movlw	high __smallconst
  2540   0047D4  6EF7               	movwf	tblptrh,c
  2541   0047D6                     	endif
  2542   0047D6                     	if	0	;tblptru may be non-zero
  2543   0047D6                     	endif
  2544   0047D6                     	if	0	;tblptru may be non-zero
  2545   0047D6                     	endif
  2546   0047D6  0008               	tblrd		*
  2547   0047D8  50F5               	movf	tablat,w,c
  2548   0047DA  0A64               	xorlw	100
  2549   0047DC  B4D8               	btfsc	status,2,c
  2550   0047DE  EFF3  F023         	goto	u7411
  2551   0047E2  EFF5  F023         	goto	u7410
  2552   0047E6                     u7411:
  2553   0047E6  EF03  F024         	goto	l5523
  2554   0047EA                     u7410:
  2555   0047EA                     
  2556                           ; BSR set to: 0
  2557   0047EA  C010  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2558   0047EE                     	if	1	;There is more than 1 active tblptr byte
  2559   0047EE  0E06               	movlw	high __smallconst
  2560   0047F0  6EF7               	movwf	tblptrh,c
  2561   0047F2                     	endif
  2562   0047F2                     	if	0	;tblptru may be non-zero
  2563   0047F2                     	endif
  2564   0047F2                     	if	0	;tblptru may be non-zero
  2565   0047F2                     	endif
  2566   0047F2  0008               	tblrd		*
  2567   0047F4  50F5               	movf	tablat,w,c
  2568   0047F6  0A69               	xorlw	105
  2569   0047F8  A4D8               	btfss	status,2,c
  2570   0047FA  EF01  F024         	goto	u7421
  2571   0047FE  EF03  F024         	goto	u7420
  2572   004802                     u7421:
  2573   004802  EF8F  F024         	goto	l5549
  2574   004806                     u7420:
  2575   004806                     l5523:
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2579   004806  500D               	movf	vfpfcnvrt@ap^0,w,c
  2580   004808  6ED9               	movwf	fsr2l,c
  2581   00480A  6ADA               	clrf	fsr2h,c
  2582   00480C  0E02               	movlw	2
  2583   00480E  26DF               	addwf	indf2,f,c
  2584   004810  5CDF               	subwf	indf2,w,c
  2585   004812  6ED9               	movwf	fsr2l,c
  2586   004814  6ADA               	clrf	fsr2h,c
  2587   004816  CFDE F011          	movff	postinc2,vfpfcnvrt@convarg
  2588   00481A  CFDE F012          	movff	postinc2,vfpfcnvrt@convarg+1
  2589   00481E                     
  2590                           ; BSR set to: 0
  2591                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2592   00481E  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2593   004820  6ED9               	movwf	fsr2l,c
  2594   004822  6ADA               	clrf	fsr2h,c
  2595   004824  2810               	incf	vfpfcnvrt@cp^0,w,c
  2596   004826  6EDF               	movwf	indf2,c
  2597   004828                     
  2598                           ; BSR set to: 0
  2599                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  2600   004828  0E20               	movlw	32
  2601   00482A  6E15               	movwf	vfpfcnvrt@c^0,c
  2602                           
  2603                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  2604   00482C  BE12               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2605   00482E  EF1B  F024         	goto	u7431
  2606   004832  EF1E  F024         	goto	u7430
  2607   004836                     u7431:
  2608   004836  0E01               	movlw	1
  2609   004838  EF1F  F024         	goto	u7440
  2610   00483C                     u7430:
  2611   00483C  0E00               	movlw	0
  2612   00483E                     u7440:
  2613   00483E  6E0F               	movwf	vfpfcnvrt@done^0,c
  2614   004840                     l5529:
  2615                           
  2616                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  2617   004840  0615               	decf	vfpfcnvrt@c^0,f,c
  2618   004842  0E47               	movlw	low _dbuf
  2619   004844  2415               	addwf	vfpfcnvrt@c^0,w,c
  2620   004846  6ED9               	movwf	fsr2l,c
  2621   004848  6ADA               	clrf	fsr2h,c
  2622   00484A  0E01               	movlw	high _dbuf
  2623   00484C  22DA               	addwfc	fsr2h,f,c
  2624   00484E  C011  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  2625   004852  C012  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  2626   004856  0E00               	movlw	0
  2627   004858  6E04               	movwf	(___awmod@divisor+1)^0,c
  2628   00485A  0E0A               	movlw	10
  2629   00485C  6E03               	movwf	___awmod@divisor^0,c
  2630   00485E  EC14  F02F         	call	___awmod	;wreg free
  2631   004862  C001  F007         	movff	?___awmod,abs@a
  2632   004866  C002  F008         	movff	?___awmod+1,abs@a+1
  2633   00486A  EC98  F032         	call	_abs	;wreg free
  2634   00486E  5007               	movf	?_abs^0,w,c
  2635   004870  0F30               	addlw	48
  2636   004872  6EDF               	movwf	indf2,c
  2637   004874                     
  2638                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  2639   004874  C011  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  2640   004878  C012  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  2641   00487C  0E00               	movlw	0
  2642   00487E  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2643   004880  0E0A               	movlw	10
  2644   004882  6E03               	movwf	___awdiv@divisor^0,c
  2645   004884  EC94  F02D         	call	___awdiv	;wreg free
  2646   004888  C001  F011         	movff	?___awdiv,vfpfcnvrt@convarg
  2647   00488C  C002  F012         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  2648   004890                     
  2649                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  2650   004890  5011               	movf	vfpfcnvrt@convarg^0,w,c
  2651   004892  1012               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  2652   004894  B4D8               	btfsc	status,2,c
  2653   004896  EF4F  F024         	goto	u7451
  2654   00489A  EF51  F024         	goto	u7450
  2655   00489E                     u7451:
  2656   00489E  EF59  F024         	goto	l5537
  2657   0048A2                     u7450:
  2658   0048A2  5015               	movf	vfpfcnvrt@c^0,w,c
  2659   0048A4  A4D8               	btfss	status,2,c
  2660   0048A6  EF57  F024         	goto	u7461
  2661   0048AA  EF59  F024         	goto	u7460
  2662   0048AE                     u7461:
  2663   0048AE  EF20  F024         	goto	l5529
  2664   0048B2                     u7460:
  2665   0048B2                     l5537:
  2666                           
  2667                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2668   0048B2  5015               	movf	vfpfcnvrt@c^0,w,c
  2669   0048B4  B4D8               	btfsc	status,2,c
  2670   0048B6  EF5F  F024         	goto	u7471
  2671   0048BA  EF61  F024         	goto	u7470
  2672   0048BE                     u7471:
  2673   0048BE  EF84  F024         	goto	l5547
  2674   0048C2                     u7470:
  2675   0048C2  500F               	movf	vfpfcnvrt@done^0,w,c
  2676   0048C4  B4D8               	btfsc	status,2,c
  2677   0048C6  EF67  F024         	goto	u7481
  2678   0048CA  EF69  F024         	goto	u7480
  2679   0048CE                     u7481:
  2680   0048CE  EF84  F024         	goto	l5547
  2681   0048D2                     u7480:
  2682   0048D2                     
  2683                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2684   0048D2  0615               	decf	vfpfcnvrt@c^0,f,c
  2685   0048D4  0E47               	movlw	low _dbuf
  2686   0048D6  2415               	addwf	vfpfcnvrt@c^0,w,c
  2687   0048D8  6ED9               	movwf	fsr2l,c
  2688   0048DA  6ADA               	clrf	fsr2h,c
  2689   0048DC  0E01               	movlw	high _dbuf
  2690   0048DE  22DA               	addwfc	fsr2h,f,c
  2691   0048E0  0E2D               	movlw	45
  2692   0048E2  6EDF               	movwf	indf2,c
  2693   0048E4  EF84  F024         	goto	l5547
  2694   0048E8                     l5543:
  2695                           
  2696                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2697   0048E8  0E47               	movlw	low _dbuf
  2698   0048EA  2415               	addwf	vfpfcnvrt@c^0,w,c
  2699   0048EC  6ED9               	movwf	fsr2l,c
  2700   0048EE  6ADA               	clrf	fsr2h,c
  2701   0048F0  0E01               	movlw	high _dbuf
  2702   0048F2  22DA               	addwfc	fsr2h,f,c
  2703   0048F4  50DF               	movf	indf2,w,c
  2704   0048F6  6E0E               	movwf	??_vfpfcnvrt^0,c
  2705   0048F8  500E               	movf	??_vfpfcnvrt^0,w,c
  2706   0048FA  6E01               	movwf	fputc@c^0,c
  2707   0048FC  6A02               	clrf	(fputc@c+1)^0,c
  2708   0048FE  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2709   004902  ECB7  F02E         	call	_fputc	;wreg free
  2710   004906  2A15               	incf	vfpfcnvrt@c^0,f,c
  2711   004908                     l5547:
  2712                           
  2713                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2714   004908  0E20               	movlw	32
  2715   00490A  1815               	xorwf	vfpfcnvrt@c^0,w,c
  2716   00490C  A4D8               	btfss	status,2,c
  2717   00490E  EF8B  F024         	goto	u7491
  2718   004912  EF8D  F024         	goto	u7490
  2719   004916                     u7491:
  2720   004916  EF74  F024         	goto	l5543
  2721   00491A                     u7490:
  2722   00491A  EFA6  F024         	goto	l1535
  2723   00491E                     l5549:
  2724                           
  2725                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2726   00491E  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2727   004920  6ED9               	movwf	fsr2l,c
  2728   004922  6ADA               	clrf	fsr2h,c
  2729   004924  2ADF               	incf	indf2,f,c
  2730   004926  EFA6  F024         	goto	l1535
  2731   00492A                     l5553:
  2732                           
  2733                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2734   00492A  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2735   00492C  6ED9               	movwf	fsr2l,c
  2736   00492E  6ADA               	clrf	fsr2h,c
  2737   004930  CFDF FFF6          	movff	indf2,tblptrl
  2738   004934                     	if	1	;There is more than 1 active tblptr byte
  2739   004934  0E06               	movlw	high __smallconst
  2740   004936  6EF7               	movwf	tblptrh,c
  2741   004938                     	endif
  2742   004938                     	if	0	;tblptru may be non-zero
  2743   004938                     	endif
  2744   004938                     	if	0	;tblptru may be non-zero
  2745   004938                     	endif
  2746   004938  0008               	tblrd		*
  2747   00493A  50F5               	movf	tablat,w,c
  2748   00493C  6E01               	movwf	fputc@c^0,c
  2749   00493E  6A02               	clrf	(fputc@c+1)^0,c
  2750   004940  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2751   004944  ECB7  F02E         	call	_fputc	;wreg free
  2752   004948  EF8F  F024         	goto	l5549
  2753   00494C                     l1535:
  2754   00494C  0012               	return		;funcret
  2755   00494E                     __end_of_vfpfcnvrt:
  2756                           	callstack 0
  2757                           
  2758 ;; *************** function _fputc *****************
  2759 ;; Defined at:
  2760 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;  c               2    0[COMRAM] int 
  2763 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2764 ;;		 -> sprintf@f(11), 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  2    0[COMRAM] int 
  2769 ;; Registers used:
  2770 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2776 ;;      Params:         3       0       0       0       0       0       0
  2777 ;;      Locals:         0       0       0       0       0       0       0
  2778 ;;      Temps:          5       0       0       0       0       0       0
  2779 ;;      Totals:         8       0       0       0       0       0       0
  2780 ;;Total ram usage:        8 bytes
  2781 ;; Hardware stack levels used: 1
  2782 ;; Hardware stack levels required when called: 1
  2783 ;; This function calls:
  2784 ;;		_putch
  2785 ;; This function is called by:
  2786 ;;		_vfpfcnvrt
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           	psect	text5
  2791   005D6E                     __ptext5:
  2792                           	callstack 0
  2793   005D6E                     _fputc:
  2794                           	callstack 26
  2795   005D6E  5003               	movf	fputc@fp^0,w,c
  2796   005D70  B4D8               	btfsc	status,2,c
  2797   005D72  EFBD  F02E         	goto	u6461
  2798   005D76  EFBF  F02E         	goto	u6460
  2799   005D7A                     u6461:
  2800   005D7A  EFC7  F02E         	goto	l5015
  2801   005D7E                     u6460:
  2802   005D7E  5003               	movf	fputc@fp^0,w,c
  2803   005D80  A4D8               	btfss	status,2,c
  2804   005D82  EFC5  F02E         	goto	u6471
  2805   005D86  EFC7  F02E         	goto	u6470
  2806   005D8A                     u6471:
  2807   005D8A  EFCC  F02E         	goto	l5017
  2808   005D8E                     u6470:
  2809   005D8E                     l5015:
  2810   005D8E  5001               	movf	fputc@c^0,w,c
  2811   005D90  EC37  F033         	call	_putch
  2812   005D94  EF13  F02F         	goto	l1560
  2813   005D98                     l5017:
  2814   005D98  5003               	movf	fputc@fp^0,w,c
  2815   005D9A  6ED9               	movwf	fsr2l,c
  2816   005D9C  6ADA               	clrf	fsr2h,c
  2817   005D9E  0E09               	movlw	9
  2818   005DA0  26D9               	addwf	fsr2l,f,c
  2819   005DA2  50DE               	movf	postinc2,w,c
  2820   005DA4  10DE               	iorwf	postinc2,w,c
  2821   005DA6  B4D8               	btfsc	status,2,c
  2822   005DA8  EFD8  F02E         	goto	u6481
  2823   005DAC  EFDA  F02E         	goto	u6480
  2824   005DB0                     u6481:
  2825   005DB0  EFF3  F02E         	goto	l5021
  2826   005DB4                     u6480:
  2827   005DB4  5003               	movf	fputc@fp^0,w,c
  2828   005DB6  6ED9               	movwf	fsr2l,c
  2829   005DB8  6ADA               	clrf	fsr2h,c
  2830   005DBA  0E09               	movlw	9
  2831   005DBC  26D9               	addwf	fsr2l,f,c
  2832   005DBE  5003               	movf	fputc@fp^0,w,c
  2833   005DC0  6EE1               	movwf	fsr1l,c
  2834   005DC2  6AE2               	clrf	fsr1h,c
  2835   005DC4  0E02               	movlw	2
  2836   005DC6  26E1               	addwf	fsr1l,f,c
  2837   005DC8  50DE               	movf	postinc2,w,c
  2838   005DCA  5CE6               	subwf	postinc1,w,c
  2839   005DCC  50E6               	movf	postinc1,w,c
  2840   005DCE  0A80               	xorlw	128
  2841   005DD0  6E08               	movwf	(??_fputc+4)^0,c
  2842   005DD2  50DE               	movf	postinc2,w,c
  2843   005DD4  0A80               	xorlw	128
  2844   005DD6  5808               	subwfb	(??_fputc+4)^0,w,c
  2845   005DD8  B0D8               	btfsc	status,0,c
  2846   005DDA  EFF1  F02E         	goto	u6491
  2847   005DDE  EFF3  F02E         	goto	u6490
  2848   005DE2                     u6491:
  2849   005DE2  EF13  F02F         	goto	l1560
  2850   005DE6                     u6490:
  2851   005DE6                     l5021:
  2852   005DE6  5003               	movf	fputc@fp^0,w,c
  2853   005DE8  6ED9               	movwf	fsr2l,c
  2854   005DEA  6ADA               	clrf	fsr2h,c
  2855   005DEC  0E02               	movlw	2
  2856   005DEE  26D9               	addwf	fsr2l,f,c
  2857   005DF0  CFDE F004          	movff	postinc2,??_fputc
  2858   005DF4  CFDD F005          	movff	postdec2,??_fputc+1
  2859   005DF8  5003               	movf	fputc@fp^0,w,c
  2860   005DFA  6ED9               	movwf	fsr2l,c
  2861   005DFC  6ADA               	clrf	fsr2h,c
  2862   005DFE  CFDE F006          	movff	postinc2,??_fputc+2
  2863   005E02  CFDD F007          	movff	postdec2,??_fputc+3
  2864   005E06  5004               	movf	??_fputc^0,w,c
  2865   005E08  2406               	addwf	(??_fputc+2)^0,w,c
  2866   005E0A  6ED9               	movwf	fsr2l,c
  2867   005E0C  5005               	movf	(??_fputc+1)^0,w,c
  2868   005E0E  2007               	addwfc	(??_fputc+3)^0,w,c
  2869   005E10  6EDA               	movwf	fsr2h,c
  2870   005E12  C001  FFDF         	movff	fputc@c,indf2
  2871   005E16  5003               	movf	fputc@fp^0,w,c
  2872   005E18  6ED9               	movwf	fsr2l,c
  2873   005E1A  6ADA               	clrf	fsr2h,c
  2874   005E1C  0E02               	movlw	2
  2875   005E1E  26D9               	addwf	fsr2l,f,c
  2876   005E20  2ADE               	incf	postinc2,f,c
  2877   005E22  0E00               	movlw	0
  2878   005E24  22DD               	addwfc	postdec2,f,c
  2879   005E26                     l1560:
  2880   005E26  0012               	return		;funcret
  2881   005E28                     __end_of_fputc:
  2882                           	callstack 0
  2883                           
  2884 ;; *************** function _putch *****************
  2885 ;; Defined at:
  2886 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  c               1    wreg     unsigned char 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  c               1    0[COMRAM] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      void 
  2893 ;; Registers used:
  2894 ;;		wreg
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2900 ;;      Params:         0       0       0       0       0       0       0
  2901 ;;      Locals:         0       0       0       0       0       0       0
  2902 ;;      Temps:          0       0       0       0       0       0       0
  2903 ;;      Totals:         0       0       0       0       0       0       0
  2904 ;;Total ram usage:        0 bytes
  2905 ;; Hardware stack levels used: 1
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_fputc
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text6
  2914   00666E                     __ptext6:
  2915                           	callstack 0
  2916   00666E                     _putch:
  2917                           	callstack 26
  2918   00666E  0012               	return		;funcret
  2919   006670                     __end_of_putch:
  2920                           	callstack 0
  2921                           
  2922 ;; *************** function _abs *****************
  2923 ;; Defined at:
  2924 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  a               2    6[COMRAM] int 
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;		None
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  2    6[COMRAM] int 
  2931 ;; Registers used:
  2932 ;;		wreg, status,2, status,0
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2938 ;;      Params:         2       0       0       0       0       0       0
  2939 ;;      Locals:         0       0       0       0       0       0       0
  2940 ;;      Temps:          2       0       0       0       0       0       0
  2941 ;;      Totals:         4       0       0       0       0       0       0
  2942 ;;Total ram usage:        4 bytes
  2943 ;; Hardware stack levels used: 1
  2944 ;; This function calls:
  2945 ;;		Nothing
  2946 ;; This function is called by:
  2947 ;;		_vfpfcnvrt
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text7
  2952   006530                     __ptext7:
  2953                           	callstack 0
  2954   006530                     _abs:
  2955                           	callstack 27
  2956   006530  BE08               	btfsc	(abs@a+1)^0,7,c
  2957   006532  EF9D  F032         	goto	u6501
  2958   006536  EF9F  F032         	goto	u6500
  2959   00653A                     u6501:
  2960   00653A  EFA5  F032         	goto	l1545
  2961   00653E                     u6500:
  2962   00653E  C007  F007         	movff	abs@a,?_abs
  2963   006542  C008  F008         	movff	abs@a+1,?_abs+1
  2964   006546  EFB1  F032         	goto	l1548
  2965   00654A                     l1545:
  2966   00654A  C007  F009         	movff	abs@a,??_abs
  2967   00654E  C008  F00A         	movff	abs@a+1,??_abs+1
  2968   006552  1E09               	comf	??_abs^0,f,c
  2969   006554  1E0A               	comf	(??_abs+1)^0,f,c
  2970   006556  4A09               	infsnz	??_abs^0,f,c
  2971   006558  2A0A               	incf	(??_abs+1)^0,f,c
  2972   00655A  C009  F007         	movff	??_abs,?_abs
  2973   00655E  C00A  F008         	movff	??_abs+1,?_abs+1
  2974   006562                     l1548:
  2975   006562  0012               	return		;funcret
  2976   006564                     __end_of_abs:
  2977                           	callstack 0
  2978                           
  2979 ;; *************** function ___awmod *****************
  2980 ;; Defined at:
  2981 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  dividend        2    0[COMRAM] int 
  2984 ;;  divisor         2    2[COMRAM] int 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  sign            1    5[COMRAM] unsigned char 
  2987 ;;  counter         1    4[COMRAM] unsigned char 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  2    0[COMRAM] int 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2, status,0
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2997 ;;      Params:         4       0       0       0       0       0       0
  2998 ;;      Locals:         2       0       0       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0
  3000 ;;      Totals:         6       0       0       0       0       0       0
  3001 ;;Total ram usage:        6 bytes
  3002 ;; Hardware stack levels used: 1
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_vfpfcnvrt
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text8
  3011   005E28                     __ptext8:
  3012                           	callstack 0
  3013   005E28                     ___awmod:
  3014                           	callstack 27
  3015   005E28  6A06               	clrf	___awmod@sign^0,c
  3016   005E2A  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  3017   005E2C  EF1C  F02F         	goto	u6400
  3018   005E30  EF1A  F02F         	goto	u6401
  3019   005E34                     u6401:
  3020   005E34  EF22  F02F         	goto	l4983
  3021   005E38                     u6400:
  3022   005E38  6C01               	negf	___awmod@dividend^0,c
  3023   005E3A  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3024   005E3C  B0D8               	btfsc	status,0,c
  3025   005E3E  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3026   005E40  0E01               	movlw	1
  3027   005E42  6E06               	movwf	___awmod@sign^0,c
  3028   005E44                     l4983:
  3029   005E44  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  3030   005E46  EF29  F02F         	goto	u6410
  3031   005E4A  EF27  F02F         	goto	u6411
  3032   005E4E                     u6411:
  3033   005E4E  EF2D  F02F         	goto	l4987
  3034   005E52                     u6410:
  3035   005E52  6C03               	negf	___awmod@divisor^0,c
  3036   005E54  1E04               	comf	(___awmod@divisor+1)^0,f,c
  3037   005E56  B0D8               	btfsc	status,0,c
  3038   005E58  2A04               	incf	(___awmod@divisor+1)^0,f,c
  3039   005E5A                     l4987:
  3040   005E5A  5003               	movf	___awmod@divisor^0,w,c
  3041   005E5C  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  3042   005E5E  B4D8               	btfsc	status,2,c
  3043   005E60  EF34  F02F         	goto	u6421
  3044   005E64  EF36  F02F         	goto	u6420
  3045   005E68                     u6421:
  3046   005E68  EF5A  F02F         	goto	l5003
  3047   005E6C                     u6420:
  3048   005E6C  0E01               	movlw	1
  3049   005E6E  6E05               	movwf	___awmod@counter^0,c
  3050   005E70  EF3E  F02F         	goto	l4993
  3051   005E74                     l4991:
  3052   005E74  90D8               	bcf	status,0,c
  3053   005E76  3603               	rlcf	___awmod@divisor^0,f,c
  3054   005E78  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  3055   005E7A  2A05               	incf	___awmod@counter^0,f,c
  3056   005E7C                     l4993:
  3057   005E7C  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3058   005E7E  EF43  F02F         	goto	u6431
  3059   005E82  EF45  F02F         	goto	u6430
  3060   005E86                     u6431:
  3061   005E86  EF3A  F02F         	goto	l4991
  3062   005E8A                     u6430:
  3063   005E8A                     l4995:
  3064   005E8A  5003               	movf	___awmod@divisor^0,w,c
  3065   005E8C  5C01               	subwf	___awmod@dividend^0,w,c
  3066   005E8E  5004               	movf	(___awmod@divisor+1)^0,w,c
  3067   005E90  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  3068   005E92  A0D8               	btfss	status,0,c
  3069   005E94  EF4E  F02F         	goto	u6441
  3070   005E98  EF50  F02F         	goto	u6440
  3071   005E9C                     u6441:
  3072   005E9C  EF54  F02F         	goto	l4999
  3073   005EA0                     u6440:
  3074   005EA0  5003               	movf	___awmod@divisor^0,w,c
  3075   005EA2  5E01               	subwf	___awmod@dividend^0,f,c
  3076   005EA4  5004               	movf	(___awmod@divisor+1)^0,w,c
  3077   005EA6  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  3078   005EA8                     l4999:
  3079   005EA8  90D8               	bcf	status,0,c
  3080   005EAA  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  3081   005EAC  3203               	rrcf	___awmod@divisor^0,f,c
  3082   005EAE  2E05               	decfsz	___awmod@counter^0,f,c
  3083   005EB0  EF45  F02F         	goto	l4995
  3084   005EB4                     l5003:
  3085   005EB4  5006               	movf	___awmod@sign^0,w,c
  3086   005EB6  B4D8               	btfsc	status,2,c
  3087   005EB8  EF60  F02F         	goto	u6451
  3088   005EBC  EF62  F02F         	goto	u6450
  3089   005EC0                     u6451:
  3090   005EC0  EF66  F02F         	goto	l5007
  3091   005EC4                     u6450:
  3092   005EC4  6C01               	negf	___awmod@dividend^0,c
  3093   005EC6  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3094   005EC8  B0D8               	btfsc	status,0,c
  3095   005ECA  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3096   005ECC                     l5007:
  3097   005ECC  C001  F001         	movff	___awmod@dividend,?___awmod
  3098   005ED0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3099   005ED4  0012               	return		;funcret
  3100   005ED6                     __end_of___awmod:
  3101                           	callstack 0
  3102                           
  3103 ;; *************** function ___awdiv *****************
  3104 ;; Defined at:
  3105 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  dividend        2    0[COMRAM] int 
  3108 ;;  divisor         2    2[COMRAM] int 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;  quotient        2    6[COMRAM] int 
  3111 ;;  sign            1    5[COMRAM] unsigned char 
  3112 ;;  counter         1    4[COMRAM] unsigned char 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  2    0[COMRAM] int 
  3115 ;; Registers used:
  3116 ;;		wreg, status,2, status,0
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3122 ;;      Params:         4       0       0       0       0       0       0
  3123 ;;      Locals:         4       0       0       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0
  3125 ;;      Totals:         8       0       0       0       0       0       0
  3126 ;;Total ram usage:        8 bytes
  3127 ;; Hardware stack levels used: 1
  3128 ;; This function calls:
  3129 ;;		Nothing
  3130 ;; This function is called by:
  3131 ;;		_vfpfcnvrt
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           	psect	text9
  3136   005B28                     __ptext9:
  3137                           	callstack 0
  3138   005B28                     ___awdiv:
  3139                           	callstack 27
  3140   005B28  6A06               	clrf	___awdiv@sign^0,c
  3141   005B2A  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  3142   005B2C  EF9C  F02D         	goto	u6340
  3143   005B30  EF9A  F02D         	goto	u6341
  3144   005B34                     u6341:
  3145   005B34  EFA2  F02D         	goto	l4939
  3146   005B38                     u6340:
  3147   005B38  6C03               	negf	___awdiv@divisor^0,c
  3148   005B3A  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  3149   005B3C  B0D8               	btfsc	status,0,c
  3150   005B3E  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  3151   005B40  0E01               	movlw	1
  3152   005B42  6E06               	movwf	___awdiv@sign^0,c
  3153   005B44                     l4939:
  3154   005B44  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  3155   005B46  EFA9  F02D         	goto	u6350
  3156   005B4A  EFA7  F02D         	goto	u6351
  3157   005B4E                     u6351:
  3158   005B4E  EFAF  F02D         	goto	l4945
  3159   005B52                     u6350:
  3160   005B52  6C01               	negf	___awdiv@dividend^0,c
  3161   005B54  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  3162   005B56  B0D8               	btfsc	status,0,c
  3163   005B58  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  3164   005B5A  0E01               	movlw	1
  3165   005B5C  1A06               	xorwf	___awdiv@sign^0,f,c
  3166   005B5E                     l4945:
  3167   005B5E  0E00               	movlw	0
  3168   005B60  6E08               	movwf	(___awdiv@quotient+1)^0,c
  3169   005B62  0E00               	movlw	0
  3170   005B64  6E07               	movwf	___awdiv@quotient^0,c
  3171   005B66  5003               	movf	___awdiv@divisor^0,w,c
  3172   005B68  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  3173   005B6A  B4D8               	btfsc	status,2,c
  3174   005B6C  EFBA  F02D         	goto	u6361
  3175   005B70  EFBC  F02D         	goto	u6360
  3176   005B74                     u6361:
  3177   005B74  EFE4  F02D         	goto	l4967
  3178   005B78                     u6360:
  3179   005B78  0E01               	movlw	1
  3180   005B7A  6E05               	movwf	___awdiv@counter^0,c
  3181   005B7C  EFC4  F02D         	goto	l4953
  3182   005B80                     l4951:
  3183   005B80  90D8               	bcf	status,0,c
  3184   005B82  3603               	rlcf	___awdiv@divisor^0,f,c
  3185   005B84  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  3186   005B86  2A05               	incf	___awdiv@counter^0,f,c
  3187   005B88                     l4953:
  3188   005B88  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  3189   005B8A  EFC9  F02D         	goto	u6371
  3190   005B8E  EFCB  F02D         	goto	u6370
  3191   005B92                     u6371:
  3192   005B92  EFC0  F02D         	goto	l4951
  3193   005B96                     u6370:
  3194   005B96                     l4955:
  3195   005B96  90D8               	bcf	status,0,c
  3196   005B98  3607               	rlcf	___awdiv@quotient^0,f,c
  3197   005B9A  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  3198   005B9C  5003               	movf	___awdiv@divisor^0,w,c
  3199   005B9E  5C01               	subwf	___awdiv@dividend^0,w,c
  3200   005BA0  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3201   005BA2  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  3202   005BA4  A0D8               	btfss	status,0,c
  3203   005BA6  EFD7  F02D         	goto	u6381
  3204   005BAA  EFD9  F02D         	goto	u6380
  3205   005BAE                     u6381:
  3206   005BAE  EFDE  F02D         	goto	l4963
  3207   005BB2                     u6380:
  3208   005BB2  5003               	movf	___awdiv@divisor^0,w,c
  3209   005BB4  5E01               	subwf	___awdiv@dividend^0,f,c
  3210   005BB6  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3211   005BB8  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  3212   005BBA  8007               	bsf	___awdiv@quotient^0,0,c
  3213   005BBC                     l4963:
  3214   005BBC  90D8               	bcf	status,0,c
  3215   005BBE  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  3216   005BC0  3203               	rrcf	___awdiv@divisor^0,f,c
  3217   005BC2  2E05               	decfsz	___awdiv@counter^0,f,c
  3218   005BC4  EFCB  F02D         	goto	l4955
  3219   005BC8                     l4967:
  3220   005BC8  5006               	movf	___awdiv@sign^0,w,c
  3221   005BCA  B4D8               	btfsc	status,2,c
  3222   005BCC  EFEA  F02D         	goto	u6391
  3223   005BD0  EFEC  F02D         	goto	u6390
  3224   005BD4                     u6391:
  3225   005BD4  EFF0  F02D         	goto	l4971
  3226   005BD8                     u6390:
  3227   005BD8  6C07               	negf	___awdiv@quotient^0,c
  3228   005BDA  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3229   005BDC  B0D8               	btfsc	status,0,c
  3230   005BDE  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3231   005BE0                     l4971:
  3232   005BE0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3233   005BE4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3234   005BE8  0012               	return		;funcret
  3235   005BEA                     __end_of___awdiv:
  3236                           	callstack 0
  3237                           
  3238 ;; *************** function _f_write *****************
  3239 ;; Defined at:
  3240 ;;		line 2691 in file "ff.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  fp              2  108[COMRAM] PTR struct .
  3243 ;;		 -> Fil(32), 
  3244 ;;  buff            2  110[COMRAM] PTR const void 
  3245 ;;		 -> main@buffer(64), 
  3246 ;;  btw             2  112[COMRAM] unsigned short 
  3247 ;;  bw              2  114[COMRAM] PTR unsigned short 
  3248 ;;		 -> main@bw(2), 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;  clst            4   22[BANK0 ] unsigned long 
  3251 ;;  sect            4   18[BANK0 ] unsigned long 
  3252 ;;  wcnt            2   26[BANK0 ] unsigned short 
  3253 ;;  cc              2   16[BANK0 ] unsigned short 
  3254 ;;  wbuff           2   13[BANK0 ] PTR const unsigned char 
  3255 ;;		 -> main@buffer(64), 
  3256 ;;  csect           1   15[BANK0 ] unsigned char 
  3257 ;;  res             1   12[BANK0 ] enum E95
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      enum E95
  3260 ;; Registers used:
  3261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3267 ;;      Params:         8       0       0       0       0       0       0
  3268 ;;      Locals:         0      16       0       0       0       0       0
  3269 ;;      Temps:          0      12       0       0       0       0       0
  3270 ;;      Totals:         8      28       0       0       0       0       0
  3271 ;;Total ram usage:       36 bytes
  3272 ;; Hardware stack levels used: 1
  3273 ;; Hardware stack levels required when called: 10
  3274 ;; This function calls:
  3275 ;;		_clust2sect
  3276 ;;		_create_chain
  3277 ;;		_disk_write
  3278 ;;		_mem_cpy
  3279 ;;		_move_window
  3280 ;;		_sync_window
  3281 ;;		_validate
  3282 ;; This function is called by:
  3283 ;;		_main
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           	psect	text10
  3288   001190                     __ptext10:
  3289                           	callstack 0
  3290   001190                     _f_write:
  3291                           	callstack 20
  3292   001190                     
  3293                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  3294   001190  C06F  F08D         	movff	f_write@buff,f_write@wbuff
  3295   001194  C070  F08E         	movff	f_write@buff+1,f_write@wbuff+1
  3296   001198                     
  3297                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  3298   001198  C073  FFD9         	movff	f_write@bw,fsr2l
  3299   00119C  C074  FFDA         	movff	f_write@bw+1,fsr2h
  3300   0011A0  6ADE               	clrf	postinc2,c
  3301   0011A2  6ADD               	clrf	postdec2,c
  3302   0011A4                     
  3303                           ;ff.c: 2707:  res = validate(fp);
  3304   0011A4  C06D  F002         	movff	f_write@fp,validate@obj
  3305   0011A8  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  3306   0011AC  EC6A  F02C         	call	_validate	;wreg free
  3307   0011B0  0100               	movlb	0	; () banked
  3308   0011B2  6F8C               	movwf	f_write@res& (0+255),b
  3309   0011B4                     
  3310                           ; BSR set to: 0
  3311                           ;ff.c: 2708:  if (res != FR_OK) return res;
  3312   0011B4  518C               	movf	f_write@res& (0+255),w,b
  3313   0011B6  B4D8               	btfsc	status,2,c
  3314   0011B8  EFE0  F008         	goto	u9321
  3315   0011BC  EFE2  F008         	goto	u9320
  3316   0011C0                     u9321:
  3317   0011C0  EFE4  F008         	goto	l6593
  3318   0011C4                     u9320:
  3319   0011C4  EF0B  F00D         	goto	l702
  3320   0011C8                     l6593:
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;ff.c: 2709:  if (fp->err)
  3324   0011C8  EE20 F005          	lfsr	2,5
  3325   0011CC  506D               	movf	f_write@fp^0,w,c
  3326   0011CE  26D9               	addwf	fsr2l,f,c
  3327   0011D0  506E               	movf	(f_write@fp+1)^0,w,c
  3328   0011D2  22DA               	addwfc	fsr2h,f,c
  3329   0011D4  50DF               	movf	indf2,w,c
  3330   0011D6  B4D8               	btfsc	status,2,c
  3331   0011D8  EFF0  F008         	goto	u9331
  3332   0011DC  EFF2  F008         	goto	u9330
  3333   0011E0                     u9331:
  3334   0011E0  EFF4  F008         	goto	l6597
  3335   0011E4                     u9330:
  3336   0011E4  EF0B  F00D         	goto	l702
  3337   0011E8                     l6597:
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  3341   0011E8  EE20 F004          	lfsr	2,4
  3342   0011EC  506D               	movf	f_write@fp^0,w,c
  3343   0011EE  26D9               	addwf	fsr2l,f,c
  3344   0011F0  506E               	movf	(f_write@fp+1)^0,w,c
  3345   0011F2  22DA               	addwfc	fsr2h,f,c
  3346   0011F4  B2DF               	btfsc	indf2,1,c
  3347   0011F6  EFFF  F008         	goto	u9341
  3348   0011FA  EF01  F009         	goto	u9340
  3349   0011FE                     u9341:
  3350   0011FE  EF03  F009         	goto	l6601
  3351   001202                     u9340:
  3352   001202  EF0B  F00D         	goto	l702
  3353   001206                     l6601:
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  3357   001206  EE20 F006          	lfsr	2,6
  3358   00120A  506D               	movf	f_write@fp^0,w,c
  3359   00120C  26D9               	addwf	fsr2l,f,c
  3360   00120E  506E               	movf	(f_write@fp+1)^0,w,c
  3361   001210  22DA               	addwfc	fsr2h,f,c
  3362   001212  EE10 F006          	lfsr	1,6
  3363   001216  506D               	movf	f_write@fp^0,w,c
  3364   001218  26E1               	addwf	fsr1l,f,c
  3365   00121A  506E               	movf	(f_write@fp+1)^0,w,c
  3366   00121C  22E2               	addwfc	fsr1h,f,c
  3367   00121E  CFE6 F084          	movff	postinc1,??_f_write+4
  3368   001222  CFE6 F085          	movff	postinc1,??_f_write+5
  3369   001226  CFE6 F086          	movff	postinc1,??_f_write+6
  3370   00122A  CFE6 F087          	movff	postinc1,??_f_write+7
  3371   00122E  5071               	movf	f_write@btw^0,w,c
  3372   001230  2584               	addwf	(??_f_write+4)& (0+255),w,b
  3373   001232  6F88               	movwf	(??_f_write+8)& (0+255),b
  3374   001234  5072               	movf	(f_write@btw+1)^0,w,c
  3375   001236  2185               	addwfc	(??_f_write+5)& (0+255),w,b
  3376   001238  6F89               	movwf	(??_f_write+9)& (0+255),b
  3377   00123A  0E00               	movlw	0
  3378   00123C  2186               	addwfc	(??_f_write+6)& (0+255),w,b
  3379   00123E  6F8A               	movwf	(??_f_write+10)& (0+255),b
  3380   001240  0E00               	movlw	0
  3381   001242  2187               	addwfc	(??_f_write+7)& (0+255),w,b
  3382   001244  6F8B               	movwf	(??_f_write+11)& (0+255),b
  3383   001246  50DE               	movf	postinc2,w,c
  3384   001248  5D88               	subwf	(??_f_write+8)& (0+255),w,b
  3385   00124A  50DE               	movf	postinc2,w,c
  3386   00124C  5989               	subwfb	(??_f_write+9)& (0+255),w,b
  3387   00124E  50DE               	movf	postinc2,w,c
  3388   001250  598A               	subwfb	(??_f_write+10)& (0+255),w,b
  3389   001252  50DE               	movf	postinc2,w,c
  3390   001254  598B               	subwfb	(??_f_write+11)& (0+255),w,b
  3391   001256  B0D8               	btfsc	status,0,c
  3392   001258  EF30  F009         	goto	u9351
  3393   00125C  EF32  F009         	goto	u9350
  3394   001260                     u9351:
  3395   001260  EFCB  F00C         	goto	l6713
  3396   001264                     u9350:
  3397   001264                     
  3398                           ; BSR set to: 0
  3399   001264  0E00               	movlw	0
  3400   001266  6E72               	movwf	(f_write@btw+1)^0,c
  3401   001268  0E00               	movlw	0
  3402   00126A  6E71               	movwf	f_write@btw^0,c
  3403   00126C  EFCB  F00C         	goto	l6713
  3404   001270                     l6605:
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  3408   001270  EE20 F006          	lfsr	2,6
  3409   001274  506D               	movf	f_write@fp^0,w,c
  3410   001276  26D9               	addwf	fsr2l,f,c
  3411   001278  506E               	movf	(f_write@fp+1)^0,w,c
  3412   00127A  22DA               	addwfc	fsr2h,f,c
  3413   00127C  0EFF               	movlw	255
  3414   00127E  14DE               	andwf	postinc2,w,c
  3415   001280  6F80               	movwf	??_f_write& (0+255),b
  3416   001282  0E01               	movlw	1
  3417   001284  14DE               	andwf	postinc2,w,c
  3418   001286  6F81               	movwf	(??_f_write+1)& (0+255),b
  3419   001288  0E00               	movlw	0
  3420   00128A  14DE               	andwf	postinc2,w,c
  3421   00128C  6F82               	movwf	(??_f_write+2)& (0+255),b
  3422   00128E  0E00               	movlw	0
  3423   001290  14DE               	andwf	postinc2,w,c
  3424   001292  6F83               	movwf	(??_f_write+3)& (0+255),b
  3425   001294  5180               	movf	??_f_write& (0+255),w,b
  3426   001296  1181               	iorwf	(??_f_write+1)& (0+255),w,b
  3427   001298  1182               	iorwf	(??_f_write+2)& (0+255),w,b
  3428   00129A  1183               	iorwf	(??_f_write+3)& (0+255),w,b
  3429   00129C  A4D8               	btfss	status,2,c
  3430   00129E  EF53  F009         	goto	u9361
  3431   0012A2  EF55  F009         	goto	u9360
  3432   0012A6                     u9361:
  3433   0012A6  EF20  F00C         	goto	l6689
  3434   0012AA                     u9360:
  3435   0012AA                     
  3436                           ; BSR set to: 0
  3437                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  3438   0012AA  EE20 F006          	lfsr	2,6
  3439   0012AE  506D               	movf	f_write@fp^0,w,c
  3440   0012B0  26D9               	addwf	fsr2l,f,c
  3441   0012B2  506E               	movf	(f_write@fp+1)^0,w,c
  3442   0012B4  22DA               	addwfc	fsr2h,f,c
  3443   0012B6  CFDE F080          	movff	postinc2,??_f_write
  3444   0012BA  CFDE F081          	movff	postinc2,??_f_write+1
  3445   0012BE  CFDE F082          	movff	postinc2,??_f_write+2
  3446   0012C2  CFDE F083          	movff	postinc2,??_f_write+3
  3447   0012C6  0E0A               	movlw	10
  3448   0012C8  EF6B  F009         	goto	u9370
  3449   0012CC                     u9375:
  3450   0012CC  90D8               	bcf	status,0,c
  3451   0012CE  3383               	rrcf	(??_f_write+3)& (0+255),f,b
  3452   0012D0  3382               	rrcf	(??_f_write+2)& (0+255),f,b
  3453   0012D2  3381               	rrcf	(??_f_write+1)& (0+255),f,b
  3454   0012D4  3380               	rrcf	??_f_write& (0+255),f,b
  3455   0012D6                     u9370:
  3456   0012D6  2EE8               	decfsz	wreg,f,c
  3457   0012D8  EF66  F009         	goto	u9375
  3458   0012DC  C06D  FFD9         	movff	f_write@fp,fsr2l
  3459   0012E0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3460   0012E4  EE10 F002          	lfsr	1,2
  3461   0012E8  50DE               	movf	postinc2,w,c
  3462   0012EA  26E1               	addwf	fsr1l,f,c
  3463   0012EC  50DD               	movf	postdec2,w,c
  3464   0012EE  22E2               	addwfc	fsr1h,f,c
  3465   0012F0  50E7               	movf	indf1,w,c
  3466   0012F2  6F84               	movwf	(??_f_write+4)& (0+255),b
  3467   0012F4  0584               	decf	(??_f_write+4)& (0+255),w,b
  3468   0012F6  1580               	andwf	??_f_write& (0+255),w,b
  3469   0012F8  6F8F               	movwf	f_write@csect& (0+255),b
  3470   0012FA                     
  3471                           ; BSR set to: 0
  3472                           ;ff.c: 2719:    if (!csect) {
  3473   0012FA  518F               	movf	f_write@csect& (0+255),w,b
  3474   0012FC  A4D8               	btfss	status,2,c
  3475   0012FE  EF83  F009         	goto	u9381
  3476   001302  EF85  F009         	goto	u9380
  3477   001306                     u9381:
  3478   001306  EF53  F00A         	goto	l6641
  3479   00130A                     u9380:
  3480   00130A                     
  3481                           ; BSR set to: 0
  3482                           ;ff.c: 2720:     if (fp->fptr == 0) {
  3483   00130A  EE20 F006          	lfsr	2,6
  3484   00130E  506D               	movf	f_write@fp^0,w,c
  3485   001310  26D9               	addwf	fsr2l,f,c
  3486   001312  506E               	movf	(f_write@fp+1)^0,w,c
  3487   001314  22DA               	addwfc	fsr2h,f,c
  3488   001316  50DE               	movf	postinc2,w,c
  3489   001318  10DE               	iorwf	postinc2,w,c
  3490   00131A  10DE               	iorwf	postinc2,w,c
  3491   00131C  10DE               	iorwf	postinc2,w,c
  3492   00131E  A4D8               	btfss	status,2,c
  3493   001320  EF94  F009         	goto	u9391
  3494   001324  EF96  F009         	goto	u9390
  3495   001328                     u9391:
  3496   001328  EFCB  F009         	goto	l6619
  3497   00132C                     u9390:
  3498   00132C                     
  3499                           ; BSR set to: 0
  3500                           ;ff.c: 2721:      clst = fp->sclust;
  3501   00132C  EE20 F00E          	lfsr	2,14
  3502   001330  506D               	movf	f_write@fp^0,w,c
  3503   001332  26D9               	addwf	fsr2l,f,c
  3504   001334  506E               	movf	(f_write@fp+1)^0,w,c
  3505   001336  22DA               	addwfc	fsr2h,f,c
  3506   001338  CFDE F096          	movff	postinc2,f_write@clst
  3507   00133C  CFDE F097          	movff	postinc2,f_write@clst+1
  3508   001340  CFDE F098          	movff	postinc2,f_write@clst+2
  3509   001344  CFDE F099          	movff	postinc2,f_write@clst+3
  3510   001348                     
  3511                           ; BSR set to: 0
  3512                           ;ff.c: 2722:      if (clst == 0)
  3513   001348  5196               	movf	f_write@clst& (0+255),w,b
  3514   00134A  1197               	iorwf	(f_write@clst+1)& (0+255),w,b
  3515   00134C  1198               	iorwf	(f_write@clst+2)& (0+255),w,b
  3516   00134E  1199               	iorwf	(f_write@clst+3)& (0+255),w,b
  3517   001350  A4D8               	btfss	status,2,c
  3518   001352  EFAD  F009         	goto	u9401
  3519   001356  EFAF  F009         	goto	u9400
  3520   00135A                     u9401:
  3521   00135A  EFEB  F009         	goto	l6621
  3522   00135E                     u9400:
  3523   00135E                     
  3524                           ; BSR set to: 0
  3525                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  3526   00135E  C06D  FFD9         	movff	f_write@fp,fsr2l
  3527   001362  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3528   001366  CFDE F056          	movff	postinc2,create_chain@fs
  3529   00136A  CFDD F057          	movff	postdec2,create_chain@fs+1
  3530   00136E  0E00               	movlw	0
  3531   001370  6E58               	movwf	create_chain@clst^0,c
  3532   001372  0E00               	movlw	0
  3533   001374  6E59               	movwf	(create_chain@clst+1)^0,c
  3534   001376  0E00               	movlw	0
  3535   001378  6E5A               	movwf	(create_chain@clst+2)^0,c
  3536   00137A  0E00               	movlw	0
  3537   00137C  6E5B               	movwf	(create_chain@clst+3)^0,c
  3538   00137E  EC3D  F01C         	call	_create_chain	;wreg free
  3539   001382  C056  F096         	movff	?_create_chain,f_write@clst
  3540   001386  C057  F097         	movff	?_create_chain+1,f_write@clst+1
  3541   00138A  C058  F098         	movff	?_create_chain+2,f_write@clst+2
  3542   00138E  C059  F099         	movff	?_create_chain+3,f_write@clst+3
  3543   001392  EFEB  F009         	goto	l6621
  3544   001396                     l6619:
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  3548   001396  C06D  FFD9         	movff	f_write@fp,fsr2l
  3549   00139A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3550   00139E  CFDE F056          	movff	postinc2,create_chain@fs
  3551   0013A2  CFDD F057          	movff	postdec2,create_chain@fs+1
  3552   0013A6  EE20 F012          	lfsr	2,18
  3553   0013AA  506D               	movf	f_write@fp^0,w,c
  3554   0013AC  26D9               	addwf	fsr2l,f,c
  3555   0013AE  506E               	movf	(f_write@fp+1)^0,w,c
  3556   0013B0  22DA               	addwfc	fsr2h,f,c
  3557   0013B2  CFDE F058          	movff	postinc2,create_chain@clst
  3558   0013B6  CFDE F059          	movff	postinc2,create_chain@clst+1
  3559   0013BA  CFDE F05A          	movff	postinc2,create_chain@clst+2
  3560   0013BE  CFDE F05B          	movff	postinc2,create_chain@clst+3
  3561   0013C2  EC3D  F01C         	call	_create_chain	;wreg free
  3562   0013C6  C056  F096         	movff	?_create_chain,f_write@clst
  3563   0013CA  C057  F097         	movff	?_create_chain+1,f_write@clst+1
  3564   0013CE  C058  F098         	movff	?_create_chain+2,f_write@clst+2
  3565   0013D2  C059  F099         	movff	?_create_chain+3,f_write@clst+3
  3566   0013D6                     l6621:
  3567                           
  3568                           ;ff.c: 2732:     if (clst == 0) break;
  3569   0013D6  0100               	movlb	0	; () banked
  3570   0013D8  5196               	movf	f_write@clst& (0+255),w,b
  3571   0013DA  1197               	iorwf	(f_write@clst+1)& (0+255),w,b
  3572   0013DC  1198               	iorwf	(f_write@clst+2)& (0+255),w,b
  3573   0013DE  1199               	iorwf	(f_write@clst+3)& (0+255),w,b
  3574   0013E0  A4D8               	btfss	status,2,c
  3575   0013E2  EFF5  F009         	goto	u9411
  3576   0013E6  EFF7  F009         	goto	u9410
  3577   0013EA                     u9411:
  3578   0013EA  EFF9  F009         	goto	l6625
  3579   0013EE                     u9410:
  3580   0013EE  EFD4  F00C         	goto	l6715
  3581   0013F2                     l6625:
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  3585   0013F2  0596               	decf	f_write@clst& (0+255),w,b
  3586   0013F4  1197               	iorwf	(f_write@clst+1)& (0+255),w,b
  3587   0013F6  1198               	iorwf	(f_write@clst+2)& (0+255),w,b
  3588   0013F8  1199               	iorwf	(f_write@clst+3)& (0+255),w,b
  3589   0013FA  A4D8               	btfss	status,2,c
  3590   0013FC  EF02  F00A         	goto	u9421
  3591   001400  EF04  F00A         	goto	u9420
  3592   001404                     u9421:
  3593   001404  EF0E  F00A         	goto	l6631
  3594   001408                     u9420:
  3595   001408                     
  3596                           ; BSR set to: 0
  3597   001408  EE20 F005          	lfsr	2,5
  3598   00140C  506D               	movf	f_write@fp^0,w,c
  3599   00140E  26D9               	addwf	fsr2l,f,c
  3600   001410  506E               	movf	(f_write@fp+1)^0,w,c
  3601   001412  22DA               	addwfc	fsr2h,f,c
  3602   001414  0E02               	movlw	2
  3603   001416  6EDF               	movwf	indf2,c
  3604   001418  EF0B  F00D         	goto	l702
  3605   00141C                     l6631:
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  3609   00141C  2996               	incf	f_write@clst& (0+255),w,b
  3610   00141E  E10A               	bnz	u9431
  3611   001420  2997               	incf	(f_write@clst+1)& (0+255),w,b
  3612   001422  E108               	bnz	u9431
  3613   001424  2998               	incf	(f_write@clst+2)& (0+255),w,b
  3614   001426  E106               	bnz	u9431
  3615   001428  2999               	incf	(f_write@clst+3)& (0+255),w,b
  3616   00142A  A4D8               	btfss	status,2,c
  3617   00142C  EF1A  F00A         	goto	u9431
  3618   001430  EF1C  F00A         	goto	u9430
  3619   001434                     u9431:
  3620   001434  EF26  F00A         	goto	l6637
  3621   001438                     u9430:
  3622   001438                     
  3623                           ; BSR set to: 0
  3624   001438  EE20 F005          	lfsr	2,5
  3625   00143C  506D               	movf	f_write@fp^0,w,c
  3626   00143E  26D9               	addwf	fsr2l,f,c
  3627   001440  506E               	movf	(f_write@fp+1)^0,w,c
  3628   001442  22DA               	addwfc	fsr2h,f,c
  3629   001444  0E01               	movlw	1
  3630   001446  6EDF               	movwf	indf2,c
  3631   001448  EF0B  F00D         	goto	l702
  3632   00144C                     l6637:
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;ff.c: 2735:     fp->clust = clst;
  3636   00144C  EE20 F012          	lfsr	2,18
  3637   001450  506D               	movf	f_write@fp^0,w,c
  3638   001452  26D9               	addwf	fsr2l,f,c
  3639   001454  506E               	movf	(f_write@fp+1)^0,w,c
  3640   001456  22DA               	addwfc	fsr2h,f,c
  3641   001458  C096  FFDE         	movff	f_write@clst,postinc2
  3642   00145C  C097  FFDE         	movff	f_write@clst+1,postinc2
  3643   001460  C098  FFDE         	movff	f_write@clst+2,postinc2
  3644   001464  C099  FFDE         	movff	f_write@clst+3,postinc2
  3645                           
  3646                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  3647   001468  EE20 F00E          	lfsr	2,14
  3648   00146C  506D               	movf	f_write@fp^0,w,c
  3649   00146E  26D9               	addwf	fsr2l,f,c
  3650   001470  506E               	movf	(f_write@fp+1)^0,w,c
  3651   001472  22DA               	addwfc	fsr2h,f,c
  3652   001474  50DE               	movf	postinc2,w,c
  3653   001476  10DE               	iorwf	postinc2,w,c
  3654   001478  10DE               	iorwf	postinc2,w,c
  3655   00147A  10DE               	iorwf	postinc2,w,c
  3656   00147C  A4D8               	btfss	status,2,c
  3657   00147E  EF43  F00A         	goto	u9441
  3658   001482  EF45  F00A         	goto	u9440
  3659   001486                     u9441:
  3660   001486  EF53  F00A         	goto	l6641
  3661   00148A                     u9440:
  3662   00148A                     
  3663                           ; BSR set to: 0
  3664   00148A  EE20 F00E          	lfsr	2,14
  3665   00148E  506D               	movf	f_write@fp^0,w,c
  3666   001490  26D9               	addwf	fsr2l,f,c
  3667   001492  506E               	movf	(f_write@fp+1)^0,w,c
  3668   001494  22DA               	addwfc	fsr2h,f,c
  3669   001496  C096  FFDE         	movff	f_write@clst,postinc2
  3670   00149A  C097  FFDE         	movff	f_write@clst+1,postinc2
  3671   00149E  C098  FFDE         	movff	f_write@clst+2,postinc2
  3672   0014A2  C099  FFDE         	movff	f_write@clst+3,postinc2
  3673   0014A6                     l6641:
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  3677   0014A6  EE20 F016          	lfsr	2,22
  3678   0014AA  506D               	movf	f_write@fp^0,w,c
  3679   0014AC  26D9               	addwf	fsr2l,f,c
  3680   0014AE  506E               	movf	(f_write@fp+1)^0,w,c
  3681   0014B0  22DA               	addwfc	fsr2h,f,c
  3682   0014B2  C06D  FFE1         	movff	f_write@fp,fsr1l
  3683   0014B6  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  3684   0014BA  EE00 F02A          	lfsr	0,42
  3685   0014BE  50E6               	movf	postinc1,w,c
  3686   0014C0  26E9               	addwf	fsr0l,f,c
  3687   0014C2  50E5               	movf	postdec1,w,c
  3688   0014C4  22EA               	addwfc	fsr0h,f,c
  3689   0014C6  50DE               	movf	postinc2,w,c
  3690   0014C8  18EE               	xorwf	postinc0,w,c
  3691   0014CA  E10D               	bnz	u9451
  3692   0014CC  50DE               	movf	postinc2,w,c
  3693   0014CE  18EE               	xorwf	postinc0,w,c
  3694   0014D0  E10A               	bnz	u9451
  3695   0014D2  50DE               	movf	postinc2,w,c
  3696   0014D4  18EE               	xorwf	postinc0,w,c
  3697   0014D6  E107               	bnz	u9451
  3698   0014D8  50DE               	movf	postinc2,w,c
  3699   0014DA  18EE               	xorwf	postinc0,w,c
  3700   0014DC  A4D8               	btfss	status,2,c
  3701   0014DE  EF73  F00A         	goto	u9451
  3702   0014E2  EF75  F00A         	goto	u9450
  3703   0014E6                     u9451:
  3704   0014E6  EF91  F00A         	goto	l6649
  3705   0014EA                     u9450:
  3706   0014EA                     
  3707                           ; BSR set to: 0
  3708   0014EA  C06D  FFD9         	movff	f_write@fp,fsr2l
  3709   0014EE  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3710   0014F2  CFDE F01B          	movff	postinc2,sync_window@fs
  3711   0014F6  CFDD F01C          	movff	postdec2,sync_window@fs+1
  3712   0014FA  EC16  F027         	call	_sync_window	;wreg free
  3713   0014FE  0900               	iorlw	0
  3714   001500  B4D8               	btfsc	status,2,c
  3715   001502  EF85  F00A         	goto	u9461
  3716   001506  EF87  F00A         	goto	u9460
  3717   00150A                     u9461:
  3718   00150A  EF91  F00A         	goto	l6649
  3719   00150E                     u9460:
  3720   00150E                     
  3721                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  3722   00150E  EE20 F005          	lfsr	2,5
  3723   001512  506D               	movf	f_write@fp^0,w,c
  3724   001514  26D9               	addwf	fsr2l,f,c
  3725   001516  506E               	movf	(f_write@fp+1)^0,w,c
  3726   001518  22DA               	addwfc	fsr2h,f,c
  3727   00151A  0E01               	movlw	1
  3728   00151C  6EDF               	movwf	indf2,c
  3729   00151E  EF0B  F00D         	goto	l702
  3730   001522                     l6649:
  3731                           
  3732                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  3733   001522  C06D  FFD9         	movff	f_write@fp,fsr2l
  3734   001526  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3735   00152A  CFDE F00D          	movff	postinc2,clust2sect@fs
  3736   00152E  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  3737   001532  EE20 F012          	lfsr	2,18
  3738   001536  506D               	movf	f_write@fp^0,w,c
  3739   001538  26D9               	addwf	fsr2l,f,c
  3740   00153A  506E               	movf	(f_write@fp+1)^0,w,c
  3741   00153C  22DA               	addwfc	fsr2h,f,c
  3742   00153E  CFDE F00F          	movff	postinc2,clust2sect@clst
  3743   001542  CFDE F010          	movff	postinc2,clust2sect@clst+1
  3744   001546  CFDE F011          	movff	postinc2,clust2sect@clst+2
  3745   00154A  CFDE F012          	movff	postinc2,clust2sect@clst+3
  3746   00154E  EC31  F02D         	call	_clust2sect	;wreg free
  3747   001552  C00D  F092         	movff	?_clust2sect,f_write@sect
  3748   001556  C00E  F093         	movff	?_clust2sect+1,f_write@sect+1
  3749   00155A  C00F  F094         	movff	?_clust2sect+2,f_write@sect+2
  3750   00155E  C010  F095         	movff	?_clust2sect+3,f_write@sect+3
  3751   001562                     
  3752                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  3753   001562  0100               	movlb	0	; () banked
  3754   001564  5192               	movf	f_write@sect& (0+255),w,b
  3755   001566  1193               	iorwf	(f_write@sect+1)& (0+255),w,b
  3756   001568  1194               	iorwf	(f_write@sect+2)& (0+255),w,b
  3757   00156A  1195               	iorwf	(f_write@sect+3)& (0+255),w,b
  3758   00156C  A4D8               	btfss	status,2,c
  3759   00156E  EFBB  F00A         	goto	u9471
  3760   001572  EFBD  F00A         	goto	u9470
  3761   001576                     u9471:
  3762   001576  EFC7  F00A         	goto	l6657
  3763   00157A                     u9470:
  3764   00157A                     
  3765                           ; BSR set to: 0
  3766   00157A  EE20 F005          	lfsr	2,5
  3767   00157E  506D               	movf	f_write@fp^0,w,c
  3768   001580  26D9               	addwf	fsr2l,f,c
  3769   001582  506E               	movf	(f_write@fp+1)^0,w,c
  3770   001584  22DA               	addwfc	fsr2h,f,c
  3771   001586  0E02               	movlw	2
  3772   001588  6EDF               	movwf	indf2,c
  3773   00158A  EF0B  F00D         	goto	l702
  3774   00158E                     l6657:
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;ff.c: 2750:    sect += csect;
  3778   00158E  518F               	movf	f_write@csect& (0+255),w,b
  3779   001590  2792               	addwf	f_write@sect& (0+255),f,b
  3780   001592  0E00               	movlw	0
  3781   001594  2393               	addwfc	(f_write@sect+1)& (0+255),f,b
  3782   001596  2394               	addwfc	(f_write@sect+2)& (0+255),f,b
  3783   001598  2395               	addwfc	(f_write@sect+3)& (0+255),f,b
  3784                           
  3785                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  3786   00159A  C071  F080         	movff	f_write@btw,??_f_write
  3787   00159E  C072  F081         	movff	f_write@btw+1,??_f_write+1
  3788   0015A2  0E09               	movlw	9
  3789   0015A4  6F82               	movwf	(??_f_write+2)& (0+255),b
  3790   0015A6                     u9485:
  3791   0015A6  90D8               	bcf	status,0,c
  3792   0015A8  3381               	rrcf	(??_f_write+1)& (0+255),f,b
  3793   0015AA  3380               	rrcf	??_f_write& (0+255),f,b
  3794   0015AC  2F82               	decfsz	(??_f_write+2)& (0+255),f,b
  3795   0015AE  EFD3  F00A         	goto	u9485
  3796   0015B2  C080  F090         	movff	??_f_write,f_write@cc
  3797   0015B6  C081  F091         	movff	??_f_write+1,f_write@cc+1
  3798                           
  3799                           ;ff.c: 2752:    if (cc) {
  3800   0015BA  5190               	movf	f_write@cc& (0+255),w,b
  3801   0015BC  1191               	iorwf	(f_write@cc+1)& (0+255),w,b
  3802   0015BE  B4D8               	btfsc	status,2,c
  3803   0015C0  EFE4  F00A         	goto	u9491
  3804   0015C4  EFE6  F00A         	goto	u9490
  3805   0015C8                     u9491:
  3806   0015C8  EFC9  F00B         	goto	l6677
  3807   0015CC                     u9490:
  3808   0015CC                     
  3809                           ; BSR set to: 0
  3810                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  3811   0015CC  518F               	movf	f_write@csect& (0+255),w,b
  3812   0015CE  2590               	addwf	f_write@cc& (0+255),w,b
  3813   0015D0  6F80               	movwf	??_f_write& (0+255),b
  3814   0015D2  0E00               	movlw	0
  3815   0015D4  2191               	addwfc	(f_write@cc+1)& (0+255),w,b
  3816   0015D6  6F81               	movwf	(??_f_write+1)& (0+255),b
  3817   0015D8  C06D  FFD9         	movff	f_write@fp,fsr2l
  3818   0015DC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3819   0015E0  EE10 F002          	lfsr	1,2
  3820   0015E4  50DE               	movf	postinc2,w,c
  3821   0015E6  26E1               	addwf	fsr1l,f,c
  3822   0015E8  50DD               	movf	postdec2,w,c
  3823   0015EA  22E2               	addwfc	fsr1h,f,c
  3824   0015EC  50E7               	movf	indf1,w,c
  3825   0015EE  6F82               	movwf	(??_f_write+2)& (0+255),b
  3826   0015F0  6B83               	clrf	(??_f_write+3)& (0+255),b
  3827   0015F2  5180               	movf	??_f_write& (0+255),w,b
  3828   0015F4  5D82               	subwf	(??_f_write+2)& (0+255),w,b
  3829   0015F6  5181               	movf	(??_f_write+1)& (0+255),w,b
  3830   0015F8  5983               	subwfb	(??_f_write+3)& (0+255),w,b
  3831   0015FA  B0D8               	btfsc	status,0,c
  3832   0015FC  EF02  F00B         	goto	u9501
  3833   001600  EF04  F00B         	goto	u9500
  3834   001604                     u9501:
  3835   001604  EF16  F00B         	goto	l6663
  3836   001608                     u9500:
  3837   001608                     
  3838                           ; BSR set to: 0
  3839                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  3840   001608  C06D  FFD9         	movff	f_write@fp,fsr2l
  3841   00160C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3842   001610  EE10 F002          	lfsr	1,2
  3843   001614  50DE               	movf	postinc2,w,c
  3844   001616  26E1               	addwf	fsr1l,f,c
  3845   001618  50DD               	movf	postdec2,w,c
  3846   00161A  22E2               	addwfc	fsr1h,f,c
  3847   00161C  50E7               	movf	indf1,w,c
  3848   00161E  6F80               	movwf	??_f_write& (0+255),b
  3849   001620  518F               	movf	f_write@csect& (0+255),w,b
  3850   001622  5D80               	subwf	??_f_write& (0+255),w,b
  3851   001624  6F90               	movwf	f_write@cc& (0+255),b
  3852   001626  6B91               	clrf	(f_write@cc+1)& (0+255),b
  3853   001628  A0D8               	btfss	status,0,c
  3854   00162A  0791               	decf	(f_write@cc+1)& (0+255),f,b
  3855   00162C                     l6663:
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  3859   00162C  C08D  F011         	movff	f_write@wbuff,disk_write@buff
  3860   001630  C08E  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  3861   001634  C092  F013         	movff	f_write@sect,disk_write@sector
  3862   001638  C093  F014         	movff	f_write@sect+1,disk_write@sector+1
  3863   00163C  C094  F015         	movff	f_write@sect+2,disk_write@sector+2
  3864   001640  C095  F016         	movff	f_write@sect+3,disk_write@sector+3
  3865   001644  C090  F017         	movff	f_write@cc,disk_write@count
  3866   001648  C091  F018         	movff	f_write@cc+1,disk_write@count+1
  3867   00164C  C06D  FFD9         	movff	f_write@fp,fsr2l
  3868   001650  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3869   001654  EE10 F001          	lfsr	1,1
  3870   001658  50DE               	movf	postinc2,w,c
  3871   00165A  26E1               	addwf	fsr1l,f,c
  3872   00165C  50DD               	movf	postdec2,w,c
  3873   00165E  22E2               	addwfc	fsr1h,f,c
  3874   001660  50E7               	movf	indf1,w,c
  3875   001662  ECA7  F024         	call	_disk_write
  3876   001666  0900               	iorlw	0
  3877   001668  B4D8               	btfsc	status,2,c
  3878   00166A  EF39  F00B         	goto	u9511
  3879   00166E  EF3B  F00B         	goto	u9510
  3880   001672                     u9511:
  3881   001672  EF45  F00B         	goto	l6669
  3882   001676                     u9510:
  3883   001676                     
  3884                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  3885   001676  EE20 F005          	lfsr	2,5
  3886   00167A  506D               	movf	f_write@fp^0,w,c
  3887   00167C  26D9               	addwf	fsr2l,f,c
  3888   00167E  506E               	movf	(f_write@fp+1)^0,w,c
  3889   001680  22DA               	addwfc	fsr2h,f,c
  3890   001682  0E01               	movlw	1
  3891   001684  6EDF               	movwf	indf2,c
  3892   001686  EF0B  F00D         	goto	l702
  3893   00168A                     l6669:
  3894                           
  3895                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  3896   00168A  0100               	movlb	0	; () banked
  3897   00168C  5190               	movf	f_write@cc& (0+255),w,b
  3898   00168E  6F80               	movwf	??_f_write& (0+255),b
  3899   001690  5191               	movf	(f_write@cc+1)& (0+255),w,b
  3900   001692  6F81               	movwf	(??_f_write+1)& (0+255),b
  3901   001694  6B82               	clrf	(??_f_write+2)& (0+255),b
  3902   001696  6B83               	clrf	(??_f_write+3)& (0+255),b
  3903   001698  C06D  FFD9         	movff	f_write@fp,fsr2l
  3904   00169C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3905   0016A0  EE10 F02A          	lfsr	1,42
  3906   0016A4  50DE               	movf	postinc2,w,c
  3907   0016A6  26E1               	addwf	fsr1l,f,c
  3908   0016A8  50DD               	movf	postdec2,w,c
  3909   0016AA  22E2               	addwfc	fsr1h,f,c
  3910   0016AC  CFE6 F084          	movff	postinc1,??_f_write+4
  3911   0016B0  CFE6 F085          	movff	postinc1,??_f_write+5
  3912   0016B4  CFE6 F086          	movff	postinc1,??_f_write+6
  3913   0016B8  CFE6 F087          	movff	postinc1,??_f_write+7
  3914   0016BC  5192               	movf	f_write@sect& (0+255),w,b
  3915   0016BE  5D84               	subwf	(??_f_write+4)& (0+255),w,b
  3916   0016C0  6F88               	movwf	(??_f_write+8)& (0+255),b
  3917   0016C2  5193               	movf	(f_write@sect+1)& (0+255),w,b
  3918   0016C4  5985               	subwfb	(??_f_write+5)& (0+255),w,b
  3919   0016C6  6F89               	movwf	(??_f_write+9)& (0+255),b
  3920   0016C8  5194               	movf	(f_write@sect+2)& (0+255),w,b
  3921   0016CA  5986               	subwfb	(??_f_write+6)& (0+255),w,b
  3922   0016CC  6F8A               	movwf	(??_f_write+10)& (0+255),b
  3923   0016CE  5195               	movf	(f_write@sect+3)& (0+255),w,b
  3924   0016D0  5987               	subwfb	(??_f_write+7)& (0+255),w,b
  3925   0016D2  6F8B               	movwf	(??_f_write+11)& (0+255),b
  3926   0016D4  5180               	movf	??_f_write& (0+255),w,b
  3927   0016D6  5D88               	subwf	(??_f_write+8)& (0+255),w,b
  3928   0016D8  5181               	movf	(??_f_write+1)& (0+255),w,b
  3929   0016DA  5989               	subwfb	(??_f_write+9)& (0+255),w,b
  3930   0016DC  5182               	movf	(??_f_write+2)& (0+255),w,b
  3931   0016DE  598A               	subwfb	(??_f_write+10)& (0+255),w,b
  3932   0016E0  5183               	movf	(??_f_write+3)& (0+255),w,b
  3933   0016E2  598B               	subwfb	(??_f_write+11)& (0+255),w,b
  3934   0016E4  B0D8               	btfsc	status,0,c
  3935   0016E6  EF77  F00B         	goto	u9521
  3936   0016EA  EF79  F00B         	goto	u9520
  3937   0016EE                     u9521:
  3938   0016EE  EFB7  F00B         	goto	l6675
  3939   0016F2                     u9520:
  3940   0016F2                     
  3941                           ; BSR set to: 0
  3942                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  3943   0016F2  C06D  FFD9         	movff	f_write@fp,fsr2l
  3944   0016F6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3945   0016FA  CFDE F080          	movff	postinc2,??_f_write
  3946   0016FE  CFDD F081          	movff	postdec2,??_f_write+1
  3947   001702  0E2E               	movlw	46
  3948   001704  2580               	addwf	??_f_write& (0+255),w,b
  3949   001706  6E01               	movwf	mem_cpy@dst^0,c
  3950   001708  0E00               	movlw	0
  3951   00170A  2181               	addwfc	(??_f_write+1)& (0+255),w,b
  3952   00170C  6E02               	movwf	(mem_cpy@dst+1)^0,c
  3953   00170E  C06D  FFD9         	movff	f_write@fp,fsr2l
  3954   001712  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3955   001716  EE10 F02A          	lfsr	1,42
  3956   00171A  50DE               	movf	postinc2,w,c
  3957   00171C  26E1               	addwf	fsr1l,f,c
  3958   00171E  50DD               	movf	postdec2,w,c
  3959   001720  22E2               	addwfc	fsr1h,f,c
  3960   001722  CFE6 F082          	movff	postinc1,??_f_write+2
  3961   001726  CFE5 F083          	movff	postdec1,??_f_write+3
  3962   00172A  5192               	movf	f_write@sect& (0+255),w,b
  3963   00172C  5F82               	subwf	(??_f_write+2)& (0+255),f,b
  3964   00172E  5193               	movf	(f_write@sect+1)& (0+255),w,b
  3965   001730  5B83               	subwfb	(??_f_write+3)& (0+255),f,b
  3966   001732  0E09               	movlw	9
  3967   001734                     u9535:
  3968   001734  90D8               	bcf	status,0,c
  3969   001736  3782               	rlcf	(??_f_write+2)& (0+255),f,b
  3970   001738  3783               	rlcf	(??_f_write+3)& (0+255),f,b
  3971   00173A  2EE8               	decfsz	wreg,f,c
  3972   00173C  EF9A  F00B         	goto	u9535
  3973   001740  5182               	movf	(??_f_write+2)& (0+255),w,b
  3974   001742  258D               	addwf	f_write@wbuff& (0+255),w,b
  3975   001744  6E03               	movwf	mem_cpy@src^0,c
  3976   001746  5183               	movf	(??_f_write+3)& (0+255),w,b
  3977   001748  218E               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  3978   00174A  6E04               	movwf	(mem_cpy@src+1)^0,c
  3979   00174C  0E02               	movlw	2
  3980   00174E  6E06               	movwf	(mem_cpy@cnt+1)^0,c
  3981   001750  0E00               	movlw	0
  3982   001752  6E05               	movwf	mem_cpy@cnt^0,c
  3983   001754  EC0B  F030         	call	_mem_cpy	;wreg free
  3984   001758                     
  3985                           ;ff.c: 2761:      fp->fs->wflag = 0;
  3986   001758  C06D  FFD9         	movff	f_write@fp,fsr2l
  3987   00175C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3988   001760  EE10 F004          	lfsr	1,4
  3989   001764  50DE               	movf	postinc2,w,c
  3990   001766  26E1               	addwf	fsr1l,f,c
  3991   001768  50DD               	movf	postdec2,w,c
  3992   00176A  22E2               	addwfc	fsr1h,f,c
  3993   00176C  6AE7               	clrf	indf1,c
  3994   00176E                     l6675:
  3995                           
  3996                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  3997   00176E  C090  F080         	movff	f_write@cc,??_f_write
  3998   001772  C091  F081         	movff	f_write@cc+1,??_f_write+1
  3999   001776  0E09               	movlw	9
  4000   001778                     u9545:
  4001   001778  90D8               	bcf	status,0,c
  4002   00177A  0100               	movlb	0	; () banked
  4003   00177C  3780               	rlcf	??_f_write& (0+255),f,b
  4004   00177E  3781               	rlcf	(??_f_write+1)& (0+255),f,b
  4005   001780  2EE8               	decfsz	wreg,f,c
  4006   001782  EFBC  F00B         	goto	u9545
  4007   001786  C080  F09A         	movff	??_f_write,f_write@wcnt
  4008   00178A  C081  F09B         	movff	??_f_write+1,f_write@wcnt+1
  4009                           
  4010                           ;ff.c: 2771:     continue;
  4011   00178E  EFAD  F00C         	goto	l6705
  4012   001792                     l6677:
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  4016   001792  EE20 F00A          	lfsr	2,10
  4017   001796  506D               	movf	f_write@fp^0,w,c
  4018   001798  26D9               	addwf	fsr2l,f,c
  4019   00179A  506E               	movf	(f_write@fp+1)^0,w,c
  4020   00179C  22DA               	addwfc	fsr2h,f,c
  4021   00179E  EE10 F006          	lfsr	1,6
  4022   0017A2  506D               	movf	f_write@fp^0,w,c
  4023   0017A4  26E1               	addwf	fsr1l,f,c
  4024   0017A6  506E               	movf	(f_write@fp+1)^0,w,c
  4025   0017A8  22E2               	addwfc	fsr1h,f,c
  4026   0017AA  50DE               	movf	postinc2,w,c
  4027   0017AC  5CE6               	subwf	postinc1,w,c
  4028   0017AE  50DE               	movf	postinc2,w,c
  4029   0017B0  58E6               	subwfb	postinc1,w,c
  4030   0017B2  50DE               	movf	postinc2,w,c
  4031   0017B4  58E6               	subwfb	postinc1,w,c
  4032   0017B6  50DE               	movf	postinc2,w,c
  4033   0017B8  58E6               	subwfb	postinc1,w,c
  4034   0017BA  A0D8               	btfss	status,0,c
  4035   0017BC  EFE2  F00B         	goto	u9551
  4036   0017C0  EFE4  F00B         	goto	u9550
  4037   0017C4                     u9551:
  4038   0017C4  EF12  F00C         	goto	l6687
  4039   0017C8                     u9550:
  4040   0017C8                     
  4041                           ; BSR set to: 0
  4042                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  4043   0017C8  C06D  FFD9         	movff	f_write@fp,fsr2l
  4044   0017CC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  4045   0017D0  CFDE F01B          	movff	postinc2,sync_window@fs
  4046   0017D4  CFDD F01C          	movff	postdec2,sync_window@fs+1
  4047   0017D8  EC16  F027         	call	_sync_window	;wreg free
  4048   0017DC  0900               	iorlw	0
  4049   0017DE  B4D8               	btfsc	status,2,c
  4050   0017E0  EFF4  F00B         	goto	u9561
  4051   0017E4  EFF6  F00B         	goto	u9560
  4052   0017E8                     u9561:
  4053   0017E8  EF00  F00C         	goto	l6685
  4054   0017EC                     u9560:
  4055   0017EC  EE20 F005          	lfsr	2,5
  4056   0017F0  506D               	movf	f_write@fp^0,w,c
  4057   0017F2  26D9               	addwf	fsr2l,f,c
  4058   0017F4  506E               	movf	(f_write@fp+1)^0,w,c
  4059   0017F6  22DA               	addwfc	fsr2h,f,c
  4060   0017F8  0E01               	movlw	1
  4061   0017FA  6EDF               	movwf	indf2,c
  4062   0017FC  EF0B  F00D         	goto	l702
  4063   001800                     l6685:
  4064                           
  4065                           ;ff.c: 2776:     fp->fs->winsect = sect;
  4066   001800  C06D  FFD9         	movff	f_write@fp,fsr2l
  4067   001804  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  4068   001808  EE10 F02A          	lfsr	1,42
  4069   00180C  50DE               	movf	postinc2,w,c
  4070   00180E  26E1               	addwf	fsr1l,f,c
  4071   001810  50DD               	movf	postdec2,w,c
  4072   001812  22E2               	addwfc	fsr1h,f,c
  4073   001814  C092  FFE6         	movff	f_write@sect,postinc1
  4074   001818  C093  FFE6         	movff	f_write@sect+1,postinc1
  4075   00181C  C094  FFE6         	movff	f_write@sect+2,postinc1
  4076   001820  C095  FFE6         	movff	f_write@sect+3,postinc1
  4077   001824                     l6687:
  4078                           
  4079                           ;ff.c: 2785:    fp->dsect = sect;
  4080   001824  EE20 F016          	lfsr	2,22
  4081   001828  506D               	movf	f_write@fp^0,w,c
  4082   00182A  26D9               	addwf	fsr2l,f,c
  4083   00182C  506E               	movf	(f_write@fp+1)^0,w,c
  4084   00182E  22DA               	addwfc	fsr2h,f,c
  4085   001830  C092  FFDE         	movff	f_write@sect,postinc2
  4086   001834  C093  FFDE         	movff	f_write@sect+1,postinc2
  4087   001838  C094  FFDE         	movff	f_write@sect+2,postinc2
  4088   00183C  C095  FFDE         	movff	f_write@sect+3,postinc2
  4089   001840                     l6689:
  4090                           
  4091                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  4092   001840  EE20 F006          	lfsr	2,6
  4093   001844  506D               	movf	f_write@fp^0,w,c
  4094   001846  26D9               	addwf	fsr2l,f,c
  4095   001848  506E               	movf	(f_write@fp+1)^0,w,c
  4096   00184A  22DA               	addwfc	fsr2h,f,c
  4097   00184C  CFDE F080          	movff	postinc2,??_f_write
  4098   001850  CFDD F081          	movff	postdec2,??_f_write+1
  4099   001854  0EFF               	movlw	255
  4100   001856  0100               	movlb	0	; () banked
  4101   001858  1580               	andwf	??_f_write& (0+255),w,b
  4102   00185A  6F82               	movwf	(??_f_write+2)& (0+255),b
  4103   00185C  0E01               	movlw	1
  4104   00185E  1581               	andwf	(??_f_write+1)& (0+255),w,b
  4105   001860  6F83               	movwf	(??_f_write+3)& (0+255),b
  4106   001862  5182               	movf	(??_f_write+2)& (0+255),w,b
  4107   001864  0800               	sublw	0
  4108   001866  6F9A               	movwf	f_write@wcnt& (0+255),b
  4109   001868  5183               	movf	(??_f_write+3)& (0+255),w,b
  4110   00186A  A0D8               	btfss	status,0,c
  4111   00186C  2AE8               	incf	wreg,f,c
  4112   00186E  0802               	sublw	2
  4113   001870  6F9B               	movwf	(f_write@wcnt+1)& (0+255),b
  4114   001872                     
  4115                           ; BSR set to: 0
  4116                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  4117   001872  519A               	movf	f_write@wcnt& (0+255),w,b
  4118   001874  5C71               	subwf	f_write@btw^0,w,c
  4119   001876  519B               	movf	(f_write@wcnt+1)& (0+255),w,b
  4120   001878  5872               	subwfb	(f_write@btw+1)^0,w,c
  4121   00187A  B0D8               	btfsc	status,0,c
  4122   00187C  EF42  F00C         	goto	u9571
  4123   001880  EF44  F00C         	goto	u9570
  4124   001884                     u9571:
  4125   001884  EF48  F00C         	goto	l6695
  4126   001888                     u9570:
  4127   001888                     
  4128                           ; BSR set to: 0
  4129   001888  C071  F09A         	movff	f_write@btw,f_write@wcnt
  4130   00188C  C072  F09B         	movff	f_write@btw+1,f_write@wcnt+1
  4131   001890                     l6695:
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  4135   001890  C06D  FFD9         	movff	f_write@fp,fsr2l
  4136   001894  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  4137   001898  CFDE F030          	movff	postinc2,move_window@fs
  4138   00189C  CFDD F031          	movff	postdec2,move_window@fs+1
  4139   0018A0  EE20 F016          	lfsr	2,22
  4140   0018A4  506D               	movf	f_write@fp^0,w,c
  4141   0018A6  26D9               	addwf	fsr2l,f,c
  4142   0018A8  506E               	movf	(f_write@fp+1)^0,w,c
  4143   0018AA  22DA               	addwfc	fsr2h,f,c
  4144   0018AC  CFDE F032          	movff	postinc2,move_window@sector
  4145   0018B0  CFDE F033          	movff	postinc2,move_window@sector+1
  4146   0018B4  CFDE F034          	movff	postinc2,move_window@sector+2
  4147   0018B8  CFDE F035          	movff	postinc2,move_window@sector+3
  4148   0018BC  ECF5  F02D         	call	_move_window	;wreg free
  4149   0018C0  0900               	iorlw	0
  4150   0018C2  B4D8               	btfsc	status,2,c
  4151   0018C4  EF66  F00C         	goto	u9581
  4152   0018C8  EF68  F00C         	goto	u9580
  4153   0018CC                     u9581:
  4154   0018CC  EF72  F00C         	goto	l6701
  4155   0018D0                     u9580:
  4156   0018D0                     
  4157                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  4158   0018D0  EE20 F005          	lfsr	2,5
  4159   0018D4  506D               	movf	f_write@fp^0,w,c
  4160   0018D6  26D9               	addwf	fsr2l,f,c
  4161   0018D8  506E               	movf	(f_write@fp+1)^0,w,c
  4162   0018DA  22DA               	addwfc	fsr2h,f,c
  4163   0018DC  0E01               	movlw	1
  4164   0018DE  6EDF               	movwf	indf2,c
  4165   0018E0  EF0B  F00D         	goto	l702
  4166   0018E4                     l6701:
  4167                           
  4168                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  4169   0018E4  EE20 F006          	lfsr	2,6
  4170   0018E8  506D               	movf	f_write@fp^0,w,c
  4171   0018EA  26D9               	addwf	fsr2l,f,c
  4172   0018EC  506E               	movf	(f_write@fp+1)^0,w,c
  4173   0018EE  22DA               	addwfc	fsr2h,f,c
  4174   0018F0  CFDE F080          	movff	postinc2,??_f_write
  4175   0018F4  CFDD F081          	movff	postdec2,??_f_write+1
  4176   0018F8  0EFF               	movlw	255
  4177   0018FA  0100               	movlb	0	; () banked
  4178   0018FC  1580               	andwf	??_f_write& (0+255),w,b
  4179   0018FE  6F82               	movwf	(??_f_write+2)& (0+255),b
  4180   001900  0E01               	movlw	1
  4181   001902  1581               	andwf	(??_f_write+1)& (0+255),w,b
  4182   001904  6F83               	movwf	(??_f_write+3)& (0+255),b
  4183   001906  C06D  FFD9         	movff	f_write@fp,fsr2l
  4184   00190A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  4185   00190E  CFDE F084          	movff	postinc2,??_f_write+4
  4186   001912  CFDD F085          	movff	postdec2,??_f_write+5
  4187   001916  5182               	movf	(??_f_write+2)& (0+255),w,b
  4188   001918  2584               	addwf	(??_f_write+4)& (0+255),w,b
  4189   00191A  6F86               	movwf	(??_f_write+6)& (0+255),b
  4190   00191C  5183               	movf	(??_f_write+3)& (0+255),w,b
  4191   00191E  2185               	addwfc	(??_f_write+5)& (0+255),w,b
  4192   001920  6F87               	movwf	(??_f_write+7)& (0+255),b
  4193   001922  0E2E               	movlw	46
  4194   001924  2586               	addwf	(??_f_write+6)& (0+255),w,b
  4195   001926  6E01               	movwf	mem_cpy@dst^0,c
  4196   001928  0E00               	movlw	0
  4197   00192A  2187               	addwfc	(??_f_write+7)& (0+255),w,b
  4198   00192C  6E02               	movwf	(mem_cpy@dst+1)^0,c
  4199   00192E  C08D  F003         	movff	f_write@wbuff,mem_cpy@src
  4200   001932  C08E  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  4201   001936  C09A  F005         	movff	f_write@wcnt,mem_cpy@cnt
  4202   00193A  C09B  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  4203   00193E  EC0B  F030         	call	_mem_cpy	;wreg free
  4204   001942                     
  4205                           ;ff.c: 2793:   fp->fs->wflag = 1;
  4206   001942  C06D  FFD9         	movff	f_write@fp,fsr2l
  4207   001946  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  4208   00194A  EE10 F004          	lfsr	1,4
  4209   00194E  50DE               	movf	postinc2,w,c
  4210   001950  26E1               	addwf	fsr1l,f,c
  4211   001952  50DD               	movf	postdec2,w,c
  4212   001954  22E2               	addwfc	fsr1h,f,c
  4213   001956  0E01               	movlw	1
  4214   001958  6EE7               	movwf	indf1,c
  4215   00195A                     l6705:
  4216   00195A  0100               	movlb	0	; () banked
  4217   00195C  519A               	movf	f_write@wcnt& (0+255),w,b
  4218   00195E  278D               	addwf	f_write@wbuff& (0+255),f,b
  4219   001960  519B               	movf	(f_write@wcnt+1)& (0+255),w,b
  4220   001962  238E               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  4221   001964                     
  4222                           ; BSR set to: 0
  4223   001964  EE20 F006          	lfsr	2,6
  4224   001968  506D               	movf	f_write@fp^0,w,c
  4225   00196A  26D9               	addwf	fsr2l,f,c
  4226   00196C  506E               	movf	(f_write@fp+1)^0,w,c
  4227   00196E  22DA               	addwfc	fsr2h,f,c
  4228   001970  519A               	movf	f_write@wcnt& (0+255),w,b
  4229   001972  26DE               	addwf	postinc2,f,c
  4230   001974  519B               	movf	(f_write@wcnt+1)& (0+255),w,b
  4231   001976  22DE               	addwfc	postinc2,f,c
  4232   001978  0E00               	movlw	0
  4233   00197A  22DE               	addwfc	postinc2,f,c
  4234   00197C  22DE               	addwfc	postinc2,f,c
  4235   00197E                     
  4236                           ; BSR set to: 0
  4237   00197E  C073  FFD9         	movff	f_write@bw,fsr2l
  4238   001982  C074  FFDA         	movff	f_write@bw+1,fsr2h
  4239   001986  519A               	movf	f_write@wcnt& (0+255),w,b
  4240   001988  26DE               	addwf	postinc2,f,c
  4241   00198A  519B               	movf	(f_write@wcnt+1)& (0+255),w,b
  4242   00198C  22DD               	addwfc	postdec2,f,c
  4243   00198E                     
  4244                           ; BSR set to: 0
  4245   00198E  519A               	movf	f_write@wcnt& (0+255),w,b
  4246   001990  5E71               	subwf	f_write@btw^0,f,c
  4247   001992  519B               	movf	(f_write@wcnt+1)& (0+255),w,b
  4248   001994  5A72               	subwfb	(f_write@btw+1)^0,f,c
  4249   001996                     l6713:
  4250                           
  4251                           ; BSR set to: 0
  4252   001996  5071               	movf	f_write@btw^0,w,c
  4253   001998  1072               	iorwf	(f_write@btw+1)^0,w,c
  4254   00199A  A4D8               	btfss	status,2,c
  4255   00199C  EFD2  F00C         	goto	u9591
  4256   0019A0  EFD4  F00C         	goto	u9590
  4257   0019A4                     u9591:
  4258   0019A4  EF38  F009         	goto	l6605
  4259   0019A8                     u9590:
  4260   0019A8                     l6715:
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  4264   0019A8  EE20 F006          	lfsr	2,6
  4265   0019AC  506D               	movf	f_write@fp^0,w,c
  4266   0019AE  26D9               	addwf	fsr2l,f,c
  4267   0019B0  506E               	movf	(f_write@fp+1)^0,w,c
  4268   0019B2  22DA               	addwfc	fsr2h,f,c
  4269   0019B4  EE10 F00A          	lfsr	1,10
  4270   0019B8  506D               	movf	f_write@fp^0,w,c
  4271   0019BA  26E1               	addwf	fsr1l,f,c
  4272   0019BC  506E               	movf	(f_write@fp+1)^0,w,c
  4273   0019BE  22E2               	addwfc	fsr1h,f,c
  4274   0019C0  50DE               	movf	postinc2,w,c
  4275   0019C2  5CE6               	subwf	postinc1,w,c
  4276   0019C4  50DE               	movf	postinc2,w,c
  4277   0019C6  58E6               	subwfb	postinc1,w,c
  4278   0019C8  50DE               	movf	postinc2,w,c
  4279   0019CA  58E6               	subwfb	postinc1,w,c
  4280   0019CC  50DE               	movf	postinc2,w,c
  4281   0019CE  58E6               	subwfb	postinc1,w,c
  4282   0019D0  B0D8               	btfsc	status,0,c
  4283   0019D2  EFED  F00C         	goto	u9601
  4284   0019D6  EFEF  F00C         	goto	u9600
  4285   0019DA                     u9601:
  4286   0019DA  EF03  F00D         	goto	l6719
  4287   0019DE                     u9600:
  4288   0019DE                     
  4289                           ; BSR set to: 0
  4290   0019DE  EE20 F006          	lfsr	2,6
  4291   0019E2  506D               	movf	f_write@fp^0,w,c
  4292   0019E4  26D9               	addwf	fsr2l,f,c
  4293   0019E6  506E               	movf	(f_write@fp+1)^0,w,c
  4294   0019E8  22DA               	addwfc	fsr2h,f,c
  4295   0019EA  EE10 F00A          	lfsr	1,10
  4296   0019EE  506D               	movf	f_write@fp^0,w,c
  4297   0019F0  26E1               	addwf	fsr1l,f,c
  4298   0019F2  506E               	movf	(f_write@fp+1)^0,w,c
  4299   0019F4  22E2               	addwfc	fsr1h,f,c
  4300   0019F6  CFDE FFE6          	movff	postinc2,postinc1
  4301   0019FA  CFDE FFE6          	movff	postinc2,postinc1
  4302   0019FE  CFDE FFE6          	movff	postinc2,postinc1
  4303   001A02  CFDE FFE6          	movff	postinc2,postinc1
  4304   001A06                     l6719:
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;ff.c: 2801:  fp->flag |= 0x20;
  4308   001A06  EE20 F004          	lfsr	2,4
  4309   001A0A  506D               	movf	f_write@fp^0,w,c
  4310   001A0C  26D9               	addwf	fsr2l,f,c
  4311   001A0E  506E               	movf	(f_write@fp+1)^0,w,c
  4312   001A10  22DA               	addwfc	fsr2h,f,c
  4313   001A12  0E00               	movlw	0
  4314   001A14  8ADB               	bsf	plusw2,5,c
  4315   001A16                     l702:
  4316   001A16  0012               	return		;funcret
  4317   001A18                     __end_of_f_write:
  4318                           	callstack 0
  4319                           
  4320 ;; *************** function _f_open *****************
  4321 ;; Defined at:
  4322 ;;		line 2449 in file "ff.c"
  4323 ;; Parameters:    Size  Location     Type
  4324 ;;  fp              2   58[BANK0 ] PTR struct .
  4325 ;;		 -> Fil(32), 
  4326 ;;  path            1   60[BANK0 ] PTR const unsigned char 
  4327 ;;		 -> STR_4(10), STR_3(1), 
  4328 ;;  mode            1   61[BANK0 ] unsigned char 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  dj             21   89[BANK0 ] struct .
  4331 ;;  sfn            12   66[BANK0 ] unsigned char [12]
  4332 ;;  dw              4   82[BANK0 ] unsigned long 
  4333 ;;  cl              4   78[BANK0 ] unsigned long 
  4334 ;;  dir             2   87[BANK0 ] PTR unsigned char 
  4335 ;;		 -> FatFs(558), NULL(0), 
  4336 ;;  res             1   86[BANK0 ] enum E95
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  1    wreg      enum E95
  4339 ;; Registers used:
  4340 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4346 ;;      Params:         0       4       0       0       0       0       0
  4347 ;;      Locals:         0      44       0       0       0       0       0
  4348 ;;      Temps:          0       4       0       0       0       0       0
  4349 ;;      Totals:         0      52       0       0       0       0       0
  4350 ;;Total ram usage:       52 bytes
  4351 ;; Hardware stack levels used: 1
  4352 ;; Hardware stack levels required when called: 13
  4353 ;; This function calls:
  4354 ;;		_dir_register
  4355 ;;		_find_volume
  4356 ;;		_follow_path
  4357 ;;		_ld_clust
  4358 ;;		_move_window
  4359 ;;		_remove_chain
  4360 ;;		_st_clust
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text11
  4367   00304A                     __ptext11:
  4368                           	callstack 0
  4369   00304A                     _f_open:
  4370                           	callstack 17
  4371   00304A                     
  4372                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIR dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458:  
      +                          BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT;
  4373   00304A  0100               	movlb	0	; () banked
  4374   00304C  51BA               	movf	f_open@fp& (0+255),w,b
  4375   00304E  11BB               	iorwf	(f_open@fp+1)& (0+255),w,b
  4376   003050  A4D8               	btfss	status,2,c
  4377   003052  EF2D  F018         	goto	u8231
  4378   003056  EF2F  F018         	goto	u8230
  4379   00305A                     u8231:
  4380   00305A  EF32  F018         	goto	l6021
  4381   00305E                     u8230:
  4382   00305E                     
  4383                           ; BSR set to: 0
  4384   00305E  0E09               	movlw	9
  4385   003060  EF4D  F01A         	goto	l653
  4386   003064                     l6021:
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;ff.c: 2465:  fp->fs = 0;
  4390   003064  C0BA  FFD9         	movff	f_open@fp,fsr2l
  4391   003068  C0BB  FFDA         	movff	f_open@fp+1,fsr2h
  4392   00306C  6ADE               	clrf	postinc2,c
  4393   00306E  6ADD               	clrf	postdec2,c
  4394   003070                     
  4395                           ; BSR set to: 0
  4396                           ;ff.c: 2468:  dj.fs = FatFs[0];
  4397   003070  C0F6  F0D9         	movff	_FatFs@ff$F539,f_open@dj
  4398   003074  C0F7  F0DA         	movff	_FatFs@ff$F539+1,f_open@dj+1
  4399   003078                     
  4400                           ; BSR set to: 0
  4401                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  4402   003078  0E1F               	movlw	31
  4403   00307A  17BD               	andwf	f_open@mode& (0+255),f,b
  4404   00307C                     
  4405                           ; BSR set to: 0
  4406                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  4407   00307C  0ED9               	movlw	low f_open@dj
  4408   00307E  6E45               	movwf	find_volume@rfs^0,c
  4409   003080  0EBC               	movlw	low f_open@path
  4410   003082  6E46               	movwf	find_volume@path^0,c
  4411   003084  51BD               	movf	f_open@mode& (0+255),w,b
  4412   003086  0BFE               	andlw	254
  4413   003088  6E47               	movwf	find_volume@wmode^0,c
  4414   00308A  EC16  F003         	call	_find_volume	;wreg free
  4415   00308E  0100               	movlb	0	; () banked
  4416   003090  6FD6               	movwf	f_open@res& (0+255),b
  4417   003092                     
  4418                           ; BSR set to: 0
  4419                           ;ff.c: 2479:  if (res == FR_OK) {
  4420   003092  51D6               	movf	f_open@res& (0+255),w,b
  4421   003094  A4D8               	btfss	status,2,c
  4422   003096  EF4F  F018         	goto	u8241
  4423   00309A  EF51  F018         	goto	u8240
  4424   00309E                     u8241:
  4425   00309E  EF4C  F01A         	goto	l6125
  4426   0030A2                     u8240:
  4427   0030A2                     
  4428                           ; BSR set to: 0
  4429                           ;ff.c: 2480:   (dj).fn = sfn;
  4430   0030A2  0EC2               	movlw	low f_open@sfn
  4431   0030A4  6FED               	movwf	(f_open@dj+20)& (0+255),b
  4432   0030A6                     
  4433                           ; BSR set to: 0
  4434                           ;ff.c: 2481:   res = follow_path(&dj, path);
  4435   0030A6  0ED9               	movlw	low f_open@dj
  4436   0030A8  6F85               	movwf	follow_path@dp& (0+255),b
  4437   0030AA  C0BC  F086         	movff	f_open@path,follow_path@path
  4438   0030AE  EC4E  F026         	call	_follow_path	;wreg free
  4439   0030B2  0100               	movlb	0	; () banked
  4440   0030B4  6FD6               	movwf	f_open@res& (0+255),b
  4441   0030B6                     
  4442                           ; BSR set to: 0
  4443                           ;ff.c: 2482:   dir = dj.dir;
  4444   0030B6  C0EB  F0D7         	movff	f_open@dj+18,f_open@dir
  4445   0030BA  C0EC  F0D8         	movff	f_open@dj+19,f_open@dir+1
  4446   0030BE                     
  4447                           ; BSR set to: 0
  4448                           ;ff.c: 2484:   if (res == FR_OK) {
  4449   0030BE  51D6               	movf	f_open@res& (0+255),w,b
  4450   0030C0  A4D8               	btfss	status,2,c
  4451   0030C2  EF65  F018         	goto	u8251
  4452   0030C6  EF67  F018         	goto	u8250
  4453   0030CA                     u8251:
  4454   0030CA  EF72  F018         	goto	l6043
  4455   0030CE                     u8250:
  4456   0030CE                     
  4457                           ; BSR set to: 0
  4458                           ;ff.c: 2485:    if (!dir)
  4459   0030CE  51D7               	movf	f_open@dir& (0+255),w,b
  4460   0030D0  11D8               	iorwf	(f_open@dir+1)& (0+255),w,b
  4461   0030D2  A4D8               	btfss	status,2,c
  4462   0030D4  EF6E  F018         	goto	u8261
  4463   0030D8  EF70  F018         	goto	u8260
  4464   0030DC                     u8261:
  4465   0030DC  EF72  F018         	goto	l6043
  4466   0030E0                     u8260:
  4467   0030E0                     
  4468                           ; BSR set to: 0
  4469                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  4470   0030E0  0E06               	movlw	6
  4471   0030E2  6FD6               	movwf	f_open@res& (0+255),b
  4472   0030E4                     l6043:
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  4476   0030E4  C0BD  F0BE         	movff	f_open@mode,??_f_open
  4477   0030E8  0E1C               	movlw	28
  4478   0030EA  17BE               	andwf	??_f_open& (0+255),f,b
  4479   0030EC  B4D8               	btfsc	status,2,c
  4480   0030EE  EF7B  F018         	goto	u8271
  4481   0030F2  EF7D  F018         	goto	u8270
  4482   0030F6                     u8271:
  4483   0030F6  EF7B  F019         	goto	l6091
  4484   0030FA                     u8270:
  4485   0030FA                     
  4486                           ; BSR set to: 0
  4487                           ;ff.c: 2494:    if (res != FR_OK) {
  4488   0030FA  51D6               	movf	f_open@res& (0+255),w,b
  4489   0030FC  B4D8               	btfsc	status,2,c
  4490   0030FE  EF83  F018         	goto	u8281
  4491   003102  EF85  F018         	goto	u8280
  4492   003106                     u8281:
  4493   003106  EF9B  F018         	goto	l6055
  4494   00310A                     u8280:
  4495   00310A                     
  4496                           ; BSR set to: 0
  4497                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  4498   00310A  0E04               	movlw	4
  4499   00310C  19D6               	xorwf	f_open@res& (0+255),w,b
  4500   00310E  A4D8               	btfss	status,2,c
  4501   003110  EF8C  F018         	goto	u8291
  4502   003114  EF8E  F018         	goto	u8290
  4503   003118                     u8291:
  4504   003118  EF94  F018         	goto	l6051
  4505   00311C                     u8290:
  4506   00311C                     
  4507                           ; BSR set to: 0
  4508                           ;ff.c: 2499:      res = dir_register(&dj);
  4509   00311C  0ED9               	movlw	low f_open@dj
  4510   00311E  6F89               	movwf	dir_register@dp& (0+255),b
  4511   003120  ECFC  F02B         	call	_dir_register	;wreg free
  4512   003124  0100               	movlb	0	; () banked
  4513   003126  6FD6               	movwf	f_open@res& (0+255),b
  4514   003128                     l6051:
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;ff.c: 2501:     mode |= 0x08;
  4518   003128  87BD               	bsf	f_open@mode& (0+255),3,b
  4519   00312A                     
  4520                           ; BSR set to: 0
  4521                           ;ff.c: 2502:     dir = dj.dir;
  4522   00312A  C0EB  F0D7         	movff	f_open@dj+18,f_open@dir
  4523   00312E  C0EC  F0D8         	movff	f_open@dj+19,f_open@dir+1
  4524                           
  4525                           ;ff.c: 2503:    }
  4526   003132  EFB9  F018         	goto	l660
  4527   003136                     l6055:
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  4531   003136  EE20 F00B          	lfsr	2,11
  4532   00313A  51D7               	movf	f_open@dir& (0+255),w,b
  4533   00313C  26D9               	addwf	fsr2l,f,c
  4534   00313E  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  4535   003140  22DA               	addwfc	fsr2h,f,c
  4536   003142  50DF               	movf	indf2,w,c
  4537   003144  6FBE               	movwf	??_f_open& (0+255),b
  4538   003146  0E11               	movlw	17
  4539   003148  17BE               	andwf	??_f_open& (0+255),f,b
  4540   00314A  B4D8               	btfsc	status,2,c
  4541   00314C  EFAA  F018         	goto	u8301
  4542   003150  EFAC  F018         	goto	u8300
  4543   003154                     u8301:
  4544   003154  EFB0  F018         	goto	l661
  4545   003158                     u8300:
  4546   003158                     
  4547                           ; BSR set to: 0
  4548                           ;ff.c: 2506:      res = FR_DENIED;
  4549   003158  0E07               	movlw	7
  4550   00315A  6FD6               	movwf	f_open@res& (0+255),b
  4551                           
  4552                           ;ff.c: 2507:     } else {
  4553   00315C  EFB9  F018         	goto	l660
  4554   003160                     l661:
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;ff.c: 2508:      if (mode & 0x04)
  4558   003160  A5BD               	btfss	f_open@mode& (0+255),2,b
  4559   003162  EFB5  F018         	goto	u8311
  4560   003166  EFB7  F018         	goto	u8310
  4561   00316A                     u8311:
  4562   00316A  EFB9  F018         	goto	l660
  4563   00316E                     u8310:
  4564   00316E                     
  4565                           ; BSR set to: 0
  4566                           ;ff.c: 2509:       res = FR_EXIST;
  4567   00316E  0E08               	movlw	8
  4568   003170  6FD6               	movwf	f_open@res& (0+255),b
  4569   003172                     l660:
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  4573   003172  51D6               	movf	f_open@res& (0+255),w,b
  4574   003174  A4D8               	btfss	status,2,c
  4575   003176  EFBF  F018         	goto	u8321
  4576   00317A  EFC1  F018         	goto	u8320
  4577   00317E                     u8321:
  4578   00317E  EFAA  F019         	goto	l667
  4579   003182                     u8320:
  4580   003182                     
  4581                           ; BSR set to: 0
  4582   003182  A7BD               	btfss	f_open@mode& (0+255),3,b
  4583   003184  EFC6  F018         	goto	u8331
  4584   003188  EFC8  F018         	goto	u8330
  4585   00318C                     u8331:
  4586   00318C  EFAA  F019         	goto	l667
  4587   003190                     u8330:
  4588   003190                     
  4589                           ; BSR set to: 0
  4590                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  4591   003190  EE20 F00E          	lfsr	2,14
  4592   003194  51D7               	movf	f_open@dir& (0+255),w,b
  4593   003196  26D9               	addwf	fsr2l,f,c
  4594   003198  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  4595   00319A  22DA               	addwfc	fsr2h,f,c
  4596   00319C  0E00               	movlw	0
  4597   00319E  6EDE               	movwf	postinc2,c
  4598   0031A0  0E00               	movlw	0
  4599   0031A2  6EDE               	movwf	postinc2,c
  4600   0031A4  0E21               	movlw	33
  4601   0031A6  6EDE               	movwf	postinc2,c
  4602   0031A8  0E46               	movlw	70
  4603   0031AA  6EDD               	movwf	postdec2,c
  4604   0031AC                     
  4605                           ; BSR set to: 0
  4606                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  4607   0031AC  EE20 F016          	lfsr	2,22
  4608   0031B0  51D7               	movf	f_open@dir& (0+255),w,b
  4609   0031B2  26D9               	addwf	fsr2l,f,c
  4610   0031B4  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  4611   0031B6  22DA               	addwfc	fsr2h,f,c
  4612   0031B8  0E00               	movlw	0
  4613   0031BA  6EDE               	movwf	postinc2,c
  4614   0031BC  0E00               	movlw	0
  4615   0031BE  6EDE               	movwf	postinc2,c
  4616   0031C0  0E21               	movlw	33
  4617   0031C2  6EDE               	movwf	postinc2,c
  4618   0031C4  0E46               	movlw	70
  4619   0031C6  6EDD               	movwf	postdec2,c
  4620   0031C8                     
  4621                           ; BSR set to: 0
  4622                           ;ff.c: 2516:     dir[11] = 0;
  4623   0031C8  EE20 F00B          	lfsr	2,11
  4624   0031CC  51D7               	movf	f_open@dir& (0+255),w,b
  4625   0031CE  26D9               	addwf	fsr2l,f,c
  4626   0031D0  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  4627   0031D2  22DA               	addwfc	fsr2h,f,c
  4628   0031D4  6ADF               	clrf	indf2,c
  4629   0031D6                     
  4630                           ; BSR set to: 0
  4631                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  4632   0031D6  EE20 F01C          	lfsr	2,28
  4633   0031DA  51D7               	movf	f_open@dir& (0+255),w,b
  4634   0031DC  26D9               	addwf	fsr2l,f,c
  4635   0031DE  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  4636   0031E0  22DA               	addwfc	fsr2h,f,c
  4637   0031E2  6ADE               	clrf	postinc2,c
  4638   0031E4  6ADE               	clrf	postinc2,c
  4639   0031E6  6ADE               	clrf	postinc2,c
  4640   0031E8  6ADD               	clrf	postdec2,c
  4641   0031EA                     
  4642                           ; BSR set to: 0
  4643                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  4644   0031EA  C0D9  F001         	movff	f_open@dj,ld_clust@fs
  4645   0031EE  C0DA  F002         	movff	f_open@dj+1,ld_clust@fs+1
  4646   0031F2  C0D7  F003         	movff	f_open@dir,ld_clust@dir
  4647   0031F6  C0D8  F004         	movff	f_open@dir+1,ld_clust@dir+1
  4648   0031FA  ECA0  F030         	call	_ld_clust	;wreg free
  4649   0031FE  C001  F0CE         	movff	?_ld_clust,f_open@cl
  4650   003202  C002  F0CF         	movff	?_ld_clust+1,f_open@cl+1
  4651   003206  C003  F0D0         	movff	?_ld_clust+2,f_open@cl+2
  4652   00320A  C004  F0D1         	movff	?_ld_clust+3,f_open@cl+3
  4653   00320E                     
  4654                           ;ff.c: 2519:     st_clust(dir, 0);
  4655   00320E  C0D7  F001         	movff	f_open@dir,st_clust@dir
  4656   003212  C0D8  F002         	movff	f_open@dir+1,st_clust@dir+1
  4657   003216  0E00               	movlw	0
  4658   003218  6E03               	movwf	st_clust@cl^0,c
  4659   00321A  0E00               	movlw	0
  4660   00321C  6E04               	movwf	(st_clust@cl+1)^0,c
  4661   00321E  0E00               	movlw	0
  4662   003220  6E05               	movwf	(st_clust@cl+2)^0,c
  4663   003222  0E00               	movlw	0
  4664   003224  6E06               	movwf	(st_clust@cl+3)^0,c
  4665   003226  ECB2  F032         	call	_st_clust	;wreg free
  4666   00322A                     
  4667                           ;ff.c: 2520:     dj.fs->wflag = 1;
  4668   00322A  0100               	movlb	0	; () banked
  4669   00322C  EE20 F004          	lfsr	2,4
  4670   003230  51D9               	movf	f_open@dj& (0+255),w,b
  4671   003232  26D9               	addwf	fsr2l,f,c
  4672   003234  51DA               	movf	(f_open@dj+1)& (0+255),w,b
  4673   003236  22DA               	addwfc	fsr2h,f,c
  4674   003238  0E01               	movlw	1
  4675   00323A  6EDF               	movwf	indf2,c
  4676   00323C                     
  4677                           ; BSR set to: 0
  4678                           ;ff.c: 2521:     if (cl) {
  4679   00323C  51CE               	movf	f_open@cl& (0+255),w,b
  4680   00323E  11CF               	iorwf	(f_open@cl+1)& (0+255),w,b
  4681   003240  11D0               	iorwf	(f_open@cl+2)& (0+255),w,b
  4682   003242  11D1               	iorwf	(f_open@cl+3)& (0+255),w,b
  4683   003244  B4D8               	btfsc	status,2,c
  4684   003246  EF27  F019         	goto	u8341
  4685   00324A  EF29  F019         	goto	u8340
  4686   00324E                     u8341:
  4687   00324E  EFAA  F019         	goto	l667
  4688   003252                     u8340:
  4689   003252                     
  4690                           ; BSR set to: 0
  4691                           ;ff.c: 2522:      dw = dj.fs->winsect;
  4692   003252  EE20 F02A          	lfsr	2,42
  4693   003256  51D9               	movf	f_open@dj& (0+255),w,b
  4694   003258  26D9               	addwf	fsr2l,f,c
  4695   00325A  51DA               	movf	(f_open@dj+1)& (0+255),w,b
  4696   00325C  22DA               	addwfc	fsr2h,f,c
  4697   00325E  CFDE F0D2          	movff	postinc2,f_open@dw
  4698   003262  CFDE F0D3          	movff	postinc2,f_open@dw+1
  4699   003266  CFDE F0D4          	movff	postinc2,f_open@dw+2
  4700   00326A  CFDE F0D5          	movff	postinc2,f_open@dw+3
  4701   00326E                     
  4702                           ; BSR set to: 0
  4703                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  4704   00326E  C0D9  F056         	movff	f_open@dj,remove_chain@fs
  4705   003272  C0DA  F057         	movff	f_open@dj+1,remove_chain@fs+1
  4706   003276  C0CE  F058         	movff	f_open@cl,remove_chain@clst
  4707   00327A  C0CF  F059         	movff	f_open@cl+1,remove_chain@clst+1
  4708   00327E  C0D0  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  4709   003282  C0D1  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  4710   003286  EC7C  F025         	call	_remove_chain	;wreg free
  4711   00328A  0100               	movlb	0	; () banked
  4712   00328C  6FD6               	movwf	f_open@res& (0+255),b
  4713   00328E                     
  4714                           ; BSR set to: 0
  4715                           ;ff.c: 2524:      if (res == FR_OK) {
  4716   00328E  51D6               	movf	f_open@res& (0+255),w,b
  4717   003290  A4D8               	btfss	status,2,c
  4718   003292  EF4D  F019         	goto	u8351
  4719   003296  EF4F  F019         	goto	u8350
  4720   00329A                     u8351:
  4721   00329A  EFAA  F019         	goto	l667
  4722   00329E                     u8350:
  4723   00329E                     
  4724                           ; BSR set to: 0
  4725                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  4726   00329E  0EFF               	movlw	255
  4727   0032A0  25CE               	addwf	f_open@cl& (0+255),w,b
  4728   0032A2  6FBE               	movwf	??_f_open& (0+255),b
  4729   0032A4  0EFF               	movlw	255
  4730   0032A6  21CF               	addwfc	(f_open@cl+1)& (0+255),w,b
  4731   0032A8  6FBF               	movwf	(??_f_open+1)& (0+255),b
  4732   0032AA  0EFF               	movlw	255
  4733   0032AC  21D0               	addwfc	(f_open@cl+2)& (0+255),w,b
  4734   0032AE  6FC0               	movwf	(??_f_open+2)& (0+255),b
  4735   0032B0  0EFF               	movlw	255
  4736   0032B2  21D1               	addwfc	(f_open@cl+3)& (0+255),w,b
  4737   0032B4  6FC1               	movwf	(??_f_open+3)& (0+255),b
  4738   0032B6  EE20 F00A          	lfsr	2,10
  4739   0032BA  51D9               	movf	f_open@dj& (0+255),w,b
  4740   0032BC  26D9               	addwf	fsr2l,f,c
  4741   0032BE  51DA               	movf	(f_open@dj+1)& (0+255),w,b
  4742   0032C0  22DA               	addwfc	fsr2h,f,c
  4743   0032C2  C0BE  FFDE         	movff	??_f_open,postinc2
  4744   0032C6  C0BF  FFDE         	movff	??_f_open+1,postinc2
  4745   0032CA  C0C0  FFDE         	movff	??_f_open+2,postinc2
  4746   0032CE  C0C1  FFDE         	movff	??_f_open+3,postinc2
  4747   0032D2                     
  4748                           ; BSR set to: 0
  4749                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  4750   0032D2  C0D9  F030         	movff	f_open@dj,move_window@fs
  4751   0032D6  C0DA  F031         	movff	f_open@dj+1,move_window@fs+1
  4752   0032DA  C0D2  F032         	movff	f_open@dw,move_window@sector
  4753   0032DE  C0D3  F033         	movff	f_open@dw+1,move_window@sector+1
  4754   0032E2  C0D4  F034         	movff	f_open@dw+2,move_window@sector+2
  4755   0032E6  C0D5  F035         	movff	f_open@dw+3,move_window@sector+3
  4756   0032EA  ECF5  F02D         	call	_move_window	;wreg free
  4757   0032EE  0100               	movlb	0	; () banked
  4758   0032F0  6FD6               	movwf	f_open@res& (0+255),b
  4759   0032F2  EFAA  F019         	goto	l667
  4760   0032F6                     l6091:
  4761                           
  4762                           ; BSR set to: 0
  4763                           ;ff.c: 2532:    if (res == FR_OK) {
  4764   0032F6  51D6               	movf	f_open@res& (0+255),w,b
  4765   0032F8  A4D8               	btfss	status,2,c
  4766   0032FA  EF81  F019         	goto	u8361
  4767   0032FE  EF83  F019         	goto	u8360
  4768   003302                     u8361:
  4769   003302  EFAA  F019         	goto	l667
  4770   003306                     u8360:
  4771   003306                     
  4772                           ; BSR set to: 0
  4773                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  4774   003306  EE20 F00B          	lfsr	2,11
  4775   00330A  51D7               	movf	f_open@dir& (0+255),w,b
  4776   00330C  26D9               	addwf	fsr2l,f,c
  4777   00330E  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  4778   003310  22DA               	addwfc	fsr2h,f,c
  4779   003312  A8DF               	btfss	indf2,4,c
  4780   003314  EF8E  F019         	goto	u8371
  4781   003318  EF90  F019         	goto	u8370
  4782   00331C                     u8371:
  4783   00331C  EF94  F019         	goto	l669
  4784   003320                     u8370:
  4785   003320                     
  4786                           ; BSR set to: 0
  4787                           ;ff.c: 2534:      res = FR_NO_FILE;
  4788   003320  0E04               	movlw	4
  4789   003322  6FD6               	movwf	f_open@res& (0+255),b
  4790                           
  4791                           ;ff.c: 2535:     } else {
  4792   003324  EFAA  F019         	goto	l667
  4793   003328                     l669:
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  4797   003328  A3BD               	btfss	f_open@mode& (0+255),1,b
  4798   00332A  EF99  F019         	goto	u8381
  4799   00332E  EF9B  F019         	goto	u8380
  4800   003332                     u8381:
  4801   003332  EFAA  F019         	goto	l667
  4802   003336                     u8380:
  4803   003336                     
  4804                           ; BSR set to: 0
  4805   003336  EE20 F00B          	lfsr	2,11
  4806   00333A  51D7               	movf	f_open@dir& (0+255),w,b
  4807   00333C  26D9               	addwf	fsr2l,f,c
  4808   00333E  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  4809   003340  22DA               	addwfc	fsr2h,f,c
  4810   003342  A0DF               	btfss	indf2,0,c
  4811   003344  EFA6  F019         	goto	u8391
  4812   003348  EFA8  F019         	goto	u8390
  4813   00334C                     u8391:
  4814   00334C  EFAA  F019         	goto	l667
  4815   003350                     u8390:
  4816   003350                     
  4817                           ; BSR set to: 0
  4818                           ;ff.c: 2537:       res = FR_DENIED;
  4819   003350  0E07               	movlw	7
  4820   003352  6FD6               	movwf	f_open@res& (0+255),b
  4821   003354                     l667:
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;ff.c: 2541:   if (res == FR_OK) {
  4825   003354  51D6               	movf	f_open@res& (0+255),w,b
  4826   003356  A4D8               	btfss	status,2,c
  4827   003358  EFB0  F019         	goto	u8401
  4828   00335C  EFB2  F019         	goto	u8400
  4829   003360                     u8401:
  4830   003360  EFD8  F019         	goto	l6109
  4831   003364                     u8400:
  4832   003364                     
  4833                           ; BSR set to: 0
  4834                           ;ff.c: 2542:    if (mode & 0x08)
  4835   003364  A7BD               	btfss	f_open@mode& (0+255),3,b
  4836   003366  EFB7  F019         	goto	u8411
  4837   00336A  EFB9  F019         	goto	u8410
  4838   00336E                     u8411:
  4839   00336E  EFBA  F019         	goto	l6105
  4840   003372                     u8410:
  4841   003372                     
  4842                           ; BSR set to: 0
  4843                           ;ff.c: 2543:     mode |= 0x20;
  4844   003372  8BBD               	bsf	f_open@mode& (0+255),5,b
  4845   003374                     l6105:
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  4849   003374  EE20 F02A          	lfsr	2,42
  4850   003378  51D9               	movf	f_open@dj& (0+255),w,b
  4851   00337A  26D9               	addwf	fsr2l,f,c
  4852   00337C  51DA               	movf	(f_open@dj+1)& (0+255),w,b
  4853   00337E  22DA               	addwfc	fsr2h,f,c
  4854   003380  EE10 F01A          	lfsr	1,26
  4855   003384  51BA               	movf	f_open@fp& (0+255),w,b
  4856   003386  26E1               	addwf	fsr1l,f,c
  4857   003388  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  4858   00338A  22E2               	addwfc	fsr1h,f,c
  4859   00338C  CFDE FFE6          	movff	postinc2,postinc1
  4860   003390  CFDE FFE6          	movff	postinc2,postinc1
  4861   003394  CFDE FFE6          	movff	postinc2,postinc1
  4862   003398  CFDE FFE6          	movff	postinc2,postinc1
  4863   00339C                     
  4864                           ; BSR set to: 0
  4865                           ;ff.c: 2545:    fp->dir_ptr = dir;
  4866   00339C  EE20 F01E          	lfsr	2,30
  4867   0033A0  51BA               	movf	f_open@fp& (0+255),w,b
  4868   0033A2  26D9               	addwf	fsr2l,f,c
  4869   0033A4  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  4870   0033A6  22DA               	addwfc	fsr2h,f,c
  4871   0033A8  C0D7  FFDE         	movff	f_open@dir,postinc2
  4872   0033AC  C0D8  FFDD         	movff	f_open@dir+1,postdec2
  4873   0033B0                     l6109:
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;ff.c: 2565:   if (res == FR_OK) {
  4877   0033B0  51D6               	movf	f_open@res& (0+255),w,b
  4878   0033B2  A4D8               	btfss	status,2,c
  4879   0033B4  EFDE  F019         	goto	u8421
  4880   0033B8  EFE0  F019         	goto	u8420
  4881   0033BC                     u8421:
  4882   0033BC  EF4C  F01A         	goto	l6125
  4883   0033C0                     u8420:
  4884   0033C0                     
  4885                           ; BSR set to: 0
  4886                           ;ff.c: 2566:    fp->flag = mode;
  4887   0033C0  EE20 F004          	lfsr	2,4
  4888   0033C4  51BA               	movf	f_open@fp& (0+255),w,b
  4889   0033C6  26D9               	addwf	fsr2l,f,c
  4890   0033C8  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  4891   0033CA  22DA               	addwfc	fsr2h,f,c
  4892   0033CC  C0BD  FFDF         	movff	f_open@mode,indf2
  4893                           
  4894                           ;ff.c: 2567:    fp->err = 0;
  4895   0033D0  EE20 F005          	lfsr	2,5
  4896   0033D4  51BA               	movf	f_open@fp& (0+255),w,b
  4897   0033D6  26D9               	addwf	fsr2l,f,c
  4898   0033D8  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  4899   0033DA  22DA               	addwfc	fsr2h,f,c
  4900   0033DC  6ADF               	clrf	indf2,c
  4901   0033DE                     
  4902                           ; BSR set to: 0
  4903                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  4904   0033DE  C0D9  F001         	movff	f_open@dj,ld_clust@fs
  4905   0033E2  C0DA  F002         	movff	f_open@dj+1,ld_clust@fs+1
  4906   0033E6  C0D7  F003         	movff	f_open@dir,ld_clust@dir
  4907   0033EA  C0D8  F004         	movff	f_open@dir+1,ld_clust@dir+1
  4908   0033EE  ECA0  F030         	call	_ld_clust	;wreg free
  4909   0033F2  0100               	movlb	0	; () banked
  4910   0033F4  EE20 F00E          	lfsr	2,14
  4911   0033F8  51BA               	movf	f_open@fp& (0+255),w,b
  4912   0033FA  26D9               	addwf	fsr2l,f,c
  4913   0033FC  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  4914   0033FE  22DA               	addwfc	fsr2h,f,c
  4915   003400  C001  FFDE         	movff	?_ld_clust,postinc2
  4916   003404  C002  FFDE         	movff	?_ld_clust+1,postinc2
  4917   003408  C003  FFDE         	movff	?_ld_clust+2,postinc2
  4918   00340C  C004  FFDE         	movff	?_ld_clust+3,postinc2
  4919   003410                     
  4920                           ; BSR set to: 0
  4921                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  4922   003410  EE20 F01C          	lfsr	2,28
  4923   003414  51D7               	movf	f_open@dir& (0+255),w,b
  4924   003416  26D9               	addwf	fsr2l,f,c
  4925   003418  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  4926   00341A  22DA               	addwfc	fsr2h,f,c
  4927   00341C  EE10 F00A          	lfsr	1,10
  4928   003420  51BA               	movf	f_open@fp& (0+255),w,b
  4929   003422  26E1               	addwf	fsr1l,f,c
  4930   003424  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  4931   003426  22E2               	addwfc	fsr1h,f,c
  4932   003428  CFDE FFE6          	movff	postinc2,postinc1
  4933   00342C  CFDE FFE6          	movff	postinc2,postinc1
  4934   003430  CFDE FFE6          	movff	postinc2,postinc1
  4935   003434  CFDE FFE6          	movff	postinc2,postinc1
  4936   003438                     
  4937                           ; BSR set to: 0
  4938                           ;ff.c: 2570:    fp->fptr = 0;
  4939   003438  EE20 F006          	lfsr	2,6
  4940   00343C  51BA               	movf	f_open@fp& (0+255),w,b
  4941   00343E  26D9               	addwf	fsr2l,f,c
  4942   003440  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  4943   003442  22DA               	addwfc	fsr2h,f,c
  4944   003444  6ADE               	clrf	postinc2,c
  4945   003446  6ADE               	clrf	postinc2,c
  4946   003448  6ADE               	clrf	postinc2,c
  4947   00344A  6ADD               	clrf	postdec2,c
  4948   00344C                     
  4949                           ; BSR set to: 0
  4950                           ;ff.c: 2571:    fp->dsect = 0;
  4951   00344C  EE20 F016          	lfsr	2,22
  4952   003450  51BA               	movf	f_open@fp& (0+255),w,b
  4953   003452  26D9               	addwf	fsr2l,f,c
  4954   003454  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  4955   003456  22DA               	addwfc	fsr2h,f,c
  4956   003458  6ADE               	clrf	postinc2,c
  4957   00345A  6ADE               	clrf	postinc2,c
  4958   00345C  6ADE               	clrf	postinc2,c
  4959   00345E  6ADD               	clrf	postdec2,c
  4960   003460                     
  4961                           ; BSR set to: 0
  4962                           ;ff.c: 2575:    fp->fs = dj.fs;
  4963   003460  C0BA  FFD9         	movff	f_open@fp,fsr2l
  4964   003464  C0BB  FFDA         	movff	f_open@fp+1,fsr2h
  4965   003468  C0D9  FFDE         	movff	f_open@dj,postinc2
  4966   00346C  C0DA  FFDD         	movff	f_open@dj+1,postdec2
  4967   003470                     
  4968                           ; BSR set to: 0
  4969                           ;ff.c: 2576:    fp->id = fp->fs->id;
  4970   003470  C0BA  FFD9         	movff	f_open@fp,fsr2l
  4971   003474  C0BB  FFDA         	movff	f_open@fp+1,fsr2h
  4972   003478  EE10 F006          	lfsr	1,6
  4973   00347C  50DE               	movf	postinc2,w,c
  4974   00347E  26E1               	addwf	fsr1l,f,c
  4975   003480  50DD               	movf	postdec2,w,c
  4976   003482  22E2               	addwfc	fsr1h,f,c
  4977   003484  EE20 F002          	lfsr	2,2
  4978   003488  51BA               	movf	f_open@fp& (0+255),w,b
  4979   00348A  26D9               	addwf	fsr2l,f,c
  4980   00348C  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  4981   00348E  22DA               	addwfc	fsr2h,f,c
  4982   003490  CFE6 FFDE          	movff	postinc1,postinc2
  4983   003494  CFE5 FFDD          	movff	postdec1,postdec2
  4984   003498                     l6125:
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;ff.c: 2580:  return res;
  4988   003498  51D6               	movf	f_open@res& (0+255),w,b
  4989   00349A                     l653:
  4990                           
  4991                           ; BSR set to: 0
  4992   00349A  0012               	return		;funcret
  4993   00349C                     __end_of_f_open:
  4994                           	callstack 0
  4995                           
  4996 ;; *************** function _remove_chain *****************
  4997 ;; Defined at:
  4998 ;;		line 937 in file "ff.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  fs              2   85[COMRAM] PTR struct .
  5001 ;;		 -> FatFs(558), NULL(0), 
  5002 ;;  clst            4   87[COMRAM] unsigned long 
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;  nxt             4   96[COMRAM] unsigned long 
  5005 ;;  res             1   95[COMRAM] enum E95
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  1    wreg      enum E95
  5008 ;; Registers used:
  5009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5015 ;;      Params:         6       0       0       0       0       0       0
  5016 ;;      Locals:         5       0       0       0       0       0       0
  5017 ;;      Temps:          4       0       0       0       0       0       0
  5018 ;;      Totals:        15       0       0       0       0       0       0
  5019 ;;Total ram usage:       15 bytes
  5020 ;; Hardware stack levels used: 1
  5021 ;; Hardware stack levels required when called: 9
  5022 ;; This function calls:
  5023 ;;		_get_fat
  5024 ;;		_put_fat
  5025 ;; This function is called by:
  5026 ;;		_f_open
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           	psect	text12
  5031   004AF8                     __ptext12:
  5032                           	callstack 0
  5033   004AF8                     _remove_chain:
  5034                           	callstack 20
  5035   004AF8                     
  5036                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  5037   004AF8  505B               	movf	(remove_chain@clst+3)^0,w,c
  5038   004AFA  105A               	iorwf	(remove_chain@clst+2)^0,w,c
  5039   004AFC  1059               	iorwf	(remove_chain@clst+1)^0,w,c
  5040   004AFE  E109               	bnz	u7500
  5041   004B00  0E02               	movlw	2
  5042   004B02  5C58               	subwf	remove_chain@clst^0,w,c
  5043   004B04  A0D8               	btfss	status,0,c
  5044   004B06  EF87  F025         	goto	u7501
  5045   004B0A  EF89  F025         	goto	u7500
  5046   004B0E                     u7501:
  5047   004B0E  EF9E  F025         	goto	l5571
  5048   004B12                     u7500:
  5049   004B12  EE20 F012          	lfsr	2,18
  5050   004B16  5056               	movf	remove_chain@fs^0,w,c
  5051   004B18  26D9               	addwf	fsr2l,f,c
  5052   004B1A  5057               	movf	(remove_chain@fs+1)^0,w,c
  5053   004B1C  22DA               	addwfc	fsr2h,f,c
  5054   004B1E  50DE               	movf	postinc2,w,c
  5055   004B20  5C58               	subwf	remove_chain@clst^0,w,c
  5056   004B22  50DE               	movf	postinc2,w,c
  5057   004B24  5859               	subwfb	(remove_chain@clst+1)^0,w,c
  5058   004B26  50DE               	movf	postinc2,w,c
  5059   004B28  585A               	subwfb	(remove_chain@clst+2)^0,w,c
  5060   004B2A  50DE               	movf	postinc2,w,c
  5061   004B2C  585B               	subwfb	(remove_chain@clst+3)^0,w,c
  5062   004B2E  A0D8               	btfss	status,0,c
  5063   004B30  EF9C  F025         	goto	u7511
  5064   004B34  EF9E  F025         	goto	u7510
  5065   004B38                     u7511:
  5066   004B38  EFA2  F025         	goto	l377
  5067   004B3C                     u7510:
  5068   004B3C                     l5571:
  5069                           
  5070                           ;ff.c: 949:   res = FR_INT_ERR;
  5071   004B3C  0E02               	movlw	2
  5072   004B3E  6E60               	movwf	remove_chain@res^0,c
  5073                           
  5074                           ;ff.c: 951:  } else {
  5075   004B40  EF4C  F026         	goto	l5599
  5076   004B44                     l377:
  5077                           
  5078                           ;ff.c: 952:   res = FR_OK;
  5079   004B44  6A60               	clrf	remove_chain@res^0,c
  5080                           
  5081                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  5082   004B46  EF37  F026         	goto	l381
  5083   004B4A                     l5573:
  5084                           
  5085                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  5086   004B4A  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  5087   004B4E  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  5088   004B52  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  5089   004B56  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  5090   004B5A  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  5091   004B5E  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  5092   004B62  EC4E  F01A         	call	_get_fat	;wreg free
  5093   004B66  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  5094   004B6A  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  5095   004B6E  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  5096   004B72  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  5097   004B76                     
  5098                           ;ff.c: 955:    if (nxt == 0) break;
  5099   004B76  5061               	movf	remove_chain@nxt^0,w,c
  5100   004B78  1062               	iorwf	(remove_chain@nxt+1)^0,w,c
  5101   004B7A  1063               	iorwf	(remove_chain@nxt+2)^0,w,c
  5102   004B7C  1064               	iorwf	(remove_chain@nxt+3)^0,w,c
  5103   004B7E  A4D8               	btfss	status,2,c
  5104   004B80  EFC4  F025         	goto	u7521
  5105   004B84  EFC6  F025         	goto	u7520
  5106   004B88                     u7521:
  5107   004B88  EFC8  F025         	goto	l5579
  5108   004B8C                     u7520:
  5109   004B8C  EF4C  F026         	goto	l5599
  5110   004B90                     l5579:
  5111                           
  5112                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  5113   004B90  0461               	decf	remove_chain@nxt^0,w,c
  5114   004B92  1062               	iorwf	(remove_chain@nxt+1)^0,w,c
  5115   004B94  1063               	iorwf	(remove_chain@nxt+2)^0,w,c
  5116   004B96  1064               	iorwf	(remove_chain@nxt+3)^0,w,c
  5117   004B98  A4D8               	btfss	status,2,c
  5118   004B9A  EFD1  F025         	goto	u7531
  5119   004B9E  EFD3  F025         	goto	u7530
  5120   004BA2                     u7531:
  5121   004BA2  EFD5  F025         	goto	l5583
  5122   004BA6                     u7530:
  5123   004BA6  EF9E  F025         	goto	l5571
  5124   004BAA                     l5583:
  5125                           
  5126                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  5127   004BAA  2861               	incf	remove_chain@nxt^0,w,c
  5128   004BAC  E10A               	bnz	u7541
  5129   004BAE  2862               	incf	(remove_chain@nxt+1)^0,w,c
  5130   004BB0  E108               	bnz	u7541
  5131   004BB2  2863               	incf	(remove_chain@nxt+2)^0,w,c
  5132   004BB4  E106               	bnz	u7541
  5133   004BB6  2864               	incf	(remove_chain@nxt+3)^0,w,c
  5134   004BB8  A4D8               	btfss	status,2,c
  5135   004BBA  EFE1  F025         	goto	u7541
  5136   004BBE  EFE3  F025         	goto	u7540
  5137   004BC2                     u7541:
  5138   004BC2  EFE7  F025         	goto	l5587
  5139   004BC6                     u7540:
  5140   004BC6  0E01               	movlw	1
  5141   004BC8  6E60               	movwf	remove_chain@res^0,c
  5142   004BCA  EF4C  F026         	goto	l5599
  5143   004BCE                     l5587:
  5144                           
  5145                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  5146   004BCE  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  5147   004BD2  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  5148   004BD6  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  5149   004BDA  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  5150   004BDE  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  5151   004BE2  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  5152   004BE6  0E00               	movlw	0
  5153   004BE8  6E41               	movwf	put_fat@val^0,c
  5154   004BEA  0E00               	movlw	0
  5155   004BEC  6E42               	movwf	(put_fat@val+1)^0,c
  5156   004BEE  0E00               	movlw	0
  5157   004BF0  6E43               	movwf	(put_fat@val+2)^0,c
  5158   004BF2  0E00               	movlw	0
  5159   004BF4  6E44               	movwf	(put_fat@val+3)^0,c
  5160   004BF6  EC98  F013         	call	_put_fat	;wreg free
  5161   004BFA  6E60               	movwf	remove_chain@res^0,c
  5162   004BFC                     
  5163                           ;ff.c: 959:    if (res != FR_OK) break;
  5164   004BFC  5060               	movf	remove_chain@res^0,w,c
  5165   004BFE  B4D8               	btfsc	status,2,c
  5166   004C00  EF04  F026         	goto	u7551
  5167   004C04  EF06  F026         	goto	u7550
  5168   004C08                     u7551:
  5169   004C08  EF08  F026         	goto	l5593
  5170   004C0C                     u7550:
  5171   004C0C  EF4C  F026         	goto	l5599
  5172   004C10                     l5593:
  5173                           
  5174                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  5175   004C10  EE20 F00E          	lfsr	2,14
  5176   004C14  5056               	movf	remove_chain@fs^0,w,c
  5177   004C16  26D9               	addwf	fsr2l,f,c
  5178   004C18  5057               	movf	(remove_chain@fs+1)^0,w,c
  5179   004C1A  22DA               	addwfc	fsr2h,f,c
  5180   004C1C  28DE               	incf	postinc2,w,c
  5181   004C1E  E10C               	bnz	u7560
  5182   004C20  28DE               	incf	postinc2,w,c
  5183   004C22  E10A               	bnz	u7560
  5184   004C24  28DE               	incf	postinc2,w,c
  5185   004C26  E108               	bnz	u7560
  5186   004C28  28DE               	incf	postinc2,w,c
  5187   004C2A  B4D8               	btfsc	status,2,c
  5188   004C2C  EF1A  F026         	goto	u7561
  5189   004C30  EF1C  F026         	goto	u7560
  5190   004C34                     u7561:
  5191   004C34  EF2F  F026         	goto	l5597
  5192   004C38                     u7560:
  5193   004C38                     
  5194                           ;ff.c: 961:     fs->free_clust++;
  5195   004C38  EE20 F00E          	lfsr	2,14
  5196   004C3C  5056               	movf	remove_chain@fs^0,w,c
  5197   004C3E  26D9               	addwf	fsr2l,f,c
  5198   004C40  5057               	movf	(remove_chain@fs+1)^0,w,c
  5199   004C42  22DA               	addwfc	fsr2h,f,c
  5200   004C44  2ADE               	incf	postinc2,f,c
  5201   004C46  0E00               	movlw	0
  5202   004C48  22DE               	addwfc	postinc2,f,c
  5203   004C4A  22DE               	addwfc	postinc2,f,c
  5204   004C4C  22DE               	addwfc	postinc2,f,c
  5205                           
  5206                           ;ff.c: 962:     fs->fsi_flag |= 1;
  5207   004C4E  EE20 F005          	lfsr	2,5
  5208   004C52  5056               	movf	remove_chain@fs^0,w,c
  5209   004C54  26D9               	addwf	fsr2l,f,c
  5210   004C56  5057               	movf	(remove_chain@fs+1)^0,w,c
  5211   004C58  22DA               	addwfc	fsr2h,f,c
  5212   004C5A  0E00               	movlw	0
  5213   004C5C  80DB               	bsf	plusw2,0,c
  5214   004C5E                     l5597:
  5215                           
  5216                           ;ff.c: 974:    clst = nxt;
  5217   004C5E  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  5218   004C62  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  5219   004C66  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  5220   004C6A  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  5221   004C6E                     l381:
  5222                           
  5223                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  5224   004C6E  EE20 F012          	lfsr	2,18
  5225   004C72  5056               	movf	remove_chain@fs^0,w,c
  5226   004C74  26D9               	addwf	fsr2l,f,c
  5227   004C76  5057               	movf	(remove_chain@fs+1)^0,w,c
  5228   004C78  22DA               	addwfc	fsr2h,f,c
  5229   004C7A  50DE               	movf	postinc2,w,c
  5230   004C7C  5C58               	subwf	remove_chain@clst^0,w,c
  5231   004C7E  50DE               	movf	postinc2,w,c
  5232   004C80  5859               	subwfb	(remove_chain@clst+1)^0,w,c
  5233   004C82  50DE               	movf	postinc2,w,c
  5234   004C84  585A               	subwfb	(remove_chain@clst+2)^0,w,c
  5235   004C86  50DE               	movf	postinc2,w,c
  5236   004C88  585B               	subwfb	(remove_chain@clst+3)^0,w,c
  5237   004C8A  A0D8               	btfss	status,0,c
  5238   004C8C  EF4A  F026         	goto	u7571
  5239   004C90  EF4C  F026         	goto	u7570
  5240   004C94                     u7571:
  5241   004C94  EFA5  F025         	goto	l5573
  5242   004C98                     u7570:
  5243   004C98                     l5599:
  5244                           
  5245                           ;ff.c: 978:  return res;
  5246   004C98  5060               	movf	remove_chain@res^0,w,c
  5247   004C9A  0012               	return		;funcret
  5248   004C9C                     __end_of_remove_chain:
  5249                           	callstack 0
  5250                           
  5251 ;; *************** function _follow_path *****************
  5252 ;; Defined at:
  5253 ;;		line 2052 in file "ff.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;  dp              1    5[BANK0 ] PTR struct .
  5256 ;;		 -> f_open@dj(21), 
  5257 ;;  path            1    6[BANK0 ] PTR const unsigned char 
  5258 ;;		 -> STR_4(10), STR_3(1), 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  dir             2    7[BANK0 ] PTR unsigned char 
  5261 ;;		 -> FatFs(558), NULL(0), 
  5262 ;;  res             1   10[BANK0 ] enum E95
  5263 ;;  ns              1    9[BANK0 ] unsigned char 
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  1    wreg      enum E95
  5266 ;; Registers used:
  5267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5273 ;;      Params:         0       2       0       0       0       0       0
  5274 ;;      Locals:         0       4       0       0       0       0       0
  5275 ;;      Temps:          0       0       0       0       0       0       0
  5276 ;;      Totals:         0       6       0       0       0       0       0
  5277 ;;Total ram usage:        6 bytes
  5278 ;; Hardware stack levels used: 1
  5279 ;; Hardware stack levels required when called: 12
  5280 ;; This function calls:
  5281 ;;		_create_name
  5282 ;;		_dir_find
  5283 ;;		_dir_sdi
  5284 ;;		_ld_clust
  5285 ;; This function is called by:
  5286 ;;		_f_open
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           	psect	text13
  5291   004C9C                     __ptext13:
  5292                           	callstack 0
  5293   004C9C                     _follow_path:
  5294                           	callstack 17
  5295   004C9C                     
  5296                           ;ff.c: 2053:  DIR* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESULT
      +                           res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  5297   004C9C  C086  FFF6         	movff	follow_path@path,tblptrl
  5298   004CA0                     	if	1	;There is more than 1 active tblptr byte
  5299   004CA0  0E06               	movlw	high __smallconst
  5300   004CA2  6EF7               	movwf	tblptrh,c
  5301   004CA4                     	endif
  5302   004CA4                     	if	0	;tblptru may be non-zero
  5303   004CA4                     	endif
  5304   004CA4                     	if	0	;tblptru may be non-zero
  5305   004CA4                     	endif
  5306   004CA4  0008               	tblrd		*
  5307   004CA6  50F5               	movf	tablat,w,c
  5308   004CA8  0A2F               	xorlw	47
  5309   004CAA  B4D8               	btfsc	status,2,c
  5310   004CAC  EF5A  F026         	goto	u7601
  5311   004CB0  EF5C  F026         	goto	u7600
  5312   004CB4                     u7601:
  5313   004CB4  EF6A  F026         	goto	l5625
  5314   004CB8                     u7600:
  5315   004CB8  C086  FFF6         	movff	follow_path@path,tblptrl
  5316   004CBC                     	if	1	;There is more than 1 active tblptr byte
  5317   004CBC  0E06               	movlw	high __smallconst
  5318   004CBE  6EF7               	movwf	tblptrh,c
  5319   004CC0                     	endif
  5320   004CC0                     	if	0	;tblptru may be non-zero
  5321   004CC0                     	endif
  5322   004CC0                     	if	0	;tblptru may be non-zero
  5323   004CC0                     	endif
  5324   004CC0  0008               	tblrd		*
  5325   004CC2  50F5               	movf	tablat,w,c
  5326   004CC4  0A5C               	xorlw	92
  5327   004CC6  A4D8               	btfss	status,2,c
  5328   004CC8  EF68  F026         	goto	u7611
  5329   004CCC  EF6A  F026         	goto	u7610
  5330   004CD0                     u7611:
  5331   004CD0  EF6C  F026         	goto	l5627
  5332   004CD4                     u7610:
  5333   004CD4                     l5625:
  5334                           
  5335                           ;ff.c: 2069:   path++;
  5336   004CD4  0100               	movlb	0	; () banked
  5337   004CD6  2B86               	incf	follow_path@path& (0+255),f,b
  5338   004CD8                     l5627:
  5339                           
  5340                           ;ff.c: 2070:  dp->sclust = 0;
  5341   004CD8  0100               	movlb	0	; () banked
  5342   004CDA  5185               	movf	follow_path@dp& (0+255),w,b
  5343   004CDC  6ED9               	movwf	fsr2l,c
  5344   004CDE  6ADA               	clrf	fsr2h,c
  5345   004CE0  0E06               	movlw	6
  5346   004CE2  26D9               	addwf	fsr2l,f,c
  5347   004CE4  6ADE               	clrf	postinc2,c
  5348   004CE6  6ADE               	clrf	postinc2,c
  5349   004CE8  6ADE               	clrf	postinc2,c
  5350   004CEA  6ADD               	clrf	postdec2,c
  5351   004CEC                     
  5352                           ; BSR set to: 0
  5353                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  5354   004CEC  C086  FFF6         	movff	follow_path@path,tblptrl
  5355   004CF0                     	if	1	;There is more than 1 active tblptr byte
  5356   004CF0  0E06               	movlw	high __smallconst
  5357   004CF2  6EF7               	movwf	tblptrh,c
  5358   004CF4                     	endif
  5359   004CF4                     	if	0	;tblptru may be non-zero
  5360   004CF4                     	endif
  5361   004CF4                     	if	0	;tblptru may be non-zero
  5362   004CF4                     	endif
  5363   004CF4  0E20               	movlw	32
  5364   004CF6  0008               	tblrd		*
  5365   004CF8  60F5               	cpfslt	tablat,c
  5366   004CFA  EF81  F026         	goto	u7621
  5367   004CFE  EF83  F026         	goto	u7620
  5368   004D02                     u7621:
  5369   004D02  EF96  F026         	goto	l5635
  5370   004D06                     u7620:
  5371   004D06                     
  5372                           ; BSR set to: 0
  5373                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  5374   004D06  C085  F055         	movff	follow_path@dp,dir_sdi@dp
  5375   004D0A  0E00               	movlw	0
  5376   004D0C  6E57               	movwf	(dir_sdi@idx+1)^0,c
  5377   004D0E  0E00               	movlw	0
  5378   004D10  6E56               	movwf	dir_sdi@idx^0,c
  5379   004D12  ECDC  F01F         	call	_dir_sdi	;wreg free
  5380   004D16  0100               	movlb	0	; () banked
  5381   004D18  6F8A               	movwf	follow_path@res& (0+255),b
  5382   004D1A                     
  5383                           ; BSR set to: 0
  5384                           ;ff.c: 2075:   dp->dir = 0;
  5385   004D1A  5185               	movf	follow_path@dp& (0+255),w,b
  5386   004D1C  6ED9               	movwf	fsr2l,c
  5387   004D1E  6ADA               	clrf	fsr2h,c
  5388   004D20  0E12               	movlw	18
  5389   004D22  26D9               	addwf	fsr2l,f,c
  5390   004D24  6ADE               	clrf	postinc2,c
  5391   004D26  6ADD               	clrf	postdec2,c
  5392                           
  5393                           ;ff.c: 2076:  } else {
  5394   004D28  EF14  F027         	goto	l5669
  5395   004D2C                     l5635:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;ff.c: 2078:    res = create_name(dp, &path);
  5399   004D2C  C085  F009         	movff	follow_path@dp,create_name@dp
  5400   004D30  0E86               	movlw	low follow_path@path
  5401   004D32  6E0A               	movwf	create_name@path^0,c
  5402   004D34  EC17  F01E         	call	_create_name	;wreg free
  5403   004D38  0100               	movlb	0	; () banked
  5404   004D3A  6F8A               	movwf	follow_path@res& (0+255),b
  5405   004D3C                     
  5406                           ; BSR set to: 0
  5407                           ;ff.c: 2079:    if (res != FR_OK) break;
  5408   004D3C  518A               	movf	follow_path@res& (0+255),w,b
  5409   004D3E  B4D8               	btfsc	status,2,c
  5410   004D40  EFA4  F026         	goto	u7631
  5411   004D44  EFA6  F026         	goto	u7630
  5412   004D48                     u7631:
  5413   004D48  EFA8  F026         	goto	l5641
  5414   004D4C                     u7630:
  5415   004D4C  EF14  F027         	goto	l5669
  5416   004D50                     l5641:
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;ff.c: 2080:    res = dir_find(dp);
  5420   004D50  C085  F080         	movff	follow_path@dp,dir_find@dp
  5421   004D54  EC58  F02A         	call	_dir_find	;wreg free
  5422   004D58  0100               	movlb	0	; () banked
  5423   004D5A  6F8A               	movwf	follow_path@res& (0+255),b
  5424   004D5C                     
  5425                           ; BSR set to: 0
  5426                           ;ff.c: 2081:    ns = dp->fn[11];
  5427   004D5C  5185               	movf	follow_path@dp& (0+255),w,b
  5428   004D5E  6ED9               	movwf	fsr2l,c
  5429   004D60  6ADA               	clrf	fsr2h,c
  5430   004D62  0E14               	movlw	20
  5431   004D64  26D9               	addwf	fsr2l,f,c
  5432   004D66  50DF               	movf	indf2,w,c
  5433   004D68  6ED9               	movwf	fsr2l,c
  5434   004D6A  6ADA               	clrf	fsr2h,c
  5435   004D6C  0E0B               	movlw	11
  5436   004D6E  26D9               	addwf	fsr2l,f,c
  5437   004D70  50DF               	movf	indf2,w,c
  5438   004D72  6F89               	movwf	follow_path@ns& (0+255),b
  5439   004D74                     
  5440                           ; BSR set to: 0
  5441                           ;ff.c: 2082:    if (res != FR_OK) {
  5442   004D74  518A               	movf	follow_path@res& (0+255),w,b
  5443   004D76  B4D8               	btfsc	status,2,c
  5444   004D78  EFC0  F026         	goto	u7641
  5445   004D7C  EFC2  F026         	goto	u7640
  5446   004D80                     u7641:
  5447   004D80  EFD6  F026         	goto	l548
  5448   004D84                     u7640:
  5449   004D84                     
  5450                           ; BSR set to: 0
  5451                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  5452   004D84  0E04               	movlw	4
  5453   004D86  198A               	xorwf	follow_path@res& (0+255),w,b
  5454   004D88  A4D8               	btfss	status,2,c
  5455   004D8A  EFC9  F026         	goto	u7651
  5456   004D8E  EFCB  F026         	goto	u7650
  5457   004D92                     u7651:
  5458   004D92  EF14  F027         	goto	l5669
  5459   004D96                     u7650:
  5460   004D96                     
  5461                           ; BSR set to: 0
  5462                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  5463   004D96  B589               	btfsc	follow_path@ns& (0+255),2,b
  5464   004D98  EFD0  F026         	goto	u7661
  5465   004D9C  EFD2  F026         	goto	u7660
  5466   004DA0                     u7661:
  5467   004DA0  EF14  F027         	goto	l5669
  5468   004DA4                     u7660:
  5469   004DA4                     l5659:
  5470                           
  5471                           ; BSR set to: 0
  5472   004DA4  0E05               	movlw	5
  5473   004DA6  6F8A               	movwf	follow_path@res& (0+255),b
  5474   004DA8  EF14  F027         	goto	l5669
  5475   004DAC                     l548:
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;ff.c: 2094:    if (ns & 0x04) break;
  5479   004DAC  A589               	btfss	follow_path@ns& (0+255),2,b
  5480   004DAE  EFDB  F026         	goto	u7671
  5481   004DB2  EFDD  F026         	goto	u7670
  5482   004DB6                     u7671:
  5483   004DB6  EFDF  F026         	goto	l5663
  5484   004DBA                     u7670:
  5485   004DBA  EF14  F027         	goto	l5669
  5486   004DBE                     l5663:
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;ff.c: 2095:    dir = dp->dir;
  5490   004DBE  5185               	movf	follow_path@dp& (0+255),w,b
  5491   004DC0  6ED9               	movwf	fsr2l,c
  5492   004DC2  6ADA               	clrf	fsr2h,c
  5493   004DC4  0E12               	movlw	18
  5494   004DC6  26D9               	addwf	fsr2l,f,c
  5495   004DC8  CFDE F087          	movff	postinc2,follow_path@dir
  5496   004DCC  CFDD F088          	movff	postdec2,follow_path@dir+1
  5497                           
  5498                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  5499   004DD0  EE20 F00B          	lfsr	2,11
  5500   004DD4  5187               	movf	follow_path@dir& (0+255),w,b
  5501   004DD6  26D9               	addwf	fsr2l,f,c
  5502   004DD8  5188               	movf	(follow_path@dir+1)& (0+255),w,b
  5503   004DDA  22DA               	addwfc	fsr2h,f,c
  5504   004DDC  B8DF               	btfsc	indf2,4,c
  5505   004DDE  EFF3  F026         	goto	u7681
  5506   004DE2  EFF5  F026         	goto	u7680
  5507   004DE6                     u7681:
  5508   004DE6  EFF7  F026         	goto	l5667
  5509   004DEA                     u7680:
  5510   004DEA  EFD2  F026         	goto	l5659
  5511   004DEE                     l5667:
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  5515   004DEE  5185               	movf	follow_path@dp& (0+255),w,b
  5516   004DF0  6ED9               	movwf	fsr2l,c
  5517   004DF2  6ADA               	clrf	fsr2h,c
  5518   004DF4  CFDE F001          	movff	postinc2,ld_clust@fs
  5519   004DF8  CFDD F002          	movff	postdec2,ld_clust@fs+1
  5520   004DFC  C087  F003         	movff	follow_path@dir,ld_clust@dir
  5521   004E00  C088  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  5522   004E04  ECA0  F030         	call	_ld_clust	;wreg free
  5523   004E08  0100               	movlb	0	; () banked
  5524   004E0A  5185               	movf	follow_path@dp& (0+255),w,b
  5525   004E0C  6ED9               	movwf	fsr2l,c
  5526   004E0E  6ADA               	clrf	fsr2h,c
  5527   004E10  0E06               	movlw	6
  5528   004E12  26D9               	addwf	fsr2l,f,c
  5529   004E14  C001  FFDE         	movff	?_ld_clust,postinc2
  5530   004E18  C002  FFDE         	movff	?_ld_clust+1,postinc2
  5531   004E1C  C003  FFDE         	movff	?_ld_clust+2,postinc2
  5532   004E20  C004  FFDE         	movff	?_ld_clust+3,postinc2
  5533   004E24  EF96  F026         	goto	l5635
  5534   004E28                     l5669:
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;ff.c: 2103:  return res;
  5538   004E28  518A               	movf	follow_path@res& (0+255),w,b
  5539   004E2A                     
  5540                           ; BSR set to: 0
  5541   004E2A  0012               	return		;funcret
  5542   004E2C                     __end_of_follow_path:
  5543                           	callstack 0
  5544                           
  5545 ;; *************** function _ld_clust *****************
  5546 ;; Defined at:
  5547 ;;		line 1235 in file "ff.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;  fs              2    0[COMRAM] PTR struct .
  5550 ;;		 -> FatFs(558), NULL(0), 
  5551 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  5552 ;;		 -> FatFs(558), NULL(0), 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  cl              4   10[COMRAM] unsigned long 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  4    0[COMRAM] unsigned long 
  5557 ;; Registers used:
  5558 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5564 ;;      Params:         4       0       0       0       0       0       0
  5565 ;;      Locals:         4       0       0       0       0       0       0
  5566 ;;      Temps:          6       0       0       0       0       0       0
  5567 ;;      Totals:        14       0       0       0       0       0       0
  5568 ;;Total ram usage:       14 bytes
  5569 ;; Hardware stack levels used: 1
  5570 ;; This function calls:
  5571 ;;		Nothing
  5572 ;; This function is called by:
  5573 ;;		_follow_path
  5574 ;;		_f_open
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text14
  5579   006140                     __ptext14:
  5580                           	callstack 0
  5581   006140                     _ld_clust:
  5582                           	callstack 29
  5583   006140                     
  5584                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  5585   006140  0E1A               	movlw	26
  5586   006142  2403               	addwf	ld_clust@dir^0,w,c
  5587   006144  6ED9               	movwf	fsr2l,c
  5588   006146  0E00               	movlw	0
  5589   006148  2004               	addwfc	(ld_clust@dir+1)^0,w,c
  5590   00614A  6EDA               	movwf	fsr2h,c
  5591   00614C  CFDE F005          	movff	postinc2,??_ld_clust
  5592   006150  CFDD F006          	movff	postdec2,??_ld_clust+1
  5593   006154  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  5594   006158  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  5595   00615C  6A0D               	clrf	(ld_clust@cl+2)^0,c
  5596   00615E  6A0E               	clrf	(ld_clust@cl+3)^0,c
  5597                           
  5598                           ;ff.c: 1243:  if (fs->fs_type == 3)
  5599   006160  C001  FFD9         	movff	ld_clust@fs,fsr2l
  5600   006164  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  5601   006168  0E03               	movlw	3
  5602   00616A  18DE               	xorwf	postinc2,w,c
  5603   00616C  A4D8               	btfss	status,2,c
  5604   00616E  EFBB  F030         	goto	u6841
  5605   006172  EFBD  F030         	goto	u6840
  5606   006176                     u6841:
  5607   006176  EFDB  F030         	goto	l5217
  5608   00617A                     u6840:
  5609   00617A                     
  5610                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  5611   00617A  0E14               	movlw	20
  5612   00617C  2403               	addwf	ld_clust@dir^0,w,c
  5613   00617E  6ED9               	movwf	fsr2l,c
  5614   006180  0E00               	movlw	0
  5615   006182  2004               	addwfc	(ld_clust@dir+1)^0,w,c
  5616   006184  6EDA               	movwf	fsr2h,c
  5617   006186  CFDE F005          	movff	postinc2,??_ld_clust
  5618   00618A  CFDD F006          	movff	postdec2,??_ld_clust+1
  5619   00618E  5005               	movf	??_ld_clust^0,w,c
  5620   006190  6E07               	movwf	(??_ld_clust+2)^0,c
  5621   006192  5006               	movf	(??_ld_clust+1)^0,w,c
  5622   006194  6E08               	movwf	(??_ld_clust+3)^0,c
  5623   006196  6A09               	clrf	(??_ld_clust+4)^0,c
  5624   006198  6A0A               	clrf	(??_ld_clust+5)^0,c
  5625   00619A  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  5626   00619E  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  5627   0061A2  6A08               	clrf	(??_ld_clust+3)^0,c
  5628   0061A4  6A07               	clrf	(??_ld_clust+2)^0,c
  5629   0061A6  5007               	movf	(??_ld_clust+2)^0,w,c
  5630   0061A8  120B               	iorwf	ld_clust@cl^0,f,c
  5631   0061AA  5008               	movf	(??_ld_clust+3)^0,w,c
  5632   0061AC  120C               	iorwf	(ld_clust@cl+1)^0,f,c
  5633   0061AE  5009               	movf	(??_ld_clust+4)^0,w,c
  5634   0061B0  120D               	iorwf	(ld_clust@cl+2)^0,f,c
  5635   0061B2  500A               	movf	(??_ld_clust+5)^0,w,c
  5636   0061B4  120E               	iorwf	(ld_clust@cl+3)^0,f,c
  5637   0061B6                     l5217:
  5638                           
  5639                           ;ff.c: 1246:  return cl;
  5640   0061B6  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  5641   0061BA  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  5642   0061BE  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  5643   0061C2  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  5644   0061C6  0012               	return		;funcret
  5645   0061C8                     __end_of_ld_clust:
  5646                           	callstack 0
  5647                           
  5648 ;; *************** function _dir_find *****************
  5649 ;; Defined at:
  5650 ;;		line 1458 in file "ff.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  dp              1    0[BANK0 ] PTR struct .
  5653 ;;		 -> f_open@dj(21), 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  dir             2    2[BANK0 ] PTR unsigned char 
  5656 ;;		 -> FatFs(558), NULL(0), 
  5657 ;;  res             1    4[BANK0 ] enum E95
  5658 ;;  c               1    1[BANK0 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      enum E95
  5661 ;; Registers used:
  5662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5668 ;;      Params:         0       1       0       0       0       0       0
  5669 ;;      Locals:         0       4       0       0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0
  5671 ;;      Totals:         0       5       0       0       0       0       0
  5672 ;;Total ram usage:        5 bytes
  5673 ;; Hardware stack levels used: 1
  5674 ;; Hardware stack levels required when called: 11
  5675 ;; This function calls:
  5676 ;;		_dir_next
  5677 ;;		_dir_sdi
  5678 ;;		_mem_cmp
  5679 ;;		_move_window
  5680 ;; This function is called by:
  5681 ;;		_follow_path
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           	psect	text15
  5686   0054B0                     __ptext15:
  5687                           	callstack 0
  5688   0054B0                     _dir_find:
  5689                           	callstack 17
  5690   0054B0                     
  5691                           ;ff.c: 1459:  DIR* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir;
      +                          ;ff.c: 1468:  res = dir_sdi(dp, 0);
  5692   0054B0  C080  F055         	movff	dir_find@dp,dir_sdi@dp
  5693   0054B4  0E00               	movlw	0
  5694   0054B6  6E57               	movwf	(dir_sdi@idx+1)^0,c
  5695   0054B8  0E00               	movlw	0
  5696   0054BA  6E56               	movwf	dir_sdi@idx^0,c
  5697   0054BC  ECDC  F01F         	call	_dir_sdi	;wreg free
  5698   0054C0  0100               	movlb	0	; () banked
  5699   0054C2  6F84               	movwf	dir_find@res& (0+255),b
  5700   0054C4                     
  5701                           ; BSR set to: 0
  5702                           ;ff.c: 1469:  if (res != FR_OK) return res;
  5703   0054C4  5184               	movf	dir_find@res& (0+255),w,b
  5704   0054C6  B4D8               	btfsc	status,2,c
  5705   0054C8  EF68  F02A         	goto	u6851
  5706   0054CC  EF6A  F02A         	goto	u6850
  5707   0054D0                     u6851:
  5708   0054D0  EF6E  F02A         	goto	l5231
  5709   0054D4                     u6850:
  5710   0054D4                     l5227:
  5711   0054D4  0100               	movlb	0	; () banked
  5712   0054D6  5184               	movf	dir_find@res& (0+255),w,b
  5713   0054D8  EFE8  F02A         	goto	l482
  5714   0054DC                     l5231:
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  5718   0054DC  5180               	movf	dir_find@dp& (0+255),w,b
  5719   0054DE  6ED9               	movwf	fsr2l,c
  5720   0054E0  6ADA               	clrf	fsr2h,c
  5721   0054E2  CFDE F030          	movff	postinc2,move_window@fs
  5722   0054E6  CFDD F031          	movff	postdec2,move_window@fs+1
  5723   0054EA  5180               	movf	dir_find@dp& (0+255),w,b
  5724   0054EC  6ED9               	movwf	fsr2l,c
  5725   0054EE  6ADA               	clrf	fsr2h,c
  5726   0054F0  0E0E               	movlw	14
  5727   0054F2  26D9               	addwf	fsr2l,f,c
  5728   0054F4  CFDE F032          	movff	postinc2,move_window@sector
  5729   0054F8  CFDE F033          	movff	postinc2,move_window@sector+1
  5730   0054FC  CFDE F034          	movff	postinc2,move_window@sector+2
  5731   005500  CFDE F035          	movff	postinc2,move_window@sector+3
  5732   005504  ECF5  F02D         	call	_move_window	;wreg free
  5733   005508  0100               	movlb	0	; () banked
  5734   00550A  6F84               	movwf	dir_find@res& (0+255),b
  5735   00550C                     
  5736                           ; BSR set to: 0
  5737                           ;ff.c: 1476:   if (res != FR_OK) break;
  5738   00550C  5184               	movf	dir_find@res& (0+255),w,b
  5739   00550E  B4D8               	btfsc	status,2,c
  5740   005510  EF8C  F02A         	goto	u6861
  5741   005514  EF8E  F02A         	goto	u6860
  5742   005518                     u6861:
  5743   005518  EF90  F02A         	goto	l5237
  5744   00551C                     u6860:
  5745   00551C  EF6A  F02A         	goto	l5227
  5746   005520                     l5237:
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;ff.c: 1477:   dir = dp->dir;
  5750   005520  5180               	movf	dir_find@dp& (0+255),w,b
  5751   005522  6ED9               	movwf	fsr2l,c
  5752   005524  6ADA               	clrf	fsr2h,c
  5753   005526  0E12               	movlw	18
  5754   005528  26D9               	addwf	fsr2l,f,c
  5755   00552A  CFDE F082          	movff	postinc2,dir_find@dir
  5756   00552E  CFDD F083          	movff	postdec2,dir_find@dir+1
  5757   005532                     
  5758                           ; BSR set to: 0
  5759                           ;ff.c: 1478:   c = dir[0];
  5760   005532  C082  FFD9         	movff	dir_find@dir,fsr2l
  5761   005536  C083  FFDA         	movff	dir_find@dir+1,fsr2h
  5762   00553A  50DF               	movf	indf2,w,c
  5763   00553C  6F81               	movwf	dir_find@c& (0+255),b
  5764   00553E                     
  5765                           ; BSR set to: 0
  5766                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  5767   00553E  5181               	movf	dir_find@c& (0+255),w,b
  5768   005540  A4D8               	btfss	status,2,c
  5769   005542  EFA5  F02A         	goto	u6871
  5770   005546  EFA7  F02A         	goto	u6870
  5771   00554A                     u6871:
  5772   00554A  EFAB  F02A         	goto	l5245
  5773   00554E                     u6870:
  5774   00554E                     
  5775                           ; BSR set to: 0
  5776   00554E  0E04               	movlw	4
  5777   005550  6F84               	movwf	dir_find@res& (0+255),b
  5778   005552  EF6A  F02A         	goto	l5227
  5779   005556                     l5245:
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  5783   005556  EE20 F00B          	lfsr	2,11
  5784   00555A  5182               	movf	dir_find@dir& (0+255),w,b
  5785   00555C  26D9               	addwf	fsr2l,f,c
  5786   00555E  5183               	movf	(dir_find@dir+1)& (0+255),w,b
  5787   005560  22DA               	addwfc	fsr2h,f,c
  5788   005562  B6DF               	btfsc	indf2,3,c
  5789   005564  EFB6  F02A         	goto	u6881
  5790   005568  EFB8  F02A         	goto	u6880
  5791   00556C                     u6881:
  5792   00556C  EFD4  F02A         	goto	l5251
  5793   005570                     u6880:
  5794   005570                     
  5795                           ; BSR set to: 0
  5796   005570  C082  F001         	movff	dir_find@dir,mem_cmp@dst
  5797   005574  C083  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  5798   005578  5180               	movf	dir_find@dp& (0+255),w,b
  5799   00557A  6ED9               	movwf	fsr2l,c
  5800   00557C  6ADA               	clrf	fsr2h,c
  5801   00557E  0E14               	movlw	20
  5802   005580  26D9               	addwf	fsr2l,f,c
  5803   005582  50DF               	movf	indf2,w,c
  5804   005584  6E03               	movwf	mem_cmp@src^0,c
  5805   005586  0E00               	movlw	0
  5806   005588  6E05               	movwf	(mem_cmp@cnt+1)^0,c
  5807   00558A  0E0B               	movlw	11
  5808   00558C  6E04               	movwf	mem_cmp@cnt^0,c
  5809   00558E  ECE4  F030         	call	_mem_cmp	;wreg free
  5810   005592  5001               	movf	?_mem_cmp^0,w,c
  5811   005594  1002               	iorwf	(?_mem_cmp+1)^0,w,c
  5812   005596  A4D8               	btfss	status,2,c
  5813   005598  EFD0  F02A         	goto	u6891
  5814   00559C  EFD2  F02A         	goto	u6890
  5815   0055A0                     u6891:
  5816   0055A0  EFD4  F02A         	goto	l5251
  5817   0055A4                     u6890:
  5818   0055A4  EF6A  F02A         	goto	l5227
  5819   0055A8                     l5251:
  5820                           
  5821                           ;ff.c: 1505:   res = dir_next(dp, 0);
  5822   0055A8  C080  F06D         	movff	dir_find@dp,dir_next@dp
  5823   0055AC  0E00               	movlw	0
  5824   0055AE  6E6F               	movwf	(dir_next@stretch+1)^0,c
  5825   0055B0  0E00               	movlw	0
  5826   0055B2  6E6E               	movwf	dir_next@stretch^0,c
  5827   0055B4  ECE0  F015         	call	_dir_next	;wreg free
  5828   0055B8  0100               	movlb	0	; () banked
  5829   0055BA  6F84               	movwf	dir_find@res& (0+255),b
  5830   0055BC                     
  5831                           ; BSR set to: 0
  5832                           ;ff.c: 1506:  } while (res == FR_OK);
  5833   0055BC  5184               	movf	dir_find@res& (0+255),w,b
  5834   0055BE  B4D8               	btfsc	status,2,c
  5835   0055C0  EFE4  F02A         	goto	u6901
  5836   0055C4  EFE6  F02A         	goto	u6900
  5837   0055C8                     u6901:
  5838   0055C8  EF6E  F02A         	goto	l5231
  5839   0055CC                     u6900:
  5840   0055CC  EF6A  F02A         	goto	l5227
  5841   0055D0                     l482:
  5842                           
  5843                           ; BSR set to: 0
  5844   0055D0  0012               	return		;funcret
  5845   0055D2                     __end_of_dir_find:
  5846                           	callstack 0
  5847                           
  5848 ;; *************** function _mem_cmp *****************
  5849 ;; Defined at:
  5850 ;;		line 533 in file "ff.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;  dst             2    0[COMRAM] PTR const void 
  5853 ;;		 -> FatFs(558), NULL(0), 
  5854 ;;  src             1    2[COMRAM] PTR const void 
  5855 ;;		 -> f_open@sfn(12), 
  5856 ;;  cnt             2    3[COMRAM] unsigned short 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  r               2    9[COMRAM] int 
  5859 ;;  d               2    7[COMRAM] PTR const unsigned char 
  5860 ;;		 -> FatFs(558), NULL(0), 
  5861 ;;  s               1   11[COMRAM] PTR const unsigned char 
  5862 ;;		 -> f_open@sfn(12), 
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  2    0[COMRAM] int 
  5865 ;; Registers used:
  5866 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5872 ;;      Params:         5       0       0       0       0       0       0
  5873 ;;      Locals:         5       0       0       0       0       0       0
  5874 ;;      Temps:          2       0       0       0       0       0       0
  5875 ;;      Totals:        12       0       0       0       0       0       0
  5876 ;;Total ram usage:       12 bytes
  5877 ;; Hardware stack levels used: 1
  5878 ;; This function calls:
  5879 ;;		Nothing
  5880 ;; This function is called by:
  5881 ;;		_dir_find
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           	psect	text16
  5886   0061C8                     __ptext16:
  5887                           	callstack 0
  5888   0061C8                     _mem_cmp:
  5889                           	callstack 27
  5890   0061C8                     
  5891                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  5892   0061C8  C001  F008         	movff	mem_cmp@dst,mem_cmp@d
  5893   0061CC  C002  F009         	movff	mem_cmp@dst+1,mem_cmp@d+1
  5894   0061D0  C003  F00C         	movff	mem_cmp@src,mem_cmp@s
  5895   0061D4                     
  5896                           ;ff.c: 535:  int r = 0;
  5897   0061D4  0E00               	movlw	0
  5898   0061D6  6E0B               	movwf	(mem_cmp@r+1)^0,c
  5899   0061D8  0E00               	movlw	0
  5900   0061DA  6E0A               	movwf	mem_cmp@r^0,c
  5901   0061DC                     l4749:
  5902   0061DC  0604               	decf	mem_cmp@cnt^0,f,c
  5903   0061DE  A0D8               	btfss	status,0,c
  5904   0061E0  0605               	decf	(mem_cmp@cnt+1)^0,f,c
  5905   0061E2  2804               	incf	mem_cmp@cnt^0,w,c
  5906   0061E4  E108               	bnz	u5990
  5907   0061E6  2805               	incf	(mem_cmp@cnt+1)^0,w,c
  5908   0061E8  B4D8               	btfsc	status,2,c
  5909   0061EA  EFF9  F030         	goto	u5991
  5910   0061EE  EFFB  F030         	goto	u5990
  5911   0061F2                     u5991:
  5912   0061F2  EF18  F031         	goto	l294
  5913   0061F6                     u5990:
  5914   0061F6  C008  FFD9         	movff	mem_cmp@d,fsr2l
  5915   0061FA  C009  FFDA         	movff	mem_cmp@d+1,fsr2h
  5916   0061FE  4A08               	infsnz	mem_cmp@d^0,f,c
  5917   006200  2A09               	incf	(mem_cmp@d+1)^0,f,c
  5918   006202  50DF               	movf	indf2,w,c
  5919   006204  6E06               	movwf	??_mem_cmp^0,c
  5920   006206  2A0C               	incf	mem_cmp@s^0,f,c
  5921   006208  040C               	decf	mem_cmp@s^0,w,c
  5922   00620A  6ED9               	movwf	fsr2l,c
  5923   00620C  6ADA               	clrf	fsr2h,c
  5924   00620E  50DF               	movf	indf2,w,c
  5925   006210  6E07               	movwf	(??_mem_cmp+1)^0,c
  5926   006212  5007               	movf	(??_mem_cmp+1)^0,w,c
  5927   006214  5C06               	subwf	??_mem_cmp^0,w,c
  5928   006216  6E0A               	movwf	mem_cmp@r^0,c
  5929   006218  6A0B               	clrf	(mem_cmp@r+1)^0,c
  5930   00621A  A0D8               	btfss	status,0,c
  5931   00621C  060B               	decf	(mem_cmp@r+1)^0,f,c
  5932   00621E  500A               	movf	mem_cmp@r^0,w,c
  5933   006220  100B               	iorwf	(mem_cmp@r+1)^0,w,c
  5934   006222  B4D8               	btfsc	status,2,c
  5935   006224  EF16  F031         	goto	u6001
  5936   006228  EF18  F031         	goto	u6000
  5937   00622C                     u6001:
  5938   00622C  EFEE  F030         	goto	l4749
  5939   006230                     u6000:
  5940   006230                     l294:
  5941                           
  5942                           ;ff.c: 538:  return r;
  5943   006230  C00A  F001         	movff	mem_cmp@r,?_mem_cmp
  5944   006234  C00B  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  5945   006238  0012               	return		;funcret
  5946   00623A                     __end_of_mem_cmp:
  5947                           	callstack 0
  5948                           
  5949 ;; *************** function _create_name *****************
  5950 ;; Defined at:
  5951 ;;		line 1843 in file "ff.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  dp              1    8[COMRAM] PTR struct .
  5954 ;;		 -> f_open@dj(21), 
  5955 ;;  path            1    9[COMRAM] PTR PTR const unsigned c
  5956 ;;		 -> follow_path@path(1), 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  i               2   21[COMRAM] unsigned short 
  5959 ;;  ni              2   17[COMRAM] unsigned short 
  5960 ;;  si              2   14[COMRAM] unsigned short 
  5961 ;;  c               1   24[COMRAM] unsigned char 
  5962 ;;  sfn             1   23[COMRAM] PTR unsigned char 
  5963 ;;		 -> f_open@sfn(12), 
  5964 ;;  p               1   20[COMRAM] PTR const unsigned char 
  5965 ;;		 -> STR_4(10), STR_3(1), 
  5966 ;;  d               1   19[COMRAM] unsigned char 
  5967 ;;  b               1   16[COMRAM] unsigned char 
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      enum E95
  5970 ;; Registers used:
  5971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5977 ;;      Params:         2       0       0       0       0       0       0
  5978 ;;      Locals:        13       0       0       0       0       0       0
  5979 ;;      Temps:          2       0       0       0       0       0       0
  5980 ;;      Totals:        17       0       0       0       0       0       0
  5981 ;;Total ram usage:       17 bytes
  5982 ;; Hardware stack levels used: 1
  5983 ;; Hardware stack levels required when called: 1
  5984 ;; This function calls:
  5985 ;;		_chk_chr
  5986 ;;		_mem_set
  5987 ;; This function is called by:
  5988 ;;		_follow_path
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text17
  5993   003C2E                     __ptext17:
  5994                           	callstack 0
  5995   003C2E                     _create_name:
  5996                           	callstack 27
  5997   003C2E                     
  5998                           ;ff.c: 1844:  DIR* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE b
      +                          , c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for 
      +                          (p = *path; *p == '/' || *p == '\\'; p++) ;
  5999   003C2E  500A               	movf	create_name@path^0,w,c
  6000   003C30  6ED9               	movwf	fsr2l,c
  6001   003C32  6ADA               	clrf	fsr2h,c
  6002   003C34  50DF               	movf	indf2,w,c
  6003   003C36  6E15               	movwf	create_name@p^0,c
  6004   003C38  EF1F  F01E         	goto	l5263
  6005   003C3C                     l5261:
  6006   003C3C  2A15               	incf	create_name@p^0,f,c
  6007   003C3E                     l5263:
  6008   003C3E  C015  FFF6         	movff	create_name@p,tblptrl
  6009   003C42                     	if	1	;There is more than 1 active tblptr byte
  6010   003C42  0E06               	movlw	high __smallconst
  6011   003C44  6EF7               	movwf	tblptrh,c
  6012   003C46                     	endif
  6013   003C46                     	if	0	;tblptru may be non-zero
  6014   003C46                     	endif
  6015   003C46                     	if	0	;tblptru may be non-zero
  6016   003C46                     	endif
  6017   003C46  0008               	tblrd		*
  6018   003C48  50F5               	movf	tablat,w,c
  6019   003C4A  0A2F               	xorlw	47
  6020   003C4C  B4D8               	btfsc	status,2,c
  6021   003C4E  EF2B  F01E         	goto	u6911
  6022   003C52  EF2D  F01E         	goto	u6910
  6023   003C56                     u6911:
  6024   003C56  EF1E  F01E         	goto	l5261
  6025   003C5A                     u6910:
  6026   003C5A  C015  FFF6         	movff	create_name@p,tblptrl
  6027   003C5E                     	if	1	;There is more than 1 active tblptr byte
  6028   003C5E  0E06               	movlw	high __smallconst
  6029   003C60  6EF7               	movwf	tblptrh,c
  6030   003C62                     	endif
  6031   003C62                     	if	0	;tblptru may be non-zero
  6032   003C62                     	endif
  6033   003C62                     	if	0	;tblptru may be non-zero
  6034   003C62                     	endif
  6035   003C62  0008               	tblrd		*
  6036   003C64  50F5               	movf	tablat,w,c
  6037   003C66  0A5C               	xorlw	92
  6038   003C68  B4D8               	btfsc	status,2,c
  6039   003C6A  EF39  F01E         	goto	u6921
  6040   003C6E  EF3B  F01E         	goto	u6920
  6041   003C72                     u6921:
  6042   003C72  EF1E  F01E         	goto	l5261
  6043   003C76                     u6920:
  6044   003C76                     
  6045                           ;ff.c: 1975:  sfn = dp->fn;
  6046   003C76  5009               	movf	create_name@dp^0,w,c
  6047   003C78  6ED9               	movwf	fsr2l,c
  6048   003C7A  6ADA               	clrf	fsr2h,c
  6049   003C7C  0E14               	movlw	20
  6050   003C7E  26D9               	addwf	fsr2l,f,c
  6051   003C80  50DF               	movf	indf2,w,c
  6052   003C82  6E18               	movwf	create_name@sfn^0,c
  6053   003C84                     
  6054                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  6055   003C84  C018  F001         	movff	create_name@sfn,mem_set@dst
  6056   003C88  6A02               	clrf	(mem_set@dst+1)^0,c
  6057   003C8A  0E00               	movlw	0
  6058   003C8C  6E04               	movwf	(mem_set@val+1)^0,c
  6059   003C8E  0E20               	movlw	32
  6060   003C90  6E03               	movwf	mem_set@val^0,c
  6061   003C92  0E00               	movlw	0
  6062   003C94  6E06               	movwf	(mem_set@cnt+1)^0,c
  6063   003C96  0E0B               	movlw	11
  6064   003C98  6E05               	movwf	mem_set@cnt^0,c
  6065   003C9A  EC61  F032         	call	_mem_set	;wreg free
  6066   003C9E                     
  6067                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  6068   003C9E  0E00               	movlw	0
  6069   003CA0  6E11               	movwf	create_name@b^0,c
  6070   003CA2  C011  F016         	movff	create_name@b,create_name@i
  6071   003CA6  6A17               	clrf	(create_name@i+1)^0,c
  6072   003CA8  C016  F00F         	movff	create_name@i,create_name@si
  6073   003CAC  C017  F010         	movff	create_name@i+1,create_name@si+1
  6074   003CB0  0E00               	movlw	0
  6075   003CB2  6E13               	movwf	(create_name@ni+1)^0,c
  6076   003CB4  0E08               	movlw	8
  6077   003CB6  6E12               	movwf	create_name@ni^0,c
  6078   003CB8                     l5275:
  6079                           
  6080                           ;ff.c: 1992:   c = (BYTE)p[si++];
  6081   003CB8  5015               	movf	create_name@p^0,w,c
  6082   003CBA  240F               	addwf	create_name@si^0,w,c
  6083   003CBC  6E0B               	movwf	??_create_name^0,c
  6084   003CBE  C00B  FFF6         	movff	??_create_name,tblptrl
  6085   003CC2                     	if	1	;There is more than 1 active tblptr byte
  6086   003CC2  0E06               	movlw	high __smallconst
  6087   003CC4  6EF7               	movwf	tblptrh,c
  6088   003CC6                     	endif
  6089   003CC6                     	if	0	;tblptru may be non-zero
  6090   003CC6                     	endif
  6091   003CC6                     	if	0	;tblptru may be non-zero
  6092   003CC6                     	endif
  6093   003CC6  0008               	tblrd		*
  6094   003CC8  CFF5 F019          	movff	tablat,create_name@c
  6095   003CCC  4A0F               	infsnz	create_name@si^0,f,c
  6096   003CCE  2A10               	incf	(create_name@si+1)^0,f,c
  6097   003CD0                     
  6098                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  6099   003CD0  0E20               	movlw	32
  6100   003CD2  6419               	cpfsgt	create_name@c^0,c
  6101   003CD4  EF6E  F01E         	goto	u6931
  6102   003CD8  EF70  F01E         	goto	u6930
  6103   003CDC                     u6931:
  6104   003CDC  EF79  F01F         	goto	l5359
  6105   003CE0                     u6930:
  6106   003CE0  0E2F               	movlw	47
  6107   003CE2  1819               	xorwf	create_name@c^0,w,c
  6108   003CE4  B4D8               	btfsc	status,2,c
  6109   003CE6  EF77  F01E         	goto	u6941
  6110   003CEA  EF79  F01E         	goto	u6940
  6111   003CEE                     u6941:
  6112   003CEE  EF79  F01F         	goto	l5359
  6113   003CF2                     u6940:
  6114   003CF2  0E5C               	movlw	92
  6115   003CF4  1819               	xorwf	create_name@c^0,w,c
  6116   003CF6  A4D8               	btfss	status,2,c
  6117   003CF8  EF80  F01E         	goto	u6951
  6118   003CFC  EF82  F01E         	goto	u6950
  6119   003D00                     u6951:
  6120   003D00  EF84  F01E         	goto	l5285
  6121   003D04                     u6950:
  6122   003D04  EF79  F01F         	goto	l5359
  6123   003D08                     l5285:
  6124                           
  6125                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  6126   003D08  0E2E               	movlw	46
  6127   003D0A  1819               	xorwf	create_name@c^0,w,c
  6128   003D0C  B4D8               	btfsc	status,2,c
  6129   003D0E  EF8B  F01E         	goto	u6961
  6130   003D12  EF8D  F01E         	goto	u6960
  6131   003D16                     u6961:
  6132   003D16  EF98  F01E         	goto	l5289
  6133   003D1A                     u6960:
  6134   003D1A  5012               	movf	create_name@ni^0,w,c
  6135   003D1C  5C16               	subwf	create_name@i^0,w,c
  6136   003D1E  5013               	movf	(create_name@ni+1)^0,w,c
  6137   003D20  5817               	subwfb	(create_name@i+1)^0,w,c
  6138   003D22  A0D8               	btfss	status,0,c
  6139   003D24  EF96  F01E         	goto	u6971
  6140   003D28  EF98  F01E         	goto	u6970
  6141   003D2C                     u6971:
  6142   003D2C  EFBC  F01E         	goto	l5301
  6143   003D30                     u6970:
  6144   003D30                     l5289:
  6145                           
  6146                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  6147   003D30  0E08               	movlw	8
  6148   003D32  1812               	xorwf	create_name@ni^0,w,c
  6149   003D34  1013               	iorwf	(create_name@ni+1)^0,w,c
  6150   003D36  A4D8               	btfss	status,2,c
  6151   003D38  EFA0  F01E         	goto	u6981
  6152   003D3C  EFA2  F01E         	goto	u6980
  6153   003D40                     u6981:
  6154   003D40  EFAB  F01E         	goto	l5293
  6155   003D44                     u6980:
  6156   003D44  0E2E               	movlw	46
  6157   003D46  1819               	xorwf	create_name@c^0,w,c
  6158   003D48  B4D8               	btfsc	status,2,c
  6159   003D4A  EFA9  F01E         	goto	u6991
  6160   003D4E  EFAB  F01E         	goto	u6990
  6161   003D52                     u6991:
  6162   003D52  EFAE  F01E         	goto	l5297
  6163   003D56                     u6990:
  6164   003D56                     l5293:
  6165   003D56  0E06               	movlw	6
  6166   003D58  EFDB  F01F         	goto	l509
  6167   003D5C                     l5297:
  6168                           
  6169                           ;ff.c: 1996:    i = 8; ni = 11;
  6170   003D5C  0E00               	movlw	0
  6171   003D5E  6E17               	movwf	(create_name@i+1)^0,c
  6172   003D60  0E08               	movlw	8
  6173   003D62  6E16               	movwf	create_name@i^0,c
  6174   003D64  0E00               	movlw	0
  6175   003D66  6E13               	movwf	(create_name@ni+1)^0,c
  6176   003D68  0E0B               	movlw	11
  6177   003D6A  6E12               	movwf	create_name@ni^0,c
  6178   003D6C                     
  6179                           ;ff.c: 1997:    b <<= 2; continue;
  6180   003D6C  90D8               	bcf	status,0,c
  6181   003D6E  3611               	rlcf	create_name@b^0,f,c
  6182   003D70  90D8               	bcf	status,0,c
  6183   003D72  3611               	rlcf	create_name@b^0,f,c
  6184   003D74  EF5C  F01E         	goto	l5275
  6185   003D78                     l5301:
  6186                           
  6187                           ;ff.c: 1999:   if (c >= 0x80) {
  6188   003D78  0E7F               	movlw	127
  6189   003D7A  6419               	cpfsgt	create_name@c^0,c
  6190   003D7C  EFC2  F01E         	goto	u7001
  6191   003D80  EFC4  F01E         	goto	u7000
  6192   003D84                     u7001:
  6193   003D84  EFC6  F01E         	goto	l511
  6194   003D88                     u7000:
  6195   003D88                     
  6196                           ;ff.c: 2000:    b |= 3;
  6197   003D88  0E03               	movlw	3
  6198   003D8A  1211               	iorwf	create_name@b^0,f,c
  6199   003D8C                     l511:
  6200                           
  6201                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  6202   003D8C  0E80               	movlw	128
  6203   003D8E  6419               	cpfsgt	create_name@c^0,c
  6204   003D90  EFCC  F01E         	goto	u7011
  6205   003D94  EFCE  F01E         	goto	u7010
  6206   003D98                     u7011:
  6207   003D98  EFD6  F01E         	goto	l5307
  6208   003D9C                     u7010:
  6209   003D9C  0E9F               	movlw	159
  6210   003D9E  6419               	cpfsgt	create_name@c^0,c
  6211   003DA0  EFD4  F01E         	goto	u7021
  6212   003DA4  EFD6  F01E         	goto	u7020
  6213   003DA8                     u7021:
  6214   003DA8  EFE6  F01E         	goto	l5311
  6215   003DAC                     u7020:
  6216   003DAC                     l5307:
  6217   003DAC  0EDF               	movlw	223
  6218   003DAE  6419               	cpfsgt	create_name@c^0,c
  6219   003DB0  EFDC  F01E         	goto	u7031
  6220   003DB4  EFDE  F01E         	goto	u7030
  6221   003DB8                     u7031:
  6222   003DB8  EF37  F01F         	goto	l5335
  6223   003DBC                     u7030:
  6224   003DBC  0EFD               	movlw	253
  6225   003DBE  6019               	cpfslt	create_name@c^0,c
  6226   003DC0  EFE4  F01E         	goto	u7041
  6227   003DC4  EFE6  F01E         	goto	u7040
  6228   003DC8                     u7041:
  6229   003DC8  EF37  F01F         	goto	l5335
  6230   003DCC                     u7040:
  6231   003DCC                     l5311:
  6232                           
  6233                           ;ff.c: 2010:    d = (BYTE)p[si++];
  6234   003DCC  5015               	movf	create_name@p^0,w,c
  6235   003DCE  240F               	addwf	create_name@si^0,w,c
  6236   003DD0  6E0B               	movwf	??_create_name^0,c
  6237   003DD2  C00B  FFF6         	movff	??_create_name,tblptrl
  6238   003DD6                     	if	1	;There is more than 1 active tblptr byte
  6239   003DD6  0E06               	movlw	high __smallconst
  6240   003DD8  6EF7               	movwf	tblptrh,c
  6241   003DDA                     	endif
  6242   003DDA                     	if	0	;tblptru may be non-zero
  6243   003DDA                     	endif
  6244   003DDA                     	if	0	;tblptru may be non-zero
  6245   003DDA                     	endif
  6246   003DDA  0008               	tblrd		*
  6247   003DDC  CFF5 F014          	movff	tablat,create_name@d
  6248   003DE0  4A0F               	infsnz	create_name@si^0,f,c
  6249   003DE2  2A10               	incf	(create_name@si+1)^0,f,c
  6250   003DE4                     
  6251                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  6252   003DE4  0E3F               	movlw	63
  6253   003DE6  6414               	cpfsgt	create_name@d^0,c
  6254   003DE8  EFF8  F01E         	goto	u7051
  6255   003DEC  EFFA  F01E         	goto	u7050
  6256   003DF0                     u7051:
  6257   003DF0  EF02  F01F         	goto	l5319
  6258   003DF4                     u7050:
  6259   003DF4  0E7E               	movlw	126
  6260   003DF6  6414               	cpfsgt	create_name@d^0,c
  6261   003DF8  EF00  F01F         	goto	u7061
  6262   003DFC  EF02  F01F         	goto	u7060
  6263   003E00                     u7061:
  6264   003E00  EF12  F01F         	goto	l5323
  6265   003E04                     u7060:
  6266   003E04                     l5319:
  6267   003E04  0E7F               	movlw	127
  6268   003E06  6414               	cpfsgt	create_name@d^0,c
  6269   003E08  EF08  F01F         	goto	u7071
  6270   003E0C  EF0A  F01F         	goto	u7070
  6271   003E10                     u7071:
  6272   003E10  EFAB  F01E         	goto	l5293
  6273   003E14                     u7070:
  6274   003E14  0EFD               	movlw	253
  6275   003E16  6014               	cpfslt	create_name@d^0,c
  6276   003E18  EF10  F01F         	goto	u7081
  6277   003E1C  EF12  F01F         	goto	u7080
  6278   003E20                     u7081:
  6279   003E20  EFAB  F01E         	goto	l5293
  6280   003E24                     u7080:
  6281   003E24                     l5323:
  6282   003E24  0EFF               	movlw	255
  6283   003E26  2412               	addwf	create_name@ni^0,w,c
  6284   003E28  6E0B               	movwf	??_create_name^0,c
  6285   003E2A  0EFF               	movlw	255
  6286   003E2C  2013               	addwfc	(create_name@ni+1)^0,w,c
  6287   003E2E  6E0C               	movwf	(??_create_name+1)^0,c
  6288   003E30  500B               	movf	??_create_name^0,w,c
  6289   003E32  5C16               	subwf	create_name@i^0,w,c
  6290   003E34  500C               	movf	(??_create_name+1)^0,w,c
  6291   003E36  5817               	subwfb	(create_name@i+1)^0,w,c
  6292   003E38  A0D8               	btfss	status,0,c
  6293   003E3A  EF21  F01F         	goto	u7091
  6294   003E3E  EF23  F01F         	goto	u7090
  6295   003E42                     u7091:
  6296   003E42  EF25  F01F         	goto	l5329
  6297   003E46                     u7090:
  6298   003E46  EFAB  F01E         	goto	l5293
  6299   003E4A                     l5329:
  6300                           
  6301                           ;ff.c: 2013:    sfn[i++] = c;
  6302   003E4A  5018               	movf	create_name@sfn^0,w,c
  6303   003E4C  2416               	addwf	create_name@i^0,w,c
  6304   003E4E  6ED9               	movwf	fsr2l,c
  6305   003E50  6ADA               	clrf	fsr2h,c
  6306   003E52  C019  FFDF         	movff	create_name@c,indf2
  6307   003E56  4A16               	infsnz	create_name@i^0,f,c
  6308   003E58  2A17               	incf	(create_name@i+1)^0,f,c
  6309   003E5A                     
  6310                           ;ff.c: 2014:    sfn[i++] = d;
  6311   003E5A  5018               	movf	create_name@sfn^0,w,c
  6312   003E5C  2416               	addwf	create_name@i^0,w,c
  6313   003E5E  6ED9               	movwf	fsr2l,c
  6314   003E60  6ADA               	clrf	fsr2h,c
  6315   003E62  C014  FFDF         	movff	create_name@d,indf2
  6316   003E66  4A16               	infsnz	create_name@i^0,f,c
  6317   003E68  2A17               	incf	(create_name@i+1)^0,f,c
  6318                           
  6319                           ;ff.c: 2015:   } else {
  6320   003E6A  EF5C  F01E         	goto	l5275
  6321   003E6E                     l5335:
  6322                           
  6323                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  6324   003E6E  0E11               	movlw	low STR_1
  6325   003E70  6E01               	movwf	chk_chr@str^0,c
  6326   003E72  C019  F002         	movff	create_name@c,chk_chr@chr
  6327   003E76  6A03               	clrf	(chk_chr@chr+1)^0,c
  6328   003E78  EC81  F031         	call	_chk_chr	;wreg free
  6329   003E7C  5001               	movf	?_chk_chr^0,w,c
  6330   003E7E  1002               	iorwf	(?_chk_chr+1)^0,w,c
  6331   003E80  B4D8               	btfsc	status,2,c
  6332   003E82  EF45  F01F         	goto	u7101
  6333   003E86  EF47  F01F         	goto	u7100
  6334   003E8A                     u7101:
  6335   003E8A  EF49  F01F         	goto	l5341
  6336   003E8E                     u7100:
  6337   003E8E  EFAB  F01E         	goto	l5293
  6338   003E92                     l5341:
  6339                           
  6340                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  6341   003E92  0E40               	movlw	64
  6342   003E94  6419               	cpfsgt	create_name@c^0,c
  6343   003E96  EF4F  F01F         	goto	u7111
  6344   003E9A  EF51  F01F         	goto	u7110
  6345   003E9E                     u7111:
  6346   003E9E  EF5C  F01F         	goto	l5347
  6347   003EA2                     u7110:
  6348   003EA2  0E5B               	movlw	91
  6349   003EA4  6019               	cpfslt	create_name@c^0,c
  6350   003EA6  EF57  F01F         	goto	u7121
  6351   003EAA  EF59  F01F         	goto	u7120
  6352   003EAE                     u7121:
  6353   003EAE  EF5C  F01F         	goto	l5347
  6354   003EB2                     u7120:
  6355   003EB2                     
  6356                           ;ff.c: 2019:     b |= 2;
  6357   003EB2  8211               	bsf	create_name@b^0,1,c
  6358                           
  6359                           ;ff.c: 2020:    } else {
  6360   003EB4  EF6F  F01F         	goto	l5355
  6361   003EB8                     l5347:
  6362                           
  6363                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  6364   003EB8  0E60               	movlw	96
  6365   003EBA  6419               	cpfsgt	create_name@c^0,c
  6366   003EBC  EF62  F01F         	goto	u7131
  6367   003EC0  EF64  F01F         	goto	u7130
  6368   003EC4                     u7131:
  6369   003EC4  EF6F  F01F         	goto	l5355
  6370   003EC8                     u7130:
  6371   003EC8  0E7B               	movlw	123
  6372   003ECA  6019               	cpfslt	create_name@c^0,c
  6373   003ECC  EF6A  F01F         	goto	u7141
  6374   003ED0  EF6C  F01F         	goto	u7140
  6375   003ED4                     u7141:
  6376   003ED4  EF6F  F01F         	goto	l5355
  6377   003ED8                     u7140:
  6378   003ED8                     
  6379                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  6380   003ED8  8011               	bsf	create_name@b^0,0,c
  6381   003EDA  0E20               	movlw	32
  6382   003EDC  5E19               	subwf	create_name@c^0,f,c
  6383   003EDE                     l5355:
  6384                           
  6385                           ;ff.c: 2025:    sfn[i++] = c;
  6386   003EDE  5018               	movf	create_name@sfn^0,w,c
  6387   003EE0  2416               	addwf	create_name@i^0,w,c
  6388   003EE2  6ED9               	movwf	fsr2l,c
  6389   003EE4  6ADA               	clrf	fsr2h,c
  6390   003EE6  C019  FFDF         	movff	create_name@c,indf2
  6391   003EEA  4A16               	infsnz	create_name@i^0,f,c
  6392   003EEC  2A17               	incf	(create_name@i+1)^0,f,c
  6393   003EEE  EF5C  F01E         	goto	l5275
  6394   003EF2                     l5359:
  6395                           
  6396                           ;ff.c: 2028:  *path = &p[si];
  6397   003EF2  500A               	movf	create_name@path^0,w,c
  6398   003EF4  6ED9               	movwf	fsr2l,c
  6399   003EF6  6ADA               	clrf	fsr2h,c
  6400   003EF8  5015               	movf	create_name@p^0,w,c
  6401   003EFA  240F               	addwf	create_name@si^0,w,c
  6402   003EFC  6EDF               	movwf	indf2,c
  6403   003EFE                     
  6404                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  6405   003EFE  0E20               	movlw	32
  6406   003F00  6419               	cpfsgt	create_name@c^0,c
  6407   003F02  EF85  F01F         	goto	u7151
  6408   003F06  EF87  F01F         	goto	u7150
  6409   003F0A                     u7151:
  6410   003F0A  EF8D  F01F         	goto	l5365
  6411   003F0E                     u7150:
  6412   003F0E  0E00               	movlw	0
  6413   003F10  6E0E               	movwf	(_create_name$930+1)^0,c
  6414   003F12  0E00               	movlw	0
  6415   003F14  6E0D               	movwf	_create_name$930^0,c
  6416   003F16  EF91  F01F         	goto	l5367
  6417   003F1A                     l5365:
  6418   003F1A  0E00               	movlw	0
  6419   003F1C  6E0E               	movwf	(_create_name$930+1)^0,c
  6420   003F1E  0E04               	movlw	4
  6421   003F20  6E0D               	movwf	_create_name$930^0,c
  6422   003F22                     l5367:
  6423   003F22  C00D  F019         	movff	_create_name$930,create_name@c
  6424   003F26                     
  6425                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  6426   003F26  5016               	movf	create_name@i^0,w,c
  6427   003F28  1017               	iorwf	(create_name@i+1)^0,w,c
  6428   003F2A  A4D8               	btfss	status,2,c
  6429   003F2C  EF9A  F01F         	goto	u7161
  6430   003F30  EF9C  F01F         	goto	u7160
  6431   003F34                     u7161:
  6432   003F34  EF9E  F01F         	goto	l5375
  6433   003F38                     u7160:
  6434   003F38  EFAB  F01E         	goto	l5293
  6435   003F3C                     l5375:
  6436                           
  6437                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  6438   003F3C  5018               	movf	create_name@sfn^0,w,c
  6439   003F3E  6ED9               	movwf	fsr2l,c
  6440   003F40  6ADA               	clrf	fsr2h,c
  6441   003F42  0EE5               	movlw	229
  6442   003F44  18DE               	xorwf	postinc2,w,c
  6443   003F46  A4D8               	btfss	status,2,c
  6444   003F48  EFA8  F01F         	goto	u7171
  6445   003F4C  EFAA  F01F         	goto	u7170
  6446   003F50                     u7171:
  6447   003F50  EFAF  F01F         	goto	l5379
  6448   003F54                     u7170:
  6449   003F54  5018               	movf	create_name@sfn^0,w,c
  6450   003F56  6ED9               	movwf	fsr2l,c
  6451   003F58  6ADA               	clrf	fsr2h,c
  6452   003F5A  0E05               	movlw	5
  6453   003F5C  6EDF               	movwf	indf2,c
  6454   003F5E                     l5379:
  6455                           
  6456                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  6457   003F5E  0E08               	movlw	8
  6458   003F60  1812               	xorwf	create_name@ni^0,w,c
  6459   003F62  1013               	iorwf	(create_name@ni+1)^0,w,c
  6460   003F64  A4D8               	btfss	status,2,c
  6461   003F66  EFB7  F01F         	goto	u7181
  6462   003F6A  EFB9  F01F         	goto	u7180
  6463   003F6E                     u7181:
  6464   003F6E  EFBD  F01F         	goto	l535
  6465   003F72                     u7180:
  6466   003F72  90D8               	bcf	status,0,c
  6467   003F74  3611               	rlcf	create_name@b^0,f,c
  6468   003F76  90D8               	bcf	status,0,c
  6469   003F78  3611               	rlcf	create_name@b^0,f,c
  6470   003F7A                     l535:
  6471                           
  6472                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  6473   003F7A  5011               	movf	create_name@b^0,w,c
  6474   003F7C  0B03               	andlw	3
  6475   003F7E  06E8               	decf	wreg,f,c
  6476   003F80  A4D8               	btfss	status,2,c
  6477   003F82  EFC5  F01F         	goto	u7191
  6478   003F86  EFC7  F01F         	goto	u7190
  6479   003F8A                     u7191:
  6480   003F8A  EFC8  F01F         	goto	l5385
  6481   003F8E                     u7190:
  6482   003F8E  8819               	bsf	create_name@c^0,4,c
  6483   003F90                     l5385:
  6484                           
  6485                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  6486   003F90  5011               	movf	create_name@b^0,w,c
  6487   003F92  0B0C               	andlw	12
  6488   003F94  0A04               	xorlw	4
  6489   003F96  A4D8               	btfss	status,2,c
  6490   003F98  EFD0  F01F         	goto	u7201
  6491   003F9C  EFD2  F01F         	goto	u7200
  6492   003FA0                     u7201:
  6493   003FA0  EFD3  F01F         	goto	l5389
  6494   003FA4                     u7200:
  6495   003FA4  8619               	bsf	create_name@c^0,3,c
  6496   003FA6                     l5389:
  6497                           
  6498                           ;ff.c: 2038:  sfn[11] = c;
  6499   003FA6  5018               	movf	create_name@sfn^0,w,c
  6500   003FA8  6ED9               	movwf	fsr2l,c
  6501   003FAA  6ADA               	clrf	fsr2h,c
  6502   003FAC  0E0B               	movlw	11
  6503   003FAE  26D9               	addwf	fsr2l,f,c
  6504   003FB0  C019  FFDF         	movff	create_name@c,indf2
  6505   003FB4                     
  6506                           ;ff.c: 2040:  return FR_OK;
  6507   003FB4  0E00               	movlw	0
  6508   003FB6                     l509:
  6509   003FB6  0012               	return		;funcret
  6510   003FB8                     __end_of_create_name:
  6511                           	callstack 0
  6512                           
  6513 ;; *************** function _chk_chr *****************
  6514 ;; Defined at:
  6515 ;;		line 543 in file "ff.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;  str             1    0[COMRAM] PTR const unsigned char 
  6518 ;;		 -> STR_2(15), 
  6519 ;;  chr             2    1[COMRAM] int 
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;		None
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  2    0[COMRAM] int 
  6524 ;; Registers used:
  6525 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6531 ;;      Params:         3       0       0       0       0       0       0
  6532 ;;      Locals:         0       0       0       0       0       0       0
  6533 ;;      Temps:          2       0       0       0       0       0       0
  6534 ;;      Totals:         5       0       0       0       0       0       0
  6535 ;;Total ram usage:        5 bytes
  6536 ;; Hardware stack levels used: 1
  6537 ;; This function calls:
  6538 ;;		Nothing
  6539 ;; This function is called by:
  6540 ;;		_create_name
  6541 ;; This function uses a non-reentrant model
  6542 ;;
  6543                           
  6544                           	psect	text18
  6545   006302                     __ptext18:
  6546                           	callstack 0
  6547   006302                     _chk_chr:
  6548                           	callstack 27
  6549   006302                     
  6550                           ;ff.c: 544:  while (*str && *str != chr) str++;
  6551   006302  EF84  F031         	goto	l4757
  6552   006306                     l4755:
  6553   006306  2A01               	incf	chk_chr@str^0,f,c
  6554   006308                     l4757:
  6555   006308  C001  FFF6         	movff	chk_chr@str,tblptrl
  6556   00630C                     	if	1	;There is more than 1 active tblptr byte
  6557   00630C  0E06               	movlw	high __smallconst
  6558   00630E  6EF7               	movwf	tblptrh,c
  6559   006310                     	endif
  6560   006310                     	if	0	;tblptru may be non-zero
  6561   006310                     	endif
  6562   006310                     	if	0	;tblptru may be non-zero
  6563   006310                     	endif
  6564   006310  0008               	tblrd		*
  6565   006312  50F5               	movf	tablat,w,c
  6566   006314  0900               	iorlw	0
  6567   006316  B4D8               	btfsc	status,2,c
  6568   006318  EF90  F031         	goto	u6011
  6569   00631C  EF92  F031         	goto	u6010
  6570   006320                     u6011:
  6571   006320  EFA6  F031         	goto	l4761
  6572   006324                     u6010:
  6573   006324  C001  FFF6         	movff	chk_chr@str,tblptrl
  6574   006328                     	if	1	;There is more than 1 active tblptr byte
  6575   006328  0E06               	movlw	high __smallconst
  6576   00632A  6EF7               	movwf	tblptrh,c
  6577   00632C                     	endif
  6578   00632C                     	if	0	;tblptru may be non-zero
  6579   00632C                     	endif
  6580   00632C                     	if	0	;tblptru may be non-zero
  6581   00632C                     	endif
  6582   00632C  0008               	tblrd		*
  6583   00632E  50F5               	movf	tablat,w,c
  6584   006330  6E04               	movwf	??_chk_chr^0,c
  6585   006332  6A05               	clrf	(??_chk_chr+1)^0,c
  6586   006334  5002               	movf	chk_chr@chr^0,w,c
  6587   006336  1804               	xorwf	??_chk_chr^0,w,c
  6588   006338  E107               	bnz	u6021
  6589   00633A  5003               	movf	(chk_chr@chr+1)^0,w,c
  6590   00633C  1805               	xorwf	(??_chk_chr+1)^0,w,c
  6591   00633E  A4D8               	btfss	status,2,c
  6592   006340  EFA4  F031         	goto	u6021
  6593   006344  EFA6  F031         	goto	u6020
  6594   006348                     u6021:
  6595   006348  EF83  F031         	goto	l4755
  6596   00634C                     u6020:
  6597   00634C                     l4761:
  6598                           
  6599                           ;ff.c: 545:  return *str;
  6600   00634C  C001  FFF6         	movff	chk_chr@str,tblptrl
  6601   006350                     	if	1	;There is more than 1 active tblptr byte
  6602   006350  0E06               	movlw	high __smallconst
  6603   006352  6EF7               	movwf	tblptrh,c
  6604   006354                     	endif
  6605   006354                     	if	0	;tblptru may be non-zero
  6606   006354                     	endif
  6607   006354                     	if	0	;tblptru may be non-zero
  6608   006354                     	endif
  6609   006354  0008               	tblrd		*
  6610   006356  50F5               	movf	tablat,w,c
  6611   006358  6E01               	movwf	?_chk_chr^0,c
  6612   00635A  6A02               	clrf	(?_chk_chr+1)^0,c
  6613   00635C  0012               	return		;funcret
  6614   00635E                     __end_of_chk_chr:
  6615                           	callstack 0
  6616                           
  6617 ;; *************** function _dir_register *****************
  6618 ;; Defined at:
  6619 ;;		line 1578 in file "ff.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  dp              1    9[BANK0 ] PTR struct .
  6622 ;;		 -> f_open@dj(21), 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  res             1   11[BANK0 ] enum E95
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  1    wreg      enum E95
  6627 ;; Registers used:
  6628 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6634 ;;      Params:         0       1       0       0       0       0       0
  6635 ;;      Locals:         0       1       0       0       0       0       0
  6636 ;;      Temps:          0       1       0       0       0       0       0
  6637 ;;      Totals:         0       3       0       0       0       0       0
  6638 ;;Total ram usage:        3 bytes
  6639 ;; Hardware stack levels used: 1
  6640 ;; Hardware stack levels required when called: 12
  6641 ;; This function calls:
  6642 ;;		_dir_alloc
  6643 ;;		_mem_cpy
  6644 ;;		_mem_set
  6645 ;;		_move_window
  6646 ;; This function is called by:
  6647 ;;		_f_open
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           	psect	text19
  6652   0057F8                     __ptext19:
  6653                           	callstack 0
  6654   0057F8                     _dir_register:
  6655                           	callstack 17
  6656   0057F8                     
  6657                           ;ff.c: 1579:  DIR* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_all
      +                          oc(dp, 1);
  6658   0057F8  C089  F080         	movff	dir_register@dp,dir_alloc@dp
  6659   0057FC  0E00               	movlw	0
  6660   0057FE  0100               	movlb	0	; () banked
  6661   005800  6F82               	movwf	(dir_alloc@nent+1)& (0+255),b
  6662   005802  0E01               	movlw	1
  6663   005804  6F81               	movwf	dir_alloc@nent& (0+255),b
  6664   005806  ECC2  F029         	call	_dir_alloc	;wreg free
  6665   00580A  0100               	movlb	0	; () banked
  6666   00580C  6F8B               	movwf	dir_register@res& (0+255),b
  6667   00580E                     
  6668                           ; BSR set to: 0
  6669                           ;ff.c: 1632:  if (res == FR_OK) {
  6670   00580E  518B               	movf	dir_register@res& (0+255),w,b
  6671   005810  A4D8               	btfss	status,2,c
  6672   005812  EF0D  F02C         	goto	u7581
  6673   005816  EF0F  F02C         	goto	u7580
  6674   00581A                     u7581:
  6675   00581A  EF68  F02C         	goto	l5617
  6676   00581E                     u7580:
  6677   00581E                     
  6678                           ; BSR set to: 0
  6679                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  6680   00581E  5189               	movf	dir_register@dp& (0+255),w,b
  6681   005820  6ED9               	movwf	fsr2l,c
  6682   005822  6ADA               	clrf	fsr2h,c
  6683   005824  CFDE F030          	movff	postinc2,move_window@fs
  6684   005828  CFDD F031          	movff	postdec2,move_window@fs+1
  6685   00582C  5189               	movf	dir_register@dp& (0+255),w,b
  6686   00582E  6ED9               	movwf	fsr2l,c
  6687   005830  6ADA               	clrf	fsr2h,c
  6688   005832  0E0E               	movlw	14
  6689   005834  26D9               	addwf	fsr2l,f,c
  6690   005836  CFDE F032          	movff	postinc2,move_window@sector
  6691   00583A  CFDE F033          	movff	postinc2,move_window@sector+1
  6692   00583E  CFDE F034          	movff	postinc2,move_window@sector+2
  6693   005842  CFDE F035          	movff	postinc2,move_window@sector+3
  6694   005846  ECF5  F02D         	call	_move_window	;wreg free
  6695   00584A  0100               	movlb	0	; () banked
  6696   00584C  6F8B               	movwf	dir_register@res& (0+255),b
  6697   00584E                     
  6698                           ; BSR set to: 0
  6699                           ;ff.c: 1634:   if (res == FR_OK) {
  6700   00584E  518B               	movf	dir_register@res& (0+255),w,b
  6701   005850  A4D8               	btfss	status,2,c
  6702   005852  EF2D  F02C         	goto	u7591
  6703   005856  EF2F  F02C         	goto	u7590
  6704   00585A                     u7591:
  6705   00585A  EF68  F02C         	goto	l5617
  6706   00585E                     u7590:
  6707   00585E                     
  6708                           ; BSR set to: 0
  6709                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  6710   00585E  5189               	movf	dir_register@dp& (0+255),w,b
  6711   005860  6ED9               	movwf	fsr2l,c
  6712   005862  6ADA               	clrf	fsr2h,c
  6713   005864  0E12               	movlw	18
  6714   005866  26D9               	addwf	fsr2l,f,c
  6715   005868  CFDE F001          	movff	postinc2,mem_set@dst
  6716   00586C  CFDD F002          	movff	postdec2,mem_set@dst+1
  6717   005870  0E00               	movlw	0
  6718   005872  6E04               	movwf	(mem_set@val+1)^0,c
  6719   005874  0E00               	movlw	0
  6720   005876  6E03               	movwf	mem_set@val^0,c
  6721   005878  0E00               	movlw	0
  6722   00587A  6E06               	movwf	(mem_set@cnt+1)^0,c
  6723   00587C  0E20               	movlw	32
  6724   00587E  6E05               	movwf	mem_set@cnt^0,c
  6725   005880  EC61  F032         	call	_mem_set	;wreg free
  6726   005884                     
  6727                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  6728   005884  0100               	movlb	0	; () banked
  6729   005886  5189               	movf	dir_register@dp& (0+255),w,b
  6730   005888  6ED9               	movwf	fsr2l,c
  6731   00588A  6ADA               	clrf	fsr2h,c
  6732   00588C  0E12               	movlw	18
  6733   00588E  26D9               	addwf	fsr2l,f,c
  6734   005890  CFDE F001          	movff	postinc2,mem_cpy@dst
  6735   005894  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  6736   005898  5189               	movf	dir_register@dp& (0+255),w,b
  6737   00589A  6ED9               	movwf	fsr2l,c
  6738   00589C  6ADA               	clrf	fsr2h,c
  6739   00589E  0E14               	movlw	20
  6740   0058A0  26D9               	addwf	fsr2l,f,c
  6741   0058A2  50DF               	movf	indf2,w,c
  6742   0058A4  6F8A               	movwf	??_dir_register& (0+255),b
  6743   0058A6  C08A  F003         	movff	??_dir_register,mem_cpy@src
  6744   0058AA  6A04               	clrf	(mem_cpy@src+1)^0,c
  6745   0058AC  0E00               	movlw	0
  6746   0058AE  6E06               	movwf	(mem_cpy@cnt+1)^0,c
  6747   0058B0  0E0B               	movlw	11
  6748   0058B2  6E05               	movwf	mem_cpy@cnt^0,c
  6749   0058B4  EC0B  F030         	call	_mem_cpy	;wreg free
  6750   0058B8                     
  6751                           ;ff.c: 1640:    dp->fs->wflag = 1;
  6752   0058B8  0100               	movlb	0	; () banked
  6753   0058BA  5189               	movf	dir_register@dp& (0+255),w,b
  6754   0058BC  6ED9               	movwf	fsr2l,c
  6755   0058BE  6ADA               	clrf	fsr2h,c
  6756   0058C0  EE10 F004          	lfsr	1,4
  6757   0058C4  50DE               	movf	postinc2,w,c
  6758   0058C6  26E1               	addwf	fsr1l,f,c
  6759   0058C8  50DD               	movf	postdec2,w,c
  6760   0058CA  22E2               	addwfc	fsr1h,f,c
  6761   0058CC  0E01               	movlw	1
  6762   0058CE  6EE7               	movwf	indf1,c
  6763   0058D0                     l5617:
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;ff.c: 1644:  return res;
  6767   0058D0  518B               	movf	dir_register@res& (0+255),w,b
  6768   0058D2                     
  6769                           ; BSR set to: 0
  6770   0058D2  0012               	return		;funcret
  6771   0058D4                     __end_of_dir_register:
  6772                           	callstack 0
  6773                           
  6774 ;; *************** function _mem_cpy *****************
  6775 ;; Defined at:
  6776 ;;		line 507 in file "ff.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  dst             2    0[COMRAM] PTR void 
  6779 ;;		 -> FatFs(558), FatFs$win(512), NULL(0), 
  6780 ;;  src             2    2[COMRAM] PTR const void 
  6781 ;;		 -> main@buffer(64), FatFs(558), f_open@sfn(12), NULL(0), 
  6782 ;;  cnt             2    4[COMRAM] unsigned short 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  s               2    8[COMRAM] PTR const unsigned char 
  6785 ;;		 -> main@buffer(64), FatFs(558), f_open@sfn(12), NULL(0), 
  6786 ;;  d               2    6[COMRAM] PTR unsigned char 
  6787 ;;		 -> FatFs(558), FatFs$win(512), NULL(0), 
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      void 
  6790 ;; Registers used:
  6791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6797 ;;      Params:         6       0       0       0       0       0       0
  6798 ;;      Locals:         4       0       0       0       0       0       0
  6799 ;;      Temps:          0       0       0       0       0       0       0
  6800 ;;      Totals:        10       0       0       0       0       0       0
  6801 ;;Total ram usage:       10 bytes
  6802 ;; Hardware stack levels used: 1
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		_dir_register
  6807 ;;		_f_write
  6808 ;;		_f_read
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	text20
  6813   006016                     __ptext20:
  6814                           	callstack 0
  6815   006016                     _mem_cpy:
  6816                           	callstack 29
  6817   006016                     
  6818                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  6819   006016  C001  F007         	movff	mem_cpy@dst,mem_cpy@d
  6820   00601A  C002  F008         	movff	mem_cpy@dst+1,mem_cpy@d+1
  6821                           
  6822                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  6823   00601E  C003  F009         	movff	mem_cpy@src,mem_cpy@s
  6824   006022  C004  F00A         	movff	mem_cpy@src+1,mem_cpy@s+1
  6825                           
  6826                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  6827   006026  EF2D  F030         	goto	l5141
  6828   00602A                     l5133:
  6829                           
  6830                           ;ff.c: 513:   *(int*)d = *(int*)s;
  6831   00602A  C009  FFD9         	movff	mem_cpy@s,fsr2l
  6832   00602E  C00A  FFDA         	movff	mem_cpy@s+1,fsr2h
  6833   006032  C007  FFE1         	movff	mem_cpy@d,fsr1l
  6834   006036  C008  FFE2         	movff	mem_cpy@d+1,fsr1h
  6835   00603A  CFDE FFE6          	movff	postinc2,postinc1
  6836   00603E  CFDD FFE5          	movff	postdec2,postdec1
  6837   006042                     
  6838                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  6839   006042  0E02               	movlw	2
  6840   006044  2607               	addwf	mem_cpy@d^0,f,c
  6841   006046  0E00               	movlw	0
  6842   006048  2208               	addwfc	(mem_cpy@d+1)^0,f,c
  6843   00604A  0E02               	movlw	2
  6844   00604C  2609               	addwf	mem_cpy@s^0,f,c
  6845   00604E  0E00               	movlw	0
  6846   006050  220A               	addwfc	(mem_cpy@s+1)^0,f,c
  6847   006052                     
  6848                           ;ff.c: 515:   cnt -= sizeof (int);
  6849   006052  0E02               	movlw	2
  6850   006054  5E05               	subwf	mem_cpy@cnt^0,f,c
  6851   006056  0E00               	movlw	0
  6852   006058  5A06               	subwfb	(mem_cpy@cnt+1)^0,f,c
  6853   00605A                     l5141:
  6854                           
  6855                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  6856   00605A  5006               	movf	(mem_cpy@cnt+1)^0,w,c
  6857   00605C  E107               	bnz	u6711
  6858   00605E  0E02               	movlw	2
  6859   006060  5C05               	subwf	mem_cpy@cnt^0,w,c
  6860   006062  B0D8               	btfsc	status,0,c
  6861   006064  EF36  F030         	goto	u6711
  6862   006068  EF38  F030         	goto	u6710
  6863   00606C                     u6711:
  6864   00606C  EF15  F030         	goto	l5133
  6865   006070                     u6710:
  6866   006070  EF48  F030         	goto	l5149
  6867   006074                     l5143:
  6868                           
  6869                           ;ff.c: 519:   *d++ = *s++;
  6870   006074  C009  FFD9         	movff	mem_cpy@s,fsr2l
  6871   006078  C00A  FFDA         	movff	mem_cpy@s+1,fsr2h
  6872   00607C  C007  FFE1         	movff	mem_cpy@d,fsr1l
  6873   006080  C008  FFE2         	movff	mem_cpy@d+1,fsr1h
  6874   006084  CFDF FFE7          	movff	indf2,indf1
  6875   006088  4A09               	infsnz	mem_cpy@s^0,f,c
  6876   00608A  2A0A               	incf	(mem_cpy@s+1)^0,f,c
  6877   00608C  4A07               	infsnz	mem_cpy@d^0,f,c
  6878   00608E  2A08               	incf	(mem_cpy@d+1)^0,f,c
  6879   006090                     l5149:
  6880                           
  6881                           ;ff.c: 518:  while (cnt--)
  6882   006090  0605               	decf	mem_cpy@cnt^0,f,c
  6883   006092  A0D8               	btfss	status,0,c
  6884   006094  0606               	decf	(mem_cpy@cnt+1)^0,f,c
  6885   006096  2805               	incf	mem_cpy@cnt^0,w,c
  6886   006098  E106               	bnz	u6721
  6887   00609A  2806               	incf	(mem_cpy@cnt+1)^0,w,c
  6888   00609C  A4D8               	btfss	status,2,c
  6889   00609E  EF53  F030         	goto	u6721
  6890   0060A2  EF55  F030         	goto	u6720
  6891   0060A6                     u6721:
  6892   0060A6  EF3A  F030         	goto	l5143
  6893   0060AA                     u6720:
  6894   0060AA  0012               	return		;funcret
  6895   0060AC                     __end_of_mem_cpy:
  6896                           	callstack 0
  6897                           
  6898 ;; *************** function _dir_alloc *****************
  6899 ;; Defined at:
  6900 ;;		line 1199 in file "ff.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;  dp              1    0[BANK0 ] PTR struct .
  6903 ;;		 -> f_open@dj(21), 
  6904 ;;  nent            2    1[BANK0 ] unsigned short 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;  n               2    6[BANK0 ] unsigned short 
  6907 ;;  res             1    8[BANK0 ] enum E95
  6908 ;; Return value:  Size  Location     Type
  6909 ;;                  1    wreg      enum E95
  6910 ;; Registers used:
  6911 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6912 ;; Tracked objects:
  6913 ;;		On entry : 0/0
  6914 ;;		On exit  : 0/0
  6915 ;;		Unchanged: 0/0
  6916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6917 ;;      Params:         0       3       0       0       0       0       0
  6918 ;;      Locals:         0       3       0       0       0       0       0
  6919 ;;      Temps:          0       3       0       0       0       0       0
  6920 ;;      Totals:         0       9       0       0       0       0       0
  6921 ;;Total ram usage:        9 bytes
  6922 ;; Hardware stack levels used: 1
  6923 ;; Hardware stack levels required when called: 11
  6924 ;; This function calls:
  6925 ;;		_dir_next
  6926 ;;		_dir_sdi
  6927 ;;		_move_window
  6928 ;; This function is called by:
  6929 ;;		_dir_register
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text21
  6934   005384                     __ptext21:
  6935                           	callstack 0
  6936   005384                     _dir_alloc:
  6937                           	callstack 17
  6938   005384                     
  6939                           ;ff.c: 1200:  DIR* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;ff
      +                          .c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  6940   005384  C080  F055         	movff	dir_alloc@dp,dir_sdi@dp
  6941   005388  0E00               	movlw	0
  6942   00538A  6E57               	movwf	(dir_sdi@idx+1)^0,c
  6943   00538C  0E00               	movlw	0
  6944   00538E  6E56               	movwf	dir_sdi@idx^0,c
  6945   005390  ECDC  F01F         	call	_dir_sdi	;wreg free
  6946   005394  0100               	movlb	0	; () banked
  6947   005396  6F88               	movwf	dir_alloc@res& (0+255),b
  6948   005398                     
  6949                           ; BSR set to: 0
  6950                           ;ff.c: 1209:  if (res == FR_OK) {
  6951   005398  5188               	movf	dir_alloc@res& (0+255),w,b
  6952   00539A  A4D8               	btfss	status,2,c
  6953   00539C  EFD2  F029         	goto	u6771
  6954   0053A0  EFD4  F029         	goto	u6770
  6955   0053A4                     u6771:
  6956   0053A4  EF4B  F02A         	goto	l5207
  6957   0053A8                     u6770:
  6958   0053A8                     
  6959                           ; BSR set to: 0
  6960                           ;ff.c: 1210:   n = 0;
  6961   0053A8  0E00               	movlw	0
  6962   0053AA  6F87               	movwf	(dir_alloc@n+1)& (0+255),b
  6963   0053AC  0E00               	movlw	0
  6964   0053AE  6F86               	movwf	dir_alloc@n& (0+255),b
  6965   0053B0                     l5187:
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  6969   0053B0  5180               	movf	dir_alloc@dp& (0+255),w,b
  6970   0053B2  6ED9               	movwf	fsr2l,c
  6971   0053B4  6ADA               	clrf	fsr2h,c
  6972   0053B6  CFDE F030          	movff	postinc2,move_window@fs
  6973   0053BA  CFDD F031          	movff	postdec2,move_window@fs+1
  6974   0053BE  5180               	movf	dir_alloc@dp& (0+255),w,b
  6975   0053C0  6ED9               	movwf	fsr2l,c
  6976   0053C2  6ADA               	clrf	fsr2h,c
  6977   0053C4  0E0E               	movlw	14
  6978   0053C6  26D9               	addwf	fsr2l,f,c
  6979   0053C8  CFDE F032          	movff	postinc2,move_window@sector
  6980   0053CC  CFDE F033          	movff	postinc2,move_window@sector+1
  6981   0053D0  CFDE F034          	movff	postinc2,move_window@sector+2
  6982   0053D4  CFDE F035          	movff	postinc2,move_window@sector+3
  6983   0053D8  ECF5  F02D         	call	_move_window	;wreg free
  6984   0053DC  0100               	movlb	0	; () banked
  6985   0053DE  6F88               	movwf	dir_alloc@res& (0+255),b
  6986   0053E0                     
  6987                           ; BSR set to: 0
  6988                           ;ff.c: 1213:    if (res != FR_OK) break;
  6989   0053E0  5188               	movf	dir_alloc@res& (0+255),w,b
  6990   0053E2  B4D8               	btfsc	status,2,c
  6991   0053E4  EFF6  F029         	goto	u6781
  6992   0053E8  EFF8  F029         	goto	u6780
  6993   0053EC                     u6781:
  6994   0053EC  EFFA  F029         	goto	l5193
  6995   0053F0                     u6780:
  6996   0053F0  EF4B  F02A         	goto	l5207
  6997   0053F4                     l5193:
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  7001   0053F4  5180               	movf	dir_alloc@dp& (0+255),w,b
  7002   0053F6  6ED9               	movwf	fsr2l,c
  7003   0053F8  6ADA               	clrf	fsr2h,c
  7004   0053FA  0E12               	movlw	18
  7005   0053FC  26D9               	addwf	fsr2l,f,c
  7006   0053FE  CFDE F083          	movff	postinc2,??_dir_alloc
  7007   005402  CFDD F084          	movff	postdec2,??_dir_alloc+1
  7008   005406  C083  FFD9         	movff	??_dir_alloc,fsr2l
  7009   00540A  C084  FFDA         	movff	??_dir_alloc+1,fsr2h
  7010   00540E  0EE5               	movlw	229
  7011   005410  18DE               	xorwf	postinc2,w,c
  7012   005412  B4D8               	btfsc	status,2,c
  7013   005414  EF0E  F02A         	goto	u6791
  7014   005418  EF10  F02A         	goto	u6790
  7015   00541C                     u6791:
  7016   00541C  EF25  F02A         	goto	l5197
  7017   005420                     u6790:
  7018   005420                     
  7019                           ; BSR set to: 0
  7020   005420  5180               	movf	dir_alloc@dp& (0+255),w,b
  7021   005422  6ED9               	movwf	fsr2l,c
  7022   005424  6ADA               	clrf	fsr2h,c
  7023   005426  0E12               	movlw	18
  7024   005428  26D9               	addwf	fsr2l,f,c
  7025   00542A  CFDE F083          	movff	postinc2,??_dir_alloc
  7026   00542E  CFDD F084          	movff	postdec2,??_dir_alloc+1
  7027   005432  C083  FFD9         	movff	??_dir_alloc,fsr2l
  7028   005436  C084  FFDA         	movff	??_dir_alloc+1,fsr2h
  7029   00543A  50DF               	movf	indf2,w,c
  7030   00543C  A4D8               	btfss	status,2,c
  7031   00543E  EF23  F02A         	goto	u6801
  7032   005442  EF25  F02A         	goto	u6800
  7033   005446                     u6801:
  7034   005446  EF35  F02A         	goto	l5201
  7035   00544A                     u6800:
  7036   00544A                     l5197:
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;ff.c: 1215:     if (++n == nent) break;
  7040   00544A  4B86               	infsnz	dir_alloc@n& (0+255),f,b
  7041   00544C  2B87               	incf	(dir_alloc@n+1)& (0+255),f,b
  7042   00544E  5181               	movf	dir_alloc@nent& (0+255),w,b
  7043   005450  1986               	xorwf	dir_alloc@n& (0+255),w,b
  7044   005452  E107               	bnz	u6811
  7045   005454  5182               	movf	(dir_alloc@nent+1)& (0+255),w,b
  7046   005456  1987               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  7047   005458  A4D8               	btfss	status,2,c
  7048   00545A  EF31  F02A         	goto	u6811
  7049   00545E  EF33  F02A         	goto	u6810
  7050   005462                     u6811:
  7051   005462  EF39  F02A         	goto	l5203
  7052   005466                     u6810:
  7053   005466  EF4B  F02A         	goto	l5207
  7054   00546A                     l5201:
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;ff.c: 1217:     n = 0;
  7058   00546A  0E00               	movlw	0
  7059   00546C  6F87               	movwf	(dir_alloc@n+1)& (0+255),b
  7060   00546E  0E00               	movlw	0
  7061   005470  6F86               	movwf	dir_alloc@n& (0+255),b
  7062   005472                     l5203:
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;ff.c: 1219:    res = dir_next(dp, 1);
  7066   005472  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  7067   005476  0E00               	movlw	0
  7068   005478  6E6F               	movwf	(dir_next@stretch+1)^0,c
  7069   00547A  0E01               	movlw	1
  7070   00547C  6E6E               	movwf	dir_next@stretch^0,c
  7071   00547E  ECE0  F015         	call	_dir_next	;wreg free
  7072   005482  0100               	movlb	0	; () banked
  7073   005484  6F88               	movwf	dir_alloc@res& (0+255),b
  7074   005486                     
  7075                           ; BSR set to: 0
  7076                           ;ff.c: 1220:   } while (res == FR_OK);
  7077   005486  5188               	movf	dir_alloc@res& (0+255),w,b
  7078   005488  B4D8               	btfsc	status,2,c
  7079   00548A  EF49  F02A         	goto	u6821
  7080   00548E  EF4B  F02A         	goto	u6820
  7081   005492                     u6821:
  7082   005492  EFD8  F029         	goto	l5187
  7083   005496                     u6820:
  7084   005496                     l5207:
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  7088   005496  0E04               	movlw	4
  7089   005498  1988               	xorwf	dir_alloc@res& (0+255),w,b
  7090   00549A  A4D8               	btfss	status,2,c
  7091   00549C  EF52  F02A         	goto	u6831
  7092   0054A0  EF54  F02A         	goto	u6830
  7093   0054A4                     u6831:
  7094   0054A4  EF56  F02A         	goto	l470
  7095   0054A8                     u6830:
  7096   0054A8                     
  7097                           ; BSR set to: 0
  7098   0054A8  0E07               	movlw	7
  7099   0054AA  6F88               	movwf	dir_alloc@res& (0+255),b
  7100   0054AC                     l470:
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;ff.c: 1223:  return res;
  7104   0054AC  5188               	movf	dir_alloc@res& (0+255),w,b
  7105   0054AE                     
  7106                           ; BSR set to: 0
  7107   0054AE  0012               	return		;funcret
  7108   0054B0                     __end_of_dir_alloc:
  7109                           	callstack 0
  7110                           
  7111 ;; *************** function _dir_sdi *****************
  7112 ;; Defined at:
  7113 ;;		line 1080 in file "ff.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;  dp              1   84[COMRAM] PTR struct .
  7116 ;;		 -> f_open@dj(21), 
  7117 ;;  idx             2   85[COMRAM] unsigned short 
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;  clst            4  100[COMRAM] unsigned long 
  7120 ;;  sect            4   96[COMRAM] unsigned long 
  7121 ;;  ic              2   94[COMRAM] unsigned short 
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  1    wreg      enum E95
  7124 ;; Registers used:
  7125 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7131 ;;      Params:         3       0       0       0       0       0       0
  7132 ;;      Locals:        10       0       0       0       0       0       0
  7133 ;;      Temps:          7       0       0       0       0       0       0
  7134 ;;      Totals:        20       0       0       0       0       0       0
  7135 ;;Total ram usage:       20 bytes
  7136 ;; Hardware stack levels used: 1
  7137 ;; Hardware stack levels required when called: 9
  7138 ;; This function calls:
  7139 ;;		_clust2sect
  7140 ;;		_get_fat
  7141 ;; This function is called by:
  7142 ;;		_dir_alloc
  7143 ;;		_dir_find
  7144 ;;		_follow_path
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text22
  7149   003FB8                     __ptext22:
  7150                           	callstack 0
  7151   003FB8                     _dir_sdi:
  7152                           	callstack 19
  7153   003FB8                     
  7154                           ;ff.c: 1081:  DIR* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sect
      +                          ;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  7155   003FB8  5055               	movf	dir_sdi@dp^0,w,c
  7156   003FBA  6ED9               	movwf	fsr2l,c
  7157   003FBC  6ADA               	clrf	fsr2h,c
  7158   003FBE  0E04               	movlw	4
  7159   003FC0  26D9               	addwf	fsr2l,f,c
  7160   003FC2  C056  FFDE         	movff	dir_sdi@idx,postinc2
  7161   003FC6  C057  FFDD         	movff	dir_sdi@idx+1,postdec2
  7162                           
  7163                           ;ff.c: 1090:  clst = dp->sclust;
  7164   003FCA  5055               	movf	dir_sdi@dp^0,w,c
  7165   003FCC  6ED9               	movwf	fsr2l,c
  7166   003FCE  6ADA               	clrf	fsr2h,c
  7167   003FD0  0E06               	movlw	6
  7168   003FD2  26D9               	addwf	fsr2l,f,c
  7169   003FD4  CFDE F065          	movff	postinc2,dir_sdi@clst
  7170   003FD8  CFDE F066          	movff	postinc2,dir_sdi@clst+1
  7171   003FDC  CFDE F067          	movff	postinc2,dir_sdi@clst+2
  7172   003FE0  CFDE F068          	movff	postinc2,dir_sdi@clst+3
  7173   003FE4                     
  7174                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  7175   003FE4  0465               	decf	dir_sdi@clst^0,w,c
  7176   003FE6  1066               	iorwf	(dir_sdi@clst+1)^0,w,c
  7177   003FE8  1067               	iorwf	(dir_sdi@clst+2)^0,w,c
  7178   003FEA  1068               	iorwf	(dir_sdi@clst+3)^0,w,c
  7179   003FEC  B4D8               	btfsc	status,2,c
  7180   003FEE  EFFB  F01F         	goto	u6031
  7181   003FF2  EFFD  F01F         	goto	u6030
  7182   003FF6                     u6031:
  7183   003FF6  EF15  F020         	goto	l4771
  7184   003FFA                     u6030:
  7185   003FFA  5055               	movf	dir_sdi@dp^0,w,c
  7186   003FFC  6ED9               	movwf	fsr2l,c
  7187   003FFE  6ADA               	clrf	fsr2h,c
  7188   004000  EE10 F012          	lfsr	1,18
  7189   004004  50DE               	movf	postinc2,w,c
  7190   004006  26E1               	addwf	fsr1l,f,c
  7191   004008  50DD               	movf	postdec2,w,c
  7192   00400A  22E2               	addwfc	fsr1h,f,c
  7193   00400C  50E6               	movf	postinc1,w,c
  7194   00400E  5C65               	subwf	dir_sdi@clst^0,w,c
  7195   004010  50E6               	movf	postinc1,w,c
  7196   004012  5866               	subwfb	(dir_sdi@clst+1)^0,w,c
  7197   004014  50E6               	movf	postinc1,w,c
  7198   004016  5867               	subwfb	(dir_sdi@clst+2)^0,w,c
  7199   004018  50E6               	movf	postinc1,w,c
  7200   00401A  5868               	subwfb	(dir_sdi@clst+3)^0,w,c
  7201   00401C  A0D8               	btfss	status,0,c
  7202   00401E  EF13  F020         	goto	u6041
  7203   004022  EF15  F020         	goto	u6040
  7204   004026                     u6041:
  7205   004026  EF18  F020         	goto	l4775
  7206   00402A                     u6040:
  7207   00402A                     l4771:
  7208                           
  7209                           ;ff.c: 1092:   return FR_INT_ERR;
  7210   00402A  0E02               	movlw	2
  7211   00402C  EF6F  F021         	goto	l423
  7212   004030                     l4775:
  7213                           
  7214                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  7215   004030  5065               	movf	dir_sdi@clst^0,w,c
  7216   004032  1066               	iorwf	(dir_sdi@clst+1)^0,w,c
  7217   004034  1067               	iorwf	(dir_sdi@clst+2)^0,w,c
  7218   004036  1068               	iorwf	(dir_sdi@clst+3)^0,w,c
  7219   004038  A4D8               	btfss	status,2,c
  7220   00403A  EF21  F020         	goto	u6051
  7221   00403E  EF23  F020         	goto	u6050
  7222   004042                     u6051:
  7223   004042  EF48  F020         	goto	l4781
  7224   004046                     u6050:
  7225   004046  5055               	movf	dir_sdi@dp^0,w,c
  7226   004048  6ED9               	movwf	fsr2l,c
  7227   00404A  6ADA               	clrf	fsr2h,c
  7228   00404C  CFDE F058          	movff	postinc2,??_dir_sdi
  7229   004050  CFDD F059          	movff	postdec2,??_dir_sdi+1
  7230   004054  C058  FFD9         	movff	??_dir_sdi,fsr2l
  7231   004058  C059  FFDA         	movff	??_dir_sdi+1,fsr2h
  7232   00405C  0E03               	movlw	3
  7233   00405E  18DE               	xorwf	postinc2,w,c
  7234   004060  A4D8               	btfss	status,2,c
  7235   004062  EF35  F020         	goto	u6061
  7236   004066  EF37  F020         	goto	u6060
  7237   00406A                     u6061:
  7238   00406A  EF48  F020         	goto	l4781
  7239   00406E                     u6060:
  7240   00406E                     
  7241                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  7242   00406E  5055               	movf	dir_sdi@dp^0,w,c
  7243   004070  6ED9               	movwf	fsr2l,c
  7244   004072  6ADA               	clrf	fsr2h,c
  7245   004074  EE10 F022          	lfsr	1,34
  7246   004078  50DE               	movf	postinc2,w,c
  7247   00407A  26E1               	addwf	fsr1l,f,c
  7248   00407C  50DD               	movf	postdec2,w,c
  7249   00407E  22E2               	addwfc	fsr1h,f,c
  7250   004080  CFE6 F065          	movff	postinc1,dir_sdi@clst
  7251   004084  CFE6 F066          	movff	postinc1,dir_sdi@clst+1
  7252   004088  CFE6 F067          	movff	postinc1,dir_sdi@clst+2
  7253   00408C  CFE6 F068          	movff	postinc1,dir_sdi@clst+3
  7254   004090                     l4781:
  7255                           
  7256                           ;ff.c: 1096:  if (clst == 0) {
  7257   004090  5065               	movf	dir_sdi@clst^0,w,c
  7258   004092  1066               	iorwf	(dir_sdi@clst+1)^0,w,c
  7259   004094  1067               	iorwf	(dir_sdi@clst+2)^0,w,c
  7260   004096  1068               	iorwf	(dir_sdi@clst+3)^0,w,c
  7261   004098  A4D8               	btfss	status,2,c
  7262   00409A  EF51  F020         	goto	u6071
  7263   00409E  EF53  F020         	goto	u6070
  7264   0040A2                     u6071:
  7265   0040A2  EF7C  F020         	goto	l4791
  7266   0040A6                     u6070:
  7267   0040A6                     
  7268                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  7269   0040A6  5055               	movf	dir_sdi@dp^0,w,c
  7270   0040A8  6ED9               	movwf	fsr2l,c
  7271   0040AA  6ADA               	clrf	fsr2h,c
  7272   0040AC  EE10 F008          	lfsr	1,8
  7273   0040B0  50DE               	movf	postinc2,w,c
  7274   0040B2  26E1               	addwf	fsr1l,f,c
  7275   0040B4  50DD               	movf	postdec2,w,c
  7276   0040B6  22E2               	addwfc	fsr1h,f,c
  7277   0040B8  50E6               	movf	postinc1,w,c
  7278   0040BA  5C56               	subwf	dir_sdi@idx^0,w,c
  7279   0040BC  50E6               	movf	postinc1,w,c
  7280   0040BE  5857               	subwfb	(dir_sdi@idx+1)^0,w,c
  7281   0040C0  A0D8               	btfss	status,0,c
  7282   0040C2  EF65  F020         	goto	u6081
  7283   0040C6  EF67  F020         	goto	u6080
  7284   0040CA                     u6081:
  7285   0040CA  EF69  F020         	goto	l4789
  7286   0040CE                     u6080:
  7287   0040CE  EF15  F020         	goto	l4771
  7288   0040D2                     l4789:
  7289                           
  7290                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  7291   0040D2  5055               	movf	dir_sdi@dp^0,w,c
  7292   0040D4  6ED9               	movwf	fsr2l,c
  7293   0040D6  6ADA               	clrf	fsr2h,c
  7294   0040D8  EE10 F022          	lfsr	1,34
  7295   0040DC  50DE               	movf	postinc2,w,c
  7296   0040DE  26E1               	addwf	fsr1l,f,c
  7297   0040E0  50DD               	movf	postdec2,w,c
  7298   0040E2  22E2               	addwfc	fsr1h,f,c
  7299   0040E4  CFE6 F061          	movff	postinc1,dir_sdi@sect
  7300   0040E8  CFE6 F062          	movff	postinc1,dir_sdi@sect+1
  7301   0040EC  CFE6 F063          	movff	postinc1,dir_sdi@sect+2
  7302   0040F0  CFE6 F064          	movff	postinc1,dir_sdi@sect+3
  7303                           
  7304                           ;ff.c: 1100:  }
  7305   0040F4  EF08  F021         	goto	l4813
  7306   0040F8                     l4791:
  7307                           
  7308                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  7309   0040F8  5055               	movf	dir_sdi@dp^0,w,c
  7310   0040FA  6ED9               	movwf	fsr2l,c
  7311   0040FC  6ADA               	clrf	fsr2h,c
  7312   0040FE  EE10 F002          	lfsr	1,2
  7313   004102  50DE               	movf	postinc2,w,c
  7314   004104  26E1               	addwf	fsr1l,f,c
  7315   004106  50DD               	movf	postdec2,w,c
  7316   004108  22E2               	addwfc	fsr1h,f,c
  7317   00410A  50E7               	movf	indf1,w,c
  7318   00410C  6E58               	movwf	??_dir_sdi^0,c
  7319   00410E  5058               	movf	??_dir_sdi^0,w,c
  7320   004110  0D10               	mullw	16
  7321   004112  CFF3 F05F          	movff	prodl,dir_sdi@ic
  7322   004116  CFF4 F060          	movff	prodh,dir_sdi@ic+1
  7323                           
  7324                           ;ff.c: 1103:   while (idx >= ic) {
  7325   00411A  EFE4  F020         	goto	l428
  7326   00411E                     l4793:
  7327                           
  7328                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  7329   00411E  5055               	movf	dir_sdi@dp^0,w,c
  7330   004120  6ED9               	movwf	fsr2l,c
  7331   004122  6ADA               	clrf	fsr2h,c
  7332   004124  CFDE F03B          	movff	postinc2,get_fat@fs
  7333   004128  CFDD F03C          	movff	postdec2,get_fat@fs+1
  7334   00412C  C065  F03D         	movff	dir_sdi@clst,get_fat@clst
  7335   004130  C066  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  7336   004134  C067  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  7337   004138  C068  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  7338   00413C  EC4E  F01A         	call	_get_fat	;wreg free
  7339   004140  C03B  F065         	movff	?_get_fat,dir_sdi@clst
  7340   004144  C03C  F066         	movff	?_get_fat+1,dir_sdi@clst+1
  7341   004148  C03D  F067         	movff	?_get_fat+2,dir_sdi@clst+2
  7342   00414C  C03E  F068         	movff	?_get_fat+3,dir_sdi@clst+3
  7343   004150                     
  7344                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  7345   004150  2865               	incf	dir_sdi@clst^0,w,c
  7346   004152  E10A               	bnz	u6091
  7347   004154  2866               	incf	(dir_sdi@clst+1)^0,w,c
  7348   004156  E108               	bnz	u6091
  7349   004158  2867               	incf	(dir_sdi@clst+2)^0,w,c
  7350   00415A  E106               	bnz	u6091
  7351   00415C  2868               	incf	(dir_sdi@clst+3)^0,w,c
  7352   00415E  A4D8               	btfss	status,2,c
  7353   004160  EFB4  F020         	goto	u6091
  7354   004164  EFB6  F020         	goto	u6090
  7355   004168                     u6091:
  7356   004168  EFB9  F020         	goto	l4801
  7357   00416C                     u6090:
  7358   00416C  0E01               	movlw	1
  7359   00416E  EF6F  F021         	goto	l423
  7360   004172                     l4801:
  7361                           
  7362                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  7363   004172  5068               	movf	(dir_sdi@clst+3)^0,w,c
  7364   004174  1067               	iorwf	(dir_sdi@clst+2)^0,w,c
  7365   004176  1066               	iorwf	(dir_sdi@clst+1)^0,w,c
  7366   004178  E109               	bnz	u6100
  7367   00417A  0E02               	movlw	2
  7368   00417C  5C65               	subwf	dir_sdi@clst^0,w,c
  7369   00417E  A0D8               	btfss	status,0,c
  7370   004180  EFC4  F020         	goto	u6101
  7371   004184  EFC6  F020         	goto	u6100
  7372   004188                     u6101:
  7373   004188  EF15  F020         	goto	l4771
  7374   00418C                     u6100:
  7375   00418C  5055               	movf	dir_sdi@dp^0,w,c
  7376   00418E  6ED9               	movwf	fsr2l,c
  7377   004190  6ADA               	clrf	fsr2h,c
  7378   004192  EE10 F012          	lfsr	1,18
  7379   004196  50DE               	movf	postinc2,w,c
  7380   004198  26E1               	addwf	fsr1l,f,c
  7381   00419A  50DD               	movf	postdec2,w,c
  7382   00419C  22E2               	addwfc	fsr1h,f,c
  7383   00419E  50E6               	movf	postinc1,w,c
  7384   0041A0  5C65               	subwf	dir_sdi@clst^0,w,c
  7385   0041A2  50E6               	movf	postinc1,w,c
  7386   0041A4  5866               	subwfb	(dir_sdi@clst+1)^0,w,c
  7387   0041A6  50E6               	movf	postinc1,w,c
  7388   0041A8  5867               	subwfb	(dir_sdi@clst+2)^0,w,c
  7389   0041AA  50E6               	movf	postinc1,w,c
  7390   0041AC  5868               	subwfb	(dir_sdi@clst+3)^0,w,c
  7391   0041AE  A0D8               	btfss	status,0,c
  7392   0041B0  EFDC  F020         	goto	u6111
  7393   0041B4  EFDE  F020         	goto	u6110
  7394   0041B8                     u6111:
  7395   0041B8  EFE0  F020         	goto	l4809
  7396   0041BC                     u6110:
  7397   0041BC  EF15  F020         	goto	l4771
  7398   0041C0                     l4809:
  7399                           
  7400                           ;ff.c: 1108:    idx -= ic;
  7401   0041C0  505F               	movf	dir_sdi@ic^0,w,c
  7402   0041C2  5E56               	subwf	dir_sdi@idx^0,f,c
  7403   0041C4  5060               	movf	(dir_sdi@ic+1)^0,w,c
  7404   0041C6  5A57               	subwfb	(dir_sdi@idx+1)^0,f,c
  7405   0041C8                     l428:
  7406                           
  7407                           ;ff.c: 1103:   while (idx >= ic) {
  7408   0041C8  505F               	movf	dir_sdi@ic^0,w,c
  7409   0041CA  5C56               	subwf	dir_sdi@idx^0,w,c
  7410   0041CC  5060               	movf	(dir_sdi@ic+1)^0,w,c
  7411   0041CE  5857               	subwfb	(dir_sdi@idx+1)^0,w,c
  7412   0041D0  B0D8               	btfsc	status,0,c
  7413   0041D2  EFED  F020         	goto	u6121
  7414   0041D6  EFEF  F020         	goto	u6120
  7415   0041DA                     u6121:
  7416   0041DA  EF8F  F020         	goto	l4793
  7417   0041DE                     u6120:
  7418   0041DE                     
  7419                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  7420   0041DE  5055               	movf	dir_sdi@dp^0,w,c
  7421   0041E0  6ED9               	movwf	fsr2l,c
  7422   0041E2  6ADA               	clrf	fsr2h,c
  7423   0041E4  CFDE F00D          	movff	postinc2,clust2sect@fs
  7424   0041E8  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  7425   0041EC  C065  F00F         	movff	dir_sdi@clst,clust2sect@clst
  7426   0041F0  C066  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  7427   0041F4  C067  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  7428   0041F8  C068  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  7429   0041FC  EC31  F02D         	call	_clust2sect	;wreg free
  7430   004200  C00D  F061         	movff	?_clust2sect,dir_sdi@sect
  7431   004204  C00E  F062         	movff	?_clust2sect+1,dir_sdi@sect+1
  7432   004208  C00F  F063         	movff	?_clust2sect+2,dir_sdi@sect+2
  7433   00420C  C010  F064         	movff	?_clust2sect+3,dir_sdi@sect+3
  7434   004210                     l4813:
  7435                           
  7436                           ;ff.c: 1112:  dp->clust = clst;
  7437   004210  5055               	movf	dir_sdi@dp^0,w,c
  7438   004212  6ED9               	movwf	fsr2l,c
  7439   004214  6ADA               	clrf	fsr2h,c
  7440   004216  0E0A               	movlw	10
  7441   004218  26D9               	addwf	fsr2l,f,c
  7442   00421A  C065  FFDE         	movff	dir_sdi@clst,postinc2
  7443   00421E  C066  FFDE         	movff	dir_sdi@clst+1,postinc2
  7444   004222  C067  FFDE         	movff	dir_sdi@clst+2,postinc2
  7445   004226  C068  FFDE         	movff	dir_sdi@clst+3,postinc2
  7446   00422A                     
  7447                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  7448   00422A  5061               	movf	dir_sdi@sect^0,w,c
  7449   00422C  1062               	iorwf	(dir_sdi@sect+1)^0,w,c
  7450   00422E  1063               	iorwf	(dir_sdi@sect+2)^0,w,c
  7451   004230  1064               	iorwf	(dir_sdi@sect+3)^0,w,c
  7452   004232  A4D8               	btfss	status,2,c
  7453   004234  EF1E  F021         	goto	u6131
  7454   004238  EF20  F021         	goto	u6130
  7455   00423C                     u6131:
  7456   00423C  EF22  F021         	goto	l4821
  7457   004240                     u6130:
  7458   004240  EF15  F020         	goto	l4771
  7459   004244                     l4821:
  7460                           
  7461                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  7462   004244  C056  F058         	movff	dir_sdi@idx,??_dir_sdi
  7463   004248  C057  F059         	movff	dir_sdi@idx+1,??_dir_sdi+1
  7464   00424C  0E04               	movlw	4
  7465   00424E  6E5A               	movwf	(??_dir_sdi+2)^0,c
  7466   004250                     u6145:
  7467   004250  90D8               	bcf	status,0,c
  7468   004252  3259               	rrcf	(??_dir_sdi+1)^0,f,c
  7469   004254  3258               	rrcf	??_dir_sdi^0,f,c
  7470   004256  2E5A               	decfsz	(??_dir_sdi+2)^0,f,c
  7471   004258  EF28  F021         	goto	u6145
  7472   00425C  5058               	movf	??_dir_sdi^0,w,c
  7473   00425E  2461               	addwf	dir_sdi@sect^0,w,c
  7474   004260  6E5B               	movwf	(??_dir_sdi+3)^0,c
  7475   004262  5059               	movf	(??_dir_sdi+1)^0,w,c
  7476   004264  2062               	addwfc	(dir_sdi@sect+1)^0,w,c
  7477   004266  6E5C               	movwf	(??_dir_sdi+4)^0,c
  7478   004268  0E00               	movlw	0
  7479   00426A  2063               	addwfc	(dir_sdi@sect+2)^0,w,c
  7480   00426C  6E5D               	movwf	(??_dir_sdi+5)^0,c
  7481   00426E  0E00               	movlw	0
  7482   004270  2064               	addwfc	(dir_sdi@sect+3)^0,w,c
  7483   004272  6E5E               	movwf	(??_dir_sdi+6)^0,c
  7484   004274  5055               	movf	dir_sdi@dp^0,w,c
  7485   004276  6ED9               	movwf	fsr2l,c
  7486   004278  6ADA               	clrf	fsr2h,c
  7487   00427A  0E0E               	movlw	14
  7488   00427C  26D9               	addwf	fsr2l,f,c
  7489   00427E  C05B  FFDE         	movff	??_dir_sdi+3,postinc2
  7490   004282  C05C  FFDE         	movff	??_dir_sdi+4,postinc2
  7491   004286  C05D  FFDE         	movff	??_dir_sdi+5,postinc2
  7492   00428A  C05E  FFDE         	movff	??_dir_sdi+6,postinc2
  7493                           
  7494                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  7495   00428E  0E0F               	movlw	15
  7496   004290  1456               	andwf	dir_sdi@idx^0,w,c
  7497   004292  6E58               	movwf	??_dir_sdi^0,c
  7498   004294  0E00               	movlw	0
  7499   004296  1457               	andwf	(dir_sdi@idx+1)^0,w,c
  7500   004298  6E59               	movwf	(??_dir_sdi+1)^0,c
  7501   00429A  0E05               	movlw	5
  7502   00429C                     u6155:
  7503   00429C  90D8               	bcf	status,0,c
  7504   00429E  3658               	rlcf	??_dir_sdi^0,f,c
  7505   0042A0  3659               	rlcf	(??_dir_sdi+1)^0,f,c
  7506   0042A2  2EE8               	decfsz	wreg,f,c
  7507   0042A4  EF4E  F021         	goto	u6155
  7508   0042A8  5055               	movf	dir_sdi@dp^0,w,c
  7509   0042AA  6ED9               	movwf	fsr2l,c
  7510   0042AC  6ADA               	clrf	fsr2h,c
  7511   0042AE  CFDE F05A          	movff	postinc2,??_dir_sdi+2
  7512   0042B2  CFDD F05B          	movff	postdec2,??_dir_sdi+3
  7513   0042B6  5058               	movf	??_dir_sdi^0,w,c
  7514   0042B8  245A               	addwf	(??_dir_sdi+2)^0,w,c
  7515   0042BA  6E5C               	movwf	(??_dir_sdi+4)^0,c
  7516   0042BC  5059               	movf	(??_dir_sdi+1)^0,w,c
  7517   0042BE  205B               	addwfc	(??_dir_sdi+3)^0,w,c
  7518   0042C0  6E5D               	movwf	(??_dir_sdi+5)^0,c
  7519   0042C2  0E2E               	movlw	46
  7520   0042C4  265C               	addwf	(??_dir_sdi+4)^0,f,c
  7521   0042C6  0E00               	movlw	0
  7522   0042C8  225D               	addwfc	(??_dir_sdi+5)^0,f,c
  7523   0042CA  5055               	movf	dir_sdi@dp^0,w,c
  7524   0042CC  6ED9               	movwf	fsr2l,c
  7525   0042CE  6ADA               	clrf	fsr2h,c
  7526   0042D0  0E12               	movlw	18
  7527   0042D2  26D9               	addwf	fsr2l,f,c
  7528   0042D4  C05C  FFDE         	movff	??_dir_sdi+4,postinc2
  7529   0042D8  C05D  FFDD         	movff	??_dir_sdi+5,postdec2
  7530   0042DC                     
  7531                           ;ff.c: 1117:  return FR_OK;
  7532   0042DC  0E00               	movlw	0
  7533   0042DE                     l423:
  7534   0042DE  0012               	return		;funcret
  7535   0042E0                     __end_of_dir_sdi:
  7536                           	callstack 0
  7537                           
  7538 ;; *************** function _dir_next *****************
  7539 ;; Defined at:
  7540 ;;		line 1128 in file "ff.c"
  7541 ;; Parameters:    Size  Location     Type
  7542 ;;  dp              1  108[COMRAM] PTR struct .
  7543 ;;		 -> f_open@dj(21), 
  7544 ;;  stretch         2  109[COMRAM] int 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  clst            4  123[COMRAM] unsigned long 
  7547 ;;  i               2  121[COMRAM] unsigned short 
  7548 ;;  c               2  119[COMRAM] unsigned short 
  7549 ;; Return value:  Size  Location     Type
  7550 ;;                  1    wreg      enum E95
  7551 ;; Registers used:
  7552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7558 ;;      Params:         3       0       0       0       0       0       0
  7559 ;;      Locals:         8       0       0       0       0       0       0
  7560 ;;      Temps:          8       0       0       0       0       0       0
  7561 ;;      Totals:        19       0       0       0       0       0       0
  7562 ;;Total ram usage:       19 bytes
  7563 ;; Hardware stack levels used: 1
  7564 ;; Hardware stack levels required when called: 10
  7565 ;; This function calls:
  7566 ;;		_clust2sect
  7567 ;;		_create_chain
  7568 ;;		_get_fat
  7569 ;;		_mem_set
  7570 ;;		_sync_window
  7571 ;; This function is called by:
  7572 ;;		_dir_alloc
  7573 ;;		_dir_find
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           	psect	text23
  7578   002BC0                     __ptext23:
  7579                           	callstack 0
  7580   002BC0                     _dir_next:
  7581                           	callstack 17
  7582   002BC0                     
  7583                           ;ff.c: 1129:  DIR* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;f
      +                          f.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  7584   002BC0  506D               	movf	dir_next@dp^0,w,c
  7585   002BC2  6ED9               	movwf	fsr2l,c
  7586   002BC4  6ADA               	clrf	fsr2h,c
  7587   002BC6  0E04               	movlw	4
  7588   002BC8  26D9               	addwf	fsr2l,f,c
  7589   002BCA  CFDE F070          	movff	postinc2,??_dir_next
  7590   002BCE  CFDD F071          	movff	postdec2,??_dir_next+1
  7591   002BD2  0E01               	movlw	1
  7592   002BD4  2470               	addwf	??_dir_next^0,w,c
  7593   002BD6  6E7A               	movwf	dir_next@i^0,c
  7594   002BD8  0E00               	movlw	0
  7595   002BDA  2071               	addwfc	(??_dir_next+1)^0,w,c
  7596   002BDC  6E7B               	movwf	(dir_next@i+1)^0,c
  7597   002BDE                     
  7598                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  7599   002BDE  507A               	movf	dir_next@i^0,w,c
  7600   002BE0  107B               	iorwf	(dir_next@i+1)^0,w,c
  7601   002BE2  B4D8               	btfsc	status,2,c
  7602   002BE4  EFF6  F015         	goto	u6161
  7603   002BE8  EFF8  F015         	goto	u6160
  7604   002BEC                     u6161:
  7605   002BEC  EF08  F016         	goto	l4833
  7606   002BF0                     u6160:
  7607   002BF0  506D               	movf	dir_next@dp^0,w,c
  7608   002BF2  6ED9               	movwf	fsr2l,c
  7609   002BF4  6ADA               	clrf	fsr2h,c
  7610   002BF6  0E0E               	movlw	14
  7611   002BF8  26D9               	addwf	fsr2l,f,c
  7612   002BFA  50DE               	movf	postinc2,w,c
  7613   002BFC  10DE               	iorwf	postinc2,w,c
  7614   002BFE  10DE               	iorwf	postinc2,w,c
  7615   002C00  10DE               	iorwf	postinc2,w,c
  7616   002C02  A4D8               	btfss	status,2,c
  7617   002C04  EF06  F016         	goto	u6171
  7618   002C08  EF08  F016         	goto	u6170
  7619   002C0C                     u6171:
  7620   002C0C  EF0B  F016         	goto	l4837
  7621   002C10                     u6170:
  7622   002C10                     l4833:
  7623                           
  7624                           ;ff.c: 1142:   return FR_NO_FILE;
  7625   002C10  0E04               	movlw	4
  7626   002C12  EF24  F018         	goto	l441
  7627   002C16                     l4837:
  7628                           
  7629                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  7630   002C16  0E0F               	movlw	15
  7631   002C18  147A               	andwf	dir_next@i^0,w,c
  7632   002C1A  6E70               	movwf	??_dir_next^0,c
  7633   002C1C  0E00               	movlw	0
  7634   002C1E  147B               	andwf	(dir_next@i+1)^0,w,c
  7635   002C20  6E71               	movwf	(??_dir_next+1)^0,c
  7636   002C22  5070               	movf	??_dir_next^0,w,c
  7637   002C24  1071               	iorwf	(??_dir_next+1)^0,w,c
  7638   002C26  A4D8               	btfss	status,2,c
  7639   002C28  EF18  F016         	goto	u6181
  7640   002C2C  EF1A  F016         	goto	u6180
  7641   002C30                     u6181:
  7642   002C30  EFF3  F017         	goto	l4923
  7643   002C34                     u6180:
  7644   002C34                     
  7645                           ;ff.c: 1145:   dp->sect++;
  7646   002C34  506D               	movf	dir_next@dp^0,w,c
  7647   002C36  6ED9               	movwf	fsr2l,c
  7648   002C38  6ADA               	clrf	fsr2h,c
  7649   002C3A  0E0E               	movlw	14
  7650   002C3C  26D9               	addwf	fsr2l,f,c
  7651   002C3E  2ADE               	incf	postinc2,f,c
  7652   002C40  0E00               	movlw	0
  7653   002C42  22DE               	addwfc	postinc2,f,c
  7654   002C44  22DE               	addwfc	postinc2,f,c
  7655   002C46  22DE               	addwfc	postinc2,f,c
  7656                           
  7657                           ;ff.c: 1147:   if (!dp->clust) {
  7658   002C48  506D               	movf	dir_next@dp^0,w,c
  7659   002C4A  6ED9               	movwf	fsr2l,c
  7660   002C4C  6ADA               	clrf	fsr2h,c
  7661   002C4E  0E0A               	movlw	10
  7662   002C50  26D9               	addwf	fsr2l,f,c
  7663   002C52  50DE               	movf	postinc2,w,c
  7664   002C54  10DE               	iorwf	postinc2,w,c
  7665   002C56  10DE               	iorwf	postinc2,w,c
  7666   002C58  10DE               	iorwf	postinc2,w,c
  7667   002C5A  A4D8               	btfss	status,2,c
  7668   002C5C  EF32  F016         	goto	u6191
  7669   002C60  EF34  F016         	goto	u6190
  7670   002C64                     u6191:
  7671   002C64  EF4A  F016         	goto	l4847
  7672   002C68                     u6190:
  7673   002C68                     
  7674                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  7675   002C68  506D               	movf	dir_next@dp^0,w,c
  7676   002C6A  6ED9               	movwf	fsr2l,c
  7677   002C6C  6ADA               	clrf	fsr2h,c
  7678   002C6E  EE10 F008          	lfsr	1,8
  7679   002C72  50DE               	movf	postinc2,w,c
  7680   002C74  26E1               	addwf	fsr1l,f,c
  7681   002C76  50DD               	movf	postdec2,w,c
  7682   002C78  22E2               	addwfc	fsr1h,f,c
  7683   002C7A  50E6               	movf	postinc1,w,c
  7684   002C7C  5C7A               	subwf	dir_next@i^0,w,c
  7685   002C7E  50E6               	movf	postinc1,w,c
  7686   002C80  587B               	subwfb	(dir_next@i+1)^0,w,c
  7687   002C82  A0D8               	btfss	status,0,c
  7688   002C84  EF46  F016         	goto	u6201
  7689   002C88  EF48  F016         	goto	u6200
  7690   002C8C                     u6201:
  7691   002C8C  EFF3  F017         	goto	l4923
  7692   002C90                     u6200:
  7693   002C90  EF08  F016         	goto	l4833
  7694   002C94                     l4847:
  7695                           
  7696                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  7697   002C94  C07A  F070         	movff	dir_next@i,??_dir_next
  7698   002C98  C07B  F071         	movff	dir_next@i+1,??_dir_next+1
  7699   002C9C  0E04               	movlw	4
  7700   002C9E  6E72               	movwf	(??_dir_next+2)^0,c
  7701   002CA0                     u6215:
  7702   002CA0  90D8               	bcf	status,0,c
  7703   002CA2  3271               	rrcf	(??_dir_next+1)^0,f,c
  7704   002CA4  3270               	rrcf	??_dir_next^0,f,c
  7705   002CA6  2E72               	decfsz	(??_dir_next+2)^0,f,c
  7706   002CA8  EF50  F016         	goto	u6215
  7707   002CAC  506D               	movf	dir_next@dp^0,w,c
  7708   002CAE  6ED9               	movwf	fsr2l,c
  7709   002CB0  6ADA               	clrf	fsr2h,c
  7710   002CB2  EE10 F002          	lfsr	1,2
  7711   002CB6  50DE               	movf	postinc2,w,c
  7712   002CB8  26E1               	addwf	fsr1l,f,c
  7713   002CBA  50DD               	movf	postdec2,w,c
  7714   002CBC  22E2               	addwfc	fsr1h,f,c
  7715   002CBE  50E7               	movf	indf1,w,c
  7716   002CC0  6E73               	movwf	(??_dir_next+3)^0,c
  7717   002CC2  0EFF               	movlw	255
  7718   002CC4  2473               	addwf	(??_dir_next+3)^0,w,c
  7719   002CC6  6E74               	movwf	(??_dir_next+4)^0,c
  7720   002CC8  6A75               	clrf	(??_dir_next+5)^0,c
  7721   002CCA  0EFF               	movlw	255
  7722   002CCC  2275               	addwfc	(??_dir_next+5)^0,f,c
  7723   002CCE  5070               	movf	??_dir_next^0,w,c
  7724   002CD0  1474               	andwf	(??_dir_next+4)^0,w,c
  7725   002CD2  6E76               	movwf	(??_dir_next+6)^0,c
  7726   002CD4  5071               	movf	(??_dir_next+1)^0,w,c
  7727   002CD6  1475               	andwf	(??_dir_next+5)^0,w,c
  7728   002CD8  6E77               	movwf	(??_dir_next+7)^0,c
  7729   002CDA  5076               	movf	(??_dir_next+6)^0,w,c
  7730   002CDC  1077               	iorwf	(??_dir_next+7)^0,w,c
  7731   002CDE  A4D8               	btfss	status,2,c
  7732   002CE0  EF74  F016         	goto	u6221
  7733   002CE4  EF76  F016         	goto	u6220
  7734   002CE8                     u6221:
  7735   002CE8  EFF3  F017         	goto	l4923
  7736   002CEC                     u6220:
  7737   002CEC                     
  7738                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  7739   002CEC  506D               	movf	dir_next@dp^0,w,c
  7740   002CEE  6ED9               	movwf	fsr2l,c
  7741   002CF0  6ADA               	clrf	fsr2h,c
  7742   002CF2  CFDE F03B          	movff	postinc2,get_fat@fs
  7743   002CF6  CFDD F03C          	movff	postdec2,get_fat@fs+1
  7744   002CFA  506D               	movf	dir_next@dp^0,w,c
  7745   002CFC  6ED9               	movwf	fsr2l,c
  7746   002CFE  6ADA               	clrf	fsr2h,c
  7747   002D00  0E0A               	movlw	10
  7748   002D02  26D9               	addwf	fsr2l,f,c
  7749   002D04  CFDE F03D          	movff	postinc2,get_fat@clst
  7750   002D08  CFDE F03E          	movff	postinc2,get_fat@clst+1
  7751   002D0C  CFDE F03F          	movff	postinc2,get_fat@clst+2
  7752   002D10  CFDE F040          	movff	postinc2,get_fat@clst+3
  7753   002D14  EC4E  F01A         	call	_get_fat	;wreg free
  7754   002D18  C03B  F07C         	movff	?_get_fat,dir_next@clst
  7755   002D1C  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  7756   002D20  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  7757   002D24  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  7758   002D28                     
  7759                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  7760   002D28  507F               	movf	(dir_next@clst+3)^0,w,c
  7761   002D2A  107E               	iorwf	(dir_next@clst+2)^0,w,c
  7762   002D2C  107D               	iorwf	(dir_next@clst+1)^0,w,c
  7763   002D2E  E107               	bnz	u6231
  7764   002D30  0E02               	movlw	2
  7765   002D32  5C7C               	subwf	dir_next@clst^0,w,c
  7766   002D34  B0D8               	btfsc	status,0,c
  7767   002D36  EF9F  F016         	goto	u6231
  7768   002D3A  EFA1  F016         	goto	u6230
  7769   002D3E                     u6231:
  7770   002D3E  EFA4  F016         	goto	l4857
  7771   002D42                     u6230:
  7772   002D42                     l4853:
  7773   002D42  0E02               	movlw	2
  7774   002D44  EF24  F018         	goto	l441
  7775   002D48                     l4857:
  7776                           
  7777                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  7778   002D48  287C               	incf	dir_next@clst^0,w,c
  7779   002D4A  E10A               	bnz	u6241
  7780   002D4C  287D               	incf	(dir_next@clst+1)^0,w,c
  7781   002D4E  E108               	bnz	u6241
  7782   002D50  287E               	incf	(dir_next@clst+2)^0,w,c
  7783   002D52  E106               	bnz	u6241
  7784   002D54  287F               	incf	(dir_next@clst+3)^0,w,c
  7785   002D56  A4D8               	btfss	status,2,c
  7786   002D58  EFB0  F016         	goto	u6241
  7787   002D5C  EFB2  F016         	goto	u6240
  7788   002D60                     u6241:
  7789   002D60  EFB5  F016         	goto	l4863
  7790   002D64                     u6240:
  7791   002D64                     l4859:
  7792   002D64  0E01               	movlw	1
  7793   002D66  EF24  F018         	goto	l441
  7794   002D6A                     l4863:
  7795                           
  7796                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  7797   002D6A  506D               	movf	dir_next@dp^0,w,c
  7798   002D6C  6ED9               	movwf	fsr2l,c
  7799   002D6E  6ADA               	clrf	fsr2h,c
  7800   002D70  EE10 F012          	lfsr	1,18
  7801   002D74  50DE               	movf	postinc2,w,c
  7802   002D76  26E1               	addwf	fsr1l,f,c
  7803   002D78  50DD               	movf	postdec2,w,c
  7804   002D7A  22E2               	addwfc	fsr1h,f,c
  7805   002D7C  50E6               	movf	postinc1,w,c
  7806   002D7E  5C7C               	subwf	dir_next@clst^0,w,c
  7807   002D80  50E6               	movf	postinc1,w,c
  7808   002D82  587D               	subwfb	(dir_next@clst+1)^0,w,c
  7809   002D84  50E6               	movf	postinc1,w,c
  7810   002D86  587E               	subwfb	(dir_next@clst+2)^0,w,c
  7811   002D88  50E6               	movf	postinc1,w,c
  7812   002D8A  587F               	subwfb	(dir_next@clst+3)^0,w,c
  7813   002D8C  A0D8               	btfss	status,0,c
  7814   002D8E  EFCB  F016         	goto	u6251
  7815   002D92  EFCD  F016         	goto	u6250
  7816   002D96                     u6251:
  7817   002D96  EFC8  F017         	goto	l4919
  7818   002D9A                     u6250:
  7819   002D9A                     
  7820                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  7821   002D9A  506E               	movf	dir_next@stretch^0,w,c
  7822   002D9C  106F               	iorwf	(dir_next@stretch+1)^0,w,c
  7823   002D9E  A4D8               	btfss	status,2,c
  7824   002DA0  EFD4  F016         	goto	u6261
  7825   002DA4  EFD6  F016         	goto	u6260
  7826   002DA8                     u6261:
  7827   002DA8  EFD8  F016         	goto	l4871
  7828   002DAC                     u6260:
  7829   002DAC  EF08  F016         	goto	l4833
  7830   002DB0                     l4871:
  7831                           
  7832                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  7833   002DB0  506D               	movf	dir_next@dp^0,w,c
  7834   002DB2  6ED9               	movwf	fsr2l,c
  7835   002DB4  6ADA               	clrf	fsr2h,c
  7836   002DB6  CFDE F056          	movff	postinc2,create_chain@fs
  7837   002DBA  CFDD F057          	movff	postdec2,create_chain@fs+1
  7838   002DBE  506D               	movf	dir_next@dp^0,w,c
  7839   002DC0  6ED9               	movwf	fsr2l,c
  7840   002DC2  6ADA               	clrf	fsr2h,c
  7841   002DC4  0E0A               	movlw	10
  7842   002DC6  26D9               	addwf	fsr2l,f,c
  7843   002DC8  CFDE F058          	movff	postinc2,create_chain@clst
  7844   002DCC  CFDE F059          	movff	postinc2,create_chain@clst+1
  7845   002DD0  CFDE F05A          	movff	postinc2,create_chain@clst+2
  7846   002DD4  CFDE F05B          	movff	postinc2,create_chain@clst+3
  7847   002DD8  EC3D  F01C         	call	_create_chain	;wreg free
  7848   002DDC  C056  F07C         	movff	?_create_chain,dir_next@clst
  7849   002DE0  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  7850   002DE4  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  7851   002DE8  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  7852   002DEC                     
  7853                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  7854   002DEC  507C               	movf	dir_next@clst^0,w,c
  7855   002DEE  107D               	iorwf	(dir_next@clst+1)^0,w,c
  7856   002DF0  107E               	iorwf	(dir_next@clst+2)^0,w,c
  7857   002DF2  107F               	iorwf	(dir_next@clst+3)^0,w,c
  7858   002DF4  A4D8               	btfss	status,2,c
  7859   002DF6  EFFF  F016         	goto	u6271
  7860   002DFA  EF01  F017         	goto	u6270
  7861   002DFE                     u6271:
  7862   002DFE  EF04  F017         	goto	l4879
  7863   002E02                     u6270:
  7864   002E02  0E07               	movlw	7
  7865   002E04  EF24  F018         	goto	l441
  7866   002E08                     l4879:
  7867                           
  7868                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  7869   002E08  047C               	decf	dir_next@clst^0,w,c
  7870   002E0A  107D               	iorwf	(dir_next@clst+1)^0,w,c
  7871   002E0C  107E               	iorwf	(dir_next@clst+2)^0,w,c
  7872   002E0E  107F               	iorwf	(dir_next@clst+3)^0,w,c
  7873   002E10  A4D8               	btfss	status,2,c
  7874   002E12  EF0D  F017         	goto	u6281
  7875   002E16  EF0F  F017         	goto	u6280
  7876   002E1A                     u6281:
  7877   002E1A  EF11  F017         	goto	l4885
  7878   002E1E                     u6280:
  7879   002E1E  EFA1  F016         	goto	l4853
  7880   002E22                     l4885:
  7881                           
  7882                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  7883   002E22  287C               	incf	dir_next@clst^0,w,c
  7884   002E24  E10A               	bnz	u6291
  7885   002E26  287D               	incf	(dir_next@clst+1)^0,w,c
  7886   002E28  E108               	bnz	u6291
  7887   002E2A  287E               	incf	(dir_next@clst+2)^0,w,c
  7888   002E2C  E106               	bnz	u6291
  7889   002E2E  287F               	incf	(dir_next@clst+3)^0,w,c
  7890   002E30  A4D8               	btfss	status,2,c
  7891   002E32  EF1D  F017         	goto	u6291
  7892   002E36  EF1F  F017         	goto	u6290
  7893   002E3A                     u6291:
  7894   002E3A  EF21  F017         	goto	l4891
  7895   002E3E                     u6290:
  7896   002E3E  EFB2  F016         	goto	l4859
  7897   002E42                     l4891:
  7898                           
  7899                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  7900   002E42  506D               	movf	dir_next@dp^0,w,c
  7901   002E44  6ED9               	movwf	fsr2l,c
  7902   002E46  6ADA               	clrf	fsr2h,c
  7903   002E48  CFDE F01B          	movff	postinc2,sync_window@fs
  7904   002E4C  CFDD F01C          	movff	postdec2,sync_window@fs+1
  7905   002E50  EC16  F027         	call	_sync_window	;wreg free
  7906   002E54  0900               	iorlw	0
  7907   002E56  B4D8               	btfsc	status,2,c
  7908   002E58  EF30  F017         	goto	u6301
  7909   002E5C  EF32  F017         	goto	u6300
  7910   002E60                     u6301:
  7911   002E60  EF34  F017         	goto	l4897
  7912   002E64                     u6300:
  7913   002E64  EFB2  F016         	goto	l4859
  7914   002E68                     l4897:
  7915                           
  7916                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  7917   002E68  506D               	movf	dir_next@dp^0,w,c
  7918   002E6A  6ED9               	movwf	fsr2l,c
  7919   002E6C  6ADA               	clrf	fsr2h,c
  7920   002E6E  CFDE F070          	movff	postinc2,??_dir_next
  7921   002E72  CFDD F071          	movff	postdec2,??_dir_next+1
  7922   002E76  0E2E               	movlw	46
  7923   002E78  2470               	addwf	??_dir_next^0,w,c
  7924   002E7A  6E01               	movwf	mem_set@dst^0,c
  7925   002E7C  0E00               	movlw	0
  7926   002E7E  2071               	addwfc	(??_dir_next+1)^0,w,c
  7927   002E80  6E02               	movwf	(mem_set@dst+1)^0,c
  7928   002E82  0E00               	movlw	0
  7929   002E84  6E04               	movwf	(mem_set@val+1)^0,c
  7930   002E86  0E00               	movlw	0
  7931   002E88  6E03               	movwf	mem_set@val^0,c
  7932   002E8A  0E02               	movlw	2
  7933   002E8C  6E06               	movwf	(mem_set@cnt+1)^0,c
  7934   002E8E  0E00               	movlw	0
  7935   002E90  6E05               	movwf	mem_set@cnt^0,c
  7936   002E92  EC61  F032         	call	_mem_set	;wreg free
  7937   002E96                     
  7938                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  7939   002E96  506D               	movf	dir_next@dp^0,w,c
  7940   002E98  6ED9               	movwf	fsr2l,c
  7941   002E9A  6ADA               	clrf	fsr2h,c
  7942   002E9C  CFDE F00D          	movff	postinc2,clust2sect@fs
  7943   002EA0  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  7944   002EA4  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  7945   002EA8  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  7946   002EAC  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  7947   002EB0  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  7948   002EB4  EC31  F02D         	call	_clust2sect	;wreg free
  7949   002EB8  506D               	movf	dir_next@dp^0,w,c
  7950   002EBA  6ED9               	movwf	fsr2l,c
  7951   002EBC  6ADA               	clrf	fsr2h,c
  7952   002EBE  EE10 F02A          	lfsr	1,42
  7953   002EC2  50DE               	movf	postinc2,w,c
  7954   002EC4  26E1               	addwf	fsr1l,f,c
  7955   002EC6  50DD               	movf	postdec2,w,c
  7956   002EC8  22E2               	addwfc	fsr1h,f,c
  7957   002ECA  C00D  FFE6         	movff	?_clust2sect,postinc1
  7958   002ECE  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  7959   002ED2  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  7960   002ED6  C010  FFE6         	movff	?_clust2sect+3,postinc1
  7961   002EDA                     
  7962                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  7963   002EDA  0E00               	movlw	0
  7964   002EDC  6E79               	movwf	(dir_next@c+1)^0,c
  7965   002EDE  0E00               	movlw	0
  7966   002EE0  6E78               	movwf	dir_next@c^0,c
  7967   002EE2  EFA1  F017         	goto	l4915
  7968   002EE6                     l4903:
  7969                           
  7970                           ;ff.c: 1168:       dp->fs->wflag = 1;
  7971   002EE6  506D               	movf	dir_next@dp^0,w,c
  7972   002EE8  6ED9               	movwf	fsr2l,c
  7973   002EEA  6ADA               	clrf	fsr2h,c
  7974   002EEC  EE10 F004          	lfsr	1,4
  7975   002EF0  50DE               	movf	postinc2,w,c
  7976   002EF2  26E1               	addwf	fsr1l,f,c
  7977   002EF4  50DD               	movf	postdec2,w,c
  7978   002EF6  22E2               	addwfc	fsr1h,f,c
  7979   002EF8  0E01               	movlw	1
  7980   002EFA  6EE7               	movwf	indf1,c
  7981   002EFC                     
  7982                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  7983   002EFC  506D               	movf	dir_next@dp^0,w,c
  7984   002EFE  6ED9               	movwf	fsr2l,c
  7985   002F00  6ADA               	clrf	fsr2h,c
  7986   002F02  CFDE F01B          	movff	postinc2,sync_window@fs
  7987   002F06  CFDD F01C          	movff	postdec2,sync_window@fs+1
  7988   002F0A  EC16  F027         	call	_sync_window	;wreg free
  7989   002F0E  0900               	iorlw	0
  7990   002F10  B4D8               	btfsc	status,2,c
  7991   002F12  EF8D  F017         	goto	u6311
  7992   002F16  EF8F  F017         	goto	u6310
  7993   002F1A                     u6311:
  7994   002F1A  EF91  F017         	goto	l4911
  7995   002F1E                     u6310:
  7996   002F1E  EFB2  F016         	goto	l4859
  7997   002F22                     l4911:
  7998                           
  7999                           ;ff.c: 1170:       dp->fs->winsect++;
  8000   002F22  506D               	movf	dir_next@dp^0,w,c
  8001   002F24  6ED9               	movwf	fsr2l,c
  8002   002F26  6ADA               	clrf	fsr2h,c
  8003   002F28  EE10 F02A          	lfsr	1,42
  8004   002F2C  50DE               	movf	postinc2,w,c
  8005   002F2E  26E1               	addwf	fsr1l,f,c
  8006   002F30  50DD               	movf	postdec2,w,c
  8007   002F32  22E2               	addwfc	fsr1h,f,c
  8008   002F34  2AE6               	incf	postinc1,f,c
  8009   002F36  0E00               	movlw	0
  8010   002F38  22E6               	addwfc	postinc1,f,c
  8011   002F3A  22E6               	addwfc	postinc1,f,c
  8012   002F3C  22E6               	addwfc	postinc1,f,c
  8013   002F3E                     
  8014                           ;ff.c: 1171:      }
  8015   002F3E  4A78               	infsnz	dir_next@c^0,f,c
  8016   002F40  2A79               	incf	(dir_next@c+1)^0,f,c
  8017   002F42                     l4915:
  8018   002F42  506D               	movf	dir_next@dp^0,w,c
  8019   002F44  6ED9               	movwf	fsr2l,c
  8020   002F46  6ADA               	clrf	fsr2h,c
  8021   002F48  EE10 F002          	lfsr	1,2
  8022   002F4C  50DE               	movf	postinc2,w,c
  8023   002F4E  26E1               	addwf	fsr1l,f,c
  8024   002F50  50DD               	movf	postdec2,w,c
  8025   002F52  22E2               	addwfc	fsr1h,f,c
  8026   002F54  50E7               	movf	indf1,w,c
  8027   002F56  6E70               	movwf	??_dir_next^0,c
  8028   002F58  6A71               	clrf	(??_dir_next+1)^0,c
  8029   002F5A  5070               	movf	??_dir_next^0,w,c
  8030   002F5C  5C78               	subwf	dir_next@c^0,w,c
  8031   002F5E  5071               	movf	(??_dir_next+1)^0,w,c
  8032   002F60  5879               	subwfb	(dir_next@c+1)^0,w,c
  8033   002F62  A0D8               	btfss	status,0,c
  8034   002F64  EFB6  F017         	goto	u6321
  8035   002F68  EFB8  F017         	goto	u6320
  8036   002F6C                     u6321:
  8037   002F6C  EF73  F017         	goto	l4903
  8038   002F70                     u6320:
  8039   002F70                     
  8040                           ;ff.c: 1172:      dp->fs->winsect -= c;
  8041   002F70  506D               	movf	dir_next@dp^0,w,c
  8042   002F72  6ED9               	movwf	fsr2l,c
  8043   002F74  6ADA               	clrf	fsr2h,c
  8044   002F76  EE10 F02A          	lfsr	1,42
  8045   002F7A  50DE               	movf	postinc2,w,c
  8046   002F7C  26E1               	addwf	fsr1l,f,c
  8047   002F7E  50DD               	movf	postdec2,w,c
  8048   002F80  22E2               	addwfc	fsr1h,f,c
  8049   002F82  5078               	movf	dir_next@c^0,w,c
  8050   002F84  5EE6               	subwf	postinc1,f,c
  8051   002F86  5079               	movf	(dir_next@c+1)^0,w,c
  8052   002F88  5AE6               	subwfb	postinc1,f,c
  8053   002F8A  0E00               	movlw	0
  8054   002F8C  5AE6               	subwfb	postinc1,f,c
  8055   002F8E  5AE6               	subwfb	postinc1,f,c
  8056   002F90                     l4919:
  8057                           
  8058                           ;ff.c: 1178:     dp->clust = clst;
  8059   002F90  506D               	movf	dir_next@dp^0,w,c
  8060   002F92  6ED9               	movwf	fsr2l,c
  8061   002F94  6ADA               	clrf	fsr2h,c
  8062   002F96  0E0A               	movlw	10
  8063   002F98  26D9               	addwf	fsr2l,f,c
  8064   002F9A  C07C  FFDE         	movff	dir_next@clst,postinc2
  8065   002F9E  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  8066   002FA2  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  8067   002FA6  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  8068   002FAA                     
  8069                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  8070   002FAA  506D               	movf	dir_next@dp^0,w,c
  8071   002FAC  6ED9               	movwf	fsr2l,c
  8072   002FAE  6ADA               	clrf	fsr2h,c
  8073   002FB0  CFDE F00D          	movff	postinc2,clust2sect@fs
  8074   002FB4  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  8075   002FB8  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  8076   002FBC  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  8077   002FC0  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  8078   002FC4  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  8079   002FC8  EC31  F02D         	call	_clust2sect	;wreg free
  8080   002FCC  506D               	movf	dir_next@dp^0,w,c
  8081   002FCE  6ED9               	movwf	fsr2l,c
  8082   002FD0  6ADA               	clrf	fsr2h,c
  8083   002FD2  0E0E               	movlw	14
  8084   002FD4  26D9               	addwf	fsr2l,f,c
  8085   002FD6  C00D  FFDE         	movff	?_clust2sect,postinc2
  8086   002FDA  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  8087   002FDE  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  8088   002FE2  C010  FFDE         	movff	?_clust2sect+3,postinc2
  8089   002FE6                     l4923:
  8090                           
  8091                           ;ff.c: 1184:  dp->index = (WORD)i;
  8092   002FE6  506D               	movf	dir_next@dp^0,w,c
  8093   002FE8  6ED9               	movwf	fsr2l,c
  8094   002FEA  6ADA               	clrf	fsr2h,c
  8095   002FEC  0E04               	movlw	4
  8096   002FEE  26D9               	addwf	fsr2l,f,c
  8097   002FF0  C07A  FFDE         	movff	dir_next@i,postinc2
  8098   002FF4  C07B  FFDD         	movff	dir_next@i+1,postdec2
  8099   002FF8                     
  8100                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  8101   002FF8  0E0F               	movlw	15
  8102   002FFA  147A               	andwf	dir_next@i^0,w,c
  8103   002FFC  6E70               	movwf	??_dir_next^0,c
  8104   002FFE  0E00               	movlw	0
  8105   003000  147B               	andwf	(dir_next@i+1)^0,w,c
  8106   003002  6E71               	movwf	(??_dir_next+1)^0,c
  8107   003004  0E05               	movlw	5
  8108   003006                     u6335:
  8109   003006  90D8               	bcf	status,0,c
  8110   003008  3670               	rlcf	??_dir_next^0,f,c
  8111   00300A  3671               	rlcf	(??_dir_next+1)^0,f,c
  8112   00300C  2EE8               	decfsz	wreg,f,c
  8113   00300E  EF03  F018         	goto	u6335
  8114   003012  506D               	movf	dir_next@dp^0,w,c
  8115   003014  6ED9               	movwf	fsr2l,c
  8116   003016  6ADA               	clrf	fsr2h,c
  8117   003018  CFDE F072          	movff	postinc2,??_dir_next+2
  8118   00301C  CFDD F073          	movff	postdec2,??_dir_next+3
  8119   003020  5070               	movf	??_dir_next^0,w,c
  8120   003022  2472               	addwf	(??_dir_next+2)^0,w,c
  8121   003024  6E74               	movwf	(??_dir_next+4)^0,c
  8122   003026  5071               	movf	(??_dir_next+1)^0,w,c
  8123   003028  2073               	addwfc	(??_dir_next+3)^0,w,c
  8124   00302A  6E75               	movwf	(??_dir_next+5)^0,c
  8125   00302C  0E2E               	movlw	46
  8126   00302E  2674               	addwf	(??_dir_next+4)^0,f,c
  8127   003030  0E00               	movlw	0
  8128   003032  2275               	addwfc	(??_dir_next+5)^0,f,c
  8129   003034  506D               	movf	dir_next@dp^0,w,c
  8130   003036  6ED9               	movwf	fsr2l,c
  8131   003038  6ADA               	clrf	fsr2h,c
  8132   00303A  0E12               	movlw	18
  8133   00303C  26D9               	addwf	fsr2l,f,c
  8134   00303E  C074  FFDE         	movff	??_dir_next+4,postinc2
  8135   003042  C075  FFDD         	movff	??_dir_next+5,postdec2
  8136   003046                     
  8137                           ;ff.c: 1187:  return FR_OK;
  8138   003046  0E00               	movlw	0
  8139   003048                     l441:
  8140   003048  0012               	return		;funcret
  8141   00304A                     __end_of_dir_next:
  8142                           	callstack 0
  8143                           
  8144 ;; *************** function _f_mount *****************
  8145 ;; Defined at:
  8146 ;;		line 2402 in file "ff.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;  fs              2   79[COMRAM] PTR struct .
  8149 ;;		 -> FatFs(558), NULL(0), 
  8150 ;;  path            1   81[COMRAM] PTR const unsigned char 
  8151 ;;		 -> STR_4(10), STR_3(1), 
  8152 ;;  opt             1   82[COMRAM] unsigned char 
  8153 ;; Auto vars:     Size  Location     Type
  8154 ;;  vol             2   87[COMRAM] int 
  8155 ;;  cfs             2   84[COMRAM] PTR struct .
  8156 ;;		 -> FatFs(558), NULL(0), 
  8157 ;;  rp              1   86[COMRAM] PTR const unsigned char 
  8158 ;;		 -> STR_4(10), STR_3(1), 
  8159 ;;  res             1   83[COMRAM] enum E95
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      enum E95
  8162 ;; Registers used:
  8163 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8169 ;;      Params:         4       0       0       0       0       0       0
  8170 ;;      Locals:         6       0       0       0       0       0       0
  8171 ;;      Temps:          0       0       0       0       0       0       0
  8172 ;;      Totals:        10       0       0       0       0       0       0
  8173 ;;Total ram usage:       10 bytes
  8174 ;; Hardware stack levels used: 1
  8175 ;; Hardware stack levels required when called: 10
  8176 ;; This function calls:
  8177 ;;		_find_volume
  8178 ;;		_get_ldnumber
  8179 ;; This function is called by:
  8180 ;;		_main
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           	psect	text24
  8185   00599C                     __ptext24:
  8186                           	callstack 0
  8187   00599C                     _f_mount:
  8188                           	callstack 20
  8189   00599C                     
  8190                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  8191   00599C  C052  F057         	movff	f_mount@path,f_mount@rp
  8192   0059A0                     
  8193                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  8194   0059A0  0E57               	movlw	low f_mount@rp
  8195   0059A2  6E01               	movwf	get_ldnumber@path^0,c
  8196   0059A4  EC77  F02B         	call	_get_ldnumber	;wreg free
  8197   0059A8  C001  F058         	movff	?_get_ldnumber,f_mount@vol
  8198   0059AC  C002  F059         	movff	?_get_ldnumber+1,f_mount@vol+1
  8199   0059B0                     
  8200                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  8201   0059B0  BE59               	btfsc	(f_mount@vol+1)^0,7,c
  8202   0059B2  EFDF  F02C         	goto	u8180
  8203   0059B6  EFDD  F02C         	goto	u8181
  8204   0059BA                     u8181:
  8205   0059BA  EFE2  F02C         	goto	l5989
  8206   0059BE                     u8180:
  8207   0059BE  0E0B               	movlw	11
  8208   0059C0  EF30  F02D         	goto	l644
  8209   0059C4                     l5989:
  8210                           
  8211                           ;ff.c: 2416:  cfs = FatFs[vol];
  8212   0059C4  5058               	movf	f_mount@vol^0,w,c
  8213   0059C6  0D02               	mullw	2
  8214   0059C8  50F3               	movf	243,w,c
  8215   0059CA  0FF6               	addlw	low _FatFs@ff$F539
  8216   0059CC  6ED9               	movwf	fsr2l,c
  8217   0059CE  6ADA               	clrf	fsr2h,c
  8218   0059D0  CFDE F055          	movff	postinc2,f_mount@cfs
  8219   0059D4  CFDD F056          	movff	postdec2,f_mount@cfs+1
  8220   0059D8                     
  8221                           ;ff.c: 2418:  if (cfs) {
  8222   0059D8  5055               	movf	f_mount@cfs^0,w,c
  8223   0059DA  1056               	iorwf	(f_mount@cfs+1)^0,w,c
  8224   0059DC  B4D8               	btfsc	status,2,c
  8225   0059DE  EFF3  F02C         	goto	u8191
  8226   0059E2  EFF5  F02C         	goto	u8190
  8227   0059E6                     u8191:
  8228   0059E6  EFFA  F02C         	goto	l5995
  8229   0059EA                     u8190:
  8230   0059EA                     
  8231                           ;ff.c: 2425:   cfs->fs_type = 0;
  8232   0059EA  C055  FFD9         	movff	f_mount@cfs,fsr2l
  8233   0059EE  C056  FFDA         	movff	f_mount@cfs+1,fsr2h
  8234   0059F2  6ADF               	clrf	indf2,c
  8235   0059F4                     l5995:
  8236                           
  8237                           ;ff.c: 2428:  if (fs) {
  8238   0059F4  5050               	movf	f_mount@fs^0,w,c
  8239   0059F6  1051               	iorwf	(f_mount@fs+1)^0,w,c
  8240   0059F8  B4D8               	btfsc	status,2,c
  8241   0059FA  EF01  F02D         	goto	u8201
  8242   0059FE  EF03  F02D         	goto	u8200
  8243   005A02                     u8201:
  8244   005A02  EF08  F02D         	goto	l5999
  8245   005A06                     u8200:
  8246   005A06                     
  8247                           ;ff.c: 2429:   fs->fs_type = 0;
  8248   005A06  C050  FFD9         	movff	f_mount@fs,fsr2l
  8249   005A0A  C051  FFDA         	movff	f_mount@fs+1,fsr2h
  8250   005A0E  6ADF               	clrf	indf2,c
  8251   005A10                     l5999:
  8252                           
  8253                           ;ff.c: 2434:  FatFs[vol] = fs;
  8254   005A10  5058               	movf	f_mount@vol^0,w,c
  8255   005A12  0D02               	mullw	2
  8256   005A14  50F3               	movf	243,w,c
  8257   005A16  0FF6               	addlw	low _FatFs@ff$F539
  8258   005A18  6ED9               	movwf	fsr2l,c
  8259   005A1A  6ADA               	clrf	fsr2h,c
  8260   005A1C  C050  FFDE         	movff	f_mount@fs,postinc2
  8261   005A20  C051  FFDD         	movff	f_mount@fs+1,postdec2
  8262   005A24                     
  8263                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  8264   005A24  5050               	movf	f_mount@fs^0,w,c
  8265   005A26  1051               	iorwf	(f_mount@fs+1)^0,w,c
  8266   005A28  B4D8               	btfsc	status,2,c
  8267   005A2A  EF19  F02D         	goto	u8211
  8268   005A2E  EF1B  F02D         	goto	u8210
  8269   005A32                     u8211:
  8270   005A32  EF23  F02D         	goto	l6005
  8271   005A36                     u8210:
  8272   005A36  0453               	decf	f_mount@opt^0,w,c
  8273   005A38  B4D8               	btfsc	status,2,c
  8274   005A3A  EF21  F02D         	goto	u8221
  8275   005A3E  EF23  F02D         	goto	u8220
  8276   005A42                     u8221:
  8277   005A42  EF26  F02D         	goto	l6009
  8278   005A46                     u8220:
  8279   005A46                     l6005:
  8280   005A46  0E00               	movlw	0
  8281   005A48  EF30  F02D         	goto	l644
  8282   005A4C                     l6009:
  8283                           
  8284                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  8285   005A4C  0E50               	movlw	low f_mount@fs
  8286   005A4E  6E45               	movwf	find_volume@rfs^0,c
  8287   005A50  0E52               	movlw	low f_mount@path
  8288   005A52  6E46               	movwf	find_volume@path^0,c
  8289   005A54  0E00               	movlw	0
  8290   005A56  6E47               	movwf	find_volume@wmode^0,c
  8291   005A58  EC16  F003         	call	_find_volume	;wreg free
  8292   005A5C  6E54               	movwf	f_mount@res^0,c
  8293   005A5E                     
  8294                           ;ff.c: 2439:  return res;
  8295   005A5E  5054               	movf	f_mount@res^0,w,c
  8296   005A60                     l644:
  8297   005A60  0012               	return		;funcret
  8298   005A62                     __end_of_f_mount:
  8299                           	callstack 0
  8300                           
  8301 ;; *************** function _find_volume *****************
  8302 ;; Defined at:
  8303 ;;		line 2203 in file "ff.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  rfs             1   68[COMRAM] PTR PTR struct .
  8306 ;;		 -> f_open@dj(21), f_mount@fs(2), 
  8307 ;;  path            1   69[COMRAM] PTR PTR const unsigned c
  8308 ;;		 -> f_open@path(1), f_mount@path(1), 
  8309 ;;  wmode           1   70[COMRAM] unsigned char 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;  br             16    0[BANK0 ] unsigned long [4]
  8312 ;;  bsect           4   49[BANK0 ] unsigned long 
  8313 ;;  fasize          4   45[BANK0 ] unsigned long 
  8314 ;;  nclst           4   40[BANK0 ] unsigned long 
  8315 ;;  tsect           4   36[BANK0 ] unsigned long 
  8316 ;;  sysect          4   28[BANK0 ] unsigned long 
  8317 ;;  szbfat          4   22[BANK0 ] unsigned long 
  8318 ;;  fs              2   56[BANK0 ] PTR struct .
  8319 ;;		 -> FatFs(558), NULL(0), 
  8320 ;;  i               2   53[BANK0 ] unsigned short 
  8321 ;;  nrsv            2   34[BANK0 ] unsigned short 
  8322 ;;  vol             2   32[BANK0 ] int 
  8323 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  8324 ;;		 -> FatFs(558), FatFs$win(512), NULL(0), 
  8325 ;;  fmt             1   55[BANK0 ] unsigned char 
  8326 ;;  stat            1   44[BANK0 ] unsigned char 
  8327 ;; Return value:  Size  Location     Type
  8328 ;;                  1    wreg      enum E95
  8329 ;; Registers used:
  8330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8331 ;; Tracked objects:
  8332 ;;		On entry : 0/0
  8333 ;;		On exit  : 0/0
  8334 ;;		Unchanged: 0/0
  8335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8336 ;;      Params:         3       0       0       0       0       0       0
  8337 ;;      Locals:         0      58       0       0       0       0       0
  8338 ;;      Temps:          8       0       0       0       0       0       0
  8339 ;;      Totals:        11      58       0       0       0       0       0
  8340 ;;Total ram usage:       69 bytes
  8341 ;; Hardware stack levels used: 1
  8342 ;; Hardware stack levels required when called: 9
  8343 ;; This function calls:
  8344 ;;		___lldiv
  8345 ;;		___lmul
  8346 ;;		_check_fs
  8347 ;;		_disk_initialize
  8348 ;;		_disk_status
  8349 ;;		_get_ldnumber
  8350 ;;		_move_window
  8351 ;; This function is called by:
  8352 ;;		_f_mount
  8353 ;;		_f_open
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           	psect	text25
  8358   00062C                     __ptext25:
  8359                           	callstack 0
  8360   00062C                     _find_volume:
  8361                           	callstack 20
  8362   00062C                     
  8363                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  8364   00062C  5045               	movf	find_volume@rfs^0,w,c
  8365   00062E  6ED9               	movwf	fsr2l,c
  8366   000630  6ADA               	clrf	fsr2h,c
  8367   000632  6ADE               	clrf	postinc2,c
  8368   000634  6ADD               	clrf	postdec2,c
  8369   000636                     
  8370                           ;ff.c: 2220:  vol = get_ldnumber(path);
  8371   000636  C046  F001         	movff	find_volume@path,get_ldnumber@path
  8372   00063A  EC77  F02B         	call	_get_ldnumber	;wreg free
  8373   00063E  C001  F0A0         	movff	?_get_ldnumber,find_volume@vol
  8374   000642  C002  F0A1         	movff	?_get_ldnumber+1,find_volume@vol+1
  8375   000646                     
  8376                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  8377   000646  0100               	movlb	0	; () banked
  8378   000648  BFA1               	btfsc	(find_volume@vol+1)& (0+255),7,b
  8379   00064A  EF2B  F003         	goto	u7690
  8380   00064E  EF29  F003         	goto	u7691
  8381   000652                     u7691:
  8382   000652  EF2E  F003         	goto	l5683
  8383   000656                     u7690:
  8384   000656                     
  8385                           ; BSR set to: 0
  8386   000656  0E0B               	movlw	11
  8387   000658  EFC7  F008         	goto	l584
  8388   00065C                     l5683:
  8389                           
  8390                           ; BSR set to: 0
  8391                           ;ff.c: 2224:  fs = FatFs[vol];
  8392   00065C  51A0               	movf	find_volume@vol& (0+255),w,b
  8393   00065E  0D02               	mullw	2
  8394   000660  50F3               	movf	243,w,c
  8395   000662  0FF6               	addlw	low _FatFs@ff$F539
  8396   000664  6ED9               	movwf	fsr2l,c
  8397   000666  6ADA               	clrf	fsr2h,c
  8398   000668  CFDE F0B8          	movff	postinc2,find_volume@fs
  8399   00066C  CFDD F0B9          	movff	postdec2,find_volume@fs+1
  8400   000670                     
  8401                           ; BSR set to: 0
  8402                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  8403   000670  51B8               	movf	find_volume@fs& (0+255),w,b
  8404   000672  11B9               	iorwf	(find_volume@fs+1)& (0+255),w,b
  8405   000674  A4D8               	btfss	status,2,c
  8406   000676  EF3F  F003         	goto	u7701
  8407   00067A  EF41  F003         	goto	u7700
  8408   00067E                     u7701:
  8409   00067E  EF44  F003         	goto	l5691
  8410   000682                     u7700:
  8411   000682                     
  8412                           ; BSR set to: 0
  8413   000682  0E0C               	movlw	12
  8414   000684  EFC7  F008         	goto	l584
  8415   000688                     l5691:
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;ff.c: 2228:  *rfs = fs;
  8419   000688  5045               	movf	find_volume@rfs^0,w,c
  8420   00068A  6ED9               	movwf	fsr2l,c
  8421   00068C  6ADA               	clrf	fsr2h,c
  8422   00068E  C0B8  FFDE         	movff	find_volume@fs,postinc2
  8423   000692  C0B9  FFDD         	movff	find_volume@fs+1,postdec2
  8424                           
  8425                           ;ff.c: 2230:  if (fs->fs_type) {
  8426   000696  C0B8  FFD9         	movff	find_volume@fs,fsr2l
  8427   00069A  C0B9  FFDA         	movff	find_volume@fs+1,fsr2h
  8428   00069E  50DF               	movf	indf2,w,c
  8429   0006A0  B4D8               	btfsc	status,2,c
  8430   0006A2  EF55  F003         	goto	u7711
  8431   0006A6  EF57  F003         	goto	u7710
  8432   0006AA                     u7711:
  8433   0006AA  EF7E  F003         	goto	l5709
  8434   0006AE                     u7710:
  8435   0006AE                     
  8436                           ; BSR set to: 0
  8437                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  8438   0006AE  EE20 F001          	lfsr	2,1
  8439   0006B2  51B8               	movf	find_volume@fs& (0+255),w,b
  8440   0006B4  26D9               	addwf	fsr2l,f,c
  8441   0006B6  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8442   0006B8  22DA               	addwfc	fsr2h,f,c
  8443   0006BA  50DF               	movf	indf2,w,c
  8444   0006BC  ECEE  F032         	call	_disk_status
  8445   0006C0  0100               	movlb	0	; () banked
  8446   0006C2  6FAC               	movwf	find_volume@stat& (0+255),b
  8447   0006C4                     
  8448                           ; BSR set to: 0
  8449                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  8450   0006C4  B1AC               	btfsc	find_volume@stat& (0+255),0,b
  8451   0006C6  EF67  F003         	goto	u7721
  8452   0006CA  EF69  F003         	goto	u7720
  8453   0006CE                     u7721:
  8454   0006CE  EF7E  F003         	goto	l5709
  8455   0006D2                     u7720:
  8456   0006D2                     
  8457                           ; BSR set to: 0
  8458   0006D2  5047               	movf	find_volume@wmode^0,w,c
  8459   0006D4  B4D8               	btfsc	status,2,c
  8460   0006D6  EF6F  F003         	goto	u7731
  8461   0006DA  EF71  F003         	goto	u7730
  8462   0006DE                     u7731:
  8463   0006DE  EF7B  F003         	goto	l5705
  8464   0006E2                     u7730:
  8465   0006E2                     
  8466                           ; BSR set to: 0
  8467   0006E2  A5AC               	btfss	find_volume@stat& (0+255),2,b
  8468   0006E4  EF76  F003         	goto	u7741
  8469   0006E8  EF78  F003         	goto	u7740
  8470   0006EC                     u7741:
  8471   0006EC  EF7B  F003         	goto	l5705
  8472   0006F0                     u7740:
  8473   0006F0                     l5701:
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  8477   0006F0  0E0A               	movlw	10
  8478   0006F2  EFC7  F008         	goto	l584
  8479   0006F6                     l5705:
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;ff.c: 2235:    return FR_OK;
  8483   0006F6  0E00               	movlw	0
  8484   0006F8  EFC7  F008         	goto	l584
  8485   0006FC                     l5709:
  8486                           
  8487                           ; BSR set to: 0
  8488                           ;ff.c: 2242:  fs->fs_type = 0;
  8489   0006FC  C0B8  FFD9         	movff	find_volume@fs,fsr2l
  8490   000700  C0B9  FFDA         	movff	find_volume@fs+1,fsr2h
  8491   000704  6ADF               	clrf	indf2,c
  8492   000706                     
  8493                           ; BSR set to: 0
  8494                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  8495   000706  EE20 F001          	lfsr	2,1
  8496   00070A  51B8               	movf	find_volume@fs& (0+255),w,b
  8497   00070C  26D9               	addwf	fsr2l,f,c
  8498   00070E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8499   000710  22DA               	addwfc	fsr2h,f,c
  8500   000712  C0A0  FFDF         	movff	find_volume@vol,indf2
  8501   000716                     
  8502                           ; BSR set to: 0
  8503                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  8504   000716  EE20 F001          	lfsr	2,1
  8505   00071A  51B8               	movf	find_volume@fs& (0+255),w,b
  8506   00071C  26D9               	addwf	fsr2l,f,c
  8507   00071E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8508   000720  22DA               	addwfc	fsr2h,f,c
  8509   000722  50DF               	movf	indf2,w,c
  8510   000724  EC70  F021         	call	_disk_initialize
  8511   000728  0100               	movlb	0	; () banked
  8512   00072A  6FAC               	movwf	find_volume@stat& (0+255),b
  8513   00072C                     
  8514                           ; BSR set to: 0
  8515                           ;ff.c: 2245:  if (stat & 0x01)
  8516   00072C  A1AC               	btfss	find_volume@stat& (0+255),0,b
  8517   00072E  EF9B  F003         	goto	u7751
  8518   000732  EF9D  F003         	goto	u7750
  8519   000736                     u7751:
  8520   000736  EFA0  F003         	goto	l5721
  8521   00073A                     u7750:
  8522   00073A                     
  8523                           ; BSR set to: 0
  8524                           ;ff.c: 2246:   return FR_NOT_READY;
  8525   00073A  0E03               	movlw	3
  8526   00073C  EFC7  F008         	goto	l584
  8527   000740                     l5721:
  8528                           
  8529                           ; BSR set to: 0
  8530   000740  5047               	movf	find_volume@wmode^0,w,c
  8531   000742  B4D8               	btfsc	status,2,c
  8532   000744  EFA6  F003         	goto	u7761
  8533   000748  EFA8  F003         	goto	u7760
  8534   00074C                     u7761:
  8535   00074C  EFB1  F003         	goto	l5729
  8536   000750                     u7760:
  8537   000750                     
  8538                           ; BSR set to: 0
  8539   000750  A5AC               	btfss	find_volume@stat& (0+255),2,b
  8540   000752  EFAD  F003         	goto	u7771
  8541   000756  EFAF  F003         	goto	u7770
  8542   00075A                     u7771:
  8543   00075A  EFB1  F003         	goto	l5729
  8544   00075E                     u7770:
  8545   00075E  EF78  F003         	goto	l5701
  8546   000762                     l5729:
  8547                           
  8548                           ; BSR set to: 0
  8549                           ;ff.c: 2254:  bsect = 0;
  8550   000762  0E00               	movlw	0
  8551   000764  6FB1               	movwf	find_volume@bsect& (0+255),b
  8552   000766  0E00               	movlw	0
  8553   000768  6FB2               	movwf	(find_volume@bsect+1)& (0+255),b
  8554   00076A  0E00               	movlw	0
  8555   00076C  6FB3               	movwf	(find_volume@bsect+2)& (0+255),b
  8556   00076E  0E00               	movlw	0
  8557   000770  6FB4               	movwf	(find_volume@bsect+3)& (0+255),b
  8558   000772                     
  8559                           ; BSR set to: 0
  8560                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  8561   000772  C0B8  F03B         	movff	find_volume@fs,check_fs@fs
  8562   000776  C0B9  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  8563   00077A  0E00               	movlw	0
  8564   00077C  6E3D               	movwf	check_fs@sect^0,c
  8565   00077E  0E00               	movlw	0
  8566   000780  6E3E               	movwf	(check_fs@sect+1)^0,c
  8567   000782  0E00               	movlw	0
  8568   000784  6E3F               	movwf	(check_fs@sect+2)^0,c
  8569   000786  0E00               	movlw	0
  8570   000788  6E40               	movwf	(check_fs@sect+3)^0,c
  8571   00078A  ECE9  F02A         	call	_check_fs	;wreg free
  8572   00078E  0100               	movlb	0	; () banked
  8573   000790  6FB7               	movwf	find_volume@fmt& (0+255),b
  8574   000792                     
  8575                           ; BSR set to: 0
  8576                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  8577   000792  05B7               	decf	find_volume@fmt& (0+255),w,b
  8578   000794  B4D8               	btfsc	status,2,c
  8579   000796  EFCF  F003         	goto	u7781
  8580   00079A  EFD1  F003         	goto	u7780
  8581   00079E                     u7781:
  8582   00079E  EFD3  F003         	goto	l5739
  8583   0007A2                     u7780:
  8584   0007A2  EF8E  F004         	goto	l5779
  8585   0007A6                     l5739:
  8586                           
  8587                           ; BSR set to: 0
  8588                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  8589   0007A6  0E00               	movlw	0
  8590   0007A8  6FB6               	movwf	(find_volume@i+1)& (0+255),b
  8591   0007AA  0E00               	movlw	0
  8592   0007AC  6FB5               	movwf	find_volume@i& (0+255),b
  8593   0007AE                     l5741:
  8594                           
  8595                           ; BSR set to: 0
  8596   0007AE  51B6               	movf	(find_volume@i+1)& (0+255),w,b
  8597   0007B0  E109               	bnz	u7790
  8598   0007B2  0E04               	movlw	4
  8599   0007B4  5DB5               	subwf	find_volume@i& (0+255),w,b
  8600   0007B6  A0D8               	btfss	status,0,c
  8601   0007B8  EFE0  F003         	goto	u7791
  8602   0007BC  EFE2  F003         	goto	u7790
  8603   0007C0                     u7791:
  8604   0007C0  EFE4  F003         	goto	l5745
  8605   0007C4                     u7790:
  8606   0007C4  EF35  F004         	goto	l5759
  8607   0007C8                     l5745:
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  8611   0007C8  C0B5  F048         	movff	find_volume@i,??_find_volume
  8612   0007CC  C0B6  F049         	movff	find_volume@i+1,??_find_volume+1
  8613   0007D0  3A48               	swapf	??_find_volume^0,f,c
  8614   0007D2  3A49               	swapf	(??_find_volume+1)^0,f,c
  8615   0007D4  0EF0               	movlw	240
  8616   0007D6  1649               	andwf	(??_find_volume+1)^0,f,c
  8617   0007D8  5048               	movf	??_find_volume^0,w,c
  8618   0007DA  0B0F               	andlw	15
  8619   0007DC  1249               	iorwf	(??_find_volume+1)^0,f,c
  8620   0007DE  0EF0               	movlw	240
  8621   0007E0  1648               	andwf	??_find_volume^0,f,c
  8622   0007E2  5048               	movf	??_find_volume^0,w,c
  8623   0007E4  25B8               	addwf	find_volume@fs& (0+255),w,b
  8624   0007E6  6E4A               	movwf	(??_find_volume+2)^0,c
  8625   0007E8  5049               	movf	(??_find_volume+1)^0,w,c
  8626   0007EA  21B9               	addwfc	(find_volume@fs+1)& (0+255),w,b
  8627   0007EC  6E4B               	movwf	(??_find_volume+3)^0,c
  8628   0007EE  0EEC               	movlw	236
  8629   0007F0  244A               	addwf	(??_find_volume+2)^0,w,c
  8630   0007F2  6F9A               	movwf	find_volume@pt& (0+255),b
  8631   0007F4  0E01               	movlw	1
  8632   0007F6  204B               	addwfc	(??_find_volume+3)^0,w,c
  8633   0007F8  6F9B               	movwf	(find_volume@pt+1)& (0+255),b
  8634   0007FA                     
  8635                           ; BSR set to: 0
  8636                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  8637   0007FA  EE20 F004          	lfsr	2,4
  8638   0007FE  519A               	movf	find_volume@pt& (0+255),w,b
  8639   000800  26D9               	addwf	fsr2l,f,c
  8640   000802  519B               	movf	(find_volume@pt+1)& (0+255),w,b
  8641   000804  22DA               	addwfc	fsr2h,f,c
  8642   000806  50DF               	movf	indf2,w,c
  8643   000808  A4D8               	btfss	status,2,c
  8644   00080A  EF09  F004         	goto	u7801
  8645   00080E  EF0B  F004         	goto	u7800
  8646   000812                     u7801:
  8647   000812  EF15  F004         	goto	l5751
  8648   000816                     u7800:
  8649   000816                     
  8650                           ; BSR set to: 0
  8651   000816  0E00               	movlw	0
  8652   000818  6F90               	movwf	_find_volume$1034& (0+255),b
  8653   00081A  0E00               	movlw	0
  8654   00081C  6F91               	movwf	(_find_volume$1034+1)& (0+255),b
  8655   00081E  0E00               	movlw	0
  8656   000820  6F92               	movwf	(_find_volume$1034+2)& (0+255),b
  8657   000822  0E00               	movlw	0
  8658   000824  6F93               	movwf	(_find_volume$1034+3)& (0+255),b
  8659   000826  EF23  F004         	goto	l5753
  8660   00082A                     l5751:
  8661                           
  8662                           ; BSR set to: 0
  8663   00082A  EE20 F008          	lfsr	2,8
  8664   00082E  519A               	movf	find_volume@pt& (0+255),w,b
  8665   000830  26D9               	addwf	fsr2l,f,c
  8666   000832  519B               	movf	(find_volume@pt+1)& (0+255),w,b
  8667   000834  22DA               	addwfc	fsr2h,f,c
  8668   000836  CFDE F090          	movff	postinc2,_find_volume$1034
  8669   00083A  CFDE F091          	movff	postinc2,_find_volume$1034+1
  8670   00083E  CFDE F092          	movff	postinc2,_find_volume$1034+2
  8671   000842  CFDE F093          	movff	postinc2,_find_volume$1034+3
  8672   000846                     l5753:
  8673                           
  8674                           ; BSR set to: 0
  8675   000846  51B5               	movf	find_volume@i& (0+255),w,b
  8676   000848  0D04               	mullw	4
  8677   00084A  50F3               	movf	243,w,c
  8678   00084C  0F80               	addlw	low find_volume@br
  8679   00084E  6ED9               	movwf	fsr2l,c
  8680   000850  6ADA               	clrf	fsr2h,c
  8681   000852  C090  FFDE         	movff	_find_volume$1034,postinc2
  8682   000856  C091  FFDE         	movff	_find_volume$1034+1,postinc2
  8683   00085A  C092  FFDE         	movff	_find_volume$1034+2,postinc2
  8684   00085E  C093  FFDE         	movff	_find_volume$1034+3,postinc2
  8685   000862                     
  8686                           ; BSR set to: 0
  8687                           ;ff.c: 2260:   }
  8688   000862  4BB5               	infsnz	find_volume@i& (0+255),f,b
  8689   000864  2BB6               	incf	(find_volume@i+1)& (0+255),f,b
  8690   000866  EFD7  F003         	goto	l5741
  8691   00086A                     l5759:
  8692                           
  8693                           ; BSR set to: 0
  8694                           ;ff.c: 2261:   i = 0;
  8695   00086A  0E00               	movlw	0
  8696   00086C  6FB6               	movwf	(find_volume@i+1)& (0+255),b
  8697   00086E  0E00               	movlw	0
  8698   000870  6FB5               	movwf	find_volume@i& (0+255),b
  8699   000872                     
  8700                           ; BSR set to: 0
  8701                           ;ff.c: 2262:   if (i) i--;
  8702   000872  51B5               	movf	find_volume@i& (0+255),w,b
  8703   000874  11B6               	iorwf	(find_volume@i+1)& (0+255),w,b
  8704   000876  B4D8               	btfsc	status,2,c
  8705   000878  EF40  F004         	goto	u7811
  8706   00087C  EF42  F004         	goto	u7810
  8707   000880                     u7811:
  8708   000880  EF45  F004         	goto	l5765
  8709   000884                     u7810:
  8710   000884                     
  8711                           ; BSR set to: 0
  8712   000884  07B5               	decf	find_volume@i& (0+255),f,b
  8713   000886  A0D8               	btfss	status,0,c
  8714   000888  07B6               	decf	(find_volume@i+1)& (0+255),f,b
  8715   00088A                     l5765:
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;ff.c: 2264:    bsect = br[i];
  8719   00088A  51B5               	movf	find_volume@i& (0+255),w,b
  8720   00088C  0D04               	mullw	4
  8721   00088E  50F3               	movf	243,w,c
  8722   000890  0F80               	addlw	low find_volume@br
  8723   000892  6ED9               	movwf	fsr2l,c
  8724   000894  6ADA               	clrf	fsr2h,c
  8725   000896  CFDE F0B1          	movff	postinc2,find_volume@bsect
  8726   00089A  CFDE F0B2          	movff	postinc2,find_volume@bsect+1
  8727   00089E  CFDE F0B3          	movff	postinc2,find_volume@bsect+2
  8728   0008A2  CFDE F0B4          	movff	postinc2,find_volume@bsect+3
  8729   0008A6                     
  8730                           ; BSR set to: 0
  8731                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  8732   0008A6  51B1               	movf	find_volume@bsect& (0+255),w,b
  8733   0008A8  11B2               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  8734   0008AA  11B3               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  8735   0008AC  11B4               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  8736   0008AE  A4D8               	btfss	status,2,c
  8737   0008B0  EF5C  F004         	goto	u7821
  8738   0008B4  EF5E  F004         	goto	u7820
  8739   0008B8                     u7821:
  8740   0008B8  EF64  F004         	goto	l5771
  8741   0008BC                     u7820:
  8742   0008BC                     
  8743                           ; BSR set to: 0
  8744   0008BC  0E00               	movlw	0
  8745   0008BE  6F95               	movwf	(_find_volume$1035+1)& (0+255),b
  8746   0008C0  0E02               	movlw	2
  8747   0008C2  6F94               	movwf	_find_volume$1035& (0+255),b
  8748   0008C4  EF77  F004         	goto	l5773
  8749   0008C8                     l5771:
  8750                           
  8751                           ; BSR set to: 0
  8752   0008C8  C0B8  F03B         	movff	find_volume@fs,check_fs@fs
  8753   0008CC  C0B9  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  8754   0008D0  C0B1  F03D         	movff	find_volume@bsect,check_fs@sect
  8755   0008D4  C0B2  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  8756   0008D8  C0B3  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  8757   0008DC  C0B4  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  8758   0008E0  ECE9  F02A         	call	_check_fs	;wreg free
  8759   0008E4  6E48               	movwf	??_find_volume^0,c
  8760   0008E6  5048               	movf	??_find_volume^0,w,c
  8761   0008E8  0100               	movlb	0	; () banked
  8762   0008EA  6F94               	movwf	_find_volume$1035& (0+255),b
  8763   0008EC  6B95               	clrf	(_find_volume$1035+1)& (0+255),b
  8764   0008EE                     l5773:
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  8768   0008EE  C094  F0B7         	movff	_find_volume$1035,find_volume@fmt
  8769   0008F2                     
  8770                           ; BSR set to: 0
  8771   0008F2  51B7               	movf	find_volume@fmt& (0+255),w,b
  8772   0008F4  B4D8               	btfsc	status,2,c
  8773   0008F6  EF7F  F004         	goto	u7831
  8774   0008FA  EF81  F004         	goto	u7830
  8775   0008FE                     u7831:
  8776   0008FE  EF8E  F004         	goto	l5779
  8777   000902                     u7830:
  8778   000902                     
  8779                           ; BSR set to: 0
  8780   000902  4BB5               	infsnz	find_volume@i& (0+255),f,b
  8781   000904  2BB6               	incf	(find_volume@i+1)& (0+255),f,b
  8782   000906  51B6               	movf	(find_volume@i+1)& (0+255),w,b
  8783   000908  E109               	bnz	u7840
  8784   00090A  0E04               	movlw	4
  8785   00090C  5DB5               	subwf	find_volume@i& (0+255),w,b
  8786   00090E  A0D8               	btfss	status,0,c
  8787   000910  EF8C  F004         	goto	u7841
  8788   000914  EF8E  F004         	goto	u7840
  8789   000918                     u7841:
  8790   000918  EF45  F004         	goto	l5765
  8791   00091C                     u7840:
  8792   00091C                     l5779:
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  8796   00091C  0E03               	movlw	3
  8797   00091E  19B7               	xorwf	find_volume@fmt& (0+255),w,b
  8798   000920  A4D8               	btfss	status,2,c
  8799   000922  EF95  F004         	goto	u7851
  8800   000926  EF97  F004         	goto	u7850
  8801   00092A                     u7851:
  8802   00092A  EF9A  F004         	goto	l5785
  8803   00092E                     u7850:
  8804   00092E                     
  8805                           ; BSR set to: 0
  8806   00092E  0E01               	movlw	1
  8807   000930  EFC7  F008         	goto	l584
  8808   000934                     l5785:
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  8812   000934  51B7               	movf	find_volume@fmt& (0+255),w,b
  8813   000936  B4D8               	btfsc	status,2,c
  8814   000938  EFA0  F004         	goto	u7861
  8815   00093C  EFA2  F004         	goto	u7860
  8816   000940                     u7861:
  8817   000940  EFA5  F004         	goto	l5791
  8818   000944                     u7860:
  8819   000944                     l5787:
  8820                           
  8821                           ; BSR set to: 0
  8822   000944  0E0D               	movlw	13
  8823   000946  EFC7  F008         	goto	l584
  8824   00094A                     l5791:
  8825                           
  8826                           ; BSR set to: 0
  8827                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  8828   00094A  EE20 F039          	lfsr	2,57
  8829   00094E  51B8               	movf	find_volume@fs& (0+255),w,b
  8830   000950  26D9               	addwf	fsr2l,f,c
  8831   000952  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8832   000954  22DA               	addwfc	fsr2h,f,c
  8833   000956  50DE               	movf	postinc2,w,c
  8834   000958  E109               	bnz	u7870
  8835   00095A  0E02               	movlw	2
  8836   00095C  18DE               	xorwf	postinc2,w,c
  8837   00095E  B4D8               	btfsc	status,2,c
  8838   000960  EFB4  F004         	goto	u7871
  8839   000964  EFB6  F004         	goto	u7870
  8840   000968                     u7871:
  8841   000968  EFB8  F004         	goto	l5797
  8842   00096C                     u7870:
  8843   00096C  EFA2  F004         	goto	l5787
  8844   000970                     l5797:
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  8848   000970  EE20 F044          	lfsr	2,68
  8849   000974  51B8               	movf	find_volume@fs& (0+255),w,b
  8850   000976  26D9               	addwf	fsr2l,f,c
  8851   000978  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8852   00097A  22DA               	addwfc	fsr2h,f,c
  8853   00097C  CFDE F048          	movff	postinc2,??_find_volume
  8854   000980  CFDD F049          	movff	postdec2,??_find_volume+1
  8855   000984  C048  F0AD         	movff	??_find_volume,find_volume@fasize
  8856   000988  C049  F0AE         	movff	??_find_volume+1,find_volume@fasize+1
  8857   00098C  6BAF               	clrf	(find_volume@fasize+2)& (0+255),b
  8858   00098E  6BB0               	clrf	(find_volume@fasize+3)& (0+255),b
  8859   000990                     
  8860                           ; BSR set to: 0
  8861                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  8862   000990  51AD               	movf	find_volume@fasize& (0+255),w,b
  8863   000992  11AE               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  8864   000994  11AF               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  8865   000996  11B0               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  8866   000998  A4D8               	btfss	status,2,c
  8867   00099A  EFD1  F004         	goto	u7881
  8868   00099E  EFD3  F004         	goto	u7880
  8869   0009A2                     u7881:
  8870   0009A2  EFE1  F004         	goto	l612
  8871   0009A6                     u7880:
  8872   0009A6                     
  8873                           ; BSR set to: 0
  8874   0009A6  EE20 F052          	lfsr	2,82
  8875   0009AA  51B8               	movf	find_volume@fs& (0+255),w,b
  8876   0009AC  26D9               	addwf	fsr2l,f,c
  8877   0009AE  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8878   0009B0  22DA               	addwfc	fsr2h,f,c
  8879   0009B2  CFDE F0AD          	movff	postinc2,find_volume@fasize
  8880   0009B6  CFDE F0AE          	movff	postinc2,find_volume@fasize+1
  8881   0009BA  CFDE F0AF          	movff	postinc2,find_volume@fasize+2
  8882   0009BE  CFDE F0B0          	movff	postinc2,find_volume@fasize+3
  8883   0009C2                     l612:
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;ff.c: 2278:  fs->fsize = fasize;
  8887   0009C2  EE20 F016          	lfsr	2,22
  8888   0009C6  51B8               	movf	find_volume@fs& (0+255),w,b
  8889   0009C8  26D9               	addwf	fsr2l,f,c
  8890   0009CA  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8891   0009CC  22DA               	addwfc	fsr2h,f,c
  8892   0009CE  C0AD  FFDE         	movff	find_volume@fasize,postinc2
  8893   0009D2  C0AE  FFDE         	movff	find_volume@fasize+1,postinc2
  8894   0009D6  C0AF  FFDE         	movff	find_volume@fasize+2,postinc2
  8895   0009DA  C0B0  FFDE         	movff	find_volume@fasize+3,postinc2
  8896   0009DE                     
  8897                           ; BSR set to: 0
  8898                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  8899   0009DE  EE20 F03E          	lfsr	2,62
  8900   0009E2  51B8               	movf	find_volume@fs& (0+255),w,b
  8901   0009E4  26D9               	addwf	fsr2l,f,c
  8902   0009E6  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8903   0009E8  22DA               	addwfc	fsr2h,f,c
  8904   0009EA  EE10 F003          	lfsr	1,3
  8905   0009EE  51B8               	movf	find_volume@fs& (0+255),w,b
  8906   0009F0  26E1               	addwf	fsr1l,f,c
  8907   0009F2  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8908   0009F4  22E2               	addwfc	fsr1h,f,c
  8909   0009F6  CFDF FFE7          	movff	indf2,indf1
  8910   0009FA                     
  8911                           ; BSR set to: 0
  8912                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  8913   0009FA  EE20 F003          	lfsr	2,3
  8914   0009FE  51B8               	movf	find_volume@fs& (0+255),w,b
  8915   000A00  26D9               	addwf	fsr2l,f,c
  8916   000A02  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8917   000A04  22DA               	addwfc	fsr2h,f,c
  8918   000A06  04DE               	decf	postinc2,w,c
  8919   000A08  B4D8               	btfsc	status,2,c
  8920   000A0A  EF09  F005         	goto	u7891
  8921   000A0E  EF0B  F005         	goto	u7890
  8922   000A12                     u7891:
  8923   000A12  EF1C  F005         	goto	l5813
  8924   000A16                     u7890:
  8925   000A16                     
  8926                           ; BSR set to: 0
  8927   000A16  EE20 F003          	lfsr	2,3
  8928   000A1A  51B8               	movf	find_volume@fs& (0+255),w,b
  8929   000A1C  26D9               	addwf	fsr2l,f,c
  8930   000A1E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8931   000A20  22DA               	addwfc	fsr2h,f,c
  8932   000A22  0E02               	movlw	2
  8933   000A24  18DE               	xorwf	postinc2,w,c
  8934   000A26  B4D8               	btfsc	status,2,c
  8935   000A28  EF18  F005         	goto	u7901
  8936   000A2C  EF1A  F005         	goto	u7900
  8937   000A30                     u7901:
  8938   000A30  EF1C  F005         	goto	l5813
  8939   000A34                     u7900:
  8940   000A34  EFA2  F004         	goto	l5787
  8941   000A38                     l5813:
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;ff.c: 2283:  fasize *= fs->n_fats;
  8945   000A38  C0AD  F001         	movff	find_volume@fasize,___lmul@multiplier
  8946   000A3C  C0AE  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  8947   000A40  C0AF  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  8948   000A44  C0B0  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  8949   000A48  EE20 F003          	lfsr	2,3
  8950   000A4C  51B8               	movf	find_volume@fs& (0+255),w,b
  8951   000A4E  26D9               	addwf	fsr2l,f,c
  8952   000A50  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8953   000A52  22DA               	addwfc	fsr2h,f,c
  8954   000A54  50DF               	movf	indf2,w,c
  8955   000A56  6E48               	movwf	??_find_volume^0,c
  8956   000A58  5048               	movf	??_find_volume^0,w,c
  8957   000A5A  6E05               	movwf	___lmul@multiplicand^0,c
  8958   000A5C  6A06               	clrf	(___lmul@multiplicand+1)^0,c
  8959   000A5E  6A07               	clrf	(___lmul@multiplicand+2)^0,c
  8960   000A60  6A08               	clrf	(___lmul@multiplicand+3)^0,c
  8961   000A62  EC1D  F031         	call	___lmul	;wreg free
  8962   000A66  C001  F0AD         	movff	?___lmul,find_volume@fasize
  8963   000A6A  C002  F0AE         	movff	?___lmul+1,find_volume@fasize+1
  8964   000A6E  C003  F0AF         	movff	?___lmul+2,find_volume@fasize+2
  8965   000A72  C004  F0B0         	movff	?___lmul+3,find_volume@fasize+3
  8966   000A76                     
  8967                           ;ff.c: 2285:  fs->csize = fs->win[13];
  8968   000A76  0100               	movlb	0	; () banked
  8969   000A78  EE20 F03B          	lfsr	2,59
  8970   000A7C  51B8               	movf	find_volume@fs& (0+255),w,b
  8971   000A7E  26D9               	addwf	fsr2l,f,c
  8972   000A80  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8973   000A82  22DA               	addwfc	fsr2h,f,c
  8974   000A84  EE10 F002          	lfsr	1,2
  8975   000A88  51B8               	movf	find_volume@fs& (0+255),w,b
  8976   000A8A  26E1               	addwf	fsr1l,f,c
  8977   000A8C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8978   000A8E  22E2               	addwfc	fsr1h,f,c
  8979   000A90  CFDF FFE7          	movff	indf2,indf1
  8980   000A94                     
  8981                           ; BSR set to: 0
  8982                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  8983   000A94  EE20 F002          	lfsr	2,2
  8984   000A98  51B8               	movf	find_volume@fs& (0+255),w,b
  8985   000A9A  26D9               	addwf	fsr2l,f,c
  8986   000A9C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8987   000A9E  22DA               	addwfc	fsr2h,f,c
  8988   000AA0  50DF               	movf	indf2,w,c
  8989   000AA2  B4D8               	btfsc	status,2,c
  8990   000AA4  EF56  F005         	goto	u7911
  8991   000AA8  EF58  F005         	goto	u7910
  8992   000AAC                     u7911:
  8993   000AAC  EFA2  F004         	goto	l5787
  8994   000AB0                     u7910:
  8995   000AB0                     
  8996                           ; BSR set to: 0
  8997   000AB0  EE20 F002          	lfsr	2,2
  8998   000AB4  51B8               	movf	find_volume@fs& (0+255),w,b
  8999   000AB6  26D9               	addwf	fsr2l,f,c
  9000   000AB8  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9001   000ABA  22DA               	addwfc	fsr2h,f,c
  9002   000ABC  50DF               	movf	indf2,w,c
  9003   000ABE  6E48               	movwf	??_find_volume^0,c
  9004   000AC0  0EFF               	movlw	255
  9005   000AC2  2448               	addwf	??_find_volume^0,w,c
  9006   000AC4  6E49               	movwf	(??_find_volume+1)^0,c
  9007   000AC6  6A4A               	clrf	(??_find_volume+2)^0,c
  9008   000AC8  0EFF               	movlw	255
  9009   000ACA  224A               	addwfc	(??_find_volume+2)^0,f,c
  9010   000ACC  EE20 F002          	lfsr	2,2
  9011   000AD0  51B8               	movf	find_volume@fs& (0+255),w,b
  9012   000AD2  26D9               	addwf	fsr2l,f,c
  9013   000AD4  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9014   000AD6  22DA               	addwfc	fsr2h,f,c
  9015   000AD8  50DF               	movf	indf2,w,c
  9016   000ADA  6E4B               	movwf	(??_find_volume+3)^0,c
  9017   000ADC  504B               	movf	(??_find_volume+3)^0,w,c
  9018   000ADE  1649               	andwf	(??_find_volume+1)^0,f,c
  9019   000AE0  0E00               	movlw	0
  9020   000AE2  164A               	andwf	(??_find_volume+2)^0,f,c
  9021   000AE4  5049               	movf	(??_find_volume+1)^0,w,c
  9022   000AE6  104A               	iorwf	(??_find_volume+2)^0,w,c
  9023   000AE8  B4D8               	btfsc	status,2,c
  9024   000AEA  EF79  F005         	goto	u7921
  9025   000AEE  EF7B  F005         	goto	u7920
  9026   000AF2                     u7921:
  9027   000AF2  EF7D  F005         	goto	l5825
  9028   000AF6                     u7920:
  9029   000AF6  EFA2  F004         	goto	l5787
  9030   000AFA                     l5825:
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  9034   000AFA  EE20 F03F          	lfsr	2,63
  9035   000AFE  51B8               	movf	find_volume@fs& (0+255),w,b
  9036   000B00  26D9               	addwf	fsr2l,f,c
  9037   000B02  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9038   000B04  22DA               	addwfc	fsr2h,f,c
  9039   000B06  EE10 F008          	lfsr	1,8
  9040   000B0A  51B8               	movf	find_volume@fs& (0+255),w,b
  9041   000B0C  26E1               	addwf	fsr1l,f,c
  9042   000B0E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9043   000B10  22E2               	addwfc	fsr1h,f,c
  9044   000B12  CFDE FFE6          	movff	postinc2,postinc1
  9045   000B16  CFDD FFE5          	movff	postdec2,postdec1
  9046   000B1A                     
  9047                           ; BSR set to: 0
  9048                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  9049   000B1A  EE20 F008          	lfsr	2,8
  9050   000B1E  51B8               	movf	find_volume@fs& (0+255),w,b
  9051   000B20  26D9               	addwf	fsr2l,f,c
  9052   000B22  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9053   000B24  22DA               	addwfc	fsr2h,f,c
  9054   000B26  CFDE F048          	movff	postinc2,??_find_volume
  9055   000B2A  CFDD F049          	movff	postdec2,??_find_volume+1
  9056   000B2E  0E0F               	movlw	15
  9057   000B30  1648               	andwf	??_find_volume^0,f,c
  9058   000B32  0E00               	movlw	0
  9059   000B34  1649               	andwf	(??_find_volume+1)^0,f,c
  9060   000B36  5048               	movf	??_find_volume^0,w,c
  9061   000B38  1049               	iorwf	(??_find_volume+1)^0,w,c
  9062   000B3A  B4D8               	btfsc	status,2,c
  9063   000B3C  EFA2  F005         	goto	u7931
  9064   000B40  EFA4  F005         	goto	u7930
  9065   000B44                     u7931:
  9066   000B44  EFA6  F005         	goto	l5833
  9067   000B48                     u7930:
  9068   000B48  EFA2  F004         	goto	l5787
  9069   000B4C                     l5833:
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  9073   000B4C  EE20 F041          	lfsr	2,65
  9074   000B50  51B8               	movf	find_volume@fs& (0+255),w,b
  9075   000B52  26D9               	addwf	fsr2l,f,c
  9076   000B54  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9077   000B56  22DA               	addwfc	fsr2h,f,c
  9078   000B58  CFDE F048          	movff	postinc2,??_find_volume
  9079   000B5C  CFDD F049          	movff	postdec2,??_find_volume+1
  9080   000B60  C048  F0A4         	movff	??_find_volume,find_volume@tsect
  9081   000B64  C049  F0A5         	movff	??_find_volume+1,find_volume@tsect+1
  9082   000B68  6BA6               	clrf	(find_volume@tsect+2)& (0+255),b
  9083   000B6A  6BA7               	clrf	(find_volume@tsect+3)& (0+255),b
  9084   000B6C                     
  9085                           ; BSR set to: 0
  9086                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  9087   000B6C  51A4               	movf	find_volume@tsect& (0+255),w,b
  9088   000B6E  11A5               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  9089   000B70  11A6               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  9090   000B72  11A7               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  9091   000B74  A4D8               	btfss	status,2,c
  9092   000B76  EFBF  F005         	goto	u7941
  9093   000B7A  EFC1  F005         	goto	u7940
  9094   000B7E                     u7941:
  9095   000B7E  EFCF  F005         	goto	l618
  9096   000B82                     u7940:
  9097   000B82                     
  9098                           ; BSR set to: 0
  9099   000B82  EE20 F04E          	lfsr	2,78
  9100   000B86  51B8               	movf	find_volume@fs& (0+255),w,b
  9101   000B88  26D9               	addwf	fsr2l,f,c
  9102   000B8A  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9103   000B8C  22DA               	addwfc	fsr2h,f,c
  9104   000B8E  CFDE F0A4          	movff	postinc2,find_volume@tsect
  9105   000B92  CFDE F0A5          	movff	postinc2,find_volume@tsect+1
  9106   000B96  CFDE F0A6          	movff	postinc2,find_volume@tsect+2
  9107   000B9A  CFDE F0A7          	movff	postinc2,find_volume@tsect+3
  9108   000B9E                     l618:
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  9112   000B9E  EE20 F03C          	lfsr	2,60
  9113   000BA2  51B8               	movf	find_volume@fs& (0+255),w,b
  9114   000BA4  26D9               	addwf	fsr2l,f,c
  9115   000BA6  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9116   000BA8  22DA               	addwfc	fsr2h,f,c
  9117   000BAA  CFDE F0A2          	movff	postinc2,find_volume@nrsv
  9118   000BAE  CFDD F0A3          	movff	postdec2,find_volume@nrsv+1
  9119   000BB2                     
  9120                           ; BSR set to: 0
  9121                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  9122   000BB2  51A2               	movf	find_volume@nrsv& (0+255),w,b
  9123   000BB4  11A3               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  9124   000BB6  A4D8               	btfss	status,2,c
  9125   000BB8  EFE0  F005         	goto	u7951
  9126   000BBC  EFE2  F005         	goto	u7950
  9127   000BC0                     u7951:
  9128   000BC0  EFE4  F005         	goto	l5845
  9129   000BC4                     u7950:
  9130   000BC4  EFA2  F004         	goto	l5787
  9131   000BC8                     l5845:
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  9135   000BC8  EE20 F008          	lfsr	2,8
  9136   000BCC  51B8               	movf	find_volume@fs& (0+255),w,b
  9137   000BCE  26D9               	addwf	fsr2l,f,c
  9138   000BD0  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9139   000BD2  22DA               	addwfc	fsr2h,f,c
  9140   000BD4  CFDE F048          	movff	postinc2,??_find_volume
  9141   000BD8  CFDD F049          	movff	postdec2,??_find_volume+1
  9142   000BDC  0E04               	movlw	4
  9143   000BDE  6E4A               	movwf	(??_find_volume+2)^0,c
  9144   000BE0                     u7965:
  9145   000BE0  90D8               	bcf	status,0,c
  9146   000BE2  3249               	rrcf	(??_find_volume+1)^0,f,c
  9147   000BE4  3248               	rrcf	??_find_volume^0,f,c
  9148   000BE6  2E4A               	decfsz	(??_find_volume+2)^0,f,c
  9149   000BE8  EFF0  F005         	goto	u7965
  9150   000BEC  51A2               	movf	find_volume@nrsv& (0+255),w,b
  9151   000BEE  2448               	addwf	??_find_volume^0,w,c
  9152   000BF0  6E4B               	movwf	(??_find_volume+3)^0,c
  9153   000BF2  51A3               	movf	(find_volume@nrsv+1)& (0+255),w,b
  9154   000BF4  2049               	addwfc	(??_find_volume+1)^0,w,c
  9155   000BF6  6E4C               	movwf	(??_find_volume+4)^0,c
  9156   000BF8  6A4D               	clrf	(??_find_volume+5)^0,c
  9157   000BFA  B0D8               	btfsc	status,0,c
  9158   000BFC  2A4D               	incf	(??_find_volume+5)^0,f,c
  9159   000BFE  6A4E               	clrf	(??_find_volume+6)^0,c
  9160   000C00  51AD               	movf	find_volume@fasize& (0+255),w,b
  9161   000C02  244B               	addwf	(??_find_volume+3)^0,w,c
  9162   000C04  6F9C               	movwf	find_volume@sysect& (0+255),b
  9163   000C06  51AE               	movf	(find_volume@fasize+1)& (0+255),w,b
  9164   000C08  204C               	addwfc	(??_find_volume+4)^0,w,c
  9165   000C0A  6F9D               	movwf	(find_volume@sysect+1)& (0+255),b
  9166   000C0C  51AF               	movf	(find_volume@fasize+2)& (0+255),w,b
  9167   000C0E  204D               	addwfc	(??_find_volume+5)^0,w,c
  9168   000C10  6F9E               	movwf	(find_volume@sysect+2)& (0+255),b
  9169   000C12  51B0               	movf	(find_volume@fasize+3)& (0+255),w,b
  9170   000C14  204E               	addwfc	(??_find_volume+6)^0,w,c
  9171   000C16  6F9F               	movwf	(find_volume@sysect+3)& (0+255),b
  9172   000C18                     
  9173                           ; BSR set to: 0
  9174                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  9175   000C18  519C               	movf	find_volume@sysect& (0+255),w,b
  9176   000C1A  5DA4               	subwf	find_volume@tsect& (0+255),w,b
  9177   000C1C  519D               	movf	(find_volume@sysect+1)& (0+255),w,b
  9178   000C1E  59A5               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  9179   000C20  519E               	movf	(find_volume@sysect+2)& (0+255),w,b
  9180   000C22  59A6               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  9181   000C24  519F               	movf	(find_volume@sysect+3)& (0+255),w,b
  9182   000C26  59A7               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  9183   000C28  B0D8               	btfsc	status,0,c
  9184   000C2A  EF19  F006         	goto	u7971
  9185   000C2E  EF1B  F006         	goto	u7970
  9186   000C32                     u7971:
  9187   000C32  EF1D  F006         	goto	l5853
  9188   000C36                     u7970:
  9189   000C36  EFA2  F004         	goto	l5787
  9190   000C3A                     l5853:
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  9194   000C3A  519C               	movf	find_volume@sysect& (0+255),w,b
  9195   000C3C  5DA4               	subwf	find_volume@tsect& (0+255),w,b
  9196   000C3E  6E01               	movwf	___lldiv@dividend^0,c
  9197   000C40  519D               	movf	(find_volume@sysect+1)& (0+255),w,b
  9198   000C42  59A5               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  9199   000C44  6E02               	movwf	(___lldiv@dividend+1)^0,c
  9200   000C46  519E               	movf	(find_volume@sysect+2)& (0+255),w,b
  9201   000C48  59A6               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  9202   000C4A  6E03               	movwf	(___lldiv@dividend+2)^0,c
  9203   000C4C  519F               	movf	(find_volume@sysect+3)& (0+255),w,b
  9204   000C4E  59A7               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  9205   000C50  6E04               	movwf	(___lldiv@dividend+3)^0,c
  9206   000C52  EE20 F002          	lfsr	2,2
  9207   000C56  51B8               	movf	find_volume@fs& (0+255),w,b
  9208   000C58  26D9               	addwf	fsr2l,f,c
  9209   000C5A  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9210   000C5C  22DA               	addwfc	fsr2h,f,c
  9211   000C5E  50DF               	movf	indf2,w,c
  9212   000C60  6E48               	movwf	??_find_volume^0,c
  9213   000C62  5048               	movf	??_find_volume^0,w,c
  9214   000C64  6E05               	movwf	___lldiv@divisor^0,c
  9215   000C66  6A06               	clrf	(___lldiv@divisor+1)^0,c
  9216   000C68  6A07               	clrf	(___lldiv@divisor+2)^0,c
  9217   000C6A  6A08               	clrf	(___lldiv@divisor+3)^0,c
  9218   000C6C  EC6B  F02F         	call	___lldiv	;wreg free
  9219   000C70  C001  F0A8         	movff	?___lldiv,find_volume@nclst
  9220   000C74  C002  F0A9         	movff	?___lldiv+1,find_volume@nclst+1
  9221   000C78  C003  F0AA         	movff	?___lldiv+2,find_volume@nclst+2
  9222   000C7C  C004  F0AB         	movff	?___lldiv+3,find_volume@nclst+3
  9223   000C80                     
  9224                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  9225   000C80  0100               	movlb	0	; () banked
  9226   000C82  51A8               	movf	find_volume@nclst& (0+255),w,b
  9227   000C84  11A9               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  9228   000C86  11AA               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  9229   000C88  11AB               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  9230   000C8A  A4D8               	btfss	status,2,c
  9231   000C8C  EF4A  F006         	goto	u7981
  9232   000C90  EF4C  F006         	goto	u7980
  9233   000C94                     u7981:
  9234   000C94  EF4E  F006         	goto	l5861
  9235   000C98                     u7980:
  9236   000C98  EFA2  F004         	goto	l5787
  9237   000C9C                     l5861:
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;ff.c: 2304:  fmt = 1;
  9241   000C9C  0E01               	movlw	1
  9242   000C9E  6FB7               	movwf	find_volume@fmt& (0+255),b
  9243   000CA0                     
  9244                           ; BSR set to: 0
  9245                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  9246   000CA0  51AB               	movf	(find_volume@nclst+3)& (0+255),w,b
  9247   000CA2  11AA               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  9248   000CA4  E10B               	bnz	u7990
  9249   000CA6  0EF6               	movlw	246
  9250   000CA8  5DA8               	subwf	find_volume@nclst& (0+255),w,b
  9251   000CAA  0E0F               	movlw	15
  9252   000CAC  59A9               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  9253   000CAE  A0D8               	btfss	status,0,c
  9254   000CB0  EF5C  F006         	goto	u7991
  9255   000CB4  EF5E  F006         	goto	u7990
  9256   000CB8                     u7991:
  9257   000CB8  EF60  F006         	goto	l5867
  9258   000CBC                     u7990:
  9259   000CBC                     
  9260                           ; BSR set to: 0
  9261   000CBC  0E02               	movlw	2
  9262   000CBE  6FB7               	movwf	find_volume@fmt& (0+255),b
  9263   000CC0                     l5867:
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  9267   000CC0  51AB               	movf	(find_volume@nclst+3)& (0+255),w,b
  9268   000CC2  11AA               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  9269   000CC4  E10B               	bnz	u8000
  9270   000CC6  0EF6               	movlw	246
  9271   000CC8  5DA8               	subwf	find_volume@nclst& (0+255),w,b
  9272   000CCA  0EFF               	movlw	255
  9273   000CCC  59A9               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  9274   000CCE  A0D8               	btfss	status,0,c
  9275   000CD0  EF6C  F006         	goto	u8001
  9276   000CD4  EF6E  F006         	goto	u8000
  9277   000CD8                     u8001:
  9278   000CD8  EF70  F006         	goto	l5871
  9279   000CDC                     u8000:
  9280   000CDC                     
  9281                           ; BSR set to: 0
  9282   000CDC  0E03               	movlw	3
  9283   000CDE  6FB7               	movwf	find_volume@fmt& (0+255),b
  9284   000CE0                     l5871:
  9285                           
  9286                           ; BSR set to: 0
  9287                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  9288   000CE0  0E02               	movlw	2
  9289   000CE2  25A8               	addwf	find_volume@nclst& (0+255),w,b
  9290   000CE4  6E48               	movwf	??_find_volume^0,c
  9291   000CE6  0E00               	movlw	0
  9292   000CE8  21A9               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  9293   000CEA  6E49               	movwf	(??_find_volume+1)^0,c
  9294   000CEC  0E00               	movlw	0
  9295   000CEE  21AA               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  9296   000CF0  6E4A               	movwf	(??_find_volume+2)^0,c
  9297   000CF2  0E00               	movlw	0
  9298   000CF4  21AB               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  9299   000CF6  6E4B               	movwf	(??_find_volume+3)^0,c
  9300   000CF8  EE20 F012          	lfsr	2,18
  9301   000CFC  51B8               	movf	find_volume@fs& (0+255),w,b
  9302   000CFE  26D9               	addwf	fsr2l,f,c
  9303   000D00  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9304   000D02  22DA               	addwfc	fsr2h,f,c
  9305   000D04  C048  FFDE         	movff	??_find_volume,postinc2
  9306   000D08  C049  FFDE         	movff	??_find_volume+1,postinc2
  9307   000D0C  C04A  FFDE         	movff	??_find_volume+2,postinc2
  9308   000D10  C04B  FFDE         	movff	??_find_volume+3,postinc2
  9309   000D14                     
  9310                           ; BSR set to: 0
  9311                           ;ff.c: 2310:  fs->volbase = bsect;
  9312   000D14  EE20 F01A          	lfsr	2,26
  9313   000D18  51B8               	movf	find_volume@fs& (0+255),w,b
  9314   000D1A  26D9               	addwf	fsr2l,f,c
  9315   000D1C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9316   000D1E  22DA               	addwfc	fsr2h,f,c
  9317   000D20  C0B1  FFDE         	movff	find_volume@bsect,postinc2
  9318   000D24  C0B2  FFDE         	movff	find_volume@bsect+1,postinc2
  9319   000D28  C0B3  FFDE         	movff	find_volume@bsect+2,postinc2
  9320   000D2C  C0B4  FFDE         	movff	find_volume@bsect+3,postinc2
  9321   000D30                     
  9322                           ; BSR set to: 0
  9323                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  9324   000D30  51A2               	movf	find_volume@nrsv& (0+255),w,b
  9325   000D32  25B1               	addwf	find_volume@bsect& (0+255),w,b
  9326   000D34  6E48               	movwf	??_find_volume^0,c
  9327   000D36  51A3               	movf	(find_volume@nrsv+1)& (0+255),w,b
  9328   000D38  21B2               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  9329   000D3A  6E49               	movwf	(??_find_volume+1)^0,c
  9330   000D3C  0E00               	movlw	0
  9331   000D3E  21B3               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  9332   000D40  6E4A               	movwf	(??_find_volume+2)^0,c
  9333   000D42  0E00               	movlw	0
  9334   000D44  21B4               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  9335   000D46  6E4B               	movwf	(??_find_volume+3)^0,c
  9336   000D48  EE20 F01E          	lfsr	2,30
  9337   000D4C  51B8               	movf	find_volume@fs& (0+255),w,b
  9338   000D4E  26D9               	addwf	fsr2l,f,c
  9339   000D50  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9340   000D52  22DA               	addwfc	fsr2h,f,c
  9341   000D54  C048  FFDE         	movff	??_find_volume,postinc2
  9342   000D58  C049  FFDE         	movff	??_find_volume+1,postinc2
  9343   000D5C  C04A  FFDE         	movff	??_find_volume+2,postinc2
  9344   000D60  C04B  FFDE         	movff	??_find_volume+3,postinc2
  9345   000D64                     
  9346                           ; BSR set to: 0
  9347                           ;ff.c: 2312:  fs->database = bsect + sysect;
  9348   000D64  519C               	movf	find_volume@sysect& (0+255),w,b
  9349   000D66  25B1               	addwf	find_volume@bsect& (0+255),w,b
  9350   000D68  6E48               	movwf	??_find_volume^0,c
  9351   000D6A  519D               	movf	(find_volume@sysect+1)& (0+255),w,b
  9352   000D6C  21B2               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  9353   000D6E  6E49               	movwf	(??_find_volume+1)^0,c
  9354   000D70  519E               	movf	(find_volume@sysect+2)& (0+255),w,b
  9355   000D72  21B3               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  9356   000D74  6E4A               	movwf	(??_find_volume+2)^0,c
  9357   000D76  519F               	movf	(find_volume@sysect+3)& (0+255),w,b
  9358   000D78  21B4               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  9359   000D7A  6E4B               	movwf	(??_find_volume+3)^0,c
  9360   000D7C  EE20 F026          	lfsr	2,38
  9361   000D80  51B8               	movf	find_volume@fs& (0+255),w,b
  9362   000D82  26D9               	addwf	fsr2l,f,c
  9363   000D84  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9364   000D86  22DA               	addwfc	fsr2h,f,c
  9365   000D88  C048  FFDE         	movff	??_find_volume,postinc2
  9366   000D8C  C049  FFDE         	movff	??_find_volume+1,postinc2
  9367   000D90  C04A  FFDE         	movff	??_find_volume+2,postinc2
  9368   000D94  C04B  FFDE         	movff	??_find_volume+3,postinc2
  9369   000D98                     
  9370                           ; BSR set to: 0
  9371                           ;ff.c: 2313:  if (fmt == 3) {
  9372   000D98  0E03               	movlw	3
  9373   000D9A  19B7               	xorwf	find_volume@fmt& (0+255),w,b
  9374   000D9C  A4D8               	btfss	status,2,c
  9375   000D9E  EFD3  F006         	goto	u8011
  9376   000DA2  EFD5  F006         	goto	u8010
  9377   000DA6                     u8011:
  9378   000DA6  EF1B  F007         	goto	l5891
  9379   000DAA                     u8010:
  9380   000DAA                     
  9381                           ; BSR set to: 0
  9382                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  9383   000DAA  EE20 F008          	lfsr	2,8
  9384   000DAE  51B8               	movf	find_volume@fs& (0+255),w,b
  9385   000DB0  26D9               	addwf	fsr2l,f,c
  9386   000DB2  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9387   000DB4  22DA               	addwfc	fsr2h,f,c
  9388   000DB6  50DE               	movf	postinc2,w,c
  9389   000DB8  10DE               	iorwf	postinc2,w,c
  9390   000DBA  B4D8               	btfsc	status,2,c
  9391   000DBC  EFE2  F006         	goto	u8021
  9392   000DC0  EFE4  F006         	goto	u8020
  9393   000DC4                     u8021:
  9394   000DC4  EFE6  F006         	goto	l5887
  9395   000DC8                     u8020:
  9396   000DC8  EFA2  F004         	goto	l5787
  9397   000DCC                     l5887:
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  9401   000DCC  EE20 F05A          	lfsr	2,90
  9402   000DD0  51B8               	movf	find_volume@fs& (0+255),w,b
  9403   000DD2  26D9               	addwf	fsr2l,f,c
  9404   000DD4  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9405   000DD6  22DA               	addwfc	fsr2h,f,c
  9406   000DD8  EE10 F022          	lfsr	1,34
  9407   000DDC  51B8               	movf	find_volume@fs& (0+255),w,b
  9408   000DDE  26E1               	addwf	fsr1l,f,c
  9409   000DE0  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9410   000DE2  22E2               	addwfc	fsr1h,f,c
  9411   000DE4  CFDE FFE6          	movff	postinc2,postinc1
  9412   000DE8  CFDE FFE6          	movff	postinc2,postinc1
  9413   000DEC  CFDE FFE6          	movff	postinc2,postinc1
  9414   000DF0  CFDE FFE6          	movff	postinc2,postinc1
  9415   000DF4                     
  9416                           ; BSR set to: 0
  9417                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  9418   000DF4  EE20 F012          	lfsr	2,18
  9419   000DF8  51B8               	movf	find_volume@fs& (0+255),w,b
  9420   000DFA  26D9               	addwf	fsr2l,f,c
  9421   000DFC  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9422   000DFE  22DA               	addwfc	fsr2h,f,c
  9423   000E00  CFDE F048          	movff	postinc2,??_find_volume
  9424   000E04  CFDE F049          	movff	postinc2,??_find_volume+1
  9425   000E08  CFDE F04A          	movff	postinc2,??_find_volume+2
  9426   000E0C  CFDE F04B          	movff	postinc2,??_find_volume+3
  9427   000E10  0E02               	movlw	2
  9428   000E12                     u8035:
  9429   000E12  90D8               	bcf	status,0,c
  9430   000E14  3648               	rlcf	??_find_volume^0,f,c
  9431   000E16  3649               	rlcf	(??_find_volume+1)^0,f,c
  9432   000E18  364A               	rlcf	(??_find_volume+2)^0,f,c
  9433   000E1A  364B               	rlcf	(??_find_volume+3)^0,f,c
  9434   000E1C  2EE8               	decfsz	wreg,f,c
  9435   000E1E  EF09  F007         	goto	u8035
  9436   000E22  C048  F096         	movff	??_find_volume,find_volume@szbfat
  9437   000E26  C049  F097         	movff	??_find_volume+1,find_volume@szbfat+1
  9438   000E2A  C04A  F098         	movff	??_find_volume+2,find_volume@szbfat+2
  9439   000E2E  C04B  F099         	movff	??_find_volume+3,find_volume@szbfat+3
  9440                           
  9441                           ;ff.c: 2317:  } else {
  9442   000E32  EFBA  F007         	goto	l626
  9443   000E36                     l5891:
  9444                           
  9445                           ; BSR set to: 0
  9446                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  9447   000E36  EE20 F008          	lfsr	2,8
  9448   000E3A  51B8               	movf	find_volume@fs& (0+255),w,b
  9449   000E3C  26D9               	addwf	fsr2l,f,c
  9450   000E3E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9451   000E40  22DA               	addwfc	fsr2h,f,c
  9452   000E42  50DE               	movf	postinc2,w,c
  9453   000E44  10DE               	iorwf	postinc2,w,c
  9454   000E46  A4D8               	btfss	status,2,c
  9455   000E48  EF28  F007         	goto	u8041
  9456   000E4C  EF2A  F007         	goto	u8040
  9457   000E50                     u8041:
  9458   000E50  EF2C  F007         	goto	l5897
  9459   000E54                     u8040:
  9460   000E54  EFA2  F004         	goto	l5787
  9461   000E58                     l5897:
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  9465   000E58  EE20 F01E          	lfsr	2,30
  9466   000E5C  51B8               	movf	find_volume@fs& (0+255),w,b
  9467   000E5E  26D9               	addwf	fsr2l,f,c
  9468   000E60  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9469   000E62  22DA               	addwfc	fsr2h,f,c
  9470   000E64  CFDE F048          	movff	postinc2,??_find_volume
  9471   000E68  CFDE F049          	movff	postinc2,??_find_volume+1
  9472   000E6C  CFDE F04A          	movff	postinc2,??_find_volume+2
  9473   000E70  CFDE F04B          	movff	postinc2,??_find_volume+3
  9474   000E74  51AD               	movf	find_volume@fasize& (0+255),w,b
  9475   000E76  2448               	addwf	??_find_volume^0,w,c
  9476   000E78  6E4C               	movwf	(??_find_volume+4)^0,c
  9477   000E7A  51AE               	movf	(find_volume@fasize+1)& (0+255),w,b
  9478   000E7C  2049               	addwfc	(??_find_volume+1)^0,w,c
  9479   000E7E  6E4D               	movwf	(??_find_volume+5)^0,c
  9480   000E80  51AF               	movf	(find_volume@fasize+2)& (0+255),w,b
  9481   000E82  204A               	addwfc	(??_find_volume+2)^0,w,c
  9482   000E84  6E4E               	movwf	(??_find_volume+6)^0,c
  9483   000E86  51B0               	movf	(find_volume@fasize+3)& (0+255),w,b
  9484   000E88  204B               	addwfc	(??_find_volume+3)^0,w,c
  9485   000E8A  6E4F               	movwf	(??_find_volume+7)^0,c
  9486   000E8C  EE20 F022          	lfsr	2,34
  9487   000E90  51B8               	movf	find_volume@fs& (0+255),w,b
  9488   000E92  26D9               	addwf	fsr2l,f,c
  9489   000E94  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9490   000E96  22DA               	addwfc	fsr2h,f,c
  9491   000E98  C04C  FFDE         	movff	??_find_volume+4,postinc2
  9492   000E9C  C04D  FFDE         	movff	??_find_volume+5,postinc2
  9493   000EA0  C04E  FFDE         	movff	??_find_volume+6,postinc2
  9494   000EA4  C04F  FFDE         	movff	??_find_volume+7,postinc2
  9495   000EA8                     
  9496                           ; BSR set to: 0
  9497                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  9498   000EA8  0E02               	movlw	2
  9499   000EAA  19B7               	xorwf	find_volume@fmt& (0+255),w,b
  9500   000EAC  B4D8               	btfsc	status,2,c
  9501   000EAE  EF5B  F007         	goto	u8051
  9502   000EB2  EF5D  F007         	goto	u8050
  9503   000EB6                     u8051:
  9504   000EB6  EFA3  F007         	goto	l5903
  9505   000EBA                     u8050:
  9506   000EBA                     
  9507                           ; BSR set to: 0
  9508   000EBA  EE20 F012          	lfsr	2,18
  9509   000EBE  51B8               	movf	find_volume@fs& (0+255),w,b
  9510   000EC0  26D9               	addwf	fsr2l,f,c
  9511   000EC2  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9512   000EC4  22DA               	addwfc	fsr2h,f,c
  9513   000EC6  CFDE F048          	movff	postinc2,??_find_volume
  9514   000ECA  CFDE F049          	movff	postinc2,??_find_volume+1
  9515   000ECE  CFDE F04A          	movff	postinc2,??_find_volume+2
  9516   000ED2  CFDE F04B          	movff	postinc2,??_find_volume+3
  9517   000ED6  0E01               	movlw	1
  9518   000ED8  1448               	andwf	??_find_volume^0,w,c
  9519   000EDA  6E4C               	movwf	(??_find_volume+4)^0,c
  9520   000EDC  0E00               	movlw	0
  9521   000EDE  1449               	andwf	(??_find_volume+1)^0,w,c
  9522   000EE0  6E4D               	movwf	(??_find_volume+5)^0,c
  9523   000EE2  0E00               	movlw	0
  9524   000EE4  144A               	andwf	(??_find_volume+2)^0,w,c
  9525   000EE6  6E4E               	movwf	(??_find_volume+6)^0,c
  9526   000EE8  0E00               	movlw	0
  9527   000EEA  144B               	andwf	(??_find_volume+3)^0,w,c
  9528   000EEC  6E4F               	movwf	(??_find_volume+7)^0,c
  9529   000EEE  EE20 F012          	lfsr	2,18
  9530   000EF2  51B8               	movf	find_volume@fs& (0+255),w,b
  9531   000EF4  26D9               	addwf	fsr2l,f,c
  9532   000EF6  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9533   000EF8  22DA               	addwfc	fsr2h,f,c
  9534   000EFA  CFDE F001          	movff	postinc2,___lmul@multiplier
  9535   000EFE  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  9536   000F02  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  9537   000F06  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  9538   000F0A  0E03               	movlw	3
  9539   000F0C  6E05               	movwf	___lmul@multiplicand^0,c
  9540   000F0E  0E00               	movlw	0
  9541   000F10  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  9542   000F12  0E00               	movlw	0
  9543   000F14  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  9544   000F16  0E00               	movlw	0
  9545   000F18  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  9546   000F1A  EC1D  F031         	call	___lmul	;wreg free
  9547   000F1E  90D8               	bcf	status,0,c
  9548   000F20  3204               	rrcf	(?___lmul+3)^0,f,c
  9549   000F22  3203               	rrcf	(?___lmul+2)^0,f,c
  9550   000F24  3202               	rrcf	(?___lmul+1)^0,f,c
  9551   000F26  3201               	rrcf	?___lmul^0,f,c
  9552   000F28  504C               	movf	(??_find_volume+4)^0,w,c
  9553   000F2A  2401               	addwf	?___lmul^0,w,c
  9554   000F2C  0100               	movlb	0	; () banked
  9555   000F2E  6F96               	movwf	find_volume@szbfat& (0+255),b
  9556   000F30  504D               	movf	(??_find_volume+5)^0,w,c
  9557   000F32  2002               	addwfc	(?___lmul+1)^0,w,c
  9558   000F34  6F97               	movwf	(find_volume@szbfat+1)& (0+255),b
  9559   000F36  504E               	movf	(??_find_volume+6)^0,w,c
  9560   000F38  2003               	addwfc	(?___lmul+2)^0,w,c
  9561   000F3A  6F98               	movwf	(find_volume@szbfat+2)& (0+255),b
  9562   000F3C  504F               	movf	(??_find_volume+7)^0,w,c
  9563   000F3E  2004               	addwfc	(?___lmul+3)^0,w,c
  9564   000F40  6F99               	movwf	(find_volume@szbfat+3)& (0+255),b
  9565   000F42  EFBA  F007         	goto	l626
  9566   000F46                     l5903:
  9567                           
  9568                           ; BSR set to: 0
  9569   000F46  EE20 F012          	lfsr	2,18
  9570   000F4A  51B8               	movf	find_volume@fs& (0+255),w,b
  9571   000F4C  26D9               	addwf	fsr2l,f,c
  9572   000F4E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9573   000F50  22DA               	addwfc	fsr2h,f,c
  9574   000F52  CFDE F048          	movff	postinc2,??_find_volume
  9575   000F56  CFDE F049          	movff	postinc2,??_find_volume+1
  9576   000F5A  CFDE F04A          	movff	postinc2,??_find_volume+2
  9577   000F5E  CFDE F04B          	movff	postinc2,??_find_volume+3
  9578   000F62  90D8               	bcf	status,0,c
  9579   000F64  3448               	rlcf	??_find_volume^0,w,c
  9580   000F66  6F96               	movwf	find_volume@szbfat& (0+255),b
  9581   000F68  3449               	rlcf	(??_find_volume+1)^0,w,c
  9582   000F6A  6F97               	movwf	(find_volume@szbfat+1)& (0+255),b
  9583   000F6C  344A               	rlcf	(??_find_volume+2)^0,w,c
  9584   000F6E  6F98               	movwf	(find_volume@szbfat+2)& (0+255),b
  9585   000F70  344B               	rlcf	(??_find_volume+3)^0,w,c
  9586   000F72  6F99               	movwf	(find_volume@szbfat+3)& (0+255),b
  9587   000F74                     l626:
  9588                           
  9589                           ; BSR set to: 0
  9590                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  9591   000F74  0EFF               	movlw	255
  9592   000F76  2596               	addwf	find_volume@szbfat& (0+255),w,b
  9593   000F78  6E48               	movwf	??_find_volume^0,c
  9594   000F7A  0E01               	movlw	1
  9595   000F7C  2197               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  9596   000F7E  6E49               	movwf	(??_find_volume+1)^0,c
  9597   000F80  0E00               	movlw	0
  9598   000F82  2198               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  9599   000F84  6E4A               	movwf	(??_find_volume+2)^0,c
  9600   000F86  0E00               	movlw	0
  9601   000F88  2199               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  9602   000F8A  6E4B               	movwf	(??_find_volume+3)^0,c
  9603   000F8C  0E0A               	movlw	10
  9604   000F8E  EFCE  F007         	goto	u8060
  9605   000F92                     u8065:
  9606   000F92  90D8               	bcf	status,0,c
  9607   000F94  324B               	rrcf	(??_find_volume+3)^0,f,c
  9608   000F96  324A               	rrcf	(??_find_volume+2)^0,f,c
  9609   000F98  3249               	rrcf	(??_find_volume+1)^0,f,c
  9610   000F9A  3248               	rrcf	??_find_volume^0,f,c
  9611   000F9C                     u8060:
  9612   000F9C  2EE8               	decfsz	wreg,f,c
  9613   000F9E  EFC9  F007         	goto	u8065
  9614   000FA2  EE20 F016          	lfsr	2,22
  9615   000FA6  51B8               	movf	find_volume@fs& (0+255),w,b
  9616   000FA8  26D9               	addwf	fsr2l,f,c
  9617   000FAA  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9618   000FAC  22DA               	addwfc	fsr2h,f,c
  9619   000FAE  5048               	movf	??_find_volume^0,w,c
  9620   000FB0  5CDE               	subwf	postinc2,w,c
  9621   000FB2  5049               	movf	(??_find_volume+1)^0,w,c
  9622   000FB4  58DE               	subwfb	postinc2,w,c
  9623   000FB6  504A               	movf	(??_find_volume+2)^0,w,c
  9624   000FB8  58DE               	subwfb	postinc2,w,c
  9625   000FBA  504B               	movf	(??_find_volume+3)^0,w,c
  9626   000FBC  58DE               	subwfb	postinc2,w,c
  9627   000FBE  B0D8               	btfsc	status,0,c
  9628   000FC0  EFE4  F007         	goto	u8071
  9629   000FC4  EFE6  F007         	goto	u8070
  9630   000FC8                     u8071:
  9631   000FC8  EFE8  F007         	goto	l5909
  9632   000FCC                     u8070:
  9633   000FCC  EFA2  F004         	goto	l5787
  9634   000FD0                     l5909:
  9635                           
  9636                           ; BSR set to: 0
  9637                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  9638   000FD0  EE20 F00E          	lfsr	2,14
  9639   000FD4  51B8               	movf	find_volume@fs& (0+255),w,b
  9640   000FD6  26D9               	addwf	fsr2l,f,c
  9641   000FD8  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9642   000FDA  22DA               	addwfc	fsr2h,f,c
  9643   000FDC  0EFF               	movlw	255
  9644   000FDE  6EDE               	movwf	postinc2,c
  9645   000FE0  0EFF               	movlw	255
  9646   000FE2  6EDE               	movwf	postinc2,c
  9647   000FE4  0EFF               	movlw	255
  9648   000FE6  6EDE               	movwf	postinc2,c
  9649   000FE8  0EFF               	movlw	255
  9650   000FEA  6EDD               	movwf	postdec2,c
  9651   000FEC  52DD               	movf	postdec2,f,c
  9652   000FEE  52DD               	movf	postdec2,f,c
  9653   000FF0  EE10 F00A          	lfsr	1,10
  9654   000FF4  51B8               	movf	find_volume@fs& (0+255),w,b
  9655   000FF6  26E1               	addwf	fsr1l,f,c
  9656   000FF8  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9657   000FFA  22E2               	addwfc	fsr1h,f,c
  9658   000FFC  CFDE FFE6          	movff	postinc2,postinc1
  9659   001000  CFDE FFE6          	movff	postinc2,postinc1
  9660   001004  CFDE FFE6          	movff	postinc2,postinc1
  9661   001008  CFDE FFE6          	movff	postinc2,postinc1
  9662   00100C                     
  9663                           ; BSR set to: 0
  9664                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  9665   00100C  EE20 F005          	lfsr	2,5
  9666   001010  51B8               	movf	find_volume@fs& (0+255),w,b
  9667   001012  26D9               	addwf	fsr2l,f,c
  9668   001014  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9669   001016  22DA               	addwfc	fsr2h,f,c
  9670   001018  0E80               	movlw	128
  9671   00101A  6EDF               	movwf	indf2,c
  9672   00101C                     
  9673                           ; BSR set to: 0
  9674                           ;ff.c: 2333:  if (fmt == 3
  9675   00101C  0E03               	movlw	3
  9676   00101E  19B7               	xorwf	find_volume@fmt& (0+255),w,b
  9677   001020  A4D8               	btfss	status,2,c
  9678   001022  EF15  F008         	goto	u8081
  9679   001026  EF17  F008         	goto	u8080
  9680   00102A                     u8081:
  9681   00102A  EFB2  F008         	goto	l5927
  9682   00102E                     u8080:
  9683   00102E                     
  9684                           ; BSR set to: 0
  9685   00102E  EE20 F05E          	lfsr	2,94
  9686   001032  51B8               	movf	find_volume@fs& (0+255),w,b
  9687   001034  26D9               	addwf	fsr2l,f,c
  9688   001036  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9689   001038  22DA               	addwfc	fsr2h,f,c
  9690   00103A  04DE               	decf	postinc2,w,c
  9691   00103C  10DE               	iorwf	postinc2,w,c
  9692   00103E  A4D8               	btfss	status,2,c
  9693   001040  EF24  F008         	goto	u8091
  9694   001044  EF26  F008         	goto	u8090
  9695   001048                     u8091:
  9696   001048  EFB2  F008         	goto	l5927
  9697   00104C                     u8090:
  9698   00104C                     
  9699                           ; BSR set to: 0
  9700   00104C  C0B8  F030         	movff	find_volume@fs,move_window@fs
  9701   001050  C0B9  F031         	movff	find_volume@fs+1,move_window@fs+1
  9702   001054  0E01               	movlw	1
  9703   001056  25B1               	addwf	find_volume@bsect& (0+255),w,b
  9704   001058  6E32               	movwf	move_window@sector^0,c
  9705   00105A  0E00               	movlw	0
  9706   00105C  21B2               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  9707   00105E  6E33               	movwf	(move_window@sector+1)^0,c
  9708   001060  0E00               	movlw	0
  9709   001062  21B3               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  9710   001064  6E34               	movwf	(move_window@sector+2)^0,c
  9711   001066  0E00               	movlw	0
  9712   001068  21B4               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  9713   00106A  6E35               	movwf	(move_window@sector+3)^0,c
  9714   00106C  ECF5  F02D         	call	_move_window	;wreg free
  9715   001070  0900               	iorlw	0
  9716   001072  A4D8               	btfss	status,2,c
  9717   001074  EF3E  F008         	goto	u8101
  9718   001078  EF40  F008         	goto	u8100
  9719   00107C                     u8101:
  9720   00107C  EFB2  F008         	goto	l5927
  9721   001080                     u8100:
  9722   001080                     
  9723                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  9724   001080  0100               	movlb	0	; () banked
  9725   001082  EE20 F005          	lfsr	2,5
  9726   001086  51B8               	movf	find_volume@fs& (0+255),w,b
  9727   001088  26D9               	addwf	fsr2l,f,c
  9728   00108A  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9729   00108C  22DA               	addwfc	fsr2h,f,c
  9730   00108E  6ADF               	clrf	indf2,c
  9731                           
  9732                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  9733   001090  EE22 F02C          	lfsr	2,556
  9734   001094  51B8               	movf	find_volume@fs& (0+255),w,b
  9735   001096  26D9               	addwf	fsr2l,f,c
  9736   001098  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9737   00109A  22DA               	addwfc	fsr2h,f,c
  9738   00109C  0E55               	movlw	85
  9739   00109E  18DE               	xorwf	postinc2,w,c
  9740   0010A0  E107               	bnz	u8111
  9741   0010A2  0EAA               	movlw	170
  9742   0010A4  18DE               	xorwf	postinc2,w,c
  9743   0010A6  A4D8               	btfss	status,2,c
  9744   0010A8  EF58  F008         	goto	u8111
  9745   0010AC  EF5A  F008         	goto	u8110
  9746   0010B0                     u8111:
  9747   0010B0  EFB2  F008         	goto	l5927
  9748   0010B4                     u8110:
  9749   0010B4                     
  9750                           ; BSR set to: 0
  9751   0010B4  EE20 F02E          	lfsr	2,46
  9752   0010B8  51B8               	movf	find_volume@fs& (0+255),w,b
  9753   0010BA  26D9               	addwf	fsr2l,f,c
  9754   0010BC  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9755   0010BE  22DA               	addwfc	fsr2h,f,c
  9756   0010C0  0E52               	movlw	82
  9757   0010C2  18DE               	xorwf	postinc2,w,c
  9758   0010C4  E10D               	bnz	u8121
  9759   0010C6  0E52               	movlw	82
  9760   0010C8  18DE               	xorwf	postinc2,w,c
  9761   0010CA  E10A               	bnz	u8121
  9762   0010CC  0E61               	movlw	97
  9763   0010CE  18DE               	xorwf	postinc2,w,c
  9764   0010D0  E107               	bnz	u8121
  9765   0010D2  0E41               	movlw	65
  9766   0010D4  18DE               	xorwf	postinc2,w,c
  9767   0010D6  A4D8               	btfss	status,2,c
  9768   0010D8  EF70  F008         	goto	u8121
  9769   0010DC  EF72  F008         	goto	u8120
  9770   0010E0                     u8121:
  9771   0010E0  EFB2  F008         	goto	l5927
  9772   0010E4                     u8120:
  9773   0010E4                     
  9774                           ; BSR set to: 0
  9775   0010E4  EE22 F012          	lfsr	2,530
  9776   0010E8  51B8               	movf	find_volume@fs& (0+255),w,b
  9777   0010EA  26D9               	addwf	fsr2l,f,c
  9778   0010EC  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9779   0010EE  22DA               	addwfc	fsr2h,f,c
  9780   0010F0  0E72               	movlw	114
  9781   0010F2  18DE               	xorwf	postinc2,w,c
  9782   0010F4  E10D               	bnz	u8131
  9783   0010F6  0E72               	movlw	114
  9784   0010F8  18DE               	xorwf	postinc2,w,c
  9785   0010FA  E10A               	bnz	u8131
  9786   0010FC  0E41               	movlw	65
  9787   0010FE  18DE               	xorwf	postinc2,w,c
  9788   001100  E107               	bnz	u8131
  9789   001102  0E61               	movlw	97
  9790   001104  18DE               	xorwf	postinc2,w,c
  9791   001106  A4D8               	btfss	status,2,c
  9792   001108  EF88  F008         	goto	u8131
  9793   00110C  EF8A  F008         	goto	u8130
  9794   001110                     u8131:
  9795   001110  EFB2  F008         	goto	l5927
  9796   001114                     u8130:
  9797   001114                     
  9798                           ; BSR set to: 0
  9799                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  9800   001114  EE22 F016          	lfsr	2,534
  9801   001118  51B8               	movf	find_volume@fs& (0+255),w,b
  9802   00111A  26D9               	addwf	fsr2l,f,c
  9803   00111C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9804   00111E  22DA               	addwfc	fsr2h,f,c
  9805   001120  EE10 F00E          	lfsr	1,14
  9806   001124  51B8               	movf	find_volume@fs& (0+255),w,b
  9807   001126  26E1               	addwf	fsr1l,f,c
  9808   001128  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9809   00112A  22E2               	addwfc	fsr1h,f,c
  9810   00112C  CFDE FFE6          	movff	postinc2,postinc1
  9811   001130  CFDE FFE6          	movff	postinc2,postinc1
  9812   001134  CFDE FFE6          	movff	postinc2,postinc1
  9813   001138  CFDE FFE6          	movff	postinc2,postinc1
  9814                           
  9815                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  9816   00113C  EE22 F01A          	lfsr	2,538
  9817   001140  51B8               	movf	find_volume@fs& (0+255),w,b
  9818   001142  26D9               	addwf	fsr2l,f,c
  9819   001144  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9820   001146  22DA               	addwfc	fsr2h,f,c
  9821   001148  EE10 F00A          	lfsr	1,10
  9822   00114C  51B8               	movf	find_volume@fs& (0+255),w,b
  9823   00114E  26E1               	addwf	fsr1l,f,c
  9824   001150  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9825   001152  22E2               	addwfc	fsr1h,f,c
  9826   001154  CFDE FFE6          	movff	postinc2,postinc1
  9827   001158  CFDE FFE6          	movff	postinc2,postinc1
  9828   00115C  CFDE FFE6          	movff	postinc2,postinc1
  9829   001160  CFDE FFE6          	movff	postinc2,postinc1
  9830   001164                     l5927:
  9831                           
  9832                           ;ff.c: 2352:  fs->fs_type = fmt;
  9833   001164  C0B8  FFD9         	movff	find_volume@fs,fsr2l
  9834   001168  C0B9  FFDA         	movff	find_volume@fs+1,fsr2h
  9835   00116C  C0B7  FFDF         	movff	find_volume@fmt,indf2
  9836   001170                     
  9837                           ;ff.c: 2353:  fs->id = ++Fsid;
  9838   001170  0100               	movlb	0	; () banked
  9839   001172  4BF4               	infsnz	_Fsid& (0+255),f,b
  9840   001174  2BF5               	incf	(_Fsid+1)& (0+255),f,b
  9841   001176  EE20 F006          	lfsr	2,6
  9842   00117A  51B8               	movf	find_volume@fs& (0+255),w,b
  9843   00117C  26D9               	addwf	fsr2l,f,c
  9844   00117E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  9845   001180  22DA               	addwfc	fsr2h,f,c
  9846   001182  C0F4  FFDE         	movff	_Fsid,postinc2
  9847   001186  C0F5  FFDD         	movff	_Fsid+1,postdec2
  9848   00118A  EF7B  F003         	goto	l5705
  9849   00118E                     l584:
  9850                           
  9851                           ; BSR set to: 0
  9852   00118E  0012               	return		;funcret
  9853   001190                     __end_of_find_volume:
  9854                           	callstack 0
  9855                           
  9856 ;; *************** function _get_ldnumber *****************
  9857 ;; Defined at:
  9858 ;;		line 2114 in file "ff.c"
  9859 ;; Parameters:    Size  Location     Type
  9860 ;;  path            1    0[COMRAM] PTR PTR const unsigned c
  9861 ;;		 -> f_open@path(1), f_mount@path(1), f_mount@rp(1), 
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;  i               2    6[COMRAM] unsigned short 
  9864 ;;  vol             2    3[COMRAM] int 
  9865 ;;  tt              1    8[COMRAM] PTR const unsigned char 
  9866 ;;		 -> STR_4(10), STR_3(1), 
  9867 ;;  tp              1    5[COMRAM] PTR const unsigned char 
  9868 ;;		 -> STR_4(10), STR_3(1), 
  9869 ;; Return value:  Size  Location     Type
  9870 ;;                  2    0[COMRAM] int 
  9871 ;; Registers used:
  9872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9878 ;;      Params:         2       0       0       0       0       0       0
  9879 ;;      Locals:         6       0       0       0       0       0       0
  9880 ;;      Temps:          1       0       0       0       0       0       0
  9881 ;;      Totals:         9       0       0       0       0       0       0
  9882 ;;Total ram usage:        9 bytes
  9883 ;; Hardware stack levels used: 1
  9884 ;; This function calls:
  9885 ;;		Nothing
  9886 ;; This function is called by:
  9887 ;;		_find_volume
  9888 ;;		_f_mount
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           	psect	text26
  9893   0056EE                     __ptext26:
  9894                           	callstack 0
  9895   0056EE                     _get_ldnumber:
  9896                           	callstack 28
  9897   0056EE                     
  9898                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  9899   0056EE  6804               	setf	get_ldnumber@vol^0,c
  9900   0056F0  6805               	setf	(get_ldnumber@vol+1)^0,c
  9901   0056F2                     
  9902                           ;ff.c: 2129:  if (*path) {
  9903   0056F2  5001               	movf	get_ldnumber@path^0,w,c
  9904   0056F4  6ED9               	movwf	fsr2l,c
  9905   0056F6  6ADA               	clrf	fsr2h,c
  9906   0056F8  50DF               	movf	indf2,w,c
  9907   0056FA  B4D8               	btfsc	status,2,c
  9908   0056FC  EF82  F02B         	goto	u7211
  9909   005700  EF84  F02B         	goto	u7210
  9910   005704                     u7211:
  9911   005704  EFEF  F02B         	goto	l5429
  9912   005708                     u7210:
  9913   005708                     
  9914                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  9915   005708  5001               	movf	get_ldnumber@path^0,w,c
  9916   00570A  6ED9               	movwf	fsr2l,c
  9917   00570C  6ADA               	clrf	fsr2h,c
  9918   00570E  50DF               	movf	indf2,w,c
  9919   005710  6E09               	movwf	get_ldnumber@tt^0,c
  9920   005712  EF8C  F02B         	goto	l5403
  9921   005716                     l5401:
  9922   005716  2A09               	incf	get_ldnumber@tt^0,f,c
  9923   005718                     l5403:
  9924   005718  C009  FFF6         	movff	get_ldnumber@tt,tblptrl
  9925   00571C                     	if	1	;There is more than 1 active tblptr byte
  9926   00571C  0E06               	movlw	high __smallconst
  9927   00571E  6EF7               	movwf	tblptrh,c
  9928   005720                     	endif
  9929   005720                     	if	0	;tblptru may be non-zero
  9930   005720                     	endif
  9931   005720                     	if	0	;tblptru may be non-zero
  9932   005720                     	endif
  9933   005720  0E20               	movlw	32
  9934   005722  0008               	tblrd		*
  9935   005724  64F5               	cpfsgt	tablat,c
  9936   005726  EF97  F02B         	goto	u7221
  9937   00572A  EF99  F02B         	goto	u7220
  9938   00572E                     u7221:
  9939   00572E  EFA7  F02B         	goto	l5411
  9940   005732                     u7220:
  9941   005732  C009  FFF6         	movff	get_ldnumber@tt,tblptrl
  9942   005736                     	if	1	;There is more than 1 active tblptr byte
  9943   005736  0E06               	movlw	high __smallconst
  9944   005738  6EF7               	movwf	tblptrh,c
  9945   00573A                     	endif
  9946   00573A                     	if	0	;tblptru may be non-zero
  9947   00573A                     	endif
  9948   00573A                     	if	0	;tblptru may be non-zero
  9949   00573A                     	endif
  9950   00573A  0008               	tblrd		*
  9951   00573C  50F5               	movf	tablat,w,c
  9952   00573E  0A3A               	xorlw	58
  9953   005740  A4D8               	btfss	status,2,c
  9954   005742  EFA5  F02B         	goto	u7231
  9955   005746  EFA7  F02B         	goto	u7230
  9956   00574A                     u7231:
  9957   00574A  EF8B  F02B         	goto	l5401
  9958   00574E                     u7230:
  9959   00574E                     l5411:
  9960                           
  9961                           ;ff.c: 2131:   if (*tt == ':') {
  9962   00574E  C009  FFF6         	movff	get_ldnumber@tt,tblptrl
  9963   005752                     	if	1	;There is more than 1 active tblptr byte
  9964   005752  0E06               	movlw	high __smallconst
  9965   005754  6EF7               	movwf	tblptrh,c
  9966   005756                     	endif
  9967   005756                     	if	0	;tblptru may be non-zero
  9968   005756                     	endif
  9969   005756                     	if	0	;tblptru may be non-zero
  9970   005756                     	endif
  9971   005756  0008               	tblrd		*
  9972   005758  50F5               	movf	tablat,w,c
  9973   00575A  0A3A               	xorlw	58
  9974   00575C  A4D8               	btfss	status,2,c
  9975   00575E  EFB3  F02B         	goto	u7241
  9976   005762  EFB5  F02B         	goto	u7240
  9977   005766                     u7241:
  9978   005766  EFF5  F02B         	goto	l5433
  9979   00576A                     u7240:
  9980   00576A                     
  9981                           ;ff.c: 2132:    tp = *path;
  9982   00576A  5001               	movf	get_ldnumber@path^0,w,c
  9983   00576C  6ED9               	movwf	fsr2l,c
  9984   00576E  6ADA               	clrf	fsr2h,c
  9985   005770  50DF               	movf	indf2,w,c
  9986   005772  6E06               	movwf	get_ldnumber@tp^0,c
  9987   005774                     
  9988                           ;ff.c: 2133:    i = *tp++ - '0';
  9989   005774  C006  FFF6         	movff	get_ldnumber@tp,tblptrl
  9990   005778                     	if	1	;There is more than 1 active tblptr byte
  9991   005778  0E06               	movlw	high __smallconst
  9992   00577A  6EF7               	movwf	tblptrh,c
  9993   00577C                     	endif
  9994   00577C                     	if	0	;tblptru may be non-zero
  9995   00577C                     	endif
  9996   00577C                     	if	0	;tblptru may be non-zero
  9997   00577C                     	endif
  9998   00577C  0008               	tblrd		*
  9999   00577E  CFF5 F003          	movff	tablat,??_get_ldnumber
 10000   005782  0ED0               	movlw	208
 10001   005784  2403               	addwf	??_get_ldnumber^0,w,c
 10002   005786  6E07               	movwf	get_ldnumber@i^0,c
 10003   005788  6A08               	clrf	(get_ldnumber@i+1)^0,c
 10004   00578A  0EFF               	movlw	255
 10005   00578C  2208               	addwfc	(get_ldnumber@i+1)^0,f,c
 10006   00578E  2A06               	incf	get_ldnumber@tp^0,f,c
 10007   005790                     
 10008                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
 10009   005790  5008               	movf	(get_ldnumber@i+1)^0,w,c
 10010   005792  E107               	bnz	u7251
 10011   005794  0E0A               	movlw	10
 10012   005796  5C07               	subwf	get_ldnumber@i^0,w,c
 10013   005798  B0D8               	btfsc	status,0,c
 10014   00579A  EFD1  F02B         	goto	u7251
 10015   00579E  EFD3  F02B         	goto	u7250
 10016   0057A2                     u7251:
 10017   0057A2  EFEF  F02B         	goto	l5429
 10018   0057A6                     u7250:
 10019   0057A6  5009               	movf	get_ldnumber@tt^0,w,c
 10020   0057A8  1806               	xorwf	get_ldnumber@tp^0,w,c
 10021   0057AA  A4D8               	btfss	status,2,c
 10022   0057AC  EFDA  F02B         	goto	u7261
 10023   0057B0  EFDC  F02B         	goto	u7260
 10024   0057B4                     u7261:
 10025   0057B4  EFEF  F02B         	goto	l5429
 10026   0057B8                     u7260:
 10027   0057B8                     
 10028                           ;ff.c: 2135:     if (i < 1) {
 10029   0057B8  5007               	movf	get_ldnumber@i^0,w,c
 10030   0057BA  1008               	iorwf	(get_ldnumber@i+1)^0,w,c
 10031   0057BC  A4D8               	btfss	status,2,c
 10032   0057BE  EFE3  F02B         	goto	u7271
 10033   0057C2  EFE5  F02B         	goto	u7270
 10034   0057C6                     u7271:
 10035   0057C6  EFEF  F02B         	goto	l5429
 10036   0057CA                     u7270:
 10037   0057CA                     
 10038                           ;ff.c: 2136:      vol = (int)i;
 10039   0057CA  C007  F004         	movff	get_ldnumber@i,get_ldnumber@vol
 10040   0057CE  C008  F005         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
 10041   0057D2                     
 10042                           ;ff.c: 2137:      *path = ++tt;
 10043   0057D2  2A09               	incf	get_ldnumber@tt^0,f,c
 10044   0057D4  5001               	movf	get_ldnumber@path^0,w,c
 10045   0057D6  6ED9               	movwf	fsr2l,c
 10046   0057D8  6ADA               	clrf	fsr2h,c
 10047   0057DA  C009  FFDF         	movff	get_ldnumber@tt,indf2
 10048   0057DE                     l5429:
 10049                           
 10050                           ;ff.c: 2156:    return vol;
 10051   0057DE  C004  F001         	movff	get_ldnumber@vol,?_get_ldnumber
 10052   0057E2  C005  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
 10053   0057E6  EFFB  F02B         	goto	l573
 10054   0057EA                     l5433:
 10055                           
 10056                           ;ff.c: 2161:   vol = 0;
 10057   0057EA  0E00               	movlw	0
 10058   0057EC  6E05               	movwf	(get_ldnumber@vol+1)^0,c
 10059   0057EE  0E00               	movlw	0
 10060   0057F0  6E04               	movwf	get_ldnumber@vol^0,c
 10061   0057F2  EFEF  F02B         	goto	l5429
 10062   0057F6                     l573:
 10063   0057F6  0012               	return		;funcret
 10064   0057F8                     __end_of_get_ldnumber:
 10065                           	callstack 0
 10066                           
 10067 ;; *************** function _disk_initialize *****************
 10068 ;; Defined at:
 10069 ;;		line 306 in file "diskio.c"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;  pdrv            1    wreg     unsigned char 
 10072 ;; Auto vars:     Size  Location     Type
 10073 ;;  pdrv            1   17[COMRAM] unsigned char 
 10074 ;;  ocr             4   18[COMRAM] unsigned char [4]
 10075 ;;  tmr             2   26[COMRAM] unsigned short 
 10076 ;;  n               1   28[COMRAM] unsigned char 
 10077 ;;  ty              1   25[COMRAM] unsigned char 
 10078 ;;  cmd             1   24[COMRAM] unsigned char 
 10079 ;; Return value:  Size  Location     Type
 10080 ;;                  1    wreg      unsigned char 
 10081 ;; Registers used:
 10082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10083 ;; Tracked objects:
 10084 ;;		On entry : 0/0
 10085 ;;		On exit  : 0/0
 10086 ;;		Unchanged: 0/0
 10087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10088 ;;      Params:         0       0       0       0       0       0       0
 10089 ;;      Locals:        12       0       0       0       0       0       0
 10090 ;;      Temps:          1       0       0       0       0       0       0
 10091 ;;      Totals:        13       0       0       0       0       0       0
 10092 ;;Total ram usage:       13 bytes
 10093 ;; Hardware stack levels used: 1
 10094 ;; Hardware stack levels required when called: 5
 10095 ;; This function calls:
 10096 ;;		_SPI_Exchange8bit
 10097 ;;		_SPI_Initialize
 10098 ;;		_SPI_Open
 10099 ;;		_deselect
 10100 ;;		_send_cmd
 10101 ;; This function is called by:
 10102 ;;		_find_volume
 10103 ;; This function uses a non-reentrant model
 10104 ;;
 10105                           
 10106                           	psect	text27
 10107   0042E0                     __ptext27:
 10108                           	callstack 0
 10109   0042E0                     _disk_initialize:
 10110                           	callstack 23
 10111                           
 10112                           ;incstack = 0
 10113                           ;disk_initialize@pdrv stored from wreg
 10114   0042E0  6E12               	movwf	disk_initialize@pdrv^0,c
 10115   0042E2                     
 10116                           ;diskio.c: 307:  BYTE pdrv;diskio.c: 309: {;diskio.c: 310:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 311:  UINT tmr;;diskio.c: 314:  if (pdrv) return 0x01;
 10117   0042E2  5012               	movf	disk_initialize@pdrv^0,w,c
 10118   0042E4  B4D8               	btfsc	status,2,c
 10119   0042E6  EF77  F021         	goto	u6511
 10120   0042EA  EF79  F021         	goto	u6510
 10121   0042EE                     u6511:
 10122   0042EE  EF7C  F021         	goto	l149
 10123   0042F2                     u6510:
 10124   0042F2  0E01               	movlw	1
 10125   0042F4  EFD0  F022         	goto	l150
 10126   0042F8                     l149:
 10127                           
 10128                           ;diskio.c: 316:  if (Stat & 0x02) return Stat;
 10129   0042F8  0100               	movlb	0	; () banked
 10130   0042FA  A3FA               	btfss	_Stat& (0+255),1,b
 10131   0042FC  EF82  F021         	goto	u6521
 10132   004300  EF84  F021         	goto	u6520
 10133   004304                     u6521:
 10134   004304  EF88  F021         	goto	l5039
 10135   004308                     u6520:
 10136   004308                     l5035:
 10137   004308  0100               	movlb	0	; () banked
 10138   00430A  51FA               	movf	_Stat& (0+255),w,b
 10139   00430C  EFD0  F022         	goto	l150
 10140   004310                     l5039:
 10141                           
 10142                           ; BSR set to: 0
 10143                           ;diskio.c: 318:  SPI_Initialize();
 10144   004310  EC1F  F033         	call	_SPI_Initialize	;wreg free
 10145   004314                     
 10146                           ;diskio.c: 319:  for (n = 10; n; n--) SPI_Exchange8bit(0xFF);
 10147   004314  0E0A               	movlw	10
 10148   004316  6E1D               	movwf	disk_initialize@n^0,c
 10149   004318  EF92  F021         	goto	l5047
 10150   00431C                     l5043:
 10151   00431C  0EFF               	movlw	255
 10152   00431E  ECFD  F032         	call	_SPI_Exchange8bit
 10153   004322  061D               	decf	disk_initialize@n^0,f,c
 10154   004324                     l5047:
 10155   004324  501D               	movf	disk_initialize@n^0,w,c
 10156   004326  A4D8               	btfss	status,2,c
 10157   004328  EF98  F021         	goto	u6531
 10158   00432C  EF9A  F021         	goto	u6530
 10159   004330                     u6531:
 10160   004330  EF8E  F021         	goto	l5043
 10161   004334                     u6530:
 10162   004334                     
 10163                           ;diskio.c: 321:  ty = 0;
 10164   004334  6A1A               	clrf	disk_initialize@ty^0,c
 10165   004336                     
 10166                           ;diskio.c: 322:  if (send_cmd((0), 0) == 1) {
 10167   004336  0E00               	movlw	0
 10168   004338  6E0B               	movwf	send_cmd@arg^0,c
 10169   00433A  0E00               	movlw	0
 10170   00433C  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10171   00433E  0E00               	movlw	0
 10172   004340  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10173   004342  0E00               	movlw	0
 10174   004344  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10175   004346  0E00               	movlw	0
 10176   004348  ECAF  F031         	call	_send_cmd
 10177   00434C  06E8               	decf	wreg,f,c
 10178   00434E  A4D8               	btfss	status,2,c
 10179   004350  EFAC  F021         	goto	u6541
 10180   004354  EFAE  F021         	goto	u6540
 10181   004358                     u6541:
 10182   004358  EFBE  F022         	goto	l155
 10183   00435C                     u6540:
 10184   00435C                     
 10185                           ;diskio.c: 323:   if (send_cmd((8), 0x1AA) == 1) {
 10186   00435C  0EAA               	movlw	170
 10187   00435E  6E0B               	movwf	send_cmd@arg^0,c
 10188   004360  0E01               	movlw	1
 10189   004362  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10190   004364  0E00               	movlw	0
 10191   004366  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10192   004368  0E00               	movlw	0
 10193   00436A  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10194   00436C  0E08               	movlw	8
 10195   00436E  ECAF  F031         	call	_send_cmd
 10196   004372  06E8               	decf	wreg,f,c
 10197   004374  A4D8               	btfss	status,2,c
 10198   004376  EFBF  F021         	goto	u6551
 10199   00437A  EFC1  F021         	goto	u6550
 10200   00437E                     u6551:
 10201   00437E  EF55  F022         	goto	l5101
 10202   004382                     u6550:
 10203   004382                     
 10204                           ;diskio.c: 324:    for (n = 0; n < 4; n++) ocr[n] = SPI_Exchange8bit(0xFF);
 10205   004382  6A1D               	clrf	disk_initialize@n^0,c
 10206   004384                     l5059:
 10207   004384  501D               	movf	disk_initialize@n^0,w,c
 10208   004386  0F13               	addlw	low disk_initialize@ocr
 10209   004388  6ED9               	movwf	fsr2l,c
 10210   00438A  6ADA               	clrf	fsr2h,c
 10211   00438C  0EFF               	movlw	255
 10212   00438E  ECFD  F032         	call	_SPI_Exchange8bit
 10213   004392  6EDF               	movwf	indf2,c
 10214   004394  2A1D               	incf	disk_initialize@n^0,f,c
 10215   004396  0E03               	movlw	3
 10216   004398  641D               	cpfsgt	disk_initialize@n^0,c
 10217   00439A  EFD1  F021         	goto	u6561
 10218   00439E  EFD3  F021         	goto	u6560
 10219   0043A2                     u6561:
 10220   0043A2  EFC2  F021         	goto	l5059
 10221   0043A6                     u6560:
 10222   0043A6                     
 10223                           ;diskio.c: 325:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
 10224   0043A6  0415               	decf	(disk_initialize@ocr+2)^0,w,c
 10225   0043A8  A4D8               	btfss	status,2,c
 10226   0043AA  EFD9  F021         	goto	u6571
 10227   0043AE  EFDB  F021         	goto	u6570
 10228   0043B2                     u6571:
 10229   0043B2  EFBE  F022         	goto	l155
 10230   0043B6                     u6570:
 10231   0043B6  0EAA               	movlw	170
 10232   0043B8  1816               	xorwf	(disk_initialize@ocr+3)^0,w,c
 10233   0043BA  A4D8               	btfss	status,2,c
 10234   0043BC  EFE2  F021         	goto	u6581
 10235   0043C0  EFE4  F021         	goto	u6580
 10236   0043C4                     u6581:
 10237   0043C4  EFBE  F022         	goto	l155
 10238   0043C8                     u6580:
 10239   0043C8                     
 10240                           ;diskio.c: 326:     for (tmr = 1000; tmr; tmr--) {
 10241   0043C8  0E03               	movlw	3
 10242   0043CA  6E1C               	movwf	(disk_initialize@tmr+1)^0,c
 10243   0043CC  0EE8               	movlw	232
 10244   0043CE  6E1B               	movwf	disk_initialize@tmr^0,c
 10245   0043D0  EF09  F022         	goto	l160
 10246   0043D4                     l5071:
 10247                           
 10248                           ;diskio.c: 327:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
 10249   0043D4  0E00               	movlw	0
 10250   0043D6  6E0B               	movwf	send_cmd@arg^0,c
 10251   0043D8  0E00               	movlw	0
 10252   0043DA  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10253   0043DC  0E00               	movlw	0
 10254   0043DE  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10255   0043E0  0E40               	movlw	64
 10256   0043E2  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10257   0043E4  0EA9               	movlw	169
 10258   0043E6  ECAF  F031         	call	_send_cmd
 10259   0043EA  0900               	iorlw	0
 10260   0043EC  A4D8               	btfss	status,2,c
 10261   0043EE  EFFB  F021         	goto	u6591
 10262   0043F2  EFFD  F021         	goto	u6590
 10263   0043F6                     u6591:
 10264   0043F6  EFFF  F021         	goto	l5075
 10265   0043FA                     u6590:
 10266   0043FA  EF12  F022         	goto	l5079
 10267   0043FE                     l5075:
 10268                           
 10269                           ;diskio.c: 328:      _delay((unsigned long)((1)*(8000000UL/4000.0)));
 10270   0043FE  0E03               	movlw	3
 10271   004400  6E11               	movwf	??_disk_initialize^0,c
 10272   004402  0E98               	movlw	152
 10273   004404                     u9667:
 10274   004404  2EE8               	decfsz	wreg,f,c
 10275   004406  D7FE               	bra	u9667
 10276   004408  2E11               	decfsz	??_disk_initialize^0,f,c
 10277   00440A  D7FC               	bra	u9667
 10278   00440C                     
 10279                           ;diskio.c: 329:     }
 10280   00440C  061B               	decf	disk_initialize@tmr^0,f,c
 10281   00440E  A0D8               	btfss	status,0,c
 10282   004410  061C               	decf	(disk_initialize@tmr+1)^0,f,c
 10283   004412                     l160:
 10284   004412  501B               	movf	disk_initialize@tmr^0,w,c
 10285   004414  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
 10286   004416  A4D8               	btfss	status,2,c
 10287   004418  EF10  F022         	goto	u6601
 10288   00441C  EF12  F022         	goto	u6600
 10289   004420                     u6601:
 10290   004420  EFEA  F021         	goto	l5071
 10291   004424                     u6600:
 10292   004424                     l5079:
 10293                           
 10294                           ;diskio.c: 330:     if (tmr && send_cmd((58), 0) == 0) {
 10295   004424  501B               	movf	disk_initialize@tmr^0,w,c
 10296   004426  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
 10297   004428  B4D8               	btfsc	status,2,c
 10298   00442A  EF19  F022         	goto	u6611
 10299   00442E  EF1B  F022         	goto	u6610
 10300   004432                     u6611:
 10301   004432  EFBE  F022         	goto	l155
 10302   004436                     u6610:
 10303   004436  0E00               	movlw	0
 10304   004438  6E0B               	movwf	send_cmd@arg^0,c
 10305   00443A  0E00               	movlw	0
 10306   00443C  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10307   00443E  0E00               	movlw	0
 10308   004440  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10309   004442  0E00               	movlw	0
 10310   004444  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10311   004446  0E3A               	movlw	58
 10312   004448  ECAF  F031         	call	_send_cmd
 10313   00444C  0900               	iorlw	0
 10314   00444E  A4D8               	btfss	status,2,c
 10315   004450  EF2C  F022         	goto	u6621
 10316   004454  EF2E  F022         	goto	u6620
 10317   004458                     u6621:
 10318   004458  EFBE  F022         	goto	l155
 10319   00445C                     u6620:
 10320   00445C                     
 10321                           ;diskio.c: 331:      for (n = 0; n < 4; n++) ocr[n] = SPI_Exchange8bit(0xFF);
 10322   00445C  6A1D               	clrf	disk_initialize@n^0,c
 10323   00445E                     l5089:
 10324   00445E  501D               	movf	disk_initialize@n^0,w,c
 10325   004460  0F13               	addlw	low disk_initialize@ocr
 10326   004462  6ED9               	movwf	fsr2l,c
 10327   004464  6ADA               	clrf	fsr2h,c
 10328   004466  0EFF               	movlw	255
 10329   004468  ECFD  F032         	call	_SPI_Exchange8bit
 10330   00446C  6EDF               	movwf	indf2,c
 10331   00446E  2A1D               	incf	disk_initialize@n^0,f,c
 10332   004470  0E03               	movlw	3
 10333   004472  641D               	cpfsgt	disk_initialize@n^0,c
 10334   004474  EF3E  F022         	goto	u6631
 10335   004478  EF40  F022         	goto	u6630
 10336   00447C                     u6631:
 10337   00447C  EF2F  F022         	goto	l5089
 10338   004480                     u6630:
 10339   004480                     
 10340                           ;diskio.c: 332:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
 10341   004480  BC13               	btfsc	disk_initialize@ocr^0,6,c
 10342   004482  EF45  F022         	goto	u6641
 10343   004486  EF47  F022         	goto	u6640
 10344   00448A                     u6641:
 10345   00448A  EF4D  F022         	goto	l5097
 10346   00448E                     u6640:
 10347   00448E  0E00               	movlw	0
 10348   004490  6E18               	movwf	(_disk_initialize$440+1)^0,c
 10349   004492  0E04               	movlw	4
 10350   004494  6E17               	movwf	_disk_initialize$440^0,c
 10351   004496  EF51  F022         	goto	l5099
 10352   00449A                     l5097:
 10353   00449A  0E00               	movlw	0
 10354   00449C  6E18               	movwf	(_disk_initialize$440+1)^0,c
 10355   00449E  0E0C               	movlw	12
 10356   0044A0  6E17               	movwf	_disk_initialize$440^0,c
 10357   0044A2                     l5099:
 10358   0044A2  C017  F01A         	movff	_disk_initialize$440,disk_initialize@ty
 10359   0044A6  EFBE  F022         	goto	l155
 10360   0044AA                     l5101:
 10361                           
 10362                           ;diskio.c: 336:    if (send_cmd((0x80+41), 0) <= 1) {
 10363   0044AA  0E00               	movlw	0
 10364   0044AC  6E0B               	movwf	send_cmd@arg^0,c
 10365   0044AE  0E00               	movlw	0
 10366   0044B0  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10367   0044B2  0E00               	movlw	0
 10368   0044B4  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10369   0044B6  0E00               	movlw	0
 10370   0044B8  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10371   0044BA  0EA9               	movlw	169
 10372   0044BC  ECAF  F031         	call	_send_cmd
 10373   0044C0  6E11               	movwf	??_disk_initialize^0,c
 10374   0044C2  0E02               	movlw	2
 10375   0044C4  6011               	cpfslt	??_disk_initialize^0,c
 10376   0044C6  EF67  F022         	goto	u6651
 10377   0044CA  EF69  F022         	goto	u6650
 10378   0044CE                     u6651:
 10379   0044CE  EF6F  F022         	goto	l5105
 10380   0044D2                     u6650:
 10381   0044D2                     
 10382                           ;diskio.c: 337:     ty = 0x02; cmd = (0x80+41);
 10383   0044D2  0E02               	movlw	2
 10384   0044D4  6E1A               	movwf	disk_initialize@ty^0,c
 10385   0044D6  0EA9               	movlw	169
 10386   0044D8  6E19               	movwf	disk_initialize@cmd^0,c
 10387                           
 10388                           ;diskio.c: 338:    } else {
 10389   0044DA  EF73  F022         	goto	l173
 10390   0044DE                     l5105:
 10391                           
 10392                           ;diskio.c: 339:     ty = 0x01; cmd = (1);
 10393   0044DE  0E01               	movlw	1
 10394   0044E0  6E1A               	movwf	disk_initialize@ty^0,c
 10395   0044E2  0E01               	movlw	1
 10396   0044E4  6E19               	movwf	disk_initialize@cmd^0,c
 10397   0044E6                     l173:
 10398                           
 10399                           ;diskio.c: 341:    for (tmr = 1000; tmr; tmr--) {
 10400   0044E6  0E03               	movlw	3
 10401   0044E8  6E1C               	movwf	(disk_initialize@tmr+1)^0,c
 10402   0044EA  0EE8               	movlw	232
 10403   0044EC  6E1B               	movwf	disk_initialize@tmr^0,c
 10404   0044EE  EF98  F022         	goto	l174
 10405   0044F2                     l5107:
 10406                           
 10407                           ;diskio.c: 342:     if (send_cmd(cmd, 0) == 0) break;
 10408   0044F2  0E00               	movlw	0
 10409   0044F4  6E0B               	movwf	send_cmd@arg^0,c
 10410   0044F6  0E00               	movlw	0
 10411   0044F8  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10412   0044FA  0E00               	movlw	0
 10413   0044FC  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10414   0044FE  0E00               	movlw	0
 10415   004500  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10416   004502  5019               	movf	disk_initialize@cmd^0,w,c
 10417   004504  ECAF  F031         	call	_send_cmd
 10418   004508  0900               	iorlw	0
 10419   00450A  A4D8               	btfss	status,2,c
 10420   00450C  EF8A  F022         	goto	u6661
 10421   004510  EF8C  F022         	goto	u6660
 10422   004514                     u6661:
 10423   004514  EF8E  F022         	goto	l5111
 10424   004518                     u6660:
 10425   004518  EFA1  F022         	goto	l5115
 10426   00451C                     l5111:
 10427                           
 10428                           ;diskio.c: 343:     _delay((unsigned long)((1)*(8000000UL/4000.0)));
 10429   00451C  0E03               	movlw	3
 10430   00451E  6E11               	movwf	??_disk_initialize^0,c
 10431   004520  0E98               	movlw	152
 10432   004522                     u9677:
 10433   004522  2EE8               	decfsz	wreg,f,c
 10434   004524  D7FE               	bra	u9677
 10435   004526  2E11               	decfsz	??_disk_initialize^0,f,c
 10436   004528  D7FC               	bra	u9677
 10437   00452A                     
 10438                           ;diskio.c: 344:    }
 10439   00452A  061B               	decf	disk_initialize@tmr^0,f,c
 10440   00452C  A0D8               	btfss	status,0,c
 10441   00452E  061C               	decf	(disk_initialize@tmr+1)^0,f,c
 10442   004530                     l174:
 10443   004530  501B               	movf	disk_initialize@tmr^0,w,c
 10444   004532  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
 10445   004534  A4D8               	btfss	status,2,c
 10446   004536  EF9F  F022         	goto	u6671
 10447   00453A  EFA1  F022         	goto	u6670
 10448   00453E                     u6671:
 10449   00453E  EF79  F022         	goto	l5107
 10450   004542                     u6670:
 10451   004542                     l5115:
 10452                           
 10453                           ;diskio.c: 345:    if (!tmr || send_cmd((16), 512) != 0)
 10454   004542  501B               	movf	disk_initialize@tmr^0,w,c
 10455   004544  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
 10456   004546  B4D8               	btfsc	status,2,c
 10457   004548  EFA8  F022         	goto	u6681
 10458   00454C  EFAA  F022         	goto	u6680
 10459   004550                     u6681:
 10460   004550  EFBD  F022         	goto	l180
 10461   004554                     u6680:
 10462   004554  0E00               	movlw	0
 10463   004556  6E0B               	movwf	send_cmd@arg^0,c
 10464   004558  0E02               	movlw	2
 10465   00455A  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10466   00455C  0E00               	movlw	0
 10467   00455E  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10468   004560  0E00               	movlw	0
 10469   004562  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10470   004564  0E10               	movlw	16
 10471   004566  ECAF  F031         	call	_send_cmd
 10472   00456A  0900               	iorlw	0
 10473   00456C  B4D8               	btfsc	status,2,c
 10474   00456E  EFBB  F022         	goto	u6691
 10475   004572  EFBD  F022         	goto	u6690
 10476   004576                     u6691:
 10477   004576  EFBE  F022         	goto	l155
 10478   00457A                     u6690:
 10479   00457A                     l180:
 10480                           
 10481                           ;diskio.c: 346:     ty = 0;
 10482   00457A  6A1A               	clrf	disk_initialize@ty^0,c
 10483   00457C                     l155:
 10484                           
 10485                           ;diskio.c: 349:  CardType = ty;
 10486   00457C  C01A  F0F9         	movff	disk_initialize@ty,_CardType
 10487   004580                     
 10488                           ;diskio.c: 350:  deselect();
 10489   004580  EC2D  F033         	call	_deselect	;wreg free
 10490   004584                     
 10491                           ;diskio.c: 352:  if (ty) {
 10492   004584  501A               	movf	disk_initialize@ty^0,w,c
 10493   004586  B4D8               	btfsc	status,2,c
 10494   004588  EFC8  F022         	goto	u6701
 10495   00458C  EFCA  F022         	goto	u6700
 10496   004590                     u6701:
 10497   004590  EF84  F021         	goto	l5035
 10498   004594                     u6700:
 10499   004594                     
 10500                           ;diskio.c: 353:   Stat &= ~0x01;
 10501   004594  0100               	movlb	0	; () banked
 10502   004596  91FA               	bcf	_Stat& (0+255),0,b
 10503   004598                     
 10504                           ; BSR set to: 0
 10505                           ;diskio.c: 354:   SPI_Open();
 10506   004598  EC17  F033         	call	_SPI_Open	;wreg free
 10507   00459C  EF84  F021         	goto	l5035
 10508   0045A0                     l150:
 10509   0045A0  0012               	return		;funcret
 10510   0045A2                     __end_of_disk_initialize:
 10511                           	callstack 0
 10512                           
 10513 ;; *************** function _SPI_Open *****************
 10514 ;; Defined at:
 10515 ;;		line 72 in file "mcc_generated_files/spi.c"
 10516 ;; Parameters:    Size  Location     Type
 10517 ;;		None
 10518 ;; Auto vars:     Size  Location     Type
 10519 ;;		None
 10520 ;; Return value:  Size  Location     Type
 10521 ;;                  1    wreg      void 
 10522 ;; Registers used:
 10523 ;;		wreg, status,2
 10524 ;; Tracked objects:
 10525 ;;		On entry : 0/0
 10526 ;;		On exit  : 0/0
 10527 ;;		Unchanged: 0/0
 10528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10529 ;;      Params:         0       0       0       0       0       0       0
 10530 ;;      Locals:         0       0       0       0       0       0       0
 10531 ;;      Temps:          0       0       0       0       0       0       0
 10532 ;;      Totals:         0       0       0       0       0       0       0
 10533 ;;Total ram usage:        0 bytes
 10534 ;; Hardware stack levels used: 1
 10535 ;; This function calls:
 10536 ;;		Nothing
 10537 ;; This function is called by:
 10538 ;;		_disk_initialize
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           	psect	text28
 10543   00662E                     __ptext28:
 10544                           	callstack 0
 10545   00662E                     _SPI_Open:
 10546                           	callstack 27
 10547   00662E                     
 10548                           ;mcc_generated_files/spi.c: 73:     SSPSTAT = 0x40;
 10549   00662E  0E40               	movlw	64
 10550   006630  6EC7               	movwf	199,c	;volatile
 10551                           
 10552                           ;mcc_generated_files/spi.c: 74:     SSPCON1 = 0x20;
 10553   006632  0E20               	movlw	32
 10554   006634  6EC6               	movwf	198,c	;volatile
 10555   006636                     
 10556                           ;mcc_generated_files/spi.c: 75:     SSPCON1bits.SSPOV = 0;
 10557   006636  9CC6               	bcf	198,6,c	;volatile
 10558   006638                     
 10559                           ;mcc_generated_files/spi.c: 76:     SSPCON1bits.WCOL = 0;
 10560   006638  9EC6               	bcf	198,7,c	;volatile
 10561   00663A                     
 10562                           ;mcc_generated_files/spi.c: 77:     SSPADD = 0x00;
 10563   00663A  6AC8               	clrf	200,c	;volatile
 10564   00663C  0012               	return		;funcret
 10565   00663E                     __end_of_SPI_Open:
 10566                           	callstack 0
 10567                           
 10568 ;; *************** function _SPI_Initialize *****************
 10569 ;; Defined at:
 10570 ;;		line 64 in file "mcc_generated_files/spi.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;		None
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;		None
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  1    wreg      void 
 10577 ;; Registers used:
 10578 ;;		wreg, status,2
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10584 ;;      Params:         0       0       0       0       0       0       0
 10585 ;;      Locals:         0       0       0       0       0       0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0
 10587 ;;      Totals:         0       0       0       0       0       0       0
 10588 ;;Total ram usage:        0 bytes
 10589 ;; Hardware stack levels used: 1
 10590 ;; This function calls:
 10591 ;;		Nothing
 10592 ;; This function is called by:
 10593 ;;		_disk_initialize
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           	psect	text29
 10598   00663E                     __ptext29:
 10599                           	callstack 0
 10600   00663E                     _SPI_Initialize:
 10601                           	callstack 27
 10602   00663E                     
 10603                           ;mcc_generated_files/spi.c: 65:     SSPSTAT = 0x40;
 10604   00663E  0E40               	movlw	64
 10605   006640  6EC7               	movwf	199,c	;volatile
 10606                           
 10607                           ;mcc_generated_files/spi.c: 66:     SSPCON1 = 0x22;
 10608   006642  0E22               	movlw	34
 10609   006644  6EC6               	movwf	198,c	;volatile
 10610   006646                     
 10611                           ;mcc_generated_files/spi.c: 67:     SSPCON1bits.SSPOV = 0;
 10612   006646  9CC6               	bcf	198,6,c	;volatile
 10613   006648                     
 10614                           ;mcc_generated_files/spi.c: 68:     SSPCON1bits.WCOL = 0;
 10615   006648  9EC6               	bcf	198,7,c	;volatile
 10616   00664A                     
 10617                           ;mcc_generated_files/spi.c: 69:     SSPADD = 0x00;
 10618   00664A  6AC8               	clrf	200,c	;volatile
 10619   00664C  0012               	return		;funcret
 10620   00664E                     __end_of_SPI_Initialize:
 10621                           	callstack 0
 10622                           
 10623 ;; *************** function _check_fs *****************
 10624 ;; Defined at:
 10625 ;;		line 2175 in file "ff.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;  fs              2   58[COMRAM] PTR struct .
 10628 ;;		 -> FatFs(558), NULL(0), 
 10629 ;;  sect            4   60[COMRAM] unsigned long 
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;		None
 10632 ;; Return value:  Size  Location     Type
 10633 ;;                  1    wreg      unsigned char 
 10634 ;; Registers used:
 10635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10636 ;; Tracked objects:
 10637 ;;		On entry : 0/0
 10638 ;;		On exit  : 0/0
 10639 ;;		Unchanged: 0/0
 10640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10641 ;;      Params:         6       0       0       0       0       0       0
 10642 ;;      Locals:         0       0       0       0       0       0       0
 10643 ;;      Temps:          4       0       0       0       0       0       0
 10644 ;;      Totals:        10       0       0       0       0       0       0
 10645 ;;Total ram usage:       10 bytes
 10646 ;; Hardware stack levels used: 1
 10647 ;; Hardware stack levels required when called: 8
 10648 ;; This function calls:
 10649 ;;		_move_window
 10650 ;; This function is called by:
 10651 ;;		_find_volume
 10652 ;; This function uses a non-reentrant model
 10653 ;;
 10654                           
 10655                           	psect	text30
 10656   0055D2                     __ptext30:
 10657                           	callstack 0
 10658   0055D2                     _check_fs:
 10659                           	callstack 20
 10660   0055D2                     
 10661                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
 10662   0055D2  EE20 F004          	lfsr	2,4
 10663   0055D6  503B               	movf	check_fs@fs^0,w,c
 10664   0055D8  26D9               	addwf	fsr2l,f,c
 10665   0055DA  503C               	movf	(check_fs@fs+1)^0,w,c
 10666   0055DC  22DA               	addwfc	fsr2h,f,c
 10667   0055DE  6ADF               	clrf	indf2,c
 10668   0055E0  EE20 F02A          	lfsr	2,42
 10669   0055E4  503B               	movf	check_fs@fs^0,w,c
 10670   0055E6  26D9               	addwf	fsr2l,f,c
 10671   0055E8  503C               	movf	(check_fs@fs+1)^0,w,c
 10672   0055EA  22DA               	addwfc	fsr2h,f,c
 10673   0055EC  0EFF               	movlw	255
 10674   0055EE  6EDE               	movwf	postinc2,c
 10675   0055F0  0EFF               	movlw	255
 10676   0055F2  6EDE               	movwf	postinc2,c
 10677   0055F4  0EFF               	movlw	255
 10678   0055F6  6EDE               	movwf	postinc2,c
 10679   0055F8  0EFF               	movlw	255
 10680   0055FA  6EDD               	movwf	postdec2,c
 10681   0055FC                     
 10682                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
 10683   0055FC  C03B  F030         	movff	check_fs@fs,move_window@fs
 10684   005600  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
 10685   005604  C03D  F032         	movff	check_fs@sect,move_window@sector
 10686   005608  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
 10687   00560C  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
 10688   005610  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
 10689   005614  ECF5  F02D         	call	_move_window	;wreg free
 10690   005618  0900               	iorlw	0
 10691   00561A  B4D8               	btfsc	status,2,c
 10692   00561C  EF12  F02B         	goto	u7281
 10693   005620  EF14  F02B         	goto	u7280
 10694   005624                     u7281:
 10695   005624  EF17  F02B         	goto	l5447
 10696   005628                     u7280:
 10697   005628                     
 10698                           ;ff.c: 2182:   return 3;
 10699   005628  0E03               	movlw	3
 10700   00562A  EF76  F02B         	goto	l577
 10701   00562E                     l5447:
 10702                           
 10703                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 10704   00562E  EE22 F02C          	lfsr	2,556
 10705   005632  503B               	movf	check_fs@fs^0,w,c
 10706   005634  26D9               	addwf	fsr2l,f,c
 10707   005636  503C               	movf	(check_fs@fs+1)^0,w,c
 10708   005638  22DA               	addwfc	fsr2h,f,c
 10709   00563A  0E55               	movlw	85
 10710   00563C  18DE               	xorwf	postinc2,w,c
 10711   00563E  E109               	bnz	u7290
 10712   005640  0EAA               	movlw	170
 10713   005642  18DE               	xorwf	postinc2,w,c
 10714   005644  B4D8               	btfsc	status,2,c
 10715   005646  EF27  F02B         	goto	u7291
 10716   00564A  EF29  F02B         	goto	u7290
 10717   00564E                     u7291:
 10718   00564E  EF2C  F02B         	goto	l5453
 10719   005652                     u7290:
 10720   005652                     
 10721                           ;ff.c: 2185:   return 2;
 10722   005652  0E02               	movlw	2
 10723   005654  EF76  F02B         	goto	l577
 10724   005658                     l5453:
 10725                           
 10726                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
 10727   005658  EE20 F064          	lfsr	2,100
 10728   00565C  503B               	movf	check_fs@fs^0,w,c
 10729   00565E  26D9               	addwf	fsr2l,f,c
 10730   005660  503C               	movf	(check_fs@fs+1)^0,w,c
 10731   005662  22DA               	addwfc	fsr2h,f,c
 10732   005664  0EFF               	movlw	255
 10733   005666  14DE               	andwf	postinc2,w,c
 10734   005668  6E41               	movwf	??_check_fs^0,c
 10735   00566A  0EFF               	movlw	255
 10736   00566C  14DE               	andwf	postinc2,w,c
 10737   00566E  6E42               	movwf	(??_check_fs+1)^0,c
 10738   005670  0EFF               	movlw	255
 10739   005672  14DE               	andwf	postinc2,w,c
 10740   005674  6E43               	movwf	(??_check_fs+2)^0,c
 10741   005676  0E00               	movlw	0
 10742   005678  14DE               	andwf	postinc2,w,c
 10743   00567A  6E44               	movwf	(??_check_fs+3)^0,c
 10744   00567C  0E46               	movlw	70
 10745   00567E  1841               	xorwf	??_check_fs^0,w,c
 10746   005680  E10B               	bnz	u7301
 10747   005682  0E41               	movlw	65
 10748   005684  1842               	xorwf	(??_check_fs+1)^0,w,c
 10749   005686  E108               	bnz	u7301
 10750   005688  0E54               	movlw	84
 10751   00568A  1843               	xorwf	(??_check_fs+2)^0,w,c
 10752   00568C  1044               	iorwf	(??_check_fs+3)^0,w,c
 10753   00568E  A4D8               	btfss	status,2,c
 10754   005690  EF4C  F02B         	goto	u7301
 10755   005694  EF4E  F02B         	goto	u7300
 10756   005698                     u7301:
 10757   005698  EF51  F02B         	goto	l5459
 10758   00569C                     u7300:
 10759   00569C                     l5455:
 10760                           
 10761                           ;ff.c: 2188:   return 0;
 10762   00569C  0E00               	movlw	0
 10763   00569E  EF76  F02B         	goto	l577
 10764   0056A2                     l5459:
 10765                           
 10766                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
 10767   0056A2  EE20 F080          	lfsr	2,128
 10768   0056A6  503B               	movf	check_fs@fs^0,w,c
 10769   0056A8  26D9               	addwf	fsr2l,f,c
 10770   0056AA  503C               	movf	(check_fs@fs+1)^0,w,c
 10771   0056AC  22DA               	addwfc	fsr2h,f,c
 10772   0056AE  0EFF               	movlw	255
 10773   0056B0  14DE               	andwf	postinc2,w,c
 10774   0056B2  6E41               	movwf	??_check_fs^0,c
 10775   0056B4  0EFF               	movlw	255
 10776   0056B6  14DE               	andwf	postinc2,w,c
 10777   0056B8  6E42               	movwf	(??_check_fs+1)^0,c
 10778   0056BA  0EFF               	movlw	255
 10779   0056BC  14DE               	andwf	postinc2,w,c
 10780   0056BE  6E43               	movwf	(??_check_fs+2)^0,c
 10781   0056C0  0E00               	movlw	0
 10782   0056C2  14DE               	andwf	postinc2,w,c
 10783   0056C4  6E44               	movwf	(??_check_fs+3)^0,c
 10784   0056C6  0E46               	movlw	70
 10785   0056C8  1841               	xorwf	??_check_fs^0,w,c
 10786   0056CA  E10B               	bnz	u7311
 10787   0056CC  0E41               	movlw	65
 10788   0056CE  1842               	xorwf	(??_check_fs+1)^0,w,c
 10789   0056D0  E108               	bnz	u7311
 10790   0056D2  0E54               	movlw	84
 10791   0056D4  1843               	xorwf	(??_check_fs+2)^0,w,c
 10792   0056D6  1044               	iorwf	(??_check_fs+3)^0,w,c
 10793   0056D8  A4D8               	btfss	status,2,c
 10794   0056DA  EF71  F02B         	goto	u7311
 10795   0056DE  EF73  F02B         	goto	u7310
 10796   0056E2                     u7311:
 10797   0056E2  EF75  F02B         	goto	l5465
 10798   0056E6                     u7310:
 10799   0056E6  EF4E  F02B         	goto	l5455
 10800   0056EA                     l5465:
 10801                           
 10802                           ;ff.c: 2192:  return 1;
 10803   0056EA  0E01               	movlw	1
 10804   0056EC                     l577:
 10805   0056EC  0012               	return		;funcret
 10806   0056EE                     __end_of_check_fs:
 10807                           	callstack 0
 10808                           
 10809 ;; *************** function _f_lseek *****************
 10810 ;; Defined at:
 10811 ;;		line 3033 in file "ff.c"
 10812 ;; Parameters:    Size  Location     Type
 10813 ;;  fp              2  108[COMRAM] PTR struct .
 10814 ;;		 -> Fil(32), 
 10815 ;;  ofs             4  110[COMRAM] unsigned long 
 10816 ;; Auto vars:     Size  Location     Type
 10817 ;;  clst            4   29[BANK0 ] unsigned long 
 10818 ;;  bcs             4   25[BANK0 ] unsigned long 
 10819 ;;  nsect           4   21[BANK0 ] unsigned long 
 10820 ;;  ifptr           4   17[BANK0 ] unsigned long 
 10821 ;;  res             1   16[BANK0 ] enum E95
 10822 ;; Return value:  Size  Location     Type
 10823 ;;                  1    wreg      enum E95
 10824 ;; Registers used:
 10825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10826 ;; Tracked objects:
 10827 ;;		On entry : 0/0
 10828 ;;		On exit  : 0/0
 10829 ;;		Unchanged: 0/0
 10830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10831 ;;      Params:         6       0       0       0       0       0       0
 10832 ;;      Locals:         0      17       0       0       0       0       0
 10833 ;;      Temps:          0      16       0       0       0       0       0
 10834 ;;      Totals:         6      33       0       0       0       0       0
 10835 ;;Total ram usage:       39 bytes
 10836 ;; Hardware stack levels used: 1
 10837 ;; Hardware stack levels required when called: 10
 10838 ;; This function calls:
 10839 ;;		___lldiv
 10840 ;;		_clust2sect
 10841 ;;		_create_chain
 10842 ;;		_get_fat
 10843 ;;		_validate
 10844 ;; This function is called by:
 10845 ;;		_main
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           	psect	text31
 10850   001A18                     __ptext31:
 10851                           	callstack 0
 10852   001A18                     _f_lseek:
 10853                           	callstack 20
 10854   001A18                     
 10855                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
 10856   001A18  C06D  F002         	movff	f_lseek@fp,validate@obj
 10857   001A1C  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
 10858   001A20  EC6A  F02C         	call	_validate	;wreg free
 10859   001A24  0100               	movlb	0	; () banked
 10860   001A26  6F90               	movwf	f_lseek@res& (0+255),b
 10861   001A28                     
 10862                           ; BSR set to: 0
 10863                           ;ff.c: 3046:  if (res != FR_OK) return res;
 10864   001A28  5190               	movf	f_lseek@res& (0+255),w,b
 10865   001A2A  B4D8               	btfsc	status,2,c
 10866   001A2C  EF1A  F00D         	goto	u8741
 10867   001A30  EF1C  F00D         	goto	u8740
 10868   001A34                     u8741:
 10869   001A34  EF1E  F00D         	goto	l6287
 10870   001A38                     u8740:
 10871   001A38  EF9E  F010         	goto	l744
 10872   001A3C                     l6287:
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;ff.c: 3047:  if (fp->err)
 10876   001A3C  EE20 F005          	lfsr	2,5
 10877   001A40  506D               	movf	f_lseek@fp^0,w,c
 10878   001A42  26D9               	addwf	fsr2l,f,c
 10879   001A44  506E               	movf	(f_lseek@fp+1)^0,w,c
 10880   001A46  22DA               	addwfc	fsr2h,f,c
 10881   001A48  50DF               	movf	indf2,w,c
 10882   001A4A  B4D8               	btfsc	status,2,c
 10883   001A4C  EF2A  F00D         	goto	u8751
 10884   001A50  EF2C  F00D         	goto	u8750
 10885   001A54                     u8751:
 10886   001A54  EF2E  F00D         	goto	l6291
 10887   001A58                     u8750:
 10888   001A58  EF9E  F010         	goto	l744
 10889   001A5C                     l6291:
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
 10893   001A5C  EE20 F00A          	lfsr	2,10
 10894   001A60  506D               	movf	f_lseek@fp^0,w,c
 10895   001A62  26D9               	addwf	fsr2l,f,c
 10896   001A64  506E               	movf	(f_lseek@fp+1)^0,w,c
 10897   001A66  22DA               	addwfc	fsr2h,f,c
 10898   001A68  506F               	movf	f_lseek@ofs^0,w,c
 10899   001A6A  5CDE               	subwf	postinc2,w,c
 10900   001A6C  5070               	movf	(f_lseek@ofs+1)^0,w,c
 10901   001A6E  58DE               	subwfb	postinc2,w,c
 10902   001A70  5071               	movf	(f_lseek@ofs+2)^0,w,c
 10903   001A72  58DE               	subwfb	postinc2,w,c
 10904   001A74  5072               	movf	(f_lseek@ofs+3)^0,w,c
 10905   001A76  58DE               	subwfb	postinc2,w,c
 10906   001A78  B0D8               	btfsc	status,0,c
 10907   001A7A  EF41  F00D         	goto	u8761
 10908   001A7E  EF43  F00D         	goto	u8760
 10909   001A82                     u8761:
 10910   001A82  EF5E  F00D         	goto	l746
 10911   001A86                     u8760:
 10912   001A86                     
 10913                           ; BSR set to: 0
 10914   001A86  EE20 F004          	lfsr	2,4
 10915   001A8A  506D               	movf	f_lseek@fp^0,w,c
 10916   001A8C  26D9               	addwf	fsr2l,f,c
 10917   001A8E  506E               	movf	(f_lseek@fp+1)^0,w,c
 10918   001A90  22DA               	addwfc	fsr2h,f,c
 10919   001A92  B2DF               	btfsc	indf2,1,c
 10920   001A94  EF4E  F00D         	goto	u8771
 10921   001A98  EF50  F00D         	goto	u8770
 10922   001A9C                     u8771:
 10923   001A9C  EF5E  F00D         	goto	l746
 10924   001AA0                     u8770:
 10925   001AA0                     
 10926                           ; BSR set to: 0
 10927                           ;ff.c: 3111:    ) ofs = fp->fsize;
 10928   001AA0  EE20 F00A          	lfsr	2,10
 10929   001AA4  506D               	movf	f_lseek@fp^0,w,c
 10930   001AA6  26D9               	addwf	fsr2l,f,c
 10931   001AA8  506E               	movf	(f_lseek@fp+1)^0,w,c
 10932   001AAA  22DA               	addwfc	fsr2h,f,c
 10933   001AAC  CFDE F06F          	movff	postinc2,f_lseek@ofs
 10934   001AB0  CFDE F070          	movff	postinc2,f_lseek@ofs+1
 10935   001AB4  CFDE F071          	movff	postinc2,f_lseek@ofs+2
 10936   001AB8  CFDE F072          	movff	postinc2,f_lseek@ofs+3
 10937   001ABC                     l746:
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;ff.c: 3113:   ifptr = fp->fptr;
 10941   001ABC  EE20 F006          	lfsr	2,6
 10942   001AC0  506D               	movf	f_lseek@fp^0,w,c
 10943   001AC2  26D9               	addwf	fsr2l,f,c
 10944   001AC4  506E               	movf	(f_lseek@fp+1)^0,w,c
 10945   001AC6  22DA               	addwfc	fsr2h,f,c
 10946   001AC8  CFDE F091          	movff	postinc2,f_lseek@ifptr
 10947   001ACC  CFDE F092          	movff	postinc2,f_lseek@ifptr+1
 10948   001AD0  CFDE F093          	movff	postinc2,f_lseek@ifptr+2
 10949   001AD4  CFDE F094          	movff	postinc2,f_lseek@ifptr+3
 10950                           
 10951                           ;ff.c: 3114:   fp->fptr = nsect = 0;
 10952   001AD8  0E00               	movlw	0
 10953   001ADA  6F95               	movwf	f_lseek@nsect& (0+255),b
 10954   001ADC  0E00               	movlw	0
 10955   001ADE  6F96               	movwf	(f_lseek@nsect+1)& (0+255),b
 10956   001AE0  0E00               	movlw	0
 10957   001AE2  6F97               	movwf	(f_lseek@nsect+2)& (0+255),b
 10958   001AE4  0E00               	movlw	0
 10959   001AE6  6F98               	movwf	(f_lseek@nsect+3)& (0+255),b
 10960   001AE8  EE20 F006          	lfsr	2,6
 10961   001AEC  506D               	movf	f_lseek@fp^0,w,c
 10962   001AEE  26D9               	addwf	fsr2l,f,c
 10963   001AF0  506E               	movf	(f_lseek@fp+1)^0,w,c
 10964   001AF2  22DA               	addwfc	fsr2h,f,c
 10965   001AF4  C095  FFDE         	movff	f_lseek@nsect,postinc2
 10966   001AF8  C096  FFDE         	movff	f_lseek@nsect+1,postinc2
 10967   001AFC  C097  FFDE         	movff	f_lseek@nsect+2,postinc2
 10968   001B00  C098  FFDE         	movff	f_lseek@nsect+3,postinc2
 10969   001B04                     
 10970                           ; BSR set to: 0
 10971                           ;ff.c: 3115:   if (ofs) {
 10972   001B04  506F               	movf	f_lseek@ofs^0,w,c
 10973   001B06  1070               	iorwf	(f_lseek@ofs+1)^0,w,c
 10974   001B08  1071               	iorwf	(f_lseek@ofs+2)^0,w,c
 10975   001B0A  1072               	iorwf	(f_lseek@ofs+3)^0,w,c
 10976   001B0C  B4D8               	btfsc	status,2,c
 10977   001B0E  EF8B  F00D         	goto	u8781
 10978   001B12  EF8D  F00D         	goto	u8780
 10979   001B16                     u8781:
 10980   001B16  EF24  F010         	goto	l6375
 10981   001B1A                     u8780:
 10982   001B1A                     
 10983                           ; BSR set to: 0
 10984                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
 10985   001B1A  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10986   001B1E  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10987   001B22  EE10 F002          	lfsr	1,2
 10988   001B26  50DE               	movf	postinc2,w,c
 10989   001B28  26E1               	addwf	fsr1l,f,c
 10990   001B2A  50DD               	movf	postdec2,w,c
 10991   001B2C  22E2               	addwfc	fsr1h,f,c
 10992   001B2E  50E7               	movf	indf1,w,c
 10993   001B30  6F80               	movwf	??_f_lseek& (0+255),b
 10994   001B32  C080  F081         	movff	??_f_lseek,??_f_lseek+1
 10995   001B36  6B82               	clrf	(??_f_lseek+2)& (0+255),b
 10996   001B38  6B83               	clrf	(??_f_lseek+3)& (0+255),b
 10997   001B3A  6B84               	clrf	(??_f_lseek+4)& (0+255),b
 10998   001B3C  0E09               	movlw	9
 10999   001B3E                     u8795:
 11000   001B3E  90D8               	bcf	status,0,c
 11001   001B40  3781               	rlcf	(??_f_lseek+1)& (0+255),f,b
 11002   001B42  3782               	rlcf	(??_f_lseek+2)& (0+255),f,b
 11003   001B44  3783               	rlcf	(??_f_lseek+3)& (0+255),f,b
 11004   001B46  3784               	rlcf	(??_f_lseek+4)& (0+255),f,b
 11005   001B48  2EE8               	decfsz	wreg,f,c
 11006   001B4A  EF9F  F00D         	goto	u8795
 11007   001B4E  C081  F099         	movff	??_f_lseek+1,f_lseek@bcs
 11008   001B52  C082  F09A         	movff	??_f_lseek+2,f_lseek@bcs+1
 11009   001B56  C083  F09B         	movff	??_f_lseek+3,f_lseek@bcs+2
 11010   001B5A  C084  F09C         	movff	??_f_lseek+4,f_lseek@bcs+3
 11011   001B5E                     
 11012                           ; BSR set to: 0
 11013                           ;ff.c: 3117:    if (ifptr > 0 &&
 11014   001B5E  5191               	movf	f_lseek@ifptr& (0+255),w,b
 11015   001B60  1192               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 11016   001B62  1193               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 11017   001B64  1194               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 11018   001B66  B4D8               	btfsc	status,2,c
 11019   001B68  EFB8  F00D         	goto	u8801
 11020   001B6C  EFBA  F00D         	goto	u8800
 11021   001B70                     u8801:
 11022   001B70  EF57  F00E         	goto	l6307
 11023   001B74                     u8800:
 11024   001B74                     
 11025                           ; BSR set to: 0
 11026   001B74  0EFF               	movlw	255
 11027   001B76  246F               	addwf	f_lseek@ofs^0,w,c
 11028   001B78  6E01               	movwf	___lldiv@dividend^0,c
 11029   001B7A  0EFF               	movlw	255
 11030   001B7C  2070               	addwfc	(f_lseek@ofs+1)^0,w,c
 11031   001B7E  6E02               	movwf	(___lldiv@dividend+1)^0,c
 11032   001B80  0EFF               	movlw	255
 11033   001B82  2071               	addwfc	(f_lseek@ofs+2)^0,w,c
 11034   001B84  6E03               	movwf	(___lldiv@dividend+2)^0,c
 11035   001B86  0EFF               	movlw	255
 11036   001B88  2072               	addwfc	(f_lseek@ofs+3)^0,w,c
 11037   001B8A  6E04               	movwf	(___lldiv@dividend+3)^0,c
 11038   001B8C  C099  F005         	movff	f_lseek@bcs,___lldiv@divisor
 11039   001B90  C09A  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 11040   001B94  C09B  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 11041   001B98  C09C  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 11042   001B9C  EC6B  F02F         	call	___lldiv	;wreg free
 11043   001BA0  C001  F080         	movff	?___lldiv,??_f_lseek
 11044   001BA4  C002  F081         	movff	?___lldiv+1,??_f_lseek+1
 11045   001BA8  C003  F082         	movff	?___lldiv+2,??_f_lseek+2
 11046   001BAC  C004  F083         	movff	?___lldiv+3,??_f_lseek+3
 11047   001BB0  0EFF               	movlw	255
 11048   001BB2  0100               	movlb	0	; () banked
 11049   001BB4  2591               	addwf	f_lseek@ifptr& (0+255),w,b
 11050   001BB6  6E01               	movwf	___lldiv@dividend^0,c
 11051   001BB8  0EFF               	movlw	255
 11052   001BBA  2192               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 11053   001BBC  6E02               	movwf	(___lldiv@dividend+1)^0,c
 11054   001BBE  0EFF               	movlw	255
 11055   001BC0  2193               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 11056   001BC2  6E03               	movwf	(___lldiv@dividend+2)^0,c
 11057   001BC4  0EFF               	movlw	255
 11058   001BC6  2194               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 11059   001BC8  6E04               	movwf	(___lldiv@dividend+3)^0,c
 11060   001BCA  C099  F005         	movff	f_lseek@bcs,___lldiv@divisor
 11061   001BCE  C09A  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 11062   001BD2  C09B  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 11063   001BD6  C09C  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 11064   001BDA  EC6B  F02F         	call	___lldiv	;wreg free
 11065   001BDE  5001               	movf	?___lldiv^0,w,c
 11066   001BE0  0100               	movlb	0	; () banked
 11067   001BE2  5D80               	subwf	??_f_lseek& (0+255),w,b
 11068   001BE4  5002               	movf	(?___lldiv+1)^0,w,c
 11069   001BE6  5981               	subwfb	(??_f_lseek+1)& (0+255),w,b
 11070   001BE8  5003               	movf	(?___lldiv+2)^0,w,c
 11071   001BEA  5982               	subwfb	(??_f_lseek+2)& (0+255),w,b
 11072   001BEC  5004               	movf	(?___lldiv+3)^0,w,c
 11073   001BEE  5983               	subwfb	(??_f_lseek+3)& (0+255),w,b
 11074   001BF0  A0D8               	btfss	status,0,c
 11075   001BF2  EFFD  F00D         	goto	u8811
 11076   001BF6  EFFF  F00D         	goto	u8810
 11077   001BFA                     u8811:
 11078   001BFA  EF57  F00E         	goto	l6307
 11079   001BFE                     u8810:
 11080   001BFE                     
 11081                           ; BSR set to: 0
 11082                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
 11083   001BFE  0EFF               	movlw	255
 11084   001C00  2599               	addwf	f_lseek@bcs& (0+255),w,b
 11085   001C02  6F80               	movwf	??_f_lseek& (0+255),b
 11086   001C04  0EFF               	movlw	255
 11087   001C06  219A               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
 11088   001C08  6F81               	movwf	(??_f_lseek+1)& (0+255),b
 11089   001C0A  0EFF               	movlw	255
 11090   001C0C  219B               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
 11091   001C0E  6F82               	movwf	(??_f_lseek+2)& (0+255),b
 11092   001C10  0EFF               	movlw	255
 11093   001C12  219C               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
 11094   001C14  6F83               	movwf	(??_f_lseek+3)& (0+255),b
 11095   001C16  1D80               	comf	??_f_lseek& (0+255),w,b
 11096   001C18  6F84               	movwf	(??_f_lseek+4)& (0+255),b
 11097   001C1A  1D81               	comf	(??_f_lseek+1)& (0+255),w,b
 11098   001C1C  6F85               	movwf	(??_f_lseek+5)& (0+255),b
 11099   001C1E  1D82               	comf	(??_f_lseek+2)& (0+255),w,b
 11100   001C20  6F86               	movwf	(??_f_lseek+6)& (0+255),b
 11101   001C22  1D83               	comf	(??_f_lseek+3)& (0+255),w,b
 11102   001C24  6F87               	movwf	(??_f_lseek+7)& (0+255),b
 11103   001C26  0EFF               	movlw	255
 11104   001C28  2591               	addwf	f_lseek@ifptr& (0+255),w,b
 11105   001C2A  6F88               	movwf	(??_f_lseek+8)& (0+255),b
 11106   001C2C  0EFF               	movlw	255
 11107   001C2E  2192               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 11108   001C30  6F89               	movwf	(??_f_lseek+9)& (0+255),b
 11109   001C32  0EFF               	movlw	255
 11110   001C34  2193               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 11111   001C36  6F8A               	movwf	(??_f_lseek+10)& (0+255),b
 11112   001C38  0EFF               	movlw	255
 11113   001C3A  2194               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 11114   001C3C  6F8B               	movwf	(??_f_lseek+11)& (0+255),b
 11115   001C3E  5184               	movf	(??_f_lseek+4)& (0+255),w,b
 11116   001C40  1588               	andwf	(??_f_lseek+8)& (0+255),w,b
 11117   001C42  6F8C               	movwf	(??_f_lseek+12)& (0+255),b
 11118   001C44  5185               	movf	(??_f_lseek+5)& (0+255),w,b
 11119   001C46  1589               	andwf	(??_f_lseek+9)& (0+255),w,b
 11120   001C48  6F8D               	movwf	(??_f_lseek+13)& (0+255),b
 11121   001C4A  5186               	movf	(??_f_lseek+6)& (0+255),w,b
 11122   001C4C  158A               	andwf	(??_f_lseek+10)& (0+255),w,b
 11123   001C4E  6F8E               	movwf	(??_f_lseek+14)& (0+255),b
 11124   001C50  5187               	movf	(??_f_lseek+7)& (0+255),w,b
 11125   001C52  158B               	andwf	(??_f_lseek+11)& (0+255),w,b
 11126   001C54  6F8F               	movwf	(??_f_lseek+15)& (0+255),b
 11127   001C56  EE20 F006          	lfsr	2,6
 11128   001C5A  506D               	movf	f_lseek@fp^0,w,c
 11129   001C5C  26D9               	addwf	fsr2l,f,c
 11130   001C5E  506E               	movf	(f_lseek@fp+1)^0,w,c
 11131   001C60  22DA               	addwfc	fsr2h,f,c
 11132   001C62  C08C  FFDE         	movff	??_f_lseek+12,postinc2
 11133   001C66  C08D  FFDE         	movff	??_f_lseek+13,postinc2
 11134   001C6A  C08E  FFDE         	movff	??_f_lseek+14,postinc2
 11135   001C6E  C08F  FFDE         	movff	??_f_lseek+15,postinc2
 11136                           
 11137                           ;ff.c: 3120:     ofs -= fp->fptr;
 11138   001C72  EE20 F006          	lfsr	2,6
 11139   001C76  506D               	movf	f_lseek@fp^0,w,c
 11140   001C78  26D9               	addwf	fsr2l,f,c
 11141   001C7A  506E               	movf	(f_lseek@fp+1)^0,w,c
 11142   001C7C  22DA               	addwfc	fsr2h,f,c
 11143   001C7E  50DE               	movf	postinc2,w,c
 11144   001C80  5E6F               	subwf	f_lseek@ofs^0,f,c
 11145   001C82  50DE               	movf	postinc2,w,c
 11146   001C84  5A70               	subwfb	(f_lseek@ofs+1)^0,f,c
 11147   001C86  50DE               	movf	postinc2,w,c
 11148   001C88  5A71               	subwfb	(f_lseek@ofs+2)^0,f,c
 11149   001C8A  50DD               	movf	postdec2,w,c
 11150   001C8C  5A72               	subwfb	(f_lseek@ofs+3)^0,f,c
 11151                           
 11152                           ;ff.c: 3121:     clst = fp->clust;
 11153   001C8E  EE20 F012          	lfsr	2,18
 11154   001C92  506D               	movf	f_lseek@fp^0,w,c
 11155   001C94  26D9               	addwf	fsr2l,f,c
 11156   001C96  506E               	movf	(f_lseek@fp+1)^0,w,c
 11157   001C98  22DA               	addwfc	fsr2h,f,c
 11158   001C9A  CFDE F09D          	movff	postinc2,f_lseek@clst
 11159   001C9E  CFDE F09E          	movff	postinc2,f_lseek@clst+1
 11160   001CA2  CFDE F09F          	movff	postinc2,f_lseek@clst+2
 11161   001CA6  CFDE F0A0          	movff	postinc2,f_lseek@clst+3
 11162                           
 11163                           ;ff.c: 3122:    } else {
 11164   001CAA  EFD4  F00E         	goto	l6327
 11165   001CAE                     l6307:
 11166                           
 11167                           ; BSR set to: 0
 11168                           ;ff.c: 3123:     clst = fp->sclust;
 11169   001CAE  EE20 F00E          	lfsr	2,14
 11170   001CB2  506D               	movf	f_lseek@fp^0,w,c
 11171   001CB4  26D9               	addwf	fsr2l,f,c
 11172   001CB6  506E               	movf	(f_lseek@fp+1)^0,w,c
 11173   001CB8  22DA               	addwfc	fsr2h,f,c
 11174   001CBA  CFDE F09D          	movff	postinc2,f_lseek@clst
 11175   001CBE  CFDE F09E          	movff	postinc2,f_lseek@clst+1
 11176   001CC2  CFDE F09F          	movff	postinc2,f_lseek@clst+2
 11177   001CC6  CFDE F0A0          	movff	postinc2,f_lseek@clst+3
 11178   001CCA                     
 11179                           ; BSR set to: 0
 11180                           ;ff.c: 3125:     if (clst == 0) {
 11181   001CCA  519D               	movf	f_lseek@clst& (0+255),w,b
 11182   001CCC  119E               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 11183   001CCE  119F               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 11184   001CD0  11A0               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 11185   001CD2  A4D8               	btfss	status,2,c
 11186   001CD4  EF6E  F00E         	goto	u8821
 11187   001CD8  EF70  F00E         	goto	u8820
 11188   001CDC                     u8821:
 11189   001CDC  EFC6  F00E         	goto	l750
 11190   001CE0                     u8820:
 11191   001CE0                     
 11192                           ; BSR set to: 0
 11193                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
 11194   001CE0  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 11195   001CE4  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 11196   001CE8  CFDE F056          	movff	postinc2,create_chain@fs
 11197   001CEC  CFDD F057          	movff	postdec2,create_chain@fs+1
 11198   001CF0  0E00               	movlw	0
 11199   001CF2  6E58               	movwf	create_chain@clst^0,c
 11200   001CF4  0E00               	movlw	0
 11201   001CF6  6E59               	movwf	(create_chain@clst+1)^0,c
 11202   001CF8  0E00               	movlw	0
 11203   001CFA  6E5A               	movwf	(create_chain@clst+2)^0,c
 11204   001CFC  0E00               	movlw	0
 11205   001CFE  6E5B               	movwf	(create_chain@clst+3)^0,c
 11206   001D00  EC3D  F01C         	call	_create_chain	;wreg free
 11207   001D04  C056  F09D         	movff	?_create_chain,f_lseek@clst
 11208   001D08  C057  F09E         	movff	?_create_chain+1,f_lseek@clst+1
 11209   001D0C  C058  F09F         	movff	?_create_chain+2,f_lseek@clst+2
 11210   001D10  C059  F0A0         	movff	?_create_chain+3,f_lseek@clst+3
 11211   001D14                     
 11212                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 11213   001D14  0100               	movlb	0	; () banked
 11214   001D16  059D               	decf	f_lseek@clst& (0+255),w,b
 11215   001D18  119E               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 11216   001D1A  119F               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 11217   001D1C  11A0               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 11218   001D1E  A4D8               	btfss	status,2,c
 11219   001D20  EF94  F00E         	goto	u8831
 11220   001D24  EF96  F00E         	goto	u8830
 11221   001D28                     u8831:
 11222   001D28  EFA0  F00E         	goto	l6319
 11223   001D2C                     u8830:
 11224   001D2C                     
 11225                           ; BSR set to: 0
 11226   001D2C  EE20 F005          	lfsr	2,5
 11227   001D30  506D               	movf	f_lseek@fp^0,w,c
 11228   001D32  26D9               	addwf	fsr2l,f,c
 11229   001D34  506E               	movf	(f_lseek@fp+1)^0,w,c
 11230   001D36  22DA               	addwfc	fsr2h,f,c
 11231   001D38  0E02               	movlw	2
 11232   001D3A  6EDF               	movwf	indf2,c
 11233   001D3C  EF9E  F010         	goto	l744
 11234   001D40                     l6319:
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
 11238   001D40  299D               	incf	f_lseek@clst& (0+255),w,b
 11239   001D42  E10A               	bnz	u8841
 11240   001D44  299E               	incf	(f_lseek@clst+1)& (0+255),w,b
 11241   001D46  E108               	bnz	u8841
 11242   001D48  299F               	incf	(f_lseek@clst+2)& (0+255),w,b
 11243   001D4A  E106               	bnz	u8841
 11244   001D4C  29A0               	incf	(f_lseek@clst+3)& (0+255),w,b
 11245   001D4E  A4D8               	btfss	status,2,c
 11246   001D50  EFAC  F00E         	goto	u8841
 11247   001D54  EFAE  F00E         	goto	u8840
 11248   001D58                     u8841:
 11249   001D58  EFB8  F00E         	goto	l6325
 11250   001D5C                     u8840:
 11251   001D5C                     
 11252                           ; BSR set to: 0
 11253   001D5C  EE20 F005          	lfsr	2,5
 11254   001D60  506D               	movf	f_lseek@fp^0,w,c
 11255   001D62  26D9               	addwf	fsr2l,f,c
 11256   001D64  506E               	movf	(f_lseek@fp+1)^0,w,c
 11257   001D66  22DA               	addwfc	fsr2h,f,c
 11258   001D68  0E01               	movlw	1
 11259   001D6A  6EDF               	movwf	indf2,c
 11260   001D6C  EF9E  F010         	goto	l744
 11261   001D70                     l6325:
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;ff.c: 3129:      fp->sclust = clst;
 11265   001D70  EE20 F00E          	lfsr	2,14
 11266   001D74  506D               	movf	f_lseek@fp^0,w,c
 11267   001D76  26D9               	addwf	fsr2l,f,c
 11268   001D78  506E               	movf	(f_lseek@fp+1)^0,w,c
 11269   001D7A  22DA               	addwfc	fsr2h,f,c
 11270   001D7C  C09D  FFDE         	movff	f_lseek@clst,postinc2
 11271   001D80  C09E  FFDE         	movff	f_lseek@clst+1,postinc2
 11272   001D84  C09F  FFDE         	movff	f_lseek@clst+2,postinc2
 11273   001D88  C0A0  FFDE         	movff	f_lseek@clst+3,postinc2
 11274   001D8C                     l750:
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;ff.c: 3132:     fp->clust = clst;
 11278   001D8C  EE20 F012          	lfsr	2,18
 11279   001D90  506D               	movf	f_lseek@fp^0,w,c
 11280   001D92  26D9               	addwf	fsr2l,f,c
 11281   001D94  506E               	movf	(f_lseek@fp+1)^0,w,c
 11282   001D96  22DA               	addwfc	fsr2h,f,c
 11283   001D98  C09D  FFDE         	movff	f_lseek@clst,postinc2
 11284   001D9C  C09E  FFDE         	movff	f_lseek@clst+1,postinc2
 11285   001DA0  C09F  FFDE         	movff	f_lseek@clst+2,postinc2
 11286   001DA4  C0A0  FFDE         	movff	f_lseek@clst+3,postinc2
 11287   001DA8                     l6327:
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;ff.c: 3134:    if (clst != 0) {
 11291   001DA8  519D               	movf	f_lseek@clst& (0+255),w,b
 11292   001DAA  119E               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 11293   001DAC  119F               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 11294   001DAE  11A0               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 11295   001DB0  B4D8               	btfsc	status,2,c
 11296   001DB2  EFDD  F00E         	goto	u8851
 11297   001DB6  EFDF  F00E         	goto	u8850
 11298   001DBA                     u8851:
 11299   001DBA  EF24  F010         	goto	l6375
 11300   001DBE                     u8850:
 11301   001DBE  EFA5  F00F         	goto	l6359
 11302   001DC2                     l6331:
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;ff.c: 3137:      if (fp->flag & 0x02) {
 11306   001DC2  EE20 F004          	lfsr	2,4
 11307   001DC6  506D               	movf	f_lseek@fp^0,w,c
 11308   001DC8  26D9               	addwf	fsr2l,f,c
 11309   001DCA  506E               	movf	(f_lseek@fp+1)^0,w,c
 11310   001DCC  22DA               	addwfc	fsr2h,f,c
 11311   001DCE  A2DF               	btfss	indf2,1,c
 11312   001DD0  EFEC  F00E         	goto	u8861
 11313   001DD4  EFEE  F00E         	goto	u8860
 11314   001DD8                     u8861:
 11315   001DD8  EF1E  F00F         	goto	l6339
 11316   001DDC                     u8860:
 11317   001DDC                     
 11318                           ; BSR set to: 0
 11319                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
 11320   001DDC  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 11321   001DE0  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 11322   001DE4  CFDE F056          	movff	postinc2,create_chain@fs
 11323   001DE8  CFDD F057          	movff	postdec2,create_chain@fs+1
 11324   001DEC  C09D  F058         	movff	f_lseek@clst,create_chain@clst
 11325   001DF0  C09E  F059         	movff	f_lseek@clst+1,create_chain@clst+1
 11326   001DF4  C09F  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
 11327   001DF8  C0A0  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
 11328   001DFC  EC3D  F01C         	call	_create_chain	;wreg free
 11329   001E00  C056  F09D         	movff	?_create_chain,f_lseek@clst
 11330   001E04  C057  F09E         	movff	?_create_chain+1,f_lseek@clst+1
 11331   001E08  C058  F09F         	movff	?_create_chain+2,f_lseek@clst+2
 11332   001E0C  C059  F0A0         	movff	?_create_chain+3,f_lseek@clst+3
 11333   001E10                     
 11334                           ;ff.c: 3139:       if (clst == 0) {
 11335   001E10  0100               	movlb	0	; () banked
 11336   001E12  519D               	movf	f_lseek@clst& (0+255),w,b
 11337   001E14  119E               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 11338   001E16  119F               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 11339   001E18  11A0               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 11340   001E1A  A4D8               	btfss	status,2,c
 11341   001E1C  EF12  F00F         	goto	u8871
 11342   001E20  EF14  F00F         	goto	u8870
 11343   001E24                     u8871:
 11344   001E24  EF38  F00F         	goto	l6341
 11345   001E28                     u8870:
 11346   001E28                     
 11347                           ; BSR set to: 0
 11348                           ;ff.c: 3140:        ofs = bcs; break;
 11349   001E28  C099  F06F         	movff	f_lseek@bcs,f_lseek@ofs
 11350   001E2C  C09A  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
 11351   001E30  C09B  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
 11352   001E34  C09C  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
 11353   001E38  EFB4  F00F         	goto	l6361
 11354   001E3C                     l6339:
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
 11358   001E3C  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 11359   001E40  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 11360   001E44  CFDE F03B          	movff	postinc2,get_fat@fs
 11361   001E48  CFDD F03C          	movff	postdec2,get_fat@fs+1
 11362   001E4C  C09D  F03D         	movff	f_lseek@clst,get_fat@clst
 11363   001E50  C09E  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
 11364   001E54  C09F  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
 11365   001E58  C0A0  F040         	movff	f_lseek@clst+3,get_fat@clst+3
 11366   001E5C  EC4E  F01A         	call	_get_fat	;wreg free
 11367   001E60  C03B  F09D         	movff	?_get_fat,f_lseek@clst
 11368   001E64  C03C  F09E         	movff	?_get_fat+1,f_lseek@clst+1
 11369   001E68  C03D  F09F         	movff	?_get_fat+2,f_lseek@clst+2
 11370   001E6C  C03E  F0A0         	movff	?_get_fat+3,f_lseek@clst+3
 11371   001E70                     l6341:
 11372                           
 11373                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
 11374   001E70  0100               	movlb	0	; () banked
 11375   001E72  299D               	incf	f_lseek@clst& (0+255),w,b
 11376   001E74  E10A               	bnz	u8881
 11377   001E76  299E               	incf	(f_lseek@clst+1)& (0+255),w,b
 11378   001E78  E108               	bnz	u8881
 11379   001E7A  299F               	incf	(f_lseek@clst+2)& (0+255),w,b
 11380   001E7C  E106               	bnz	u8881
 11381   001E7E  29A0               	incf	(f_lseek@clst+3)& (0+255),w,b
 11382   001E80  A4D8               	btfss	status,2,c
 11383   001E82  EF45  F00F         	goto	u8881
 11384   001E86  EF47  F00F         	goto	u8880
 11385   001E8A                     u8881:
 11386   001E8A  EF51  F00F         	goto	l6347
 11387   001E8E                     u8880:
 11388   001E8E                     
 11389                           ; BSR set to: 0
 11390   001E8E  EE20 F005          	lfsr	2,5
 11391   001E92  506D               	movf	f_lseek@fp^0,w,c
 11392   001E94  26D9               	addwf	fsr2l,f,c
 11393   001E96  506E               	movf	(f_lseek@fp+1)^0,w,c
 11394   001E98  22DA               	addwfc	fsr2h,f,c
 11395   001E9A  0E01               	movlw	1
 11396   001E9C  6EDF               	movwf	indf2,c
 11397   001E9E  EF9E  F010         	goto	l744
 11398   001EA2                     l6347:
 11399                           
 11400                           ; BSR set to: 0
 11401                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
 11402   001EA2  51A0               	movf	(f_lseek@clst+3)& (0+255),w,b
 11403   001EA4  119F               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 11404   001EA6  119E               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 11405   001EA8  E109               	bnz	u8890
 11406   001EAA  0E02               	movlw	2
 11407   001EAC  5D9D               	subwf	f_lseek@clst& (0+255),w,b
 11408   001EAE  A0D8               	btfss	status,0,c
 11409   001EB0  EF5C  F00F         	goto	u8891
 11410   001EB4  EF5E  F00F         	goto	u8890
 11411   001EB8                     u8891:
 11412   001EB8  EF77  F00F         	goto	l6351
 11413   001EBC                     u8890:
 11414   001EBC                     
 11415                           ; BSR set to: 0
 11416   001EBC  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 11417   001EC0  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 11418   001EC4  EE10 F012          	lfsr	1,18
 11419   001EC8  50DE               	movf	postinc2,w,c
 11420   001ECA  26E1               	addwf	fsr1l,f,c
 11421   001ECC  50DD               	movf	postdec2,w,c
 11422   001ECE  22E2               	addwfc	fsr1h,f,c
 11423   001ED0  50E6               	movf	postinc1,w,c
 11424   001ED2  5D9D               	subwf	f_lseek@clst& (0+255),w,b
 11425   001ED4  50E6               	movf	postinc1,w,c
 11426   001ED6  599E               	subwfb	(f_lseek@clst+1)& (0+255),w,b
 11427   001ED8  50E6               	movf	postinc1,w,c
 11428   001EDA  599F               	subwfb	(f_lseek@clst+2)& (0+255),w,b
 11429   001EDC  50E6               	movf	postinc1,w,c
 11430   001EDE  59A0               	subwfb	(f_lseek@clst+3)& (0+255),w,b
 11431   001EE0  A0D8               	btfss	status,0,c
 11432   001EE2  EF75  F00F         	goto	u8901
 11433   001EE6  EF77  F00F         	goto	u8900
 11434   001EEA                     u8901:
 11435   001EEA  EF81  F00F         	goto	l6355
 11436   001EEE                     u8900:
 11437   001EEE                     l6351:
 11438                           
 11439                           ; BSR set to: 0
 11440   001EEE  EE20 F005          	lfsr	2,5
 11441   001EF2  506D               	movf	f_lseek@fp^0,w,c
 11442   001EF4  26D9               	addwf	fsr2l,f,c
 11443   001EF6  506E               	movf	(f_lseek@fp+1)^0,w,c
 11444   001EF8  22DA               	addwfc	fsr2h,f,c
 11445   001EFA  0E02               	movlw	2
 11446   001EFC  6EDF               	movwf	indf2,c
 11447   001EFE  EF9E  F010         	goto	l744
 11448   001F02                     l6355:
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;ff.c: 3147:      fp->clust = clst;
 11452   001F02  EE20 F012          	lfsr	2,18
 11453   001F06  506D               	movf	f_lseek@fp^0,w,c
 11454   001F08  26D9               	addwf	fsr2l,f,c
 11455   001F0A  506E               	movf	(f_lseek@fp+1)^0,w,c
 11456   001F0C  22DA               	addwfc	fsr2h,f,c
 11457   001F0E  C09D  FFDE         	movff	f_lseek@clst,postinc2
 11458   001F12  C09E  FFDE         	movff	f_lseek@clst+1,postinc2
 11459   001F16  C09F  FFDE         	movff	f_lseek@clst+2,postinc2
 11460   001F1A  C0A0  FFDE         	movff	f_lseek@clst+3,postinc2
 11461                           
 11462                           ;ff.c: 3148:      fp->fptr += bcs;
 11463   001F1E  EE20 F006          	lfsr	2,6
 11464   001F22  506D               	movf	f_lseek@fp^0,w,c
 11465   001F24  26D9               	addwf	fsr2l,f,c
 11466   001F26  506E               	movf	(f_lseek@fp+1)^0,w,c
 11467   001F28  22DA               	addwfc	fsr2h,f,c
 11468   001F2A  5199               	movf	f_lseek@bcs& (0+255),w,b
 11469   001F2C  26DE               	addwf	postinc2,f,c
 11470   001F2E  519A               	movf	(f_lseek@bcs+1)& (0+255),w,b
 11471   001F30  22DE               	addwfc	postinc2,f,c
 11472   001F32  519B               	movf	(f_lseek@bcs+2)& (0+255),w,b
 11473   001F34  22DE               	addwfc	postinc2,f,c
 11474   001F36  519C               	movf	(f_lseek@bcs+3)& (0+255),w,b
 11475   001F38  22DE               	addwfc	postinc2,f,c
 11476   001F3A                     
 11477                           ; BSR set to: 0
 11478                           ;ff.c: 3149:      ofs -= bcs;
 11479   001F3A  5199               	movf	f_lseek@bcs& (0+255),w,b
 11480   001F3C  5E6F               	subwf	f_lseek@ofs^0,f,c
 11481   001F3E  519A               	movf	(f_lseek@bcs+1)& (0+255),w,b
 11482   001F40  5A70               	subwfb	(f_lseek@ofs+1)^0,f,c
 11483   001F42  519B               	movf	(f_lseek@bcs+2)& (0+255),w,b
 11484   001F44  5A71               	subwfb	(f_lseek@ofs+2)^0,f,c
 11485   001F46  519C               	movf	(f_lseek@bcs+3)& (0+255),w,b
 11486   001F48  5A72               	subwfb	(f_lseek@ofs+3)^0,f,c
 11487   001F4A                     l6359:
 11488                           
 11489                           ; BSR set to: 0
 11490                           ;ff.c: 3135:     while (ofs > bcs) {
 11491   001F4A  506F               	movf	f_lseek@ofs^0,w,c
 11492   001F4C  5D99               	subwf	f_lseek@bcs& (0+255),w,b
 11493   001F4E  5070               	movf	(f_lseek@ofs+1)^0,w,c
 11494   001F50  599A               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
 11495   001F52  5071               	movf	(f_lseek@ofs+2)^0,w,c
 11496   001F54  599B               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
 11497   001F56  5072               	movf	(f_lseek@ofs+3)^0,w,c
 11498   001F58  599C               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
 11499   001F5A  A0D8               	btfss	status,0,c
 11500   001F5C  EFB2  F00F         	goto	u8911
 11501   001F60  EFB4  F00F         	goto	u8910
 11502   001F64                     u8911:
 11503   001F64  EFE1  F00E         	goto	l6331
 11504   001F68                     u8910:
 11505   001F68                     l6361:
 11506                           
 11507                           ; BSR set to: 0
 11508                           ;ff.c: 3151:     fp->fptr += ofs;
 11509   001F68  EE20 F006          	lfsr	2,6
 11510   001F6C  506D               	movf	f_lseek@fp^0,w,c
 11511   001F6E  26D9               	addwf	fsr2l,f,c
 11512   001F70  506E               	movf	(f_lseek@fp+1)^0,w,c
 11513   001F72  22DA               	addwfc	fsr2h,f,c
 11514   001F74  506F               	movf	f_lseek@ofs^0,w,c
 11515   001F76  26DE               	addwf	postinc2,f,c
 11516   001F78  5070               	movf	(f_lseek@ofs+1)^0,w,c
 11517   001F7A  22DE               	addwfc	postinc2,f,c
 11518   001F7C  5071               	movf	(f_lseek@ofs+2)^0,w,c
 11519   001F7E  22DE               	addwfc	postinc2,f,c
 11520   001F80  5072               	movf	(f_lseek@ofs+3)^0,w,c
 11521   001F82  22DE               	addwfc	postinc2,f,c
 11522   001F84                     
 11523                           ; BSR set to: 0
 11524                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
 11525   001F84  0EFF               	movlw	255
 11526   001F86  146F               	andwf	f_lseek@ofs^0,w,c
 11527   001F88  6F80               	movwf	??_f_lseek& (0+255),b
 11528   001F8A  0E01               	movlw	1
 11529   001F8C  1470               	andwf	(f_lseek@ofs+1)^0,w,c
 11530   001F8E  6F81               	movwf	(??_f_lseek+1)& (0+255),b
 11531   001F90  0E00               	movlw	0
 11532   001F92  1471               	andwf	(f_lseek@ofs+2)^0,w,c
 11533   001F94  6F82               	movwf	(??_f_lseek+2)& (0+255),b
 11534   001F96  0E00               	movlw	0
 11535   001F98  1472               	andwf	(f_lseek@ofs+3)^0,w,c
 11536   001F9A  6F83               	movwf	(??_f_lseek+3)& (0+255),b
 11537   001F9C  5180               	movf	??_f_lseek& (0+255),w,b
 11538   001F9E  1181               	iorwf	(??_f_lseek+1)& (0+255),w,b
 11539   001FA0  1182               	iorwf	(??_f_lseek+2)& (0+255),w,b
 11540   001FA2  1183               	iorwf	(??_f_lseek+3)& (0+255),w,b
 11541   001FA4  B4D8               	btfsc	status,2,c
 11542   001FA6  EFD7  F00F         	goto	u8921
 11543   001FAA  EFD9  F00F         	goto	u8920
 11544   001FAE                     u8921:
 11545   001FAE  EF24  F010         	goto	l6375
 11546   001FB2                     u8920:
 11547   001FB2                     
 11548                           ; BSR set to: 0
 11549                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
 11550   001FB2  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 11551   001FB6  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 11552   001FBA  CFDE F00D          	movff	postinc2,clust2sect@fs
 11553   001FBE  CFDD F00E          	movff	postdec2,clust2sect@fs+1
 11554   001FC2  C09D  F00F         	movff	f_lseek@clst,clust2sect@clst
 11555   001FC6  C09E  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
 11556   001FCA  C09F  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
 11557   001FCE  C0A0  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
 11558   001FD2  EC31  F02D         	call	_clust2sect	;wreg free
 11559   001FD6  C00D  F095         	movff	?_clust2sect,f_lseek@nsect
 11560   001FDA  C00E  F096         	movff	?_clust2sect+1,f_lseek@nsect+1
 11561   001FDE  C00F  F097         	movff	?_clust2sect+2,f_lseek@nsect+2
 11562   001FE2  C010  F098         	movff	?_clust2sect+3,f_lseek@nsect+3
 11563   001FE6                     
 11564                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 11565   001FE6  0100               	movlb	0	; () banked
 11566   001FE8  5195               	movf	f_lseek@nsect& (0+255),w,b
 11567   001FEA  1196               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
 11568   001FEC  1197               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
 11569   001FEE  1198               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
 11570   001FF0  A4D8               	btfss	status,2,c
 11571   001FF2  EFFD  F00F         	goto	u8931
 11572   001FF6  EFFF  F00F         	goto	u8930
 11573   001FFA                     u8931:
 11574   001FFA  EF09  F010         	goto	l6373
 11575   001FFE                     u8930:
 11576   001FFE                     
 11577                           ; BSR set to: 0
 11578   001FFE  EE20 F005          	lfsr	2,5
 11579   002002  506D               	movf	f_lseek@fp^0,w,c
 11580   002004  26D9               	addwf	fsr2l,f,c
 11581   002006  506E               	movf	(f_lseek@fp+1)^0,w,c
 11582   002008  22DA               	addwfc	fsr2h,f,c
 11583   00200A  0E02               	movlw	2
 11584   00200C  6EDF               	movwf	indf2,c
 11585   00200E  EF9E  F010         	goto	l744
 11586   002012                     l6373:
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
 11590   002012  C06F  F080         	movff	f_lseek@ofs,??_f_lseek
 11591   002016  C070  F081         	movff	f_lseek@ofs+1,??_f_lseek+1
 11592   00201A  C071  F082         	movff	f_lseek@ofs+2,??_f_lseek+2
 11593   00201E  C072  F083         	movff	f_lseek@ofs+3,??_f_lseek+3
 11594   002022  0E0A               	movlw	10
 11595   002024  EF19  F010         	goto	u8940
 11596   002028                     u8945:
 11597   002028  90D8               	bcf	status,0,c
 11598   00202A  3383               	rrcf	(??_f_lseek+3)& (0+255),f,b
 11599   00202C  3382               	rrcf	(??_f_lseek+2)& (0+255),f,b
 11600   00202E  3381               	rrcf	(??_f_lseek+1)& (0+255),f,b
 11601   002030  3380               	rrcf	??_f_lseek& (0+255),f,b
 11602   002032                     u8940:
 11603   002032  2EE8               	decfsz	wreg,f,c
 11604   002034  EF14  F010         	goto	u8945
 11605   002038  5180               	movf	??_f_lseek& (0+255),w,b
 11606   00203A  2795               	addwf	f_lseek@nsect& (0+255),f,b
 11607   00203C  5181               	movf	(??_f_lseek+1)& (0+255),w,b
 11608   00203E  2396               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
 11609   002040  5182               	movf	(??_f_lseek+2)& (0+255),w,b
 11610   002042  2397               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
 11611   002044  5183               	movf	(??_f_lseek+3)& (0+255),w,b
 11612   002046  2398               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
 11613   002048                     l6375:
 11614                           
 11615                           ; BSR set to: 0
 11616                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
 11617   002048  EE20 F006          	lfsr	2,6
 11618   00204C  506D               	movf	f_lseek@fp^0,w,c
 11619   00204E  26D9               	addwf	fsr2l,f,c
 11620   002050  506E               	movf	(f_lseek@fp+1)^0,w,c
 11621   002052  22DA               	addwfc	fsr2h,f,c
 11622   002054  0EFF               	movlw	255
 11623   002056  14DE               	andwf	postinc2,w,c
 11624   002058  6F80               	movwf	??_f_lseek& (0+255),b
 11625   00205A  0E01               	movlw	1
 11626   00205C  14DE               	andwf	postinc2,w,c
 11627   00205E  6F81               	movwf	(??_f_lseek+1)& (0+255),b
 11628   002060  0E00               	movlw	0
 11629   002062  14DE               	andwf	postinc2,w,c
 11630   002064  6F82               	movwf	(??_f_lseek+2)& (0+255),b
 11631   002066  0E00               	movlw	0
 11632   002068  14DE               	andwf	postinc2,w,c
 11633   00206A  6F83               	movwf	(??_f_lseek+3)& (0+255),b
 11634   00206C  5180               	movf	??_f_lseek& (0+255),w,b
 11635   00206E  1181               	iorwf	(??_f_lseek+1)& (0+255),w,b
 11636   002070  1182               	iorwf	(??_f_lseek+2)& (0+255),w,b
 11637   002072  1183               	iorwf	(??_f_lseek+3)& (0+255),w,b
 11638   002074  B4D8               	btfsc	status,2,c
 11639   002076  EF3F  F010         	goto	u8951
 11640   00207A  EF41  F010         	goto	u8950
 11641   00207E                     u8951:
 11642   00207E  EF67  F010         	goto	l6381
 11643   002082                     u8950:
 11644   002082                     
 11645                           ; BSR set to: 0
 11646   002082  EE20 F016          	lfsr	2,22
 11647   002086  506D               	movf	f_lseek@fp^0,w,c
 11648   002088  26D9               	addwf	fsr2l,f,c
 11649   00208A  506E               	movf	(f_lseek@fp+1)^0,w,c
 11650   00208C  22DA               	addwfc	fsr2h,f,c
 11651   00208E  5195               	movf	f_lseek@nsect& (0+255),w,b
 11652   002090  18DE               	xorwf	postinc2,w,c
 11653   002092  E10F               	bnz	u8960
 11654   002094  5196               	movf	(f_lseek@nsect+1)& (0+255),w,b
 11655   002096  18DE               	xorwf	postinc2,w,c
 11656   002098  E10C               	bnz	u8960
 11657   00209A  5197               	movf	(f_lseek@nsect+2)& (0+255),w,b
 11658   00209C  18DE               	xorwf	postinc2,w,c
 11659   00209E  E109               	bnz	u8960
 11660   0020A0  5198               	movf	(f_lseek@nsect+3)& (0+255),w,b
 11661   0020A2  18DE               	xorwf	postinc2,w,c
 11662   0020A4  B4D8               	btfsc	status,2,c
 11663   0020A6  EF57  F010         	goto	u8961
 11664   0020AA  EF59  F010         	goto	u8960
 11665   0020AE                     u8961:
 11666   0020AE  EF67  F010         	goto	l6381
 11667   0020B2                     u8960:
 11668   0020B2                     
 11669                           ; BSR set to: 0
 11670                           ;ff.c: 3171:    fp->dsect = nsect;
 11671   0020B2  EE20 F016          	lfsr	2,22
 11672   0020B6  506D               	movf	f_lseek@fp^0,w,c
 11673   0020B8  26D9               	addwf	fsr2l,f,c
 11674   0020BA  506E               	movf	(f_lseek@fp+1)^0,w,c
 11675   0020BC  22DA               	addwfc	fsr2h,f,c
 11676   0020BE  C095  FFDE         	movff	f_lseek@nsect,postinc2
 11677   0020C2  C096  FFDE         	movff	f_lseek@nsect+1,postinc2
 11678   0020C6  C097  FFDE         	movff	f_lseek@nsect+2,postinc2
 11679   0020CA  C098  FFDE         	movff	f_lseek@nsect+3,postinc2
 11680   0020CE                     l6381:
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
 11684   0020CE  EE20 F006          	lfsr	2,6
 11685   0020D2  506D               	movf	f_lseek@fp^0,w,c
 11686   0020D4  26D9               	addwf	fsr2l,f,c
 11687   0020D6  506E               	movf	(f_lseek@fp+1)^0,w,c
 11688   0020D8  22DA               	addwfc	fsr2h,f,c
 11689   0020DA  EE10 F00A          	lfsr	1,10
 11690   0020DE  506D               	movf	f_lseek@fp^0,w,c
 11691   0020E0  26E1               	addwf	fsr1l,f,c
 11692   0020E2  506E               	movf	(f_lseek@fp+1)^0,w,c
 11693   0020E4  22E2               	addwfc	fsr1h,f,c
 11694   0020E6  50DE               	movf	postinc2,w,c
 11695   0020E8  5CE6               	subwf	postinc1,w,c
 11696   0020EA  50DE               	movf	postinc2,w,c
 11697   0020EC  58E6               	subwfb	postinc1,w,c
 11698   0020EE  50DE               	movf	postinc2,w,c
 11699   0020F0  58E6               	subwfb	postinc1,w,c
 11700   0020F2  50DE               	movf	postinc2,w,c
 11701   0020F4  58E6               	subwfb	postinc1,w,c
 11702   0020F6  B0D8               	btfsc	status,0,c
 11703   0020F8  EF80  F010         	goto	u8971
 11704   0020FC  EF82  F010         	goto	u8970
 11705   002100                     u8971:
 11706   002100  EF9E  F010         	goto	l744
 11707   002104                     u8970:
 11708   002104                     
 11709                           ; BSR set to: 0
 11710                           ;ff.c: 3175:    fp->fsize = fp->fptr;
 11711   002104  EE20 F006          	lfsr	2,6
 11712   002108  506D               	movf	f_lseek@fp^0,w,c
 11713   00210A  26D9               	addwf	fsr2l,f,c
 11714   00210C  506E               	movf	(f_lseek@fp+1)^0,w,c
 11715   00210E  22DA               	addwfc	fsr2h,f,c
 11716   002110  EE10 F00A          	lfsr	1,10
 11717   002114  506D               	movf	f_lseek@fp^0,w,c
 11718   002116  26E1               	addwf	fsr1l,f,c
 11719   002118  506E               	movf	(f_lseek@fp+1)^0,w,c
 11720   00211A  22E2               	addwfc	fsr1h,f,c
 11721   00211C  CFDE FFE6          	movff	postinc2,postinc1
 11722   002120  CFDE FFE6          	movff	postinc2,postinc1
 11723   002124  CFDE FFE6          	movff	postinc2,postinc1
 11724   002128  CFDE FFE6          	movff	postinc2,postinc1
 11725   00212C                     
 11726                           ; BSR set to: 0
 11727                           ;ff.c: 3176:    fp->flag |= 0x20;
 11728   00212C  EE20 F004          	lfsr	2,4
 11729   002130  506D               	movf	f_lseek@fp^0,w,c
 11730   002132  26D9               	addwf	fsr2l,f,c
 11731   002134  506E               	movf	(f_lseek@fp+1)^0,w,c
 11732   002136  22DA               	addwfc	fsr2h,f,c
 11733   002138  0E00               	movlw	0
 11734   00213A  8ADB               	bsf	plusw2,5,c
 11735   00213C                     l744:
 11736                           
 11737                           ; BSR set to: 0
 11738   00213C  0012               	return		;funcret
 11739   00213E                     __end_of_f_lseek:
 11740                           	callstack 0
 11741                           
 11742 ;; *************** function _create_chain *****************
 11743 ;; Defined at:
 11744 ;;		line 990 in file "ff.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  fs              2   85[COMRAM] PTR struct .
 11747 ;;		 -> FatFs(558), NULL(0), 
 11748 ;;  clst            4   87[COMRAM] unsigned long 
 11749 ;; Auto vars:     Size  Location     Type
 11750 ;;  cs              4  104[COMRAM] unsigned long 
 11751 ;;  ncl             4  100[COMRAM] unsigned long 
 11752 ;;  scl             4   96[COMRAM] unsigned long 
 11753 ;;  res             1   95[COMRAM] enum E95
 11754 ;; Return value:  Size  Location     Type
 11755 ;;                  4   85[COMRAM] unsigned long 
 11756 ;; Registers used:
 11757 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11758 ;; Tracked objects:
 11759 ;;		On entry : 0/0
 11760 ;;		On exit  : 0/0
 11761 ;;		Unchanged: 0/0
 11762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11763 ;;      Params:         6       0       0       0       0       0       0
 11764 ;;      Locals:        13       0       0       0       0       0       0
 11765 ;;      Temps:          4       0       0       0       0       0       0
 11766 ;;      Totals:        23       0       0       0       0       0       0
 11767 ;;Total ram usage:       23 bytes
 11768 ;; Hardware stack levels used: 1
 11769 ;; Hardware stack levels required when called: 9
 11770 ;; This function calls:
 11771 ;;		_get_fat
 11772 ;;		_put_fat
 11773 ;; This function is called by:
 11774 ;;		_dir_next
 11775 ;;		_f_write
 11776 ;;		_f_lseek
 11777 ;; This function uses a non-reentrant model
 11778 ;;
 11779                           
 11780                           	psect	text32
 11781   00387A                     __ptext32:
 11782                           	callstack 0
 11783   00387A                     _create_chain:
 11784                           	callstack 20
 11785   00387A                     
 11786                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
 11787   00387A  5058               	movf	create_chain@clst^0,w,c
 11788   00387C  1059               	iorwf	(create_chain@clst+1)^0,w,c
 11789   00387E  105A               	iorwf	(create_chain@clst+2)^0,w,c
 11790   003880  105B               	iorwf	(create_chain@clst+3)^0,w,c
 11791   003882  A4D8               	btfss	status,2,c
 11792   003884  EF46  F01C         	goto	u5501
 11793   003888  EF48  F01C         	goto	u5500
 11794   00388C                     u5501:
 11795   00388C  EF80  F01C         	goto	l4543
 11796   003890                     u5500:
 11797   003890                     
 11798                           ;ff.c: 1000:   scl = fs->last_clust;
 11799   003890  EE20 F00A          	lfsr	2,10
 11800   003894  5056               	movf	create_chain@fs^0,w,c
 11801   003896  26D9               	addwf	fsr2l,f,c
 11802   003898  5057               	movf	(create_chain@fs+1)^0,w,c
 11803   00389A  22DA               	addwfc	fsr2h,f,c
 11804   00389C  CFDE F061          	movff	postinc2,create_chain@scl
 11805   0038A0  CFDE F062          	movff	postinc2,create_chain@scl+1
 11806   0038A4  CFDE F063          	movff	postinc2,create_chain@scl+2
 11807   0038A8  CFDE F064          	movff	postinc2,create_chain@scl+3
 11808   0038AC                     
 11809                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
 11810   0038AC  5061               	movf	create_chain@scl^0,w,c
 11811   0038AE  1062               	iorwf	(create_chain@scl+1)^0,w,c
 11812   0038B0  1063               	iorwf	(create_chain@scl+2)^0,w,c
 11813   0038B2  1064               	iorwf	(create_chain@scl+3)^0,w,c
 11814   0038B4  B4D8               	btfsc	status,2,c
 11815   0038B6  EF5F  F01C         	goto	u5511
 11816   0038BA  EF61  F01C         	goto	u5510
 11817   0038BE                     u5511:
 11818   0038BE  EF76  F01C         	goto	l4541
 11819   0038C2                     u5510:
 11820   0038C2  EE20 F012          	lfsr	2,18
 11821   0038C6  5056               	movf	create_chain@fs^0,w,c
 11822   0038C8  26D9               	addwf	fsr2l,f,c
 11823   0038CA  5057               	movf	(create_chain@fs+1)^0,w,c
 11824   0038CC  22DA               	addwfc	fsr2h,f,c
 11825   0038CE  50DE               	movf	postinc2,w,c
 11826   0038D0  5C61               	subwf	create_chain@scl^0,w,c
 11827   0038D2  50DE               	movf	postinc2,w,c
 11828   0038D4  5862               	subwfb	(create_chain@scl+1)^0,w,c
 11829   0038D6  50DE               	movf	postinc2,w,c
 11830   0038D8  5863               	subwfb	(create_chain@scl+2)^0,w,c
 11831   0038DA  50DE               	movf	postinc2,w,c
 11832   0038DC  5864               	subwfb	(create_chain@scl+3)^0,w,c
 11833   0038DE  A0D8               	btfss	status,0,c
 11834   0038E0  EF74  F01C         	goto	u5521
 11835   0038E4  EF76  F01C         	goto	u5520
 11836   0038E8                     u5521:
 11837   0038E8  EFE4  F01C         	goto	l396
 11838   0038EC                     u5520:
 11839   0038EC                     l4541:
 11840   0038EC  0E01               	movlw	1
 11841   0038EE  6E61               	movwf	create_chain@scl^0,c
 11842   0038F0  0E00               	movlw	0
 11843   0038F2  6E62               	movwf	(create_chain@scl+1)^0,c
 11844   0038F4  0E00               	movlw	0
 11845   0038F6  6E63               	movwf	(create_chain@scl+2)^0,c
 11846   0038F8  0E00               	movlw	0
 11847   0038FA  6E64               	movwf	(create_chain@scl+3)^0,c
 11848   0038FC  EFE4  F01C         	goto	l396
 11849   003900                     l4543:
 11850                           
 11851                           ;ff.c: 1004:   cs = get_fat(fs, clst);
 11852   003900  C056  F03B         	movff	create_chain@fs,get_fat@fs
 11853   003904  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 11854   003908  C058  F03D         	movff	create_chain@clst,get_fat@clst
 11855   00390C  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
 11856   003910  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
 11857   003914  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
 11858   003918  EC4E  F01A         	call	_get_fat	;wreg free
 11859   00391C  C03B  F069         	movff	?_get_fat,create_chain@cs
 11860   003920  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 11861   003924  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 11862   003928  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 11863   00392C                     
 11864                           ;ff.c: 1005:   if (cs < 2) return 1;
 11865   00392C  506C               	movf	(create_chain@cs+3)^0,w,c
 11866   00392E  106B               	iorwf	(create_chain@cs+2)^0,w,c
 11867   003930  106A               	iorwf	(create_chain@cs+1)^0,w,c
 11868   003932  E107               	bnz	u5531
 11869   003934  0E02               	movlw	2
 11870   003936  5C69               	subwf	create_chain@cs^0,w,c
 11871   003938  B0D8               	btfsc	status,0,c
 11872   00393A  EFA1  F01C         	goto	u5531
 11873   00393E  EFA3  F01C         	goto	u5530
 11874   003942                     u5531:
 11875   003942  EFAD  F01C         	goto	l4551
 11876   003946                     u5530:
 11877   003946  0E01               	movlw	1
 11878   003948  6E56               	movwf	?_create_chain^0,c
 11879   00394A  0E00               	movlw	0
 11880   00394C  6E57               	movwf	(?_create_chain+1)^0,c
 11881   00394E  0E00               	movlw	0
 11882   003950  6E58               	movwf	(?_create_chain+2)^0,c
 11883   003952  0E00               	movlw	0
 11884   003954  6E59               	movwf	(?_create_chain+3)^0,c
 11885   003956  EF16  F01E         	goto	l398
 11886   00395A                     l4551:
 11887                           
 11888                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
 11889   00395A  2869               	incf	create_chain@cs^0,w,c
 11890   00395C  E10A               	bnz	u5541
 11891   00395E  286A               	incf	(create_chain@cs+1)^0,w,c
 11892   003960  E108               	bnz	u5541
 11893   003962  286B               	incf	(create_chain@cs+2)^0,w,c
 11894   003964  E106               	bnz	u5541
 11895   003966  286C               	incf	(create_chain@cs+3)^0,w,c
 11896   003968  A4D8               	btfss	status,2,c
 11897   00396A  EFB9  F01C         	goto	u5541
 11898   00396E  EFBB  F01C         	goto	u5540
 11899   003972                     u5541:
 11900   003972  EFC5  F01C         	goto	l4555
 11901   003976                     u5540:
 11902   003976                     l4553:
 11903   003976  C069  F056         	movff	create_chain@cs,?_create_chain
 11904   00397A  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 11905   00397E  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 11906   003982  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 11907   003986  EF16  F01E         	goto	l398
 11908   00398A                     l4555:
 11909                           
 11910                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
 11911   00398A  EE20 F012          	lfsr	2,18
 11912   00398E  5056               	movf	create_chain@fs^0,w,c
 11913   003990  26D9               	addwf	fsr2l,f,c
 11914   003992  5057               	movf	(create_chain@fs+1)^0,w,c
 11915   003994  22DA               	addwfc	fsr2h,f,c
 11916   003996  50DE               	movf	postinc2,w,c
 11917   003998  5C69               	subwf	create_chain@cs^0,w,c
 11918   00399A  50DE               	movf	postinc2,w,c
 11919   00399C  586A               	subwfb	(create_chain@cs+1)^0,w,c
 11920   00399E  50DE               	movf	postinc2,w,c
 11921   0039A0  586B               	subwfb	(create_chain@cs+2)^0,w,c
 11922   0039A2  50DE               	movf	postinc2,w,c
 11923   0039A4  586C               	subwfb	(create_chain@cs+3)^0,w,c
 11924   0039A6  B0D8               	btfsc	status,0,c
 11925   0039A8  EFD8  F01C         	goto	u5551
 11926   0039AC  EFDA  F01C         	goto	u5550
 11927   0039B0                     u5551:
 11928   0039B0  EFDC  F01C         	goto	l400
 11929   0039B4                     u5550:
 11930   0039B4  EFBB  F01C         	goto	l4553
 11931   0039B8                     l400:
 11932                           
 11933                           ;ff.c: 1008:   scl = clst;
 11934   0039B8  C058  F061         	movff	create_chain@clst,create_chain@scl
 11935   0039BC  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
 11936   0039C0  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
 11937   0039C4  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
 11938   0039C8                     l396:
 11939                           
 11940                           ;ff.c: 1011:  ncl = scl;
 11941   0039C8  C061  F065         	movff	create_chain@scl,create_chain@ncl
 11942   0039CC  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
 11943   0039D0  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
 11944   0039D4  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
 11945   0039D8                     l4559:
 11946                           
 11947                           ;ff.c: 1013:   ncl++;
 11948   0039D8  0E01               	movlw	1
 11949   0039DA  2665               	addwf	create_chain@ncl^0,f,c
 11950   0039DC  0E00               	movlw	0
 11951   0039DE  2266               	addwfc	(create_chain@ncl+1)^0,f,c
 11952   0039E0  2267               	addwfc	(create_chain@ncl+2)^0,f,c
 11953   0039E2  2268               	addwfc	(create_chain@ncl+3)^0,f,c
 11954   0039E4                     
 11955                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
 11956   0039E4  EE20 F012          	lfsr	2,18
 11957   0039E8  5056               	movf	create_chain@fs^0,w,c
 11958   0039EA  26D9               	addwf	fsr2l,f,c
 11959   0039EC  5057               	movf	(create_chain@fs+1)^0,w,c
 11960   0039EE  22DA               	addwfc	fsr2h,f,c
 11961   0039F0  50DE               	movf	postinc2,w,c
 11962   0039F2  5C65               	subwf	create_chain@ncl^0,w,c
 11963   0039F4  50DE               	movf	postinc2,w,c
 11964   0039F6  5866               	subwfb	(create_chain@ncl+1)^0,w,c
 11965   0039F8  50DE               	movf	postinc2,w,c
 11966   0039FA  5867               	subwfb	(create_chain@ncl+2)^0,w,c
 11967   0039FC  50DE               	movf	postinc2,w,c
 11968   0039FE  5868               	subwfb	(create_chain@ncl+3)^0,w,c
 11969   003A00  A0D8               	btfss	status,0,c
 11970   003A02  EF05  F01D         	goto	u5561
 11971   003A06  EF07  F01D         	goto	u5560
 11972   003A0A                     u5561:
 11973   003A0A  EF26  F01D         	goto	l4571
 11974   003A0E                     u5560:
 11975   003A0E                     
 11976                           ;ff.c: 1015:    ncl = 2;
 11977   003A0E  0E02               	movlw	2
 11978   003A10  6E65               	movwf	create_chain@ncl^0,c
 11979   003A12  0E00               	movlw	0
 11980   003A14  6E66               	movwf	(create_chain@ncl+1)^0,c
 11981   003A16  0E00               	movlw	0
 11982   003A18  6E67               	movwf	(create_chain@ncl+2)^0,c
 11983   003A1A  0E00               	movlw	0
 11984   003A1C  6E68               	movwf	(create_chain@ncl+3)^0,c
 11985   003A1E                     
 11986                           ;ff.c: 1016:    if (ncl > scl) return 0;
 11987   003A1E  5064               	movf	(create_chain@scl+3)^0,w,c
 11988   003A20  1063               	iorwf	(create_chain@scl+2)^0,w,c
 11989   003A22  1062               	iorwf	(create_chain@scl+1)^0,w,c
 11990   003A24  E107               	bnz	u5571
 11991   003A26  0E02               	movlw	2
 11992   003A28  5C61               	subwf	create_chain@scl^0,w,c
 11993   003A2A  B0D8               	btfsc	status,0,c
 11994   003A2C  EF1A  F01D         	goto	u5571
 11995   003A30  EF1C  F01D         	goto	u5570
 11996   003A34                     u5571:
 11997   003A34  EF26  F01D         	goto	l4571
 11998   003A38                     u5570:
 11999   003A38                     l4567:
 12000   003A38  0E00               	movlw	0
 12001   003A3A  6E56               	movwf	?_create_chain^0,c
 12002   003A3C  0E00               	movlw	0
 12003   003A3E  6E57               	movwf	(?_create_chain+1)^0,c
 12004   003A40  0E00               	movlw	0
 12005   003A42  6E58               	movwf	(?_create_chain+2)^0,c
 12006   003A44  0E00               	movlw	0
 12007   003A46  6E59               	movwf	(?_create_chain+3)^0,c
 12008   003A48  EF16  F01E         	goto	l398
 12009   003A4C                     l4571:
 12010                           
 12011                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
 12012   003A4C  C056  F03B         	movff	create_chain@fs,get_fat@fs
 12013   003A50  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 12014   003A54  C065  F03D         	movff	create_chain@ncl,get_fat@clst
 12015   003A58  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
 12016   003A5C  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
 12017   003A60  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
 12018   003A64  EC4E  F01A         	call	_get_fat	;wreg free
 12019   003A68  C03B  F069         	movff	?_get_fat,create_chain@cs
 12020   003A6C  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 12021   003A70  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 12022   003A74  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 12023   003A78                     
 12024                           ;ff.c: 1019:   if (cs == 0) break;
 12025   003A78  5069               	movf	create_chain@cs^0,w,c
 12026   003A7A  106A               	iorwf	(create_chain@cs+1)^0,w,c
 12027   003A7C  106B               	iorwf	(create_chain@cs+2)^0,w,c
 12028   003A7E  106C               	iorwf	(create_chain@cs+3)^0,w,c
 12029   003A80  A4D8               	btfss	status,2,c
 12030   003A82  EF45  F01D         	goto	u5581
 12031   003A86  EF47  F01D         	goto	u5580
 12032   003A8A                     u5581:
 12033   003A8A  EF49  F01D         	goto	l4577
 12034   003A8E                     u5580:
 12035   003A8E  EF78  F01D         	goto	l4587
 12036   003A92                     l4577:
 12037                           
 12038                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
 12039   003A92  2869               	incf	create_chain@cs^0,w,c
 12040   003A94  E10C               	bnz	u5590
 12041   003A96  286A               	incf	(create_chain@cs+1)^0,w,c
 12042   003A98  E10A               	bnz	u5590
 12043   003A9A  286B               	incf	(create_chain@cs+2)^0,w,c
 12044   003A9C  E108               	bnz	u5590
 12045   003A9E  286C               	incf	(create_chain@cs+3)^0,w,c
 12046   003AA0  B4D8               	btfsc	status,2,c
 12047   003AA2  EF55  F01D         	goto	u5591
 12048   003AA6  EF57  F01D         	goto	u5590
 12049   003AAA                     u5591:
 12050   003AAA  EFBB  F01C         	goto	l4553
 12051   003AAE                     u5590:
 12052   003AAE  0469               	decf	create_chain@cs^0,w,c
 12053   003AB0  106A               	iorwf	(create_chain@cs+1)^0,w,c
 12054   003AB2  106B               	iorwf	(create_chain@cs+2)^0,w,c
 12055   003AB4  106C               	iorwf	(create_chain@cs+3)^0,w,c
 12056   003AB6  A4D8               	btfss	status,2,c
 12057   003AB8  EF60  F01D         	goto	u5601
 12058   003ABC  EF62  F01D         	goto	u5600
 12059   003AC0                     u5601:
 12060   003AC0  EF64  F01D         	goto	l4581
 12061   003AC4                     u5600:
 12062   003AC4  EFBB  F01C         	goto	l4553
 12063   003AC8                     l4581:
 12064                           
 12065                           ;ff.c: 1022:   if (ncl == scl) return 0;
 12066   003AC8  5061               	movf	create_chain@scl^0,w,c
 12067   003ACA  1865               	xorwf	create_chain@ncl^0,w,c
 12068   003ACC  E10D               	bnz	u5611
 12069   003ACE  5062               	movf	(create_chain@scl+1)^0,w,c
 12070   003AD0  1866               	xorwf	(create_chain@ncl+1)^0,w,c
 12071   003AD2  E10A               	bnz	u5611
 12072   003AD4  5063               	movf	(create_chain@scl+2)^0,w,c
 12073   003AD6  1867               	xorwf	(create_chain@ncl+2)^0,w,c
 12074   003AD8  E107               	bnz	u5611
 12075   003ADA  5064               	movf	(create_chain@scl+3)^0,w,c
 12076   003ADC  1868               	xorwf	(create_chain@ncl+3)^0,w,c
 12077   003ADE  A4D8               	btfss	status,2,c
 12078   003AE0  EF74  F01D         	goto	u5611
 12079   003AE4  EF76  F01D         	goto	u5610
 12080   003AE8                     u5611:
 12081   003AE8  EFEC  F01C         	goto	l4559
 12082   003AEC                     u5610:
 12083   003AEC  EF1C  F01D         	goto	l4567
 12084   003AF0                     l4587:
 12085                           
 12086                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
 12087   003AF0  C056  F03B         	movff	create_chain@fs,put_fat@fs
 12088   003AF4  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 12089   003AF8  C065  F03D         	movff	create_chain@ncl,put_fat@clst
 12090   003AFC  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
 12091   003B00  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
 12092   003B04  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
 12093   003B08  0EFF               	movlw	255
 12094   003B0A  6E41               	movwf	put_fat@val^0,c
 12095   003B0C  0EFF               	movlw	255
 12096   003B0E  6E42               	movwf	(put_fat@val+1)^0,c
 12097   003B10  0EFF               	movlw	255
 12098   003B12  6E43               	movwf	(put_fat@val+2)^0,c
 12099   003B14  0E0F               	movlw	15
 12100   003B16  6E44               	movwf	(put_fat@val+3)^0,c
 12101   003B18  EC98  F013         	call	_put_fat	;wreg free
 12102   003B1C  6E60               	movwf	create_chain@res^0,c
 12103   003B1E                     
 12104                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
 12105   003B1E  5060               	movf	create_chain@res^0,w,c
 12106   003B20  A4D8               	btfss	status,2,c
 12107   003B22  EF95  F01D         	goto	u5621
 12108   003B26  EF97  F01D         	goto	u5620
 12109   003B2A                     u5621:
 12110   003B2A  EFB9  F01D         	goto	l4595
 12111   003B2E                     u5620:
 12112   003B2E  5058               	movf	create_chain@clst^0,w,c
 12113   003B30  1059               	iorwf	(create_chain@clst+1)^0,w,c
 12114   003B32  105A               	iorwf	(create_chain@clst+2)^0,w,c
 12115   003B34  105B               	iorwf	(create_chain@clst+3)^0,w,c
 12116   003B36  B4D8               	btfsc	status,2,c
 12117   003B38  EFA0  F01D         	goto	u5631
 12118   003B3C  EFA2  F01D         	goto	u5630
 12119   003B40                     u5631:
 12120   003B40  EFB9  F01D         	goto	l4595
 12121   003B44                     u5630:
 12122   003B44                     
 12123                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
 12124   003B44  C056  F03B         	movff	create_chain@fs,put_fat@fs
 12125   003B48  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 12126   003B4C  C058  F03D         	movff	create_chain@clst,put_fat@clst
 12127   003B50  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
 12128   003B54  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
 12129   003B58  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
 12130   003B5C  C065  F041         	movff	create_chain@ncl,put_fat@val
 12131   003B60  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
 12132   003B64  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
 12133   003B68  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
 12134   003B6C  EC98  F013         	call	_put_fat	;wreg free
 12135   003B70  6E60               	movwf	create_chain@res^0,c
 12136   003B72                     l4595:
 12137                           
 12138                           ;ff.c: 1029:  if (res == FR_OK) {
 12139   003B72  5060               	movf	create_chain@res^0,w,c
 12140   003B74  A4D8               	btfss	status,2,c
 12141   003B76  EFBF  F01D         	goto	u5641
 12142   003B7A  EFC1  F01D         	goto	u5640
 12143   003B7E                     u5641:
 12144   003B7E  EFF8  F01D         	goto	l4601
 12145   003B82                     u5640:
 12146   003B82                     
 12147                           ;ff.c: 1030:   fs->last_clust = ncl;
 12148   003B82  EE20 F00A          	lfsr	2,10
 12149   003B86  5056               	movf	create_chain@fs^0,w,c
 12150   003B88  26D9               	addwf	fsr2l,f,c
 12151   003B8A  5057               	movf	(create_chain@fs+1)^0,w,c
 12152   003B8C  22DA               	addwfc	fsr2h,f,c
 12153   003B8E  C065  FFDE         	movff	create_chain@ncl,postinc2
 12154   003B92  C066  FFDE         	movff	create_chain@ncl+1,postinc2
 12155   003B96  C067  FFDE         	movff	create_chain@ncl+2,postinc2
 12156   003B9A  C068  FFDE         	movff	create_chain@ncl+3,postinc2
 12157                           
 12158                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
 12159   003B9E  EE20 F00E          	lfsr	2,14
 12160   003BA2  5056               	movf	create_chain@fs^0,w,c
 12161   003BA4  26D9               	addwf	fsr2l,f,c
 12162   003BA6  5057               	movf	(create_chain@fs+1)^0,w,c
 12163   003BA8  22DA               	addwfc	fsr2h,f,c
 12164   003BAA  28DE               	incf	postinc2,w,c
 12165   003BAC  E10C               	bnz	u5650
 12166   003BAE  28DE               	incf	postinc2,w,c
 12167   003BB0  E10A               	bnz	u5650
 12168   003BB2  28DE               	incf	postinc2,w,c
 12169   003BB4  E108               	bnz	u5650
 12170   003BB6  28DE               	incf	postinc2,w,c
 12171   003BB8  B4D8               	btfsc	status,2,c
 12172   003BBA  EFE1  F01D         	goto	u5651
 12173   003BBE  EFE3  F01D         	goto	u5650
 12174   003BC2                     u5651:
 12175   003BC2  EF0E  F01E         	goto	l413
 12176   003BC6                     u5650:
 12177   003BC6                     
 12178                           ;ff.c: 1032:    fs->free_clust--;
 12179   003BC6  EE20 F00E          	lfsr	2,14
 12180   003BCA  5056               	movf	create_chain@fs^0,w,c
 12181   003BCC  26D9               	addwf	fsr2l,f,c
 12182   003BCE  5057               	movf	(create_chain@fs+1)^0,w,c
 12183   003BD0  22DA               	addwfc	fsr2h,f,c
 12184   003BD2  06DE               	decf	postinc2,f,c
 12185   003BD4  0E00               	movlw	0
 12186   003BD6  5ADE               	subwfb	postinc2,f,c
 12187   003BD8  5ADE               	subwfb	postinc2,f,c
 12188   003BDA  5ADE               	subwfb	postinc2,f,c
 12189                           
 12190                           ;ff.c: 1033:    fs->fsi_flag |= 1;
 12191   003BDC  EE20 F005          	lfsr	2,5
 12192   003BE0  5056               	movf	create_chain@fs^0,w,c
 12193   003BE2  26D9               	addwf	fsr2l,f,c
 12194   003BE4  5057               	movf	(create_chain@fs+1)^0,w,c
 12195   003BE6  22DA               	addwfc	fsr2h,f,c
 12196   003BE8  0E00               	movlw	0
 12197   003BEA  80DB               	bsf	plusw2,0,c
 12198   003BEC  EF0E  F01E         	goto	l413
 12199   003BF0                     l4601:
 12200                           
 12201                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 12202   003BF0  0460               	decf	create_chain@res^0,w,c
 12203   003BF2  B4D8               	btfsc	status,2,c
 12204   003BF4  EFFE  F01D         	goto	u5661
 12205   003BF8  EF00  F01E         	goto	u5660
 12206   003BFC                     u5661:
 12207   003BFC  EF0A  F01E         	goto	l415
 12208   003C00                     u5660:
 12209   003C00  0E01               	movlw	1
 12210   003C02  6E65               	movwf	create_chain@ncl^0,c
 12211   003C04  0E00               	movlw	0
 12212   003C06  6E66               	movwf	(create_chain@ncl+1)^0,c
 12213   003C08  0E00               	movlw	0
 12214   003C0A  6E67               	movwf	(create_chain@ncl+2)^0,c
 12215   003C0C  0E00               	movlw	0
 12216   003C0E  6E68               	movwf	(create_chain@ncl+3)^0,c
 12217   003C10  EF0E  F01E         	goto	l413
 12218   003C14                     l415:
 12219   003C14  6865               	setf	create_chain@ncl^0,c
 12220   003C16  6866               	setf	(create_chain@ncl+1)^0,c
 12221   003C18  6867               	setf	(create_chain@ncl+2)^0,c
 12222   003C1A  6868               	setf	(create_chain@ncl+3)^0,c
 12223   003C1C                     l413:
 12224                           
 12225                           ;ff.c: 1039:  return ncl;
 12226   003C1C  C065  F056         	movff	create_chain@ncl,?_create_chain
 12227   003C20  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
 12228   003C24  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
 12229   003C28  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
 12230   003C2C                     l398:
 12231   003C2C  0012               	return		;funcret
 12232   003C2E                     __end_of_create_chain:
 12233                           	callstack 0
 12234                           
 12235 ;; *************** function _put_fat *****************
 12236 ;; Defined at:
 12237 ;;		line 873 in file "ff.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;  fs              2   58[COMRAM] PTR struct .
 12240 ;;		 -> FatFs(558), NULL(0), 
 12241 ;;  clst            4   60[COMRAM] unsigned long 
 12242 ;;  val             4   64[COMRAM] unsigned long 
 12243 ;; Auto vars:     Size  Location     Type
 12244 ;;  p               2   83[COMRAM] PTR unsigned char 
 12245 ;;		 -> FatFs(558), FatFs$win(512), NULL(0), 
 12246 ;;  bc              2   80[COMRAM] unsigned short 
 12247 ;;  res             1   82[COMRAM] enum E95
 12248 ;; Return value:  Size  Location     Type
 12249 ;;                  1    wreg      enum E95
 12250 ;; Registers used:
 12251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12252 ;; Tracked objects:
 12253 ;;		On entry : 0/0
 12254 ;;		On exit  : 0/0
 12255 ;;		Unchanged: 0/0
 12256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12257 ;;      Params:        10       0       0       0       0       0       0
 12258 ;;      Locals:         9       0       0       0       0       0       0
 12259 ;;      Temps:          8       0       0       0       0       0       0
 12260 ;;      Totals:        27       0       0       0       0       0       0
 12261 ;;Total ram usage:       27 bytes
 12262 ;; Hardware stack levels used: 1
 12263 ;; Hardware stack levels required when called: 8
 12264 ;; This function calls:
 12265 ;;		_move_window
 12266 ;; This function is called by:
 12267 ;;		_remove_chain
 12268 ;;		_create_chain
 12269 ;; This function uses a non-reentrant model
 12270 ;;
 12271                           
 12272                           	psect	text33
 12273   002730                     __ptext33:
 12274                           	callstack 0
 12275   002730                     _put_fat:
 12276                           	callstack 20
 12277   002730                     
 12278                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
 12279   002730  5040               	movf	(put_fat@clst+3)^0,w,c
 12280   002732  103F               	iorwf	(put_fat@clst+2)^0,w,c
 12281   002734  103E               	iorwf	(put_fat@clst+1)^0,w,c
 12282   002736  E109               	bnz	u5340
 12283   002738  0E02               	movlw	2
 12284   00273A  5C3D               	subwf	put_fat@clst^0,w,c
 12285   00273C  A0D8               	btfss	status,0,c
 12286   00273E  EFA3  F013         	goto	u5341
 12287   002742  EFA5  F013         	goto	u5340
 12288   002746                     u5341:
 12289   002746  EFBA  F013         	goto	l4433
 12290   00274A                     u5340:
 12291   00274A  EE20 F012          	lfsr	2,18
 12292   00274E  503B               	movf	put_fat@fs^0,w,c
 12293   002750  26D9               	addwf	fsr2l,f,c
 12294   002752  503C               	movf	(put_fat@fs+1)^0,w,c
 12295   002754  22DA               	addwfc	fsr2h,f,c
 12296   002756  50DE               	movf	postinc2,w,c
 12297   002758  5C3D               	subwf	put_fat@clst^0,w,c
 12298   00275A  50DE               	movf	postinc2,w,c
 12299   00275C  583E               	subwfb	(put_fat@clst+1)^0,w,c
 12300   00275E  50DE               	movf	postinc2,w,c
 12301   002760  583F               	subwfb	(put_fat@clst+2)^0,w,c
 12302   002762  50DE               	movf	postinc2,w,c
 12303   002764  5840               	subwfb	(put_fat@clst+3)^0,w,c
 12304   002766  A0D8               	btfss	status,0,c
 12305   002768  EFB8  F013         	goto	u5351
 12306   00276C  EFBA  F013         	goto	u5350
 12307   002770                     u5351:
 12308   002770  EFCB  F015         	goto	l4497
 12309   002774                     u5350:
 12310   002774                     l4433:
 12311                           
 12312                           ;ff.c: 885:   res = FR_INT_ERR;
 12313   002774  0E02               	movlw	2
 12314   002776  6E53               	movwf	put_fat@res^0,c
 12315                           
 12316                           ;ff.c: 887:  } else {
 12317   002778  EFDE  F015         	goto	l4499
 12318   00277C                     l357:
 12319                           
 12320                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
 12321   00277C  C03D  F051         	movff	put_fat@clst,put_fat@bc
 12322   002780  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
 12323   002784  90D8               	bcf	status,0,c
 12324   002786  3052               	rrcf	(put_fat@bc+1)^0,w,c
 12325   002788  6E46               	movwf	(??_put_fat+1)^0,c
 12326   00278A  3051               	rrcf	put_fat@bc^0,w,c
 12327   00278C  6E45               	movwf	??_put_fat^0,c
 12328   00278E  5045               	movf	??_put_fat^0,w,c
 12329   002790  2651               	addwf	put_fat@bc^0,f,c
 12330   002792  5046               	movf	(??_put_fat+1)^0,w,c
 12331   002794  2252               	addwfc	(put_fat@bc+1)^0,f,c
 12332   002796                     
 12333                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 12334   002796  C03B  F030         	movff	put_fat@fs,move_window@fs
 12335   00279A  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 12336   00279E  EE20 F01E          	lfsr	2,30
 12337   0027A2  503B               	movf	put_fat@fs^0,w,c
 12338   0027A4  26D9               	addwf	fsr2l,f,c
 12339   0027A6  503C               	movf	(put_fat@fs+1)^0,w,c
 12340   0027A8  22DA               	addwfc	fsr2h,f,c
 12341   0027AA  CFDE F045          	movff	postinc2,??_put_fat
 12342   0027AE  CFDE F046          	movff	postinc2,??_put_fat+1
 12343   0027B2  CFDE F047          	movff	postinc2,??_put_fat+2
 12344   0027B6  CFDE F048          	movff	postinc2,??_put_fat+3
 12345   0027BA  C051  F049         	movff	put_fat@bc,??_put_fat+4
 12346   0027BE  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 12347   0027C2  0E09               	movlw	9
 12348   0027C4  6E4B               	movwf	(??_put_fat+6)^0,c
 12349   0027C6                     u5365:
 12350   0027C6  90D8               	bcf	status,0,c
 12351   0027C8  324A               	rrcf	(??_put_fat+5)^0,f,c
 12352   0027CA  3249               	rrcf	(??_put_fat+4)^0,f,c
 12353   0027CC  2E4B               	decfsz	(??_put_fat+6)^0,f,c
 12354   0027CE  EFE3  F013         	goto	u5365
 12355   0027D2  5049               	movf	(??_put_fat+4)^0,w,c
 12356   0027D4  2445               	addwf	??_put_fat^0,w,c
 12357   0027D6  6E32               	movwf	move_window@sector^0,c
 12358   0027D8  504A               	movf	(??_put_fat+5)^0,w,c
 12359   0027DA  2046               	addwfc	(??_put_fat+1)^0,w,c
 12360   0027DC  6E33               	movwf	(move_window@sector+1)^0,c
 12361   0027DE  0E00               	movlw	0
 12362   0027E0  2047               	addwfc	(??_put_fat+2)^0,w,c
 12363   0027E2  6E34               	movwf	(move_window@sector+2)^0,c
 12364   0027E4  0E00               	movlw	0
 12365   0027E6  2048               	addwfc	(??_put_fat+3)^0,w,c
 12366   0027E8  6E35               	movwf	(move_window@sector+3)^0,c
 12367   0027EA  ECF5  F02D         	call	_move_window	;wreg free
 12368   0027EE  6E53               	movwf	put_fat@res^0,c
 12369   0027F0                     
 12370                           ;ff.c: 892:    if (res != FR_OK) break;
 12371   0027F0  5053               	movf	put_fat@res^0,w,c
 12372   0027F2  B4D8               	btfsc	status,2,c
 12373   0027F4  EFFE  F013         	goto	u5371
 12374   0027F8  EF00  F014         	goto	u5370
 12375   0027FC                     u5371:
 12376   0027FC  EF02  F014         	goto	l4443
 12377   002800                     u5370:
 12378   002800  EFDE  F015         	goto	l4499
 12379   002804                     l4443:
 12380                           
 12381                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
 12382   002804  0EFF               	movlw	255
 12383   002806  1451               	andwf	put_fat@bc^0,w,c
 12384   002808  6E45               	movwf	??_put_fat^0,c
 12385   00280A  0E01               	movlw	1
 12386   00280C  1452               	andwf	(put_fat@bc+1)^0,w,c
 12387   00280E  6E46               	movwf	(??_put_fat+1)^0,c
 12388   002810  5045               	movf	??_put_fat^0,w,c
 12389   002812  243B               	addwf	put_fat@fs^0,w,c
 12390   002814  6E47               	movwf	(??_put_fat+2)^0,c
 12391   002816  5046               	movf	(??_put_fat+1)^0,w,c
 12392   002818  203C               	addwfc	(put_fat@fs+1)^0,w,c
 12393   00281A  6E48               	movwf	(??_put_fat+3)^0,c
 12394   00281C  0E2E               	movlw	46
 12395   00281E  2447               	addwf	(??_put_fat+2)^0,w,c
 12396   002820  6E54               	movwf	put_fat@p^0,c
 12397   002822  0E00               	movlw	0
 12398   002824  2048               	addwfc	(??_put_fat+3)^0,w,c
 12399   002826  6E55               	movwf	(put_fat@p+1)^0,c
 12400   002828  4A51               	infsnz	put_fat@bc^0,f,c
 12401   00282A  2A52               	incf	(put_fat@bc+1)^0,f,c
 12402   00282C                     
 12403                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 12404   00282C  B03D               	btfsc	put_fat@clst^0,0,c
 12405   00282E  EF1B  F014         	goto	u5381
 12406   002832  EF1D  F014         	goto	u5380
 12407   002836                     u5381:
 12408   002836  EF22  F014         	goto	l4451
 12409   00283A                     u5380:
 12410   00283A  C041  F04D         	movff	put_fat@val,_put_fat$706
 12411   00283E  6A4E               	clrf	(_put_fat$706+1)^0,c
 12412   002840  EF3C  F014         	goto	l4453
 12413   002844                     l4451:
 12414   002844  5041               	movf	put_fat@val^0,w,c
 12415   002846  6E45               	movwf	??_put_fat^0,c
 12416   002848  6A46               	clrf	(??_put_fat+1)^0,c
 12417   00284A  3A45               	swapf	??_put_fat^0,f,c
 12418   00284C  3A46               	swapf	(??_put_fat+1)^0,f,c
 12419   00284E  0EF0               	movlw	240
 12420   002850  1646               	andwf	(??_put_fat+1)^0,f,c
 12421   002852  5045               	movf	??_put_fat^0,w,c
 12422   002854  0B0F               	andlw	15
 12423   002856  1246               	iorwf	(??_put_fat+1)^0,f,c
 12424   002858  0EF0               	movlw	240
 12425   00285A  1645               	andwf	??_put_fat^0,f,c
 12426   00285C  C054  FFD9         	movff	put_fat@p,fsr2l
 12427   002860  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12428   002864  50DF               	movf	indf2,w,c
 12429   002866  0B0F               	andlw	15
 12430   002868  6E47               	movwf	(??_put_fat+2)^0,c
 12431   00286A  6A48               	clrf	(??_put_fat+3)^0,c
 12432   00286C  5045               	movf	??_put_fat^0,w,c
 12433   00286E  1047               	iorwf	(??_put_fat+2)^0,w,c
 12434   002870  6E4D               	movwf	_put_fat$706^0,c
 12435   002872  5046               	movf	(??_put_fat+1)^0,w,c
 12436   002874  1048               	iorwf	(??_put_fat+3)^0,w,c
 12437   002876  6E4E               	movwf	(_put_fat$706+1)^0,c
 12438   002878                     l4453:
 12439   002878  C054  FFD9         	movff	put_fat@p,fsr2l
 12440   00287C  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12441   002880  C04D  FFDF         	movff	_put_fat$706,indf2
 12442   002884                     
 12443                           ;ff.c: 895:    fs->wflag = 1;
 12444   002884  EE20 F004          	lfsr	2,4
 12445   002888  503B               	movf	put_fat@fs^0,w,c
 12446   00288A  26D9               	addwf	fsr2l,f,c
 12447   00288C  503C               	movf	(put_fat@fs+1)^0,w,c
 12448   00288E  22DA               	addwfc	fsr2h,f,c
 12449   002890  0E01               	movlw	1
 12450   002892  6EDF               	movwf	indf2,c
 12451   002894                     
 12452                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 12453   002894  C03B  F030         	movff	put_fat@fs,move_window@fs
 12454   002898  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 12455   00289C  EE20 F01E          	lfsr	2,30
 12456   0028A0  503B               	movf	put_fat@fs^0,w,c
 12457   0028A2  26D9               	addwf	fsr2l,f,c
 12458   0028A4  503C               	movf	(put_fat@fs+1)^0,w,c
 12459   0028A6  22DA               	addwfc	fsr2h,f,c
 12460   0028A8  CFDE F045          	movff	postinc2,??_put_fat
 12461   0028AC  CFDE F046          	movff	postinc2,??_put_fat+1
 12462   0028B0  CFDE F047          	movff	postinc2,??_put_fat+2
 12463   0028B4  CFDE F048          	movff	postinc2,??_put_fat+3
 12464   0028B8  C051  F049         	movff	put_fat@bc,??_put_fat+4
 12465   0028BC  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 12466   0028C0  0E09               	movlw	9
 12467   0028C2  6E4B               	movwf	(??_put_fat+6)^0,c
 12468   0028C4                     u5395:
 12469   0028C4  90D8               	bcf	status,0,c
 12470   0028C6  324A               	rrcf	(??_put_fat+5)^0,f,c
 12471   0028C8  3249               	rrcf	(??_put_fat+4)^0,f,c
 12472   0028CA  2E4B               	decfsz	(??_put_fat+6)^0,f,c
 12473   0028CC  EF62  F014         	goto	u5395
 12474   0028D0  5049               	movf	(??_put_fat+4)^0,w,c
 12475   0028D2  2445               	addwf	??_put_fat^0,w,c
 12476   0028D4  6E32               	movwf	move_window@sector^0,c
 12477   0028D6  504A               	movf	(??_put_fat+5)^0,w,c
 12478   0028D8  2046               	addwfc	(??_put_fat+1)^0,w,c
 12479   0028DA  6E33               	movwf	(move_window@sector+1)^0,c
 12480   0028DC  0E00               	movlw	0
 12481   0028DE  2047               	addwfc	(??_put_fat+2)^0,w,c
 12482   0028E0  6E34               	movwf	(move_window@sector+2)^0,c
 12483   0028E2  0E00               	movlw	0
 12484   0028E4  2048               	addwfc	(??_put_fat+3)^0,w,c
 12485   0028E6  6E35               	movwf	(move_window@sector+3)^0,c
 12486   0028E8  ECF5  F02D         	call	_move_window	;wreg free
 12487   0028EC  6E53               	movwf	put_fat@res^0,c
 12488   0028EE                     
 12489                           ;ff.c: 897:    if (res != FR_OK) break;
 12490   0028EE  5053               	movf	put_fat@res^0,w,c
 12491   0028F0  B4D8               	btfsc	status,2,c
 12492   0028F2  EF7D  F014         	goto	u5401
 12493   0028F6  EF7F  F014         	goto	u5400
 12494   0028FA                     u5401:
 12495   0028FA  EF81  F014         	goto	l4463
 12496   0028FE                     u5400:
 12497   0028FE  EFDE  F015         	goto	l4499
 12498   002902                     l4463:
 12499                           
 12500                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
 12501   002902  0EFF               	movlw	255
 12502   002904  1451               	andwf	put_fat@bc^0,w,c
 12503   002906  6E45               	movwf	??_put_fat^0,c
 12504   002908  0E01               	movlw	1
 12505   00290A  1452               	andwf	(put_fat@bc+1)^0,w,c
 12506   00290C  6E46               	movwf	(??_put_fat+1)^0,c
 12507   00290E  5045               	movf	??_put_fat^0,w,c
 12508   002910  243B               	addwf	put_fat@fs^0,w,c
 12509   002912  6E47               	movwf	(??_put_fat+2)^0,c
 12510   002914  5046               	movf	(??_put_fat+1)^0,w,c
 12511   002916  203C               	addwfc	(put_fat@fs+1)^0,w,c
 12512   002918  6E48               	movwf	(??_put_fat+3)^0,c
 12513   00291A  0E2E               	movlw	46
 12514   00291C  2447               	addwf	(??_put_fat+2)^0,w,c
 12515   00291E  6E54               	movwf	put_fat@p^0,c
 12516   002920  0E00               	movlw	0
 12517   002922  2048               	addwfc	(??_put_fat+3)^0,w,c
 12518   002924  6E55               	movwf	(put_fat@p+1)^0,c
 12519   002926                     
 12520                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
 12521   002926  B03D               	btfsc	put_fat@clst^0,0,c
 12522   002928  EF98  F014         	goto	u5411
 12523   00292C  EF9A  F014         	goto	u5410
 12524   002930                     u5411:
 12525   002930  EFB8  F014         	goto	l4469
 12526   002934                     u5410:
 12527   002934  C041  F045         	movff	put_fat@val,??_put_fat
 12528   002938  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 12529   00293C  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 12530   002940  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 12531   002944  C046  F045         	movff	??_put_fat+1,??_put_fat
 12532   002948  C047  F046         	movff	??_put_fat+2,??_put_fat+1
 12533   00294C  C048  F047         	movff	??_put_fat+3,??_put_fat+2
 12534   002950  6A48               	clrf	(??_put_fat+3)^0,c
 12535   002952  0E0F               	movlw	15
 12536   002954  1645               	andwf	??_put_fat^0,f,c
 12537   002956  C054  FFD9         	movff	put_fat@p,fsr2l
 12538   00295A  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12539   00295E  50DF               	movf	indf2,w,c
 12540   002960  0BF0               	andlw	240
 12541   002962  1045               	iorwf	??_put_fat^0,w,c
 12542   002964  6E49               	movwf	(??_put_fat+4)^0,c
 12543   002966  5049               	movf	(??_put_fat+4)^0,w,c
 12544   002968  6E4F               	movwf	_put_fat$707^0,c
 12545   00296A  6A50               	clrf	(_put_fat$707+1)^0,c
 12546   00296C  EFCE  F014         	goto	l4471
 12547   002970                     l4469:
 12548   002970  C041  F045         	movff	put_fat@val,??_put_fat
 12549   002974  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 12550   002978  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 12551   00297C  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 12552   002980  0E05               	movlw	5
 12553   002982  EFC8  F014         	goto	u5420
 12554   002986                     u5425:
 12555   002986  90D8               	bcf	status,0,c
 12556   002988  3248               	rrcf	(??_put_fat+3)^0,f,c
 12557   00298A  3247               	rrcf	(??_put_fat+2)^0,f,c
 12558   00298C  3246               	rrcf	(??_put_fat+1)^0,f,c
 12559   00298E  3245               	rrcf	??_put_fat^0,f,c
 12560   002990                     u5420:
 12561   002990  2EE8               	decfsz	wreg,f,c
 12562   002992  EFC3  F014         	goto	u5425
 12563   002996  5045               	movf	??_put_fat^0,w,c
 12564   002998  6E4F               	movwf	_put_fat$707^0,c
 12565   00299A  6A50               	clrf	(_put_fat$707+1)^0,c
 12566   00299C                     l4471:
 12567   00299C  C054  FFD9         	movff	put_fat@p,fsr2l
 12568   0029A0  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12569   0029A4  C04F  FFDF         	movff	_put_fat$707,indf2
 12570                           
 12571                           ;ff.c: 900:    fs->wflag = 1;
 12572   0029A8  EE20 F004          	lfsr	2,4
 12573   0029AC  503B               	movf	put_fat@fs^0,w,c
 12574   0029AE  26D9               	addwf	fsr2l,f,c
 12575   0029B0  503C               	movf	(put_fat@fs+1)^0,w,c
 12576   0029B2  22DA               	addwfc	fsr2h,f,c
 12577   0029B4  0E01               	movlw	1
 12578   0029B6  6EDF               	movwf	indf2,c
 12579                           
 12580                           ;ff.c: 901:    break;
 12581   0029B8  EFDE  F015         	goto	l4499
 12582   0029BC                     l4473:
 12583                           
 12584                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 12585   0029BC  C03B  F030         	movff	put_fat@fs,move_window@fs
 12586   0029C0  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 12587   0029C4  EE20 F01E          	lfsr	2,30
 12588   0029C8  503B               	movf	put_fat@fs^0,w,c
 12589   0029CA  26D9               	addwf	fsr2l,f,c
 12590   0029CC  503C               	movf	(put_fat@fs+1)^0,w,c
 12591   0029CE  22DA               	addwfc	fsr2h,f,c
 12592   0029D0  CFDE F045          	movff	postinc2,??_put_fat
 12593   0029D4  CFDE F046          	movff	postinc2,??_put_fat+1
 12594   0029D8  CFDE F047          	movff	postinc2,??_put_fat+2
 12595   0029DC  CFDE F048          	movff	postinc2,??_put_fat+3
 12596   0029E0  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 12597   0029E4  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 12598   0029E8  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 12599   0029EC  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 12600   0029F0  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
 12601   0029F4  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
 12602   0029F8  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
 12603   0029FC  6A4C               	clrf	(??_put_fat+7)^0,c
 12604   0029FE  5045               	movf	??_put_fat^0,w,c
 12605   002A00  2449               	addwf	(??_put_fat+4)^0,w,c
 12606   002A02  6E32               	movwf	move_window@sector^0,c
 12607   002A04  5046               	movf	(??_put_fat+1)^0,w,c
 12608   002A06  204A               	addwfc	(??_put_fat+5)^0,w,c
 12609   002A08  6E33               	movwf	(move_window@sector+1)^0,c
 12610   002A0A  5047               	movf	(??_put_fat+2)^0,w,c
 12611   002A0C  204B               	addwfc	(??_put_fat+6)^0,w,c
 12612   002A0E  6E34               	movwf	(move_window@sector+2)^0,c
 12613   002A10  5048               	movf	(??_put_fat+3)^0,w,c
 12614   002A12  204C               	addwfc	(??_put_fat+7)^0,w,c
 12615   002A14  6E35               	movwf	(move_window@sector+3)^0,c
 12616   002A16  ECF5  F02D         	call	_move_window	;wreg free
 12617   002A1A  6E53               	movwf	put_fat@res^0,c
 12618   002A1C                     
 12619                           ;ff.c: 905:    if (res != FR_OK) break;
 12620   002A1C  5053               	movf	put_fat@res^0,w,c
 12621   002A1E  B4D8               	btfsc	status,2,c
 12622   002A20  EF14  F015         	goto	u5431
 12623   002A24  EF16  F015         	goto	u5430
 12624   002A28                     u5431:
 12625   002A28  EF18  F015         	goto	l4479
 12626   002A2C                     u5430:
 12627   002A2C  EFDE  F015         	goto	l4499
 12628   002A30                     l4479:
 12629                           
 12630                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
 12631   002A30  C03D  F045         	movff	put_fat@clst,??_put_fat
 12632   002A34  C03E  F046         	movff	put_fat@clst+1,??_put_fat+1
 12633   002A38  90D8               	bcf	status,0,c
 12634   002A3A  3645               	rlcf	??_put_fat^0,f,c
 12635   002A3C  3646               	rlcf	(??_put_fat+1)^0,f,c
 12636   002A3E  0EFF               	movlw	255
 12637   002A40  1445               	andwf	??_put_fat^0,w,c
 12638   002A42  6E47               	movwf	(??_put_fat+2)^0,c
 12639   002A44  0E01               	movlw	1
 12640   002A46  1446               	andwf	(??_put_fat+1)^0,w,c
 12641   002A48  6E48               	movwf	(??_put_fat+3)^0,c
 12642   002A4A  5047               	movf	(??_put_fat+2)^0,w,c
 12643   002A4C  243B               	addwf	put_fat@fs^0,w,c
 12644   002A4E  6E49               	movwf	(??_put_fat+4)^0,c
 12645   002A50  5048               	movf	(??_put_fat+3)^0,w,c
 12646   002A52  203C               	addwfc	(put_fat@fs+1)^0,w,c
 12647   002A54  6E4A               	movwf	(??_put_fat+5)^0,c
 12648   002A56  0E2E               	movlw	46
 12649   002A58  2449               	addwf	(??_put_fat+4)^0,w,c
 12650   002A5A  6E54               	movwf	put_fat@p^0,c
 12651   002A5C  0E00               	movlw	0
 12652   002A5E  204A               	addwfc	(??_put_fat+5)^0,w,c
 12653   002A60  6E55               	movwf	(put_fat@p+1)^0,c
 12654   002A62                     
 12655                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 12656   002A62  C054  FFD9         	movff	put_fat@p,fsr2l
 12657   002A66  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12658   002A6A  C041  FFDE         	movff	put_fat@val,postinc2
 12659   002A6E  C042  FFDD         	movff	put_fat@val+1,postdec2
 12660                           
 12661                           ;ff.c: 908:    fs->wflag = 1;
 12662   002A72  EE20 F004          	lfsr	2,4
 12663   002A76  503B               	movf	put_fat@fs^0,w,c
 12664   002A78  26D9               	addwf	fsr2l,f,c
 12665   002A7A  503C               	movf	(put_fat@fs+1)^0,w,c
 12666   002A7C  22DA               	addwfc	fsr2h,f,c
 12667   002A7E  0E01               	movlw	1
 12668   002A80  6EDF               	movwf	indf2,c
 12669                           
 12670                           ;ff.c: 909:    break;
 12671   002A82  EFDE  F015         	goto	l4499
 12672   002A86                     l4483:
 12673                           
 12674                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 12675   002A86  C03B  F030         	movff	put_fat@fs,move_window@fs
 12676   002A8A  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 12677   002A8E  EE20 F01E          	lfsr	2,30
 12678   002A92  503B               	movf	put_fat@fs^0,w,c
 12679   002A94  26D9               	addwf	fsr2l,f,c
 12680   002A96  503C               	movf	(put_fat@fs+1)^0,w,c
 12681   002A98  22DA               	addwfc	fsr2h,f,c
 12682   002A9A  CFDE F045          	movff	postinc2,??_put_fat
 12683   002A9E  CFDE F046          	movff	postinc2,??_put_fat+1
 12684   002AA2  CFDE F047          	movff	postinc2,??_put_fat+2
 12685   002AA6  CFDE F048          	movff	postinc2,??_put_fat+3
 12686   002AAA  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 12687   002AAE  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 12688   002AB2  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 12689   002AB6  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 12690   002ABA  0E08               	movlw	8
 12691   002ABC  EF65  F015         	goto	u5440
 12692   002AC0                     u5445:
 12693   002AC0  90D8               	bcf	status,0,c
 12694   002AC2  324C               	rrcf	(??_put_fat+7)^0,f,c
 12695   002AC4  324B               	rrcf	(??_put_fat+6)^0,f,c
 12696   002AC6  324A               	rrcf	(??_put_fat+5)^0,f,c
 12697   002AC8  3249               	rrcf	(??_put_fat+4)^0,f,c
 12698   002ACA                     u5440:
 12699   002ACA  2EE8               	decfsz	wreg,f,c
 12700   002ACC  EF60  F015         	goto	u5445
 12701   002AD0  5045               	movf	??_put_fat^0,w,c
 12702   002AD2  2449               	addwf	(??_put_fat+4)^0,w,c
 12703   002AD4  6E32               	movwf	move_window@sector^0,c
 12704   002AD6  5046               	movf	(??_put_fat+1)^0,w,c
 12705   002AD8  204A               	addwfc	(??_put_fat+5)^0,w,c
 12706   002ADA  6E33               	movwf	(move_window@sector+1)^0,c
 12707   002ADC  5047               	movf	(??_put_fat+2)^0,w,c
 12708   002ADE  204B               	addwfc	(??_put_fat+6)^0,w,c
 12709   002AE0  6E34               	movwf	(move_window@sector+2)^0,c
 12710   002AE2  5048               	movf	(??_put_fat+3)^0,w,c
 12711   002AE4  204C               	addwfc	(??_put_fat+7)^0,w,c
 12712   002AE6  6E35               	movwf	(move_window@sector+3)^0,c
 12713   002AE8  ECF5  F02D         	call	_move_window	;wreg free
 12714   002AEC  6E53               	movwf	put_fat@res^0,c
 12715   002AEE                     
 12716                           ;ff.c: 913:    if (res != FR_OK) break;
 12717   002AEE  5053               	movf	put_fat@res^0,w,c
 12718   002AF0  B4D8               	btfsc	status,2,c
 12719   002AF2  EF7D  F015         	goto	u5451
 12720   002AF6  EF7F  F015         	goto	u5450
 12721   002AFA                     u5451:
 12722   002AFA  EF81  F015         	goto	l4489
 12723   002AFE                     u5450:
 12724   002AFE  EFDE  F015         	goto	l4499
 12725   002B02                     l4489:
 12726                           
 12727                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
 12728   002B02  C03D  F045         	movff	put_fat@clst,??_put_fat
 12729   002B06  C03E  F046         	movff	put_fat@clst+1,??_put_fat+1
 12730   002B0A  90D8               	bcf	status,0,c
 12731   002B0C  3645               	rlcf	??_put_fat^0,f,c
 12732   002B0E  3646               	rlcf	(??_put_fat+1)^0,f,c
 12733   002B10  90D8               	bcf	status,0,c
 12734   002B12  3645               	rlcf	??_put_fat^0,f,c
 12735   002B14  3646               	rlcf	(??_put_fat+1)^0,f,c
 12736   002B16  0EFF               	movlw	255
 12737   002B18  1445               	andwf	??_put_fat^0,w,c
 12738   002B1A  6E47               	movwf	(??_put_fat+2)^0,c
 12739   002B1C  0E01               	movlw	1
 12740   002B1E  1446               	andwf	(??_put_fat+1)^0,w,c
 12741   002B20  6E48               	movwf	(??_put_fat+3)^0,c
 12742   002B22  5047               	movf	(??_put_fat+2)^0,w,c
 12743   002B24  243B               	addwf	put_fat@fs^0,w,c
 12744   002B26  6E49               	movwf	(??_put_fat+4)^0,c
 12745   002B28  5048               	movf	(??_put_fat+3)^0,w,c
 12746   002B2A  203C               	addwfc	(put_fat@fs+1)^0,w,c
 12747   002B2C  6E4A               	movwf	(??_put_fat+5)^0,c
 12748   002B2E  0E2E               	movlw	46
 12749   002B30  2449               	addwf	(??_put_fat+4)^0,w,c
 12750   002B32  6E54               	movwf	put_fat@p^0,c
 12751   002B34  0E00               	movlw	0
 12752   002B36  204A               	addwfc	(??_put_fat+5)^0,w,c
 12753   002B38  6E55               	movwf	(put_fat@p+1)^0,c
 12754   002B3A                     
 12755                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 12756   002B3A  C054  FFD9         	movff	put_fat@p,fsr2l
 12757   002B3E  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12758   002B42  0E00               	movlw	0
 12759   002B44  14DE               	andwf	postinc2,w,c
 12760   002B46  6E45               	movwf	??_put_fat^0,c
 12761   002B48  0E00               	movlw	0
 12762   002B4A  14DE               	andwf	postinc2,w,c
 12763   002B4C  6E46               	movwf	(??_put_fat+1)^0,c
 12764   002B4E  0E00               	movlw	0
 12765   002B50  14DE               	andwf	postinc2,w,c
 12766   002B52  6E47               	movwf	(??_put_fat+2)^0,c
 12767   002B54  0EF0               	movlw	240
 12768   002B56  14DE               	andwf	postinc2,w,c
 12769   002B58  6E48               	movwf	(??_put_fat+3)^0,c
 12770   002B5A  5045               	movf	??_put_fat^0,w,c
 12771   002B5C  1241               	iorwf	put_fat@val^0,f,c
 12772   002B5E  5046               	movf	(??_put_fat+1)^0,w,c
 12773   002B60  1242               	iorwf	(put_fat@val+1)^0,f,c
 12774   002B62  5047               	movf	(??_put_fat+2)^0,w,c
 12775   002B64  1243               	iorwf	(put_fat@val+2)^0,f,c
 12776   002B66  5048               	movf	(??_put_fat+3)^0,w,c
 12777   002B68  1244               	iorwf	(put_fat@val+3)^0,f,c
 12778                           
 12779                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 12780   002B6A  C054  FFD9         	movff	put_fat@p,fsr2l
 12781   002B6E  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12782   002B72  C041  FFDE         	movff	put_fat@val,postinc2
 12783   002B76  C042  FFDE         	movff	put_fat@val+1,postinc2
 12784   002B7A  C043  FFDE         	movff	put_fat@val+2,postinc2
 12785   002B7E  C044  FFDE         	movff	put_fat@val+3,postinc2
 12786   002B82                     
 12787                           ;ff.c: 917:    fs->wflag = 1;
 12788   002B82  EE20 F004          	lfsr	2,4
 12789   002B86  503B               	movf	put_fat@fs^0,w,c
 12790   002B88  26D9               	addwf	fsr2l,f,c
 12791   002B8A  503C               	movf	(put_fat@fs+1)^0,w,c
 12792   002B8C  22DA               	addwfc	fsr2h,f,c
 12793   002B8E  0E01               	movlw	1
 12794   002B90  6EDF               	movwf	indf2,c
 12795                           
 12796                           ;ff.c: 918:    break;
 12797   002B92  EFDE  F015         	goto	l4499
 12798   002B96                     l4497:
 12799   002B96  C03B  FFD9         	movff	put_fat@fs,fsr2l
 12800   002B9A  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 12801   002B9E  50DF               	movf	indf2,w,c
 12802                           
 12803                           ; Switch size 1, requested type "simple"
 12804                           ; Number of cases is 3, Range of values is 1 to 3
 12805                           ; switch strategies available:
 12806                           ; Name         Instructions Cycles
 12807                           ; simple_byte           10     6 (average)
 12808                           ;	Chosen strategy is simple_byte
 12809   002BA0  0A01               	xorlw	1	; case 1
 12810   002BA2  B4D8               	btfsc	status,2,c
 12811   002BA4  EFBE  F013         	goto	l357
 12812   002BA8  0A03               	xorlw	3	; case 2
 12813   002BAA  B4D8               	btfsc	status,2,c
 12814   002BAC  EFDE  F014         	goto	l4473
 12815   002BB0  0A01               	xorlw	1	; case 3
 12816   002BB2  B4D8               	btfsc	status,2,c
 12817   002BB4  EF43  F015         	goto	l4483
 12818   002BB8  EFBA  F013         	goto	l4433
 12819   002BBC                     l4499:
 12820                           
 12821                           ;ff.c: 925:  return res;
 12822   002BBC  5053               	movf	put_fat@res^0,w,c
 12823   002BBE  0012               	return		;funcret
 12824   002BC0                     __end_of_put_fat:
 12825                           	callstack 0
 12826                           
 12827 ;; *************** function _get_fat *****************
 12828 ;; Defined at:
 12829 ;;		line 818 in file "ff.c"
 12830 ;; Parameters:    Size  Location     Type
 12831 ;;  fs              2   58[COMRAM] PTR struct .
 12832 ;;		 -> FatFs(558), NULL(0), 
 12833 ;;  clst            4   60[COMRAM] unsigned long 
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;  val             4   74[COMRAM] unsigned long 
 12836 ;;  bc              2   82[COMRAM] unsigned short 
 12837 ;;  p               2   80[COMRAM] PTR unsigned char 
 12838 ;;		 -> FatFs(558), FatFs$win(512), NULL(0), 
 12839 ;;  wc              2   78[COMRAM] unsigned short 
 12840 ;; Return value:  Size  Location     Type
 12841 ;;                  4   58[COMRAM] unsigned long 
 12842 ;; Registers used:
 12843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12844 ;; Tracked objects:
 12845 ;;		On entry : 0/0
 12846 ;;		On exit  : 0/0
 12847 ;;		Unchanged: 0/0
 12848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12849 ;;      Params:         6       0       0       0       0       0       0
 12850 ;;      Locals:        12       0       0       0       0       0       0
 12851 ;;      Temps:          8       0       0       0       0       0       0
 12852 ;;      Totals:        26       0       0       0       0       0       0
 12853 ;;Total ram usage:       26 bytes
 12854 ;; Hardware stack levels used: 1
 12855 ;; Hardware stack levels required when called: 8
 12856 ;; This function calls:
 12857 ;;		_move_window
 12858 ;; This function is called by:
 12859 ;;		_remove_chain
 12860 ;;		_create_chain
 12861 ;;		_dir_sdi
 12862 ;;		_dir_next
 12863 ;;		_f_lseek
 12864 ;;		_f_read
 12865 ;; This function uses a non-reentrant model
 12866 ;;
 12867                           
 12868                           	psect	text34
 12869   00349C                     __ptext34:
 12870                           	callstack 0
 12871   00349C                     _get_fat:
 12872                           	callstack 20
 12873   00349C                     
 12874                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 12875   00349C  5040               	movf	(get_fat@clst+3)^0,w,c
 12876   00349E  103F               	iorwf	(get_fat@clst+2)^0,w,c
 12877   0034A0  103E               	iorwf	(get_fat@clst+1)^0,w,c
 12878   0034A2  E109               	bnz	u5230
 12879   0034A4  0E02               	movlw	2
 12880   0034A6  5C3D               	subwf	get_fat@clst^0,w,c
 12881   0034A8  A0D8               	btfss	status,0,c
 12882   0034AA  EF59  F01A         	goto	u5231
 12883   0034AE  EF5B  F01A         	goto	u5230
 12884   0034B2                     u5231:
 12885   0034B2  EF70  F01A         	goto	l4383
 12886   0034B6                     u5230:
 12887   0034B6  EE20 F012          	lfsr	2,18
 12888   0034BA  503B               	movf	get_fat@fs^0,w,c
 12889   0034BC  26D9               	addwf	fsr2l,f,c
 12890   0034BE  503C               	movf	(get_fat@fs+1)^0,w,c
 12891   0034C0  22DA               	addwfc	fsr2h,f,c
 12892   0034C2  50DE               	movf	postinc2,w,c
 12893   0034C4  5C3D               	subwf	get_fat@clst^0,w,c
 12894   0034C6  50DE               	movf	postinc2,w,c
 12895   0034C8  583E               	subwfb	(get_fat@clst+1)^0,w,c
 12896   0034CA  50DE               	movf	postinc2,w,c
 12897   0034CC  583F               	subwfb	(get_fat@clst+2)^0,w,c
 12898   0034CE  50DE               	movf	postinc2,w,c
 12899   0034D0  5840               	subwfb	(get_fat@clst+3)^0,w,c
 12900   0034D2  A0D8               	btfss	status,0,c
 12901   0034D4  EF6E  F01A         	goto	u5241
 12902   0034D8  EF70  F01A         	goto	u5240
 12903   0034DC                     u5241:
 12904   0034DC  EF7A  F01A         	goto	l331
 12905   0034E0                     u5240:
 12906   0034E0                     l4383:
 12907                           
 12908                           ;ff.c: 829:   val = 1;
 12909   0034E0  0E01               	movlw	1
 12910   0034E2  6E4B               	movwf	get_fat@val^0,c
 12911   0034E4  0E00               	movlw	0
 12912   0034E6  6E4C               	movwf	(get_fat@val+1)^0,c
 12913   0034E8  0E00               	movlw	0
 12914   0034EA  6E4D               	movwf	(get_fat@val+2)^0,c
 12915   0034EC  0E00               	movlw	0
 12916   0034EE  6E4E               	movwf	(get_fat@val+3)^0,c
 12917                           
 12918                           ;ff.c: 831:  } else {
 12919   0034F0  EF34  F01C         	goto	l334
 12920   0034F4                     l331:
 12921                           
 12922                           ;ff.c: 832:   val = 0xFFFFFFFF;
 12923   0034F4  684B               	setf	get_fat@val^0,c
 12924   0034F6  684C               	setf	(get_fat@val+1)^0,c
 12925   0034F8  684D               	setf	(get_fat@val+2)^0,c
 12926   0034FA  684E               	setf	(get_fat@val+3)^0,c
 12927                           
 12928                           ;ff.c: 834:   switch (fs->fs_type) {
 12929   0034FC  EF21  F01C         	goto	l4427
 12930   003500                     l336:
 12931                           
 12932                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 12933   003500  C03D  F053         	movff	get_fat@clst,get_fat@bc
 12934   003504  C03E  F054         	movff	get_fat@clst+1,get_fat@bc+1
 12935   003508  90D8               	bcf	status,0,c
 12936   00350A  3054               	rrcf	(get_fat@bc+1)^0,w,c
 12937   00350C  6E42               	movwf	(??_get_fat+1)^0,c
 12938   00350E  3053               	rrcf	get_fat@bc^0,w,c
 12939   003510  6E41               	movwf	??_get_fat^0,c
 12940   003512  5041               	movf	??_get_fat^0,w,c
 12941   003514  2653               	addwf	get_fat@bc^0,f,c
 12942   003516  5042               	movf	(??_get_fat+1)^0,w,c
 12943   003518  2254               	addwfc	(get_fat@bc+1)^0,f,c
 12944   00351A                     
 12945                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 12946   00351A  C03B  F030         	movff	get_fat@fs,move_window@fs
 12947   00351E  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12948   003522  EE20 F01E          	lfsr	2,30
 12949   003526  503B               	movf	get_fat@fs^0,w,c
 12950   003528  26D9               	addwf	fsr2l,f,c
 12951   00352A  503C               	movf	(get_fat@fs+1)^0,w,c
 12952   00352C  22DA               	addwfc	fsr2h,f,c
 12953   00352E  CFDE F041          	movff	postinc2,??_get_fat
 12954   003532  CFDE F042          	movff	postinc2,??_get_fat+1
 12955   003536  CFDE F043          	movff	postinc2,??_get_fat+2
 12956   00353A  CFDE F044          	movff	postinc2,??_get_fat+3
 12957   00353E  C053  F045         	movff	get_fat@bc,??_get_fat+4
 12958   003542  C054  F046         	movff	get_fat@bc+1,??_get_fat+5
 12959   003546  0E09               	movlw	9
 12960   003548  6E47               	movwf	(??_get_fat+6)^0,c
 12961   00354A                     u5255:
 12962   00354A  90D8               	bcf	status,0,c
 12963   00354C  3246               	rrcf	(??_get_fat+5)^0,f,c
 12964   00354E  3245               	rrcf	(??_get_fat+4)^0,f,c
 12965   003550  2E47               	decfsz	(??_get_fat+6)^0,f,c
 12966   003552  EFA5  F01A         	goto	u5255
 12967   003556  5045               	movf	(??_get_fat+4)^0,w,c
 12968   003558  2441               	addwf	??_get_fat^0,w,c
 12969   00355A  6E32               	movwf	move_window@sector^0,c
 12970   00355C  5046               	movf	(??_get_fat+5)^0,w,c
 12971   00355E  2042               	addwfc	(??_get_fat+1)^0,w,c
 12972   003560  6E33               	movwf	(move_window@sector+1)^0,c
 12973   003562  0E00               	movlw	0
 12974   003564  2043               	addwfc	(??_get_fat+2)^0,w,c
 12975   003566  6E34               	movwf	(move_window@sector+2)^0,c
 12976   003568  0E00               	movlw	0
 12977   00356A  2044               	addwfc	(??_get_fat+3)^0,w,c
 12978   00356C  6E35               	movwf	(move_window@sector+3)^0,c
 12979   00356E  ECF5  F02D         	call	_move_window	;wreg free
 12980   003572  0900               	iorlw	0
 12981   003574  B4D8               	btfsc	status,2,c
 12982   003576  EFBF  F01A         	goto	u5261
 12983   00357A  EFC1  F01A         	goto	u5260
 12984   00357E                     u5261:
 12985   00357E  EFC3  F01A         	goto	l4391
 12986   003582                     u5260:
 12987   003582  EF34  F01C         	goto	l334
 12988   003586                     l4391:
 12989                           
 12990                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 12991   003586  0EFF               	movlw	255
 12992   003588  1453               	andwf	get_fat@bc^0,w,c
 12993   00358A  6E41               	movwf	??_get_fat^0,c
 12994   00358C  0E01               	movlw	1
 12995   00358E  1454               	andwf	(get_fat@bc+1)^0,w,c
 12996   003590  6E42               	movwf	(??_get_fat+1)^0,c
 12997   003592  5041               	movf	??_get_fat^0,w,c
 12998   003594  243B               	addwf	get_fat@fs^0,w,c
 12999   003596  6E43               	movwf	(??_get_fat+2)^0,c
 13000   003598  5042               	movf	(??_get_fat+1)^0,w,c
 13001   00359A  203C               	addwfc	(get_fat@fs+1)^0,w,c
 13002   00359C  6E44               	movwf	(??_get_fat+3)^0,c
 13003   00359E  0E2E               	movlw	46
 13004   0035A0  2443               	addwf	(??_get_fat+2)^0,w,c
 13005   0035A2  6ED9               	movwf	fsr2l,c
 13006   0035A4  0E00               	movlw	0
 13007   0035A6  2044               	addwfc	(??_get_fat+3)^0,w,c
 13008   0035A8  6EDA               	movwf	fsr2h,c
 13009   0035AA  50DF               	movf	indf2,w,c
 13010   0035AC  6E45               	movwf	(??_get_fat+4)^0,c
 13011   0035AE  5045               	movf	(??_get_fat+4)^0,w,c
 13012   0035B0  6E4F               	movwf	get_fat@wc^0,c
 13013   0035B2  6A50               	clrf	(get_fat@wc+1)^0,c
 13014   0035B4  4A53               	infsnz	get_fat@bc^0,f,c
 13015   0035B6  2A54               	incf	(get_fat@bc+1)^0,f,c
 13016   0035B8                     
 13017                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 13018   0035B8  C03B  F030         	movff	get_fat@fs,move_window@fs
 13019   0035BC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 13020   0035C0  EE20 F01E          	lfsr	2,30
 13021   0035C4  503B               	movf	get_fat@fs^0,w,c
 13022   0035C6  26D9               	addwf	fsr2l,f,c
 13023   0035C8  503C               	movf	(get_fat@fs+1)^0,w,c
 13024   0035CA  22DA               	addwfc	fsr2h,f,c
 13025   0035CC  CFDE F041          	movff	postinc2,??_get_fat
 13026   0035D0  CFDE F042          	movff	postinc2,??_get_fat+1
 13027   0035D4  CFDE F043          	movff	postinc2,??_get_fat+2
 13028   0035D8  CFDE F044          	movff	postinc2,??_get_fat+3
 13029   0035DC  C053  F045         	movff	get_fat@bc,??_get_fat+4
 13030   0035E0  C054  F046         	movff	get_fat@bc+1,??_get_fat+5
 13031   0035E4  0E09               	movlw	9
 13032   0035E6  6E47               	movwf	(??_get_fat+6)^0,c
 13033   0035E8                     u5275:
 13034   0035E8  90D8               	bcf	status,0,c
 13035   0035EA  3246               	rrcf	(??_get_fat+5)^0,f,c
 13036   0035EC  3245               	rrcf	(??_get_fat+4)^0,f,c
 13037   0035EE  2E47               	decfsz	(??_get_fat+6)^0,f,c
 13038   0035F0  EFF4  F01A         	goto	u5275
 13039   0035F4  5045               	movf	(??_get_fat+4)^0,w,c
 13040   0035F6  2441               	addwf	??_get_fat^0,w,c
 13041   0035F8  6E32               	movwf	move_window@sector^0,c
 13042   0035FA  5046               	movf	(??_get_fat+5)^0,w,c
 13043   0035FC  2042               	addwfc	(??_get_fat+1)^0,w,c
 13044   0035FE  6E33               	movwf	(move_window@sector+1)^0,c
 13045   003600  0E00               	movlw	0
 13046   003602  2043               	addwfc	(??_get_fat+2)^0,w,c
 13047   003604  6E34               	movwf	(move_window@sector+2)^0,c
 13048   003606  0E00               	movlw	0
 13049   003608  2044               	addwfc	(??_get_fat+3)^0,w,c
 13050   00360A  6E35               	movwf	(move_window@sector+3)^0,c
 13051   00360C  ECF5  F02D         	call	_move_window	;wreg free
 13052   003610  0900               	iorlw	0
 13053   003612  B4D8               	btfsc	status,2,c
 13054   003614  EF0E  F01B         	goto	u5281
 13055   003618  EF10  F01B         	goto	u5280
 13056   00361C                     u5281:
 13057   00361C  EF12  F01B         	goto	l4399
 13058   003620                     u5280:
 13059   003620  EF34  F01C         	goto	l334
 13060   003624                     l4399:
 13061                           
 13062                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 13063   003624  0EFF               	movlw	255
 13064   003626  1453               	andwf	get_fat@bc^0,w,c
 13065   003628  6E41               	movwf	??_get_fat^0,c
 13066   00362A  0E01               	movlw	1
 13067   00362C  1454               	andwf	(get_fat@bc+1)^0,w,c
 13068   00362E  6E42               	movwf	(??_get_fat+1)^0,c
 13069   003630  5041               	movf	??_get_fat^0,w,c
 13070   003632  243B               	addwf	get_fat@fs^0,w,c
 13071   003634  6E43               	movwf	(??_get_fat+2)^0,c
 13072   003636  5042               	movf	(??_get_fat+1)^0,w,c
 13073   003638  203C               	addwfc	(get_fat@fs+1)^0,w,c
 13074   00363A  6E44               	movwf	(??_get_fat+3)^0,c
 13075   00363C  0E2E               	movlw	46
 13076   00363E  2443               	addwf	(??_get_fat+2)^0,w,c
 13077   003640  6ED9               	movwf	fsr2l,c
 13078   003642  0E00               	movlw	0
 13079   003644  2044               	addwfc	(??_get_fat+3)^0,w,c
 13080   003646  6EDA               	movwf	fsr2h,c
 13081   003648  50DF               	movf	indf2,w,c
 13082   00364A  6E45               	movwf	(??_get_fat+4)^0,c
 13083   00364C  5045               	movf	(??_get_fat+4)^0,w,c
 13084   00364E  6E47               	movwf	(??_get_fat+6)^0,c
 13085   003650  6A46               	clrf	(??_get_fat+5)^0,c
 13086   003652  5046               	movf	(??_get_fat+5)^0,w,c
 13087   003654  124F               	iorwf	get_fat@wc^0,f,c
 13088   003656  5047               	movf	(??_get_fat+6)^0,w,c
 13089   003658  1250               	iorwf	(get_fat@wc+1)^0,f,c
 13090   00365A                     
 13091                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 13092   00365A  B03D               	btfsc	get_fat@clst^0,0,c
 13093   00365C  EF32  F01B         	goto	u5291
 13094   003660  EF34  F01B         	goto	u5290
 13095   003664                     u5291:
 13096   003664  EF3C  F01B         	goto	l4405
 13097   003668                     u5290:
 13098   003668  0EFF               	movlw	255
 13099   00366A  144F               	andwf	get_fat@wc^0,w,c
 13100   00366C  6E49               	movwf	_get_fat$680^0,c
 13101   00366E  0E0F               	movlw	15
 13102   003670  1450               	andwf	(get_fat@wc+1)^0,w,c
 13103   003672  6E4A               	movwf	(_get_fat$680+1)^0,c
 13104   003674  EF4C  F01B         	goto	l4407
 13105   003678                     l4405:
 13106   003678  C04F  F041         	movff	get_fat@wc,??_get_fat
 13107   00367C  C050  F042         	movff	get_fat@wc+1,??_get_fat+1
 13108   003680  0E04               	movlw	4
 13109   003682  6E43               	movwf	(??_get_fat+2)^0,c
 13110   003684                     u5305:
 13111   003684  90D8               	bcf	status,0,c
 13112   003686  3242               	rrcf	(??_get_fat+1)^0,f,c
 13113   003688  3241               	rrcf	??_get_fat^0,f,c
 13114   00368A  2E43               	decfsz	(??_get_fat+2)^0,f,c
 13115   00368C  EF42  F01B         	goto	u5305
 13116   003690  C041  F049         	movff	??_get_fat,_get_fat$680
 13117   003694  C042  F04A         	movff	??_get_fat+1,_get_fat$680+1
 13118   003698                     l4407:
 13119   003698  C049  F04B         	movff	_get_fat$680,get_fat@val
 13120   00369C  C04A  F04C         	movff	_get_fat$680+1,get_fat@val+1
 13121   0036A0  6A4D               	clrf	(get_fat@val+2)^0,c
 13122   0036A2  6A4E               	clrf	(get_fat@val+3)^0,c
 13123                           
 13124                           ;ff.c: 842:    break;
 13125   0036A4  EF34  F01C         	goto	l334
 13126   0036A8                     l4409:
 13127                           
 13128                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 13129   0036A8  C03B  F030         	movff	get_fat@fs,move_window@fs
 13130   0036AC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 13131   0036B0  EE20 F01E          	lfsr	2,30
 13132   0036B4  503B               	movf	get_fat@fs^0,w,c
 13133   0036B6  26D9               	addwf	fsr2l,f,c
 13134   0036B8  503C               	movf	(get_fat@fs+1)^0,w,c
 13135   0036BA  22DA               	addwfc	fsr2h,f,c
 13136   0036BC  CFDE F041          	movff	postinc2,??_get_fat
 13137   0036C0  CFDE F042          	movff	postinc2,??_get_fat+1
 13138   0036C4  CFDE F043          	movff	postinc2,??_get_fat+2
 13139   0036C8  CFDE F044          	movff	postinc2,??_get_fat+3
 13140   0036CC  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 13141   0036D0  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 13142   0036D4  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 13143   0036D8  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 13144   0036DC  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 13145   0036E0  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 13146   0036E4  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 13147   0036E8  6A48               	clrf	(??_get_fat+7)^0,c
 13148   0036EA  5041               	movf	??_get_fat^0,w,c
 13149   0036EC  2445               	addwf	(??_get_fat+4)^0,w,c
 13150   0036EE  6E32               	movwf	move_window@sector^0,c
 13151   0036F0  5042               	movf	(??_get_fat+1)^0,w,c
 13152   0036F2  2046               	addwfc	(??_get_fat+5)^0,w,c
 13153   0036F4  6E33               	movwf	(move_window@sector+1)^0,c
 13154   0036F6  5043               	movf	(??_get_fat+2)^0,w,c
 13155   0036F8  2047               	addwfc	(??_get_fat+6)^0,w,c
 13156   0036FA  6E34               	movwf	(move_window@sector+2)^0,c
 13157   0036FC  5044               	movf	(??_get_fat+3)^0,w,c
 13158   0036FE  2048               	addwfc	(??_get_fat+7)^0,w,c
 13159   003700  6E35               	movwf	(move_window@sector+3)^0,c
 13160   003702  ECF5  F02D         	call	_move_window	;wreg free
 13161   003706  0900               	iorlw	0
 13162   003708  B4D8               	btfsc	status,2,c
 13163   00370A  EF89  F01B         	goto	u5311
 13164   00370E  EF8B  F01B         	goto	u5310
 13165   003712                     u5311:
 13166   003712  EF8D  F01B         	goto	l4413
 13167   003716                     u5310:
 13168   003716  EF34  F01C         	goto	l334
 13169   00371A                     l4413:
 13170                           
 13171                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 13172   00371A  C03D  F041         	movff	get_fat@clst,??_get_fat
 13173   00371E  C03E  F042         	movff	get_fat@clst+1,??_get_fat+1
 13174   003722  90D8               	bcf	status,0,c
 13175   003724  3641               	rlcf	??_get_fat^0,f,c
 13176   003726  3642               	rlcf	(??_get_fat+1)^0,f,c
 13177   003728  0EFF               	movlw	255
 13178   00372A  1441               	andwf	??_get_fat^0,w,c
 13179   00372C  6E43               	movwf	(??_get_fat+2)^0,c
 13180   00372E  0E01               	movlw	1
 13181   003730  1442               	andwf	(??_get_fat+1)^0,w,c
 13182   003732  6E44               	movwf	(??_get_fat+3)^0,c
 13183   003734  5043               	movf	(??_get_fat+2)^0,w,c
 13184   003736  243B               	addwf	get_fat@fs^0,w,c
 13185   003738  6E45               	movwf	(??_get_fat+4)^0,c
 13186   00373A  5044               	movf	(??_get_fat+3)^0,w,c
 13187   00373C  203C               	addwfc	(get_fat@fs+1)^0,w,c
 13188   00373E  6E46               	movwf	(??_get_fat+5)^0,c
 13189   003740  0E2E               	movlw	46
 13190   003742  2445               	addwf	(??_get_fat+4)^0,w,c
 13191   003744  6E51               	movwf	get_fat@p^0,c
 13192   003746  0E00               	movlw	0
 13193   003748  2046               	addwfc	(??_get_fat+5)^0,w,c
 13194   00374A  6E52               	movwf	(get_fat@p+1)^0,c
 13195   00374C                     
 13196                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 13197   00374C  C051  FFD9         	movff	get_fat@p,fsr2l
 13198   003750  C052  FFDA         	movff	get_fat@p+1,fsr2h
 13199   003754  CFDE F041          	movff	postinc2,??_get_fat
 13200   003758  CFDD F042          	movff	postdec2,??_get_fat+1
 13201   00375C  C041  F04B         	movff	??_get_fat,get_fat@val
 13202   003760  C042  F04C         	movff	??_get_fat+1,get_fat@val+1
 13203   003764  6A4D               	clrf	(get_fat@val+2)^0,c
 13204   003766  6A4E               	clrf	(get_fat@val+3)^0,c
 13205                           
 13206                           ;ff.c: 848:    break;
 13207   003768  EF34  F01C         	goto	l334
 13208   00376C                     l4417:
 13209                           
 13210                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 13211   00376C  C03B  F030         	movff	get_fat@fs,move_window@fs
 13212   003770  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 13213   003774  EE20 F01E          	lfsr	2,30
 13214   003778  503B               	movf	get_fat@fs^0,w,c
 13215   00377A  26D9               	addwf	fsr2l,f,c
 13216   00377C  503C               	movf	(get_fat@fs+1)^0,w,c
 13217   00377E  22DA               	addwfc	fsr2h,f,c
 13218   003780  CFDE F041          	movff	postinc2,??_get_fat
 13219   003784  CFDE F042          	movff	postinc2,??_get_fat+1
 13220   003788  CFDE F043          	movff	postinc2,??_get_fat+2
 13221   00378C  CFDE F044          	movff	postinc2,??_get_fat+3
 13222   003790  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 13223   003794  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 13224   003798  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 13225   00379C  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 13226   0037A0  0E08               	movlw	8
 13227   0037A2  EFD8  F01B         	goto	u5320
 13228   0037A6                     u5325:
 13229   0037A6  90D8               	bcf	status,0,c
 13230   0037A8  3248               	rrcf	(??_get_fat+7)^0,f,c
 13231   0037AA  3247               	rrcf	(??_get_fat+6)^0,f,c
 13232   0037AC  3246               	rrcf	(??_get_fat+5)^0,f,c
 13233   0037AE  3245               	rrcf	(??_get_fat+4)^0,f,c
 13234   0037B0                     u5320:
 13235   0037B0  2EE8               	decfsz	wreg,f,c
 13236   0037B2  EFD3  F01B         	goto	u5325
 13237   0037B6  5041               	movf	??_get_fat^0,w,c
 13238   0037B8  2445               	addwf	(??_get_fat+4)^0,w,c
 13239   0037BA  6E32               	movwf	move_window@sector^0,c
 13240   0037BC  5042               	movf	(??_get_fat+1)^0,w,c
 13241   0037BE  2046               	addwfc	(??_get_fat+5)^0,w,c
 13242   0037C0  6E33               	movwf	(move_window@sector+1)^0,c
 13243   0037C2  5043               	movf	(??_get_fat+2)^0,w,c
 13244   0037C4  2047               	addwfc	(??_get_fat+6)^0,w,c
 13245   0037C6  6E34               	movwf	(move_window@sector+2)^0,c
 13246   0037C8  5044               	movf	(??_get_fat+3)^0,w,c
 13247   0037CA  2048               	addwfc	(??_get_fat+7)^0,w,c
 13248   0037CC  6E35               	movwf	(move_window@sector+3)^0,c
 13249   0037CE  ECF5  F02D         	call	_move_window	;wreg free
 13250   0037D2  0900               	iorlw	0
 13251   0037D4  B4D8               	btfsc	status,2,c
 13252   0037D6  EFEF  F01B         	goto	u5331
 13253   0037DA  EFF1  F01B         	goto	u5330
 13254   0037DE                     u5331:
 13255   0037DE  EFF3  F01B         	goto	l4421
 13256   0037E2                     u5330:
 13257   0037E2  EF34  F01C         	goto	l334
 13258   0037E6                     l4421:
 13259                           
 13260                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 13261   0037E6  C03D  F041         	movff	get_fat@clst,??_get_fat
 13262   0037EA  C03E  F042         	movff	get_fat@clst+1,??_get_fat+1
 13263   0037EE  90D8               	bcf	status,0,c
 13264   0037F0  3641               	rlcf	??_get_fat^0,f,c
 13265   0037F2  3642               	rlcf	(??_get_fat+1)^0,f,c
 13266   0037F4  90D8               	bcf	status,0,c
 13267   0037F6  3641               	rlcf	??_get_fat^0,f,c
 13268   0037F8  3642               	rlcf	(??_get_fat+1)^0,f,c
 13269   0037FA  0EFF               	movlw	255
 13270   0037FC  1441               	andwf	??_get_fat^0,w,c
 13271   0037FE  6E43               	movwf	(??_get_fat+2)^0,c
 13272   003800  0E01               	movlw	1
 13273   003802  1442               	andwf	(??_get_fat+1)^0,w,c
 13274   003804  6E44               	movwf	(??_get_fat+3)^0,c
 13275   003806  5043               	movf	(??_get_fat+2)^0,w,c
 13276   003808  243B               	addwf	get_fat@fs^0,w,c
 13277   00380A  6E45               	movwf	(??_get_fat+4)^0,c
 13278   00380C  5044               	movf	(??_get_fat+3)^0,w,c
 13279   00380E  203C               	addwfc	(get_fat@fs+1)^0,w,c
 13280   003810  6E46               	movwf	(??_get_fat+5)^0,c
 13281   003812  0E2E               	movlw	46
 13282   003814  2445               	addwf	(??_get_fat+4)^0,w,c
 13283   003816  6E51               	movwf	get_fat@p^0,c
 13284   003818  0E00               	movlw	0
 13285   00381A  2046               	addwfc	(??_get_fat+5)^0,w,c
 13286   00381C  6E52               	movwf	(get_fat@p+1)^0,c
 13287   00381E                     
 13288                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 13289   00381E  C051  FFD9         	movff	get_fat@p,fsr2l
 13290   003822  C052  FFDA         	movff	get_fat@p+1,fsr2h
 13291   003826  0EFF               	movlw	255
 13292   003828  14DE               	andwf	postinc2,w,c
 13293   00382A  6E4B               	movwf	get_fat@val^0,c
 13294   00382C  0EFF               	movlw	255
 13295   00382E  14DE               	andwf	postinc2,w,c
 13296   003830  6E4C               	movwf	(get_fat@val+1)^0,c
 13297   003832  0EFF               	movlw	255
 13298   003834  14DE               	andwf	postinc2,w,c
 13299   003836  6E4D               	movwf	(get_fat@val+2)^0,c
 13300   003838  0E0F               	movlw	15
 13301   00383A  14DE               	andwf	postinc2,w,c
 13302   00383C  6E4E               	movwf	(get_fat@val+3)^0,c
 13303                           
 13304                           ;ff.c: 854:    break;
 13305   00383E  EF34  F01C         	goto	l334
 13306   003842                     l4427:
 13307   003842  C03B  FFD9         	movff	get_fat@fs,fsr2l
 13308   003846  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 13309   00384A  50DF               	movf	indf2,w,c
 13310                           
 13311                           ; Switch size 1, requested type "simple"
 13312                           ; Number of cases is 3, Range of values is 1 to 3
 13313                           ; switch strategies available:
 13314                           ; Name         Instructions Cycles
 13315                           ; simple_byte           10     6 (average)
 13316                           ;	Chosen strategy is simple_byte
 13317   00384C  0A01               	xorlw	1	; case 1
 13318   00384E  B4D8               	btfsc	status,2,c
 13319   003850  EF80  F01A         	goto	l336
 13320   003854  0A03               	xorlw	3	; case 2
 13321   003856  B4D8               	btfsc	status,2,c
 13322   003858  EF54  F01B         	goto	l4409
 13323   00385C  0A01               	xorlw	1	; case 3
 13324   00385E  B4D8               	btfsc	status,2,c
 13325   003860  EFB6  F01B         	goto	l4417
 13326   003864  EF70  F01A         	goto	l4383
 13327   003868                     l334:
 13328                           
 13329                           ;ff.c: 861:  return val;
 13330   003868  C04B  F03B         	movff	get_fat@val,?_get_fat
 13331   00386C  C04C  F03C         	movff	get_fat@val+1,?_get_fat+1
 13332   003870  C04D  F03D         	movff	get_fat@val+2,?_get_fat+2
 13333   003874  C04E  F03E         	movff	get_fat@val+3,?_get_fat+3
 13334   003878  0012               	return		;funcret
 13335   00387A                     __end_of_get_fat:
 13336                           	callstack 0
 13337                           
 13338 ;; *************** function _clust2sect *****************
 13339 ;; Defined at:
 13340 ;;		line 800 in file "ff.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;  fs              2   12[COMRAM] PTR struct .
 13343 ;;		 -> FatFs(558), NULL(0), 
 13344 ;;  clst            4   14[COMRAM] unsigned long 
 13345 ;; Auto vars:     Size  Location     Type
 13346 ;;		None
 13347 ;; Return value:  Size  Location     Type
 13348 ;;                  4   12[COMRAM] unsigned long 
 13349 ;; Registers used:
 13350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13351 ;; Tracked objects:
 13352 ;;		On entry : 0/0
 13353 ;;		On exit  : 0/0
 13354 ;;		Unchanged: 0/0
 13355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13356 ;;      Params:         6       0       0       0       0       0       0
 13357 ;;      Locals:         0       0       0       0       0       0       0
 13358 ;;      Temps:          5       0       0       0       0       0       0
 13359 ;;      Totals:        11       0       0       0       0       0       0
 13360 ;;Total ram usage:       11 bytes
 13361 ;; Hardware stack levels used: 1
 13362 ;; Hardware stack levels required when called: 1
 13363 ;; This function calls:
 13364 ;;		___lmul
 13365 ;; This function is called by:
 13366 ;;		_dir_sdi
 13367 ;;		_dir_next
 13368 ;;		_f_write
 13369 ;;		_f_lseek
 13370 ;;		_f_read
 13371 ;; This function uses a non-reentrant model
 13372 ;;
 13373                           
 13374                           	psect	text35
 13375   005A62                     __ptext35:
 13376                           	callstack 0
 13377   005A62                     _clust2sect:
 13378                           	callstack 28
 13379   005A62                     
 13380                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 13381   005A62  0E02               	movlw	2
 13382   005A64  5E0F               	subwf	clust2sect@clst^0,f,c
 13383   005A66  0E00               	movlw	0
 13384   005A68  5A10               	subwfb	(clust2sect@clst+1)^0,f,c
 13385   005A6A  5A11               	subwfb	(clust2sect@clst+2)^0,f,c
 13386   005A6C  5A12               	subwfb	(clust2sect@clst+3)^0,f,c
 13387   005A6E                     
 13388                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 13389   005A6E  EE20 F012          	lfsr	2,18
 13390   005A72  500D               	movf	clust2sect@fs^0,w,c
 13391   005A74  26D9               	addwf	fsr2l,f,c
 13392   005A76  500E               	movf	(clust2sect@fs+1)^0,w,c
 13393   005A78  22DA               	addwfc	fsr2h,f,c
 13394   005A7A  0EFE               	movlw	254
 13395   005A7C  24DE               	addwf	postinc2,w,c
 13396   005A7E  6E13               	movwf	??_clust2sect^0,c
 13397   005A80  0EFF               	movlw	255
 13398   005A82  20DE               	addwfc	postinc2,w,c
 13399   005A84  6E14               	movwf	(??_clust2sect+1)^0,c
 13400   005A86  0EFF               	movlw	255
 13401   005A88  20DE               	addwfc	postinc2,w,c
 13402   005A8A  6E15               	movwf	(??_clust2sect+2)^0,c
 13403   005A8C  0EFF               	movlw	255
 13404   005A8E  20DE               	addwfc	postinc2,w,c
 13405   005A90  6E16               	movwf	(??_clust2sect+3)^0,c
 13406   005A92  5013               	movf	??_clust2sect^0,w,c
 13407   005A94  5C0F               	subwf	clust2sect@clst^0,w,c
 13408   005A96  5014               	movf	(??_clust2sect+1)^0,w,c
 13409   005A98  5810               	subwfb	(clust2sect@clst+1)^0,w,c
 13410   005A9A  5015               	movf	(??_clust2sect+2)^0,w,c
 13411   005A9C  5811               	subwfb	(clust2sect@clst+2)^0,w,c
 13412   005A9E  5016               	movf	(??_clust2sect+3)^0,w,c
 13413   005AA0  5812               	subwfb	(clust2sect@clst+3)^0,w,c
 13414   005AA2  A0D8               	btfss	status,0,c
 13415   005AA4  EF56  F02D         	goto	u5491
 13416   005AA8  EF58  F02D         	goto	u5490
 13417   005AAC                     u5491:
 13418   005AAC  EF62  F02D         	goto	l4529
 13419   005AB0                     u5490:
 13420   005AB0  0E00               	movlw	0
 13421   005AB2  6E0D               	movwf	?_clust2sect^0,c
 13422   005AB4  0E00               	movlw	0
 13423   005AB6  6E0E               	movwf	(?_clust2sect+1)^0,c
 13424   005AB8  0E00               	movlw	0
 13425   005ABA  6E0F               	movwf	(?_clust2sect+2)^0,c
 13426   005ABC  0E00               	movlw	0
 13427   005ABE  6E10               	movwf	(?_clust2sect+3)^0,c
 13428   005AC0  EF93  F02D         	goto	l328
 13429   005AC4                     l4529:
 13430                           
 13431                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 13432   005AC4  EE20 F026          	lfsr	2,38
 13433   005AC8  500D               	movf	clust2sect@fs^0,w,c
 13434   005ACA  26D9               	addwf	fsr2l,f,c
 13435   005ACC  500E               	movf	(clust2sect@fs+1)^0,w,c
 13436   005ACE  22DA               	addwfc	fsr2h,f,c
 13437   005AD0  CFDE F013          	movff	postinc2,??_clust2sect
 13438   005AD4  CFDE F014          	movff	postinc2,??_clust2sect+1
 13439   005AD8  CFDE F015          	movff	postinc2,??_clust2sect+2
 13440   005ADC  CFDE F016          	movff	postinc2,??_clust2sect+3
 13441   005AE0  EE20 F002          	lfsr	2,2
 13442   005AE4  500D               	movf	clust2sect@fs^0,w,c
 13443   005AE6  26D9               	addwf	fsr2l,f,c
 13444   005AE8  500E               	movf	(clust2sect@fs+1)^0,w,c
 13445   005AEA  22DA               	addwfc	fsr2h,f,c
 13446   005AEC  50DF               	movf	indf2,w,c
 13447   005AEE  6E17               	movwf	(??_clust2sect+4)^0,c
 13448   005AF0  5017               	movf	(??_clust2sect+4)^0,w,c
 13449   005AF2  6E01               	movwf	___lmul@multiplier^0,c
 13450   005AF4  6A02               	clrf	(___lmul@multiplier+1)^0,c
 13451   005AF6  6A03               	clrf	(___lmul@multiplier+2)^0,c
 13452   005AF8  6A04               	clrf	(___lmul@multiplier+3)^0,c
 13453   005AFA  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 13454   005AFE  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 13455   005B02  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 13456   005B06  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 13457   005B0A  EC1D  F031         	call	___lmul	;wreg free
 13458   005B0E  5013               	movf	??_clust2sect^0,w,c
 13459   005B10  2401               	addwf	?___lmul^0,w,c
 13460   005B12  6E0D               	movwf	?_clust2sect^0,c
 13461   005B14  5014               	movf	(??_clust2sect+1)^0,w,c
 13462   005B16  2002               	addwfc	(?___lmul+1)^0,w,c
 13463   005B18  6E0E               	movwf	(?_clust2sect+1)^0,c
 13464   005B1A  5015               	movf	(??_clust2sect+2)^0,w,c
 13465   005B1C  2003               	addwfc	(?___lmul+2)^0,w,c
 13466   005B1E  6E0F               	movwf	(?_clust2sect+2)^0,c
 13467   005B20  5016               	movf	(??_clust2sect+3)^0,w,c
 13468   005B22  2004               	addwfc	(?___lmul+3)^0,w,c
 13469   005B24  6E10               	movwf	(?_clust2sect+3)^0,c
 13470   005B26                     l328:
 13471   005B26  0012               	return		;funcret
 13472   005B28                     __end_of_clust2sect:
 13473                           	callstack 0
 13474                           
 13475 ;; *************** function ___lmul *****************
 13476 ;; Defined at:
 13477 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul32.c"
 13478 ;; Parameters:    Size  Location     Type
 13479 ;;  multiplier      4    0[COMRAM] unsigned long 
 13480 ;;  multiplicand    4    4[COMRAM] unsigned long 
 13481 ;; Auto vars:     Size  Location     Type
 13482 ;;  product         4    8[COMRAM] unsigned long 
 13483 ;; Return value:  Size  Location     Type
 13484 ;;                  4    0[COMRAM] unsigned long 
 13485 ;; Registers used:
 13486 ;;		wreg, status,2, status,0
 13487 ;; Tracked objects:
 13488 ;;		On entry : 0/0
 13489 ;;		On exit  : 0/0
 13490 ;;		Unchanged: 0/0
 13491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13492 ;;      Params:         8       0       0       0       0       0       0
 13493 ;;      Locals:         4       0       0       0       0       0       0
 13494 ;;      Temps:          0       0       0       0       0       0       0
 13495 ;;      Totals:        12       0       0       0       0       0       0
 13496 ;;Total ram usage:       12 bytes
 13497 ;; Hardware stack levels used: 1
 13498 ;; This function calls:
 13499 ;;		Nothing
 13500 ;; This function is called by:
 13501 ;;		_clust2sect
 13502 ;;		_find_volume
 13503 ;; This function uses a non-reentrant model
 13504 ;;
 13505                           
 13506                           	psect	text36
 13507   00623A                     __ptext36:
 13508                           	callstack 0
 13509   00623A                     ___lmul:
 13510                           	callstack 28
 13511   00623A  0E00               	movlw	0
 13512   00623C  6E09               	movwf	___lmul@product^0,c
 13513   00623E  0E00               	movlw	0
 13514   006240  6E0A               	movwf	(___lmul@product+1)^0,c
 13515   006242  0E00               	movlw	0
 13516   006244  6E0B               	movwf	(___lmul@product+2)^0,c
 13517   006246  0E00               	movlw	0
 13518   006248  6E0C               	movwf	(___lmul@product+3)^0,c
 13519   00624A                     l4505:
 13520   00624A  A001               	btfss	___lmul@multiplier^0,0,c
 13521   00624C  EF2A  F031         	goto	u5461
 13522   006250  EF2C  F031         	goto	u5460
 13523   006254                     u5461:
 13524   006254  EF34  F031         	goto	l4509
 13525   006258                     u5460:
 13526   006258  5005               	movf	___lmul@multiplicand^0,w,c
 13527   00625A  2609               	addwf	___lmul@product^0,f,c
 13528   00625C  5006               	movf	(___lmul@multiplicand+1)^0,w,c
 13529   00625E  220A               	addwfc	(___lmul@product+1)^0,f,c
 13530   006260  5007               	movf	(___lmul@multiplicand+2)^0,w,c
 13531   006262  220B               	addwfc	(___lmul@product+2)^0,f,c
 13532   006264  5008               	movf	(___lmul@multiplicand+3)^0,w,c
 13533   006266  220C               	addwfc	(___lmul@product+3)^0,f,c
 13534   006268                     l4509:
 13535   006268  90D8               	bcf	status,0,c
 13536   00626A  3605               	rlcf	___lmul@multiplicand^0,f,c
 13537   00626C  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
 13538   00626E  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
 13539   006270  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
 13540   006272  90D8               	bcf	status,0,c
 13541   006274  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
 13542   006276  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
 13543   006278  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
 13544   00627A  3201               	rrcf	___lmul@multiplier^0,f,c
 13545   00627C  5001               	movf	___lmul@multiplier^0,w,c
 13546   00627E  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
 13547   006280  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
 13548   006282  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
 13549   006284  A4D8               	btfss	status,2,c
 13550   006286  EF47  F031         	goto	u5471
 13551   00628A  EF49  F031         	goto	u5470
 13552   00628E                     u5471:
 13553   00628E  EF25  F031         	goto	l4505
 13554   006292                     u5470:
 13555   006292  C009  F001         	movff	___lmul@product,?___lmul
 13556   006296  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 13557   00629A  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 13558   00629E  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 13559   0062A2  0012               	return		;funcret
 13560   0062A4                     __end_of___lmul:
 13561                           	callstack 0
 13562                           
 13563 ;; *************** function ___lldiv *****************
 13564 ;; Defined at:
 13565 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\__lldiv.c"
 13566 ;; Parameters:    Size  Location     Type
 13567 ;;  dividend        4    0[COMRAM] unsigned long 
 13568 ;;  divisor         4    4[COMRAM] unsigned long 
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;  quotient        4    8[COMRAM] unsigned long 
 13571 ;;  counter         1   12[COMRAM] unsigned char 
 13572 ;; Return value:  Size  Location     Type
 13573 ;;                  4    0[COMRAM] unsigned long 
 13574 ;; Registers used:
 13575 ;;		wreg, status,2, status,0
 13576 ;; Tracked objects:
 13577 ;;		On entry : 0/0
 13578 ;;		On exit  : 0/0
 13579 ;;		Unchanged: 0/0
 13580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13581 ;;      Params:         8       0       0       0       0       0       0
 13582 ;;      Locals:         5       0       0       0       0       0       0
 13583 ;;      Temps:          0       0       0       0       0       0       0
 13584 ;;      Totals:        13       0       0       0       0       0       0
 13585 ;;Total ram usage:       13 bytes
 13586 ;; Hardware stack levels used: 1
 13587 ;; This function calls:
 13588 ;;		Nothing
 13589 ;; This function is called by:
 13590 ;;		_find_volume
 13591 ;;		_f_lseek
 13592 ;; This function uses a non-reentrant model
 13593 ;;
 13594                           
 13595                           	psect	text37
 13596   005ED6                     __ptext37:
 13597                           	callstack 0
 13598   005ED6                     ___lldiv:
 13599                           	callstack 28
 13600   005ED6  0E00               	movlw	0
 13601   005ED8  6E09               	movwf	___lldiv@quotient^0,c
 13602   005EDA  0E00               	movlw	0
 13603   005EDC  6E0A               	movwf	(___lldiv@quotient+1)^0,c
 13604   005EDE  0E00               	movlw	0
 13605   005EE0  6E0B               	movwf	(___lldiv@quotient+2)^0,c
 13606   005EE2  0E00               	movlw	0
 13607   005EE4  6E0C               	movwf	(___lldiv@quotient+3)^0,c
 13608   005EE6  5005               	movf	___lldiv@divisor^0,w,c
 13609   005EE8  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
 13610   005EEA  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
 13611   005EEC  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
 13612   005EEE  B4D8               	btfsc	status,2,c
 13613   005EF0  EF7C  F02F         	goto	u7371
 13614   005EF4  EF7E  F02F         	goto	u7370
 13615   005EF8                     u7371:
 13616   005EF8  EFB4  F02F         	goto	l846
 13617   005EFC                     u7370:
 13618   005EFC  0E01               	movlw	1
 13619   005EFE  6E0D               	movwf	___lldiv@counter^0,c
 13620   005F00  EF88  F02F         	goto	l5495
 13621   005F04                     l5493:
 13622   005F04  90D8               	bcf	status,0,c
 13623   005F06  3605               	rlcf	___lldiv@divisor^0,f,c
 13624   005F08  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
 13625   005F0A  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
 13626   005F0C  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
 13627   005F0E  2A0D               	incf	___lldiv@counter^0,f,c
 13628   005F10                     l5495:
 13629   005F10  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
 13630   005F12  EF8D  F02F         	goto	u7381
 13631   005F16  EF8F  F02F         	goto	u7380
 13632   005F1A                     u7381:
 13633   005F1A  EF82  F02F         	goto	l5493
 13634   005F1E                     u7380:
 13635   005F1E                     l5497:
 13636   005F1E  90D8               	bcf	status,0,c
 13637   005F20  3609               	rlcf	___lldiv@quotient^0,f,c
 13638   005F22  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
 13639   005F24  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
 13640   005F26  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
 13641   005F28  5005               	movf	___lldiv@divisor^0,w,c
 13642   005F2A  5C01               	subwf	___lldiv@dividend^0,w,c
 13643   005F2C  5006               	movf	(___lldiv@divisor+1)^0,w,c
 13644   005F2E  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
 13645   005F30  5007               	movf	(___lldiv@divisor+2)^0,w,c
 13646   005F32  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
 13647   005F34  5008               	movf	(___lldiv@divisor+3)^0,w,c
 13648   005F36  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
 13649   005F38  A0D8               	btfss	status,0,c
 13650   005F3A  EFA1  F02F         	goto	u7391
 13651   005F3E  EFA3  F02F         	goto	u7390
 13652   005F42                     u7391:
 13653   005F42  EFAC  F02F         	goto	l5505
 13654   005F46                     u7390:
 13655   005F46  5005               	movf	___lldiv@divisor^0,w,c
 13656   005F48  5E01               	subwf	___lldiv@dividend^0,f,c
 13657   005F4A  5006               	movf	(___lldiv@divisor+1)^0,w,c
 13658   005F4C  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
 13659   005F4E  5007               	movf	(___lldiv@divisor+2)^0,w,c
 13660   005F50  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
 13661   005F52  5008               	movf	(___lldiv@divisor+3)^0,w,c
 13662   005F54  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
 13663   005F56  8009               	bsf	___lldiv@quotient^0,0,c
 13664   005F58                     l5505:
 13665   005F58  90D8               	bcf	status,0,c
 13666   005F5A  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
 13667   005F5C  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
 13668   005F5E  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
 13669   005F60  3205               	rrcf	___lldiv@divisor^0,f,c
 13670   005F62  2E0D               	decfsz	___lldiv@counter^0,f,c
 13671   005F64  EF8F  F02F         	goto	l5497
 13672   005F68                     l846:
 13673   005F68  C009  F001         	movff	___lldiv@quotient,?___lldiv
 13674   005F6C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 13675   005F70  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 13676   005F74  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 13677   005F78  0012               	return		;funcret
 13678   005F7A                     __end_of___lldiv:
 13679                           	callstack 0
 13680                           
 13681 ;; *************** function _f_close *****************
 13682 ;; Defined at:
 13683 ;;		line 2861 in file "ff.c"
 13684 ;; Parameters:    Size  Location     Type
 13685 ;;  fp              2   72[COMRAM] PTR struct .
 13686 ;;		 -> Fil(32), 
 13687 ;; Auto vars:     Size  Location     Type
 13688 ;;  res             1   74[COMRAM] enum E95
 13689 ;; Return value:  Size  Location     Type
 13690 ;;                  1    wreg      enum E95
 13691 ;; Registers used:
 13692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13693 ;; Tracked objects:
 13694 ;;		On entry : 0/0
 13695 ;;		On exit  : 0/0
 13696 ;;		Unchanged: 0/0
 13697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13698 ;;      Params:         2       0       0       0       0       0       0
 13699 ;;      Locals:         1       0       0       0       0       0       0
 13700 ;;      Temps:          0       0       0       0       0       0       0
 13701 ;;      Totals:         3       0       0       0       0       0       0
 13702 ;;Total ram usage:        3 bytes
 13703 ;; Hardware stack levels used: 1
 13704 ;; Hardware stack levels required when called: 9
 13705 ;; This function calls:
 13706 ;;		_f_sync
 13707 ;;		_validate
 13708 ;; This function is called by:
 13709 ;;		_main
 13710 ;; This function uses a non-reentrant model
 13711 ;;
 13712                           
 13713                           	psect	text38
 13714   0063B6                     __ptext38:
 13715                           	callstack 0
 13716   0063B6                     _f_close:
 13717                           	callstack 21
 13718   0063B6                     
 13719                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 13720   0063B6  C049  F044         	movff	f_close@fp,f_sync@fp
 13721   0063BA  C04A  F045         	movff	f_close@fp+1,f_sync@fp+1
 13722   0063BE  ECD8  F027         	call	_f_sync	;wreg free
 13723   0063C2  6E4B               	movwf	f_close@res^0,c
 13724   0063C4                     
 13725                           ;ff.c: 2870:  if (res == FR_OK)
 13726   0063C4  504B               	movf	f_close@res^0,w,c
 13727   0063C6  A4D8               	btfss	status,2,c
 13728   0063C8  EFE8  F031         	goto	u8721
 13729   0063CC  EFEA  F031         	goto	u8720
 13730   0063D0                     u8721:
 13731   0063D0  EFFF  F031         	goto	l740
 13732   0063D4                     u8720:
 13733   0063D4                     
 13734                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 13735   0063D4  C049  F002         	movff	f_close@fp,validate@obj
 13736   0063D8  C04A  F003         	movff	f_close@fp+1,validate@obj+1
 13737   0063DC  EC6A  F02C         	call	_validate	;wreg free
 13738   0063E0  6E4B               	movwf	f_close@res^0,c
 13739   0063E2                     
 13740                           ;ff.c: 2874:   if (res == FR_OK) {
 13741   0063E2  504B               	movf	f_close@res^0,w,c
 13742   0063E4  A4D8               	btfss	status,2,c
 13743   0063E6  EFF7  F031         	goto	u8731
 13744   0063EA  EFF9  F031         	goto	u8730
 13745   0063EE                     u8731:
 13746   0063EE  EFFF  F031         	goto	l740
 13747   0063F2                     u8730:
 13748   0063F2                     
 13749                           ;ff.c: 2882:     fp->fs = 0;
 13750   0063F2  C049  FFD9         	movff	f_close@fp,fsr2l
 13751   0063F6  C04A  FFDA         	movff	f_close@fp+1,fsr2h
 13752   0063FA  6ADE               	clrf	postinc2,c
 13753   0063FC  6ADD               	clrf	postdec2,c
 13754   0063FE                     l740:
 13755   0063FE  0012               	return		;funcret
 13756   006400                     __end_of_f_close:
 13757                           	callstack 0
 13758                           
 13759 ;; *************** function _f_sync *****************
 13760 ;; Defined at:
 13761 ;;		line 2813 in file "ff.c"
 13762 ;; Parameters:    Size  Location     Type
 13763 ;;  fp              2   67[COMRAM] PTR struct .
 13764 ;;		 -> Fil(32), 
 13765 ;; Auto vars:     Size  Location     Type
 13766 ;;  tm              4    0        unsigned long 
 13767 ;;  dir             2   70[COMRAM] PTR unsigned char 
 13768 ;;		 -> FatFs(558), NULL(0), 
 13769 ;;  res             1   69[COMRAM] enum E95
 13770 ;; Return value:  Size  Location     Type
 13771 ;;                  1    wreg      enum E95
 13772 ;; Registers used:
 13773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13774 ;; Tracked objects:
 13775 ;;		On entry : 0/0
 13776 ;;		On exit  : 0/0
 13777 ;;		Unchanged: 0/0
 13778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13779 ;;      Params:         2       0       0       0       0       0       0
 13780 ;;      Locals:         3       0       0       0       0       0       0
 13781 ;;      Temps:          0       0       0       0       0       0       0
 13782 ;;      Totals:         5       0       0       0       0       0       0
 13783 ;;Total ram usage:        5 bytes
 13784 ;; Hardware stack levels used: 1
 13785 ;; Hardware stack levels required when called: 8
 13786 ;; This function calls:
 13787 ;;		_move_window
 13788 ;;		_st_clust
 13789 ;;		_sync_fs
 13790 ;;		_validate
 13791 ;; This function is called by:
 13792 ;;		_f_close
 13793 ;; This function uses a non-reentrant model
 13794 ;;
 13795                           
 13796                           	psect	text39
 13797   004FB0                     __ptext39:
 13798                           	callstack 0
 13799   004FB0                     _f_sync:
 13800                           	callstack 21
 13801   004FB0                     
 13802                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 13803   004FB0  C044  F002         	movff	f_sync@fp,validate@obj
 13804   004FB4  C045  F003         	movff	f_sync@fp+1,validate@obj+1
 13805   004FB8  EC6A  F02C         	call	_validate	;wreg free
 13806   004FBC  6E46               	movwf	f_sync@res^0,c
 13807   004FBE                     
 13808                           ;ff.c: 2823:  if (res == FR_OK) {
 13809   004FBE  5046               	movf	f_sync@res^0,w,c
 13810   004FC0  A4D8               	btfss	status,2,c
 13811   004FC2  EFE5  F027         	goto	u8141
 13812   004FC6  EFE7  F027         	goto	u8140
 13813   004FCA                     u8141:
 13814   004FCA  EF84  F028         	goto	l5963
 13815   004FCE                     u8140:
 13816   004FCE                     
 13817                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 13818   004FCE  EE20 F004          	lfsr	2,4
 13819   004FD2  5044               	movf	f_sync@fp^0,w,c
 13820   004FD4  26D9               	addwf	fsr2l,f,c
 13821   004FD6  5045               	movf	(f_sync@fp+1)^0,w,c
 13822   004FD8  22DA               	addwfc	fsr2h,f,c
 13823   004FDA  AADF               	btfss	indf2,5,c
 13824   004FDC  EFF2  F027         	goto	u8151
 13825   004FE0  EFF4  F027         	goto	u8150
 13826   004FE4                     u8151:
 13827   004FE4  EF84  F028         	goto	l5963
 13828   004FE8                     u8150:
 13829   004FE8                     
 13830                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 13831   004FE8  C044  FFD9         	movff	f_sync@fp,fsr2l
 13832   004FEC  C045  FFDA         	movff	f_sync@fp+1,fsr2h
 13833   004FF0  CFDE F030          	movff	postinc2,move_window@fs
 13834   004FF4  CFDD F031          	movff	postdec2,move_window@fs+1
 13835   004FF8  EE20 F01A          	lfsr	2,26
 13836   004FFC  5044               	movf	f_sync@fp^0,w,c
 13837   004FFE  26D9               	addwf	fsr2l,f,c
 13838   005000  5045               	movf	(f_sync@fp+1)^0,w,c
 13839   005002  22DA               	addwfc	fsr2h,f,c
 13840   005004  CFDE F032          	movff	postinc2,move_window@sector
 13841   005008  CFDE F033          	movff	postinc2,move_window@sector+1
 13842   00500C  CFDE F034          	movff	postinc2,move_window@sector+2
 13843   005010  CFDE F035          	movff	postinc2,move_window@sector+3
 13844   005014  ECF5  F02D         	call	_move_window	;wreg free
 13845   005018  6E46               	movwf	f_sync@res^0,c
 13846   00501A                     
 13847                           ;ff.c: 2834:    if (res == FR_OK) {
 13848   00501A  5046               	movf	f_sync@res^0,w,c
 13849   00501C  A4D8               	btfss	status,2,c
 13850   00501E  EF13  F028         	goto	u8161
 13851   005022  EF15  F028         	goto	u8160
 13852   005026                     u8161:
 13853   005026  EF84  F028         	goto	l5963
 13854   00502A                     u8160:
 13855   00502A                     
 13856                           ;ff.c: 2835:     dir = fp->dir_ptr;
 13857   00502A  EE20 F01E          	lfsr	2,30
 13858   00502E  5044               	movf	f_sync@fp^0,w,c
 13859   005030  26D9               	addwf	fsr2l,f,c
 13860   005032  5045               	movf	(f_sync@fp+1)^0,w,c
 13861   005034  22DA               	addwfc	fsr2h,f,c
 13862   005036  CFDE F047          	movff	postinc2,f_sync@dir
 13863   00503A  CFDD F048          	movff	postdec2,f_sync@dir+1
 13864                           
 13865                           ;ff.c: 2836:     dir[11] |= 0x20;
 13866   00503E  EE20 F00B          	lfsr	2,11
 13867   005042  5047               	movf	f_sync@dir^0,w,c
 13868   005044  26D9               	addwf	fsr2l,f,c
 13869   005046  5048               	movf	(f_sync@dir+1)^0,w,c
 13870   005048  22DA               	addwfc	fsr2h,f,c
 13871   00504A  0E00               	movlw	0
 13872   00504C  8ADB               	bsf	plusw2,5,c
 13873   00504E                     
 13874                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 13875   00504E  EE20 F00A          	lfsr	2,10
 13876   005052  5044               	movf	f_sync@fp^0,w,c
 13877   005054  26D9               	addwf	fsr2l,f,c
 13878   005056  5045               	movf	(f_sync@fp+1)^0,w,c
 13879   005058  22DA               	addwfc	fsr2h,f,c
 13880   00505A  EE10 F01C          	lfsr	1,28
 13881   00505E  5047               	movf	f_sync@dir^0,w,c
 13882   005060  26E1               	addwf	fsr1l,f,c
 13883   005062  5048               	movf	(f_sync@dir+1)^0,w,c
 13884   005064  22E2               	addwfc	fsr1h,f,c
 13885   005066  CFDE FFE6          	movff	postinc2,postinc1
 13886   00506A  CFDE FFE6          	movff	postinc2,postinc1
 13887   00506E  CFDE FFE6          	movff	postinc2,postinc1
 13888   005072  CFDE FFE6          	movff	postinc2,postinc1
 13889   005076                     
 13890                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 13891   005076  C047  F001         	movff	f_sync@dir,st_clust@dir
 13892   00507A  C048  F002         	movff	f_sync@dir+1,st_clust@dir+1
 13893   00507E  EE20 F00E          	lfsr	2,14
 13894   005082  5044               	movf	f_sync@fp^0,w,c
 13895   005084  26D9               	addwf	fsr2l,f,c
 13896   005086  5045               	movf	(f_sync@fp+1)^0,w,c
 13897   005088  22DA               	addwfc	fsr2h,f,c
 13898   00508A  CFDE F003          	movff	postinc2,st_clust@cl
 13899   00508E  CFDE F004          	movff	postinc2,st_clust@cl+1
 13900   005092  CFDE F005          	movff	postinc2,st_clust@cl+2
 13901   005096  CFDE F006          	movff	postinc2,st_clust@cl+3
 13902   00509A  ECB2  F032         	call	_st_clust	;wreg free
 13903   00509E                     
 13904                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 13905   00509E  EE20 F016          	lfsr	2,22
 13906   0050A2  5047               	movf	f_sync@dir^0,w,c
 13907   0050A4  26D9               	addwf	fsr2l,f,c
 13908   0050A6  5048               	movf	(f_sync@dir+1)^0,w,c
 13909   0050A8  22DA               	addwfc	fsr2h,f,c
 13910   0050AA  0E00               	movlw	0
 13911   0050AC  6EDE               	movwf	postinc2,c
 13912   0050AE  0E00               	movlw	0
 13913   0050B0  6EDE               	movwf	postinc2,c
 13914   0050B2  0E21               	movlw	33
 13915   0050B4  6EDE               	movwf	postinc2,c
 13916   0050B6  0E46               	movlw	70
 13917   0050B8  6EDD               	movwf	postdec2,c
 13918   0050BA                     
 13919                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 13920   0050BA  EE20 F012          	lfsr	2,18
 13921   0050BE  5047               	movf	f_sync@dir^0,w,c
 13922   0050C0  26D9               	addwf	fsr2l,f,c
 13923   0050C2  5048               	movf	(f_sync@dir+1)^0,w,c
 13924   0050C4  22DA               	addwfc	fsr2h,f,c
 13925   0050C6  6ADE               	clrf	postinc2,c
 13926   0050C8  6ADD               	clrf	postdec2,c
 13927   0050CA                     
 13928                           ;ff.c: 2842:     fp->flag &= ~0x20;
 13929   0050CA  EE20 F004          	lfsr	2,4
 13930   0050CE  5044               	movf	f_sync@fp^0,w,c
 13931   0050D0  26D9               	addwf	fsr2l,f,c
 13932   0050D2  5045               	movf	(f_sync@fp+1)^0,w,c
 13933   0050D4  22DA               	addwfc	fsr2h,f,c
 13934   0050D6  0EDF               	movlw	223
 13935   0050D8  16DF               	andwf	indf2,f,c
 13936   0050DA                     
 13937                           ;ff.c: 2843:     fp->fs->wflag = 1;
 13938   0050DA  C044  FFD9         	movff	f_sync@fp,fsr2l
 13939   0050DE  C045  FFDA         	movff	f_sync@fp+1,fsr2h
 13940   0050E2  EE10 F004          	lfsr	1,4
 13941   0050E6  50DE               	movf	postinc2,w,c
 13942   0050E8  26E1               	addwf	fsr1l,f,c
 13943   0050EA  50DD               	movf	postdec2,w,c
 13944   0050EC  22E2               	addwfc	fsr1h,f,c
 13945   0050EE  0E01               	movlw	1
 13946   0050F0  6EE7               	movwf	indf1,c
 13947   0050F2                     
 13948                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 13949   0050F2  C044  FFD9         	movff	f_sync@fp,fsr2l
 13950   0050F6  C045  FFDA         	movff	f_sync@fp+1,fsr2h
 13951   0050FA  CFDE F039          	movff	postinc2,sync_fs@fs
 13952   0050FE  CFDD F03A          	movff	postdec2,sync_fs@fs+1
 13953   005102  ECD1  F022         	call	_sync_fs	;wreg free
 13954   005106  6E46               	movwf	f_sync@res^0,c
 13955   005108                     l5963:
 13956                           
 13957                           ;ff.c: 2849:  return res;
 13958   005108  5046               	movf	f_sync@res^0,w,c
 13959   00510A  0012               	return		;funcret
 13960   00510C                     __end_of_f_sync:
 13961                           	callstack 0
 13962                           
 13963 ;; *************** function _validate *****************
 13964 ;; Defined at:
 13965 ;;		line 2372 in file "ff.c"
 13966 ;; Parameters:    Size  Location     Type
 13967 ;;  obj             2    1[COMRAM] PTR void 
 13968 ;;		 -> Fil(32), 
 13969 ;; Auto vars:     Size  Location     Type
 13970 ;;  fil             2    7[COMRAM] PTR struct .
 13971 ;;		 -> Fil(32), 
 13972 ;; Return value:  Size  Location     Type
 13973 ;;                  1    wreg      enum E95
 13974 ;; Registers used:
 13975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13976 ;; Tracked objects:
 13977 ;;		On entry : 0/0
 13978 ;;		On exit  : 0/0
 13979 ;;		Unchanged: 0/0
 13980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13981 ;;      Params:         2       0       0       0       0       0       0
 13982 ;;      Locals:         2       0       0       0       0       0       0
 13983 ;;      Temps:          4       0       0       0       0       0       0
 13984 ;;      Totals:         8       0       0       0       0       0       0
 13985 ;;Total ram usage:        8 bytes
 13986 ;; Hardware stack levels used: 1
 13987 ;; Hardware stack levels required when called: 1
 13988 ;; This function calls:
 13989 ;;		_disk_status
 13990 ;; This function is called by:
 13991 ;;		_f_write
 13992 ;;		_f_sync
 13993 ;;		_f_close
 13994 ;;		_f_lseek
 13995 ;;		_f_read
 13996 ;; This function uses a non-reentrant model
 13997 ;;
 13998                           
 13999                           	psect	text40
 14000   0058D4                     __ptext40:
 14001                           	callstack 0
 14002   0058D4                     _validate:
 14003                           	callstack 28
 14004   0058D4                     
 14005                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 14006   0058D4  C002  F008         	movff	validate@obj,validate@fil
 14007   0058D8  C003  F009         	movff	validate@obj+1,validate@fil+1
 14008                           
 14009                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 14010   0058DC  5008               	movf	validate@fil^0,w,c
 14011   0058DE  1009               	iorwf	(validate@fil+1)^0,w,c
 14012   0058E0  B4D8               	btfsc	status,2,c
 14013   0058E2  EF75  F02C         	goto	u7321
 14014   0058E6  EF77  F02C         	goto	u7320
 14015   0058EA                     u7321:
 14016   0058EA  EFC9  F02C         	goto	l5479
 14017   0058EE                     u7320:
 14018   0058EE  C008  FFD9         	movff	validate@fil,fsr2l
 14019   0058F2  C009  FFDA         	movff	validate@fil+1,fsr2h
 14020   0058F6  50DE               	movf	postinc2,w,c
 14021   0058F8  10DE               	iorwf	postinc2,w,c
 14022   0058FA  B4D8               	btfsc	status,2,c
 14023   0058FC  EF82  F02C         	goto	u7331
 14024   005900  EF84  F02C         	goto	u7330
 14025   005904                     u7331:
 14026   005904  EFC9  F02C         	goto	l5479
 14027   005908                     u7330:
 14028   005908  C008  FFD9         	movff	validate@fil,fsr2l
 14029   00590C  C009  FFDA         	movff	validate@fil+1,fsr2h
 14030   005910  CFDE F004          	movff	postinc2,??_validate
 14031   005914  CFDD F005          	movff	postdec2,??_validate+1
 14032   005918  C004  FFD9         	movff	??_validate,fsr2l
 14033   00591C  C005  FFDA         	movff	??_validate+1,fsr2h
 14034   005920  50DF               	movf	indf2,w,c
 14035   005922  B4D8               	btfsc	status,2,c
 14036   005924  EF96  F02C         	goto	u7341
 14037   005928  EF98  F02C         	goto	u7340
 14038   00592C                     u7341:
 14039   00592C  EFC9  F02C         	goto	l5479
 14040   005930                     u7340:
 14041   005930  EE20 F002          	lfsr	2,2
 14042   005934  5008               	movf	validate@fil^0,w,c
 14043   005936  26D9               	addwf	fsr2l,f,c
 14044   005938  5009               	movf	(validate@fil+1)^0,w,c
 14045   00593A  22DA               	addwfc	fsr2h,f,c
 14046   00593C  C008  FFE1         	movff	validate@fil,fsr1l
 14047   005940  C009  FFE2         	movff	validate@fil+1,fsr1h
 14048   005944  EE00 F006          	lfsr	0,6
 14049   005948  50E6               	movf	postinc1,w,c
 14050   00594A  26E9               	addwf	fsr0l,f,c
 14051   00594C  50E5               	movf	postdec1,w,c
 14052   00594E  22EA               	addwfc	fsr0h,f,c
 14053   005950  50DE               	movf	postinc2,w,c
 14054   005952  18EE               	xorwf	postinc0,w,c
 14055   005954  E107               	bnz	u7351
 14056   005956  50DE               	movf	postinc2,w,c
 14057   005958  18EE               	xorwf	postinc0,w,c
 14058   00595A  A4D8               	btfss	status,2,c
 14059   00595C  EFB2  F02C         	goto	u7351
 14060   005960  EFB4  F02C         	goto	u7350
 14061   005964                     u7351:
 14062   005964  EFC9  F02C         	goto	l5479
 14063   005968                     u7350:
 14064   005968  C008  FFD9         	movff	validate@fil,fsr2l
 14065   00596C  C009  FFDA         	movff	validate@fil+1,fsr2h
 14066   005970  EE10 F001          	lfsr	1,1
 14067   005974  50DE               	movf	postinc2,w,c
 14068   005976  26E1               	addwf	fsr1l,f,c
 14069   005978  50DD               	movf	postdec2,w,c
 14070   00597A  22E2               	addwfc	fsr1h,f,c
 14071   00597C  50E7               	movf	indf1,w,c
 14072   00597E  ECEE  F032         	call	_disk_status
 14073   005982  6E04               	movwf	??_validate^0,c
 14074   005984  A004               	btfss	??_validate^0,0,c
 14075   005986  EFC7  F02C         	goto	u7361
 14076   00598A  EFC9  F02C         	goto	u7360
 14077   00598E                     u7361:
 14078   00598E  EFCC  F02C         	goto	l5483
 14079   005992                     u7360:
 14080   005992                     l5479:
 14081                           
 14082                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 14083   005992  0E09               	movlw	9
 14084   005994  EFCD  F02C         	goto	l640
 14085   005998                     l5483:
 14086                           
 14087                           ;ff.c: 2384:  return FR_OK;
 14088   005998  0E00               	movlw	0
 14089   00599A                     l640:
 14090   00599A  0012               	return		;funcret
 14091   00599C                     __end_of_validate:
 14092                           	callstack 0
 14093                           
 14094 ;; *************** function _disk_status *****************
 14095 ;; Defined at:
 14096 ;;		line 366 in file "diskio.c"
 14097 ;; Parameters:    Size  Location     Type
 14098 ;;  pdrv            1    wreg     unsigned char 
 14099 ;; Auto vars:     Size  Location     Type
 14100 ;;  pdrv            1    0[COMRAM] unsigned char 
 14101 ;; Return value:  Size  Location     Type
 14102 ;;                  1    wreg      unsigned char 
 14103 ;; Registers used:
 14104 ;;		wreg, status,2
 14105 ;; Tracked objects:
 14106 ;;		On entry : 0/0
 14107 ;;		On exit  : 0/0
 14108 ;;		Unchanged: 0/0
 14109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14110 ;;      Params:         0       0       0       0       0       0       0
 14111 ;;      Locals:         1       0       0       0       0       0       0
 14112 ;;      Temps:          0       0       0       0       0       0       0
 14113 ;;      Totals:         1       0       0       0       0       0       0
 14114 ;;Total ram usage:        1 bytes
 14115 ;; Hardware stack levels used: 1
 14116 ;; This function calls:
 14117 ;;		Nothing
 14118 ;; This function is called by:
 14119 ;;		_find_volume
 14120 ;;		_validate
 14121 ;; This function uses a non-reentrant model
 14122 ;;
 14123                           
 14124                           	psect	text41
 14125   0065DC                     __ptext41:
 14126                           	callstack 0
 14127   0065DC                     _disk_status:
 14128                           	callstack 28
 14129                           
 14130                           ;incstack = 0
 14131                           ;disk_status@pdrv stored from wreg
 14132   0065DC  6E01               	movwf	disk_status@pdrv^0,c
 14133   0065DE                     
 14134                           ;diskio.c: 367:  BYTE pdrv;diskio.c: 369: {;diskio.c: 370:  if (pdrv) return 0x01;
 14135   0065DE  5001               	movf	disk_status@pdrv^0,w,c
 14136   0065E0  B4D8               	btfsc	status,2,c
 14137   0065E2  EFF5  F032         	goto	u5671
 14138   0065E6  EFF7  F032         	goto	u5670
 14139   0065EA                     u5671:
 14140   0065EA  EFFA  F032         	goto	l4627
 14141   0065EE                     u5670:
 14142   0065EE  0E01               	movlw	1
 14143   0065F0  EFFC  F032         	goto	l185
 14144   0065F4                     l4627:
 14145                           
 14146                           ;diskio.c: 371:  return Stat;
 14147   0065F4  0100               	movlb	0	; () banked
 14148   0065F6  51FA               	movf	_Stat& (0+255),w,b
 14149   0065F8                     l185:
 14150   0065F8  0012               	return		;funcret
 14151   0065FA                     __end_of_disk_status:
 14152                           	callstack 0
 14153                           
 14154 ;; *************** function _sync_fs *****************
 14155 ;; Defined at:
 14156 ;;		line 760 in file "ff.c"
 14157 ;; Parameters:    Size  Location     Type
 14158 ;;  fs              2   56[COMRAM] PTR struct .
 14159 ;;		 -> FatFs(558), NULL(0), 
 14160 ;; Auto vars:     Size  Location     Type
 14161 ;;  res             1   66[COMRAM] enum E95
 14162 ;; Return value:  Size  Location     Type
 14163 ;;                  1    wreg      enum E95
 14164 ;; Registers used:
 14165 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14166 ;; Tracked objects:
 14167 ;;		On entry : 0/0
 14168 ;;		On exit  : 0/0
 14169 ;;		Unchanged: 0/0
 14170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14171 ;;      Params:         2       0       0       0       0       0       0
 14172 ;;      Locals:         1       0       0       0       0       0       0
 14173 ;;      Temps:          8       0       0       0       0       0       0
 14174 ;;      Totals:        11       0       0       0       0       0       0
 14175 ;;Total ram usage:       11 bytes
 14176 ;; Hardware stack levels used: 1
 14177 ;; Hardware stack levels required when called: 7
 14178 ;; This function calls:
 14179 ;;		_disk_ioctl
 14180 ;;		_disk_write
 14181 ;;		_mem_set
 14182 ;;		_sync_window
 14183 ;; This function is called by:
 14184 ;;		_f_sync
 14185 ;; This function uses a non-reentrant model
 14186 ;;
 14187                           
 14188                           	psect	text42
 14189   0045A2                     __ptext42:
 14190                           	callstack 0
 14191   0045A2                     _sync_fs:
 14192                           	callstack 21
 14193   0045A2                     
 14194                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 14195   0045A2  C039  F01B         	movff	sync_fs@fs,sync_window@fs
 14196   0045A6  C03A  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 14197   0045AA  EC16  F027         	call	_sync_window	;wreg free
 14198   0045AE  6E43               	movwf	sync_fs@res^0,c
 14199   0045B0                     
 14200                           ;ff.c: 768:  if (res == FR_OK) {
 14201   0045B0  5043               	movf	sync_fs@res^0,w,c
 14202   0045B2  A4D8               	btfss	status,2,c
 14203   0045B4  EFDE  F022         	goto	u6731
 14204   0045B8  EFE0  F022         	goto	u6730
 14205   0045BC                     u6731:
 14206   0045BC  EFC2  F023         	goto	l321
 14207   0045C0                     u6730:
 14208   0045C0                     
 14209                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 14210   0045C0  C039  FFD9         	movff	sync_fs@fs,fsr2l
 14211   0045C4  C03A  FFDA         	movff	sync_fs@fs+1,fsr2h
 14212   0045C8  0E03               	movlw	3
 14213   0045CA  18DE               	xorwf	postinc2,w,c
 14214   0045CC  A4D8               	btfss	status,2,c
 14215   0045CE  EFEB  F022         	goto	u6741
 14216   0045D2  EFED  F022         	goto	u6740
 14217   0045D6                     u6741:
 14218   0045D6  EFA9  F023         	goto	l5175
 14219   0045DA                     u6740:
 14220   0045DA  EE20 F005          	lfsr	2,5
 14221   0045DE  5039               	movf	sync_fs@fs^0,w,c
 14222   0045E0  26D9               	addwf	fsr2l,f,c
 14223   0045E2  503A               	movf	(sync_fs@fs+1)^0,w,c
 14224   0045E4  22DA               	addwfc	fsr2h,f,c
 14225   0045E6  04DE               	decf	postinc2,w,c
 14226   0045E8  A4D8               	btfss	status,2,c
 14227   0045EA  EFF9  F022         	goto	u6751
 14228   0045EE  EFFB  F022         	goto	u6750
 14229   0045F2                     u6751:
 14230   0045F2  EFA9  F023         	goto	l5175
 14231   0045F6                     u6750:
 14232   0045F6                     
 14233                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 14234   0045F6  0E2E               	movlw	46
 14235   0045F8  2439               	addwf	sync_fs@fs^0,w,c
 14236   0045FA  6E01               	movwf	mem_set@dst^0,c
 14237   0045FC  0E00               	movlw	0
 14238   0045FE  203A               	addwfc	(sync_fs@fs+1)^0,w,c
 14239   004600  6E02               	movwf	(mem_set@dst+1)^0,c
 14240   004602  0E00               	movlw	0
 14241   004604  6E04               	movwf	(mem_set@val+1)^0,c
 14242   004606  0E00               	movlw	0
 14243   004608  6E03               	movwf	mem_set@val^0,c
 14244   00460A  0E02               	movlw	2
 14245   00460C  6E06               	movwf	(mem_set@cnt+1)^0,c
 14246   00460E  0E00               	movlw	0
 14247   004610  6E05               	movwf	mem_set@cnt^0,c
 14248   004612  EC61  F032         	call	_mem_set	;wreg free
 14249   004616                     
 14250                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 14251   004616  EE22 F02C          	lfsr	2,556
 14252   00461A  5039               	movf	sync_fs@fs^0,w,c
 14253   00461C  26D9               	addwf	fsr2l,f,c
 14254   00461E  503A               	movf	(sync_fs@fs+1)^0,w,c
 14255   004620  22DA               	addwfc	fsr2h,f,c
 14256   004622  0E55               	movlw	85
 14257   004624  6EDE               	movwf	postinc2,c
 14258   004626  0EAA               	movlw	170
 14259   004628  6EDD               	movwf	postdec2,c
 14260   00462A                     
 14261                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 14262   00462A  EE20 F02E          	lfsr	2,46
 14263   00462E  5039               	movf	sync_fs@fs^0,w,c
 14264   004630  26D9               	addwf	fsr2l,f,c
 14265   004632  503A               	movf	(sync_fs@fs+1)^0,w,c
 14266   004634  22DA               	addwfc	fsr2h,f,c
 14267   004636  0E52               	movlw	82
 14268   004638  6EDE               	movwf	postinc2,c
 14269   00463A  0E52               	movlw	82
 14270   00463C  6EDE               	movwf	postinc2,c
 14271   00463E  0E61               	movlw	97
 14272   004640  6EDE               	movwf	postinc2,c
 14273   004642  0E41               	movlw	65
 14274   004644  6EDD               	movwf	postdec2,c
 14275   004646                     
 14276                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 14277   004646  EE22 F012          	lfsr	2,530
 14278   00464A  5039               	movf	sync_fs@fs^0,w,c
 14279   00464C  26D9               	addwf	fsr2l,f,c
 14280   00464E  503A               	movf	(sync_fs@fs+1)^0,w,c
 14281   004650  22DA               	addwfc	fsr2h,f,c
 14282   004652  0E72               	movlw	114
 14283   004654  6EDE               	movwf	postinc2,c
 14284   004656  0E72               	movlw	114
 14285   004658  6EDE               	movwf	postinc2,c
 14286   00465A  0E41               	movlw	65
 14287   00465C  6EDE               	movwf	postinc2,c
 14288   00465E  0E61               	movlw	97
 14289   004660  6EDD               	movwf	postdec2,c
 14290   004662                     
 14291                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 14292   004662  EE20 F00E          	lfsr	2,14
 14293   004666  5039               	movf	sync_fs@fs^0,w,c
 14294   004668  26D9               	addwf	fsr2l,f,c
 14295   00466A  503A               	movf	(sync_fs@fs+1)^0,w,c
 14296   00466C  22DA               	addwfc	fsr2h,f,c
 14297   00466E  EE12 F016          	lfsr	1,534
 14298   004672  5039               	movf	sync_fs@fs^0,w,c
 14299   004674  26E1               	addwf	fsr1l,f,c
 14300   004676  503A               	movf	(sync_fs@fs+1)^0,w,c
 14301   004678  22E2               	addwfc	fsr1h,f,c
 14302   00467A  CFDE FFE6          	movff	postinc2,postinc1
 14303   00467E  CFDE FFE6          	movff	postinc2,postinc1
 14304   004682  CFDE FFE6          	movff	postinc2,postinc1
 14305   004686  CFDE FFE6          	movff	postinc2,postinc1
 14306   00468A                     
 14307                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 14308   00468A  EE20 F00A          	lfsr	2,10
 14309   00468E  5039               	movf	sync_fs@fs^0,w,c
 14310   004690  26D9               	addwf	fsr2l,f,c
 14311   004692  503A               	movf	(sync_fs@fs+1)^0,w,c
 14312   004694  22DA               	addwfc	fsr2h,f,c
 14313   004696  EE12 F01A          	lfsr	1,538
 14314   00469A  5039               	movf	sync_fs@fs^0,w,c
 14315   00469C  26E1               	addwf	fsr1l,f,c
 14316   00469E  503A               	movf	(sync_fs@fs+1)^0,w,c
 14317   0046A0  22E2               	addwfc	fsr1h,f,c
 14318   0046A2  CFDE FFE6          	movff	postinc2,postinc1
 14319   0046A6  CFDE FFE6          	movff	postinc2,postinc1
 14320   0046AA  CFDE FFE6          	movff	postinc2,postinc1
 14321   0046AE  CFDE FFE6          	movff	postinc2,postinc1
 14322   0046B2                     
 14323                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 14324   0046B2  EE20 F01A          	lfsr	2,26
 14325   0046B6  5039               	movf	sync_fs@fs^0,w,c
 14326   0046B8  26D9               	addwf	fsr2l,f,c
 14327   0046BA  503A               	movf	(sync_fs@fs+1)^0,w,c
 14328   0046BC  22DA               	addwfc	fsr2h,f,c
 14329   0046BE  CFDE F03B          	movff	postinc2,??_sync_fs
 14330   0046C2  CFDE F03C          	movff	postinc2,??_sync_fs+1
 14331   0046C6  CFDE F03D          	movff	postinc2,??_sync_fs+2
 14332   0046CA  CFDE F03E          	movff	postinc2,??_sync_fs+3
 14333   0046CE  0E01               	movlw	1
 14334   0046D0  243B               	addwf	??_sync_fs^0,w,c
 14335   0046D2  6E3F               	movwf	(??_sync_fs+4)^0,c
 14336   0046D4  0E00               	movlw	0
 14337   0046D6  203C               	addwfc	(??_sync_fs+1)^0,w,c
 14338   0046D8  6E40               	movwf	(??_sync_fs+5)^0,c
 14339   0046DA  0E00               	movlw	0
 14340   0046DC  203D               	addwfc	(??_sync_fs+2)^0,w,c
 14341   0046DE  6E41               	movwf	(??_sync_fs+6)^0,c
 14342   0046E0  0E00               	movlw	0
 14343   0046E2  203E               	addwfc	(??_sync_fs+3)^0,w,c
 14344   0046E4  6E42               	movwf	(??_sync_fs+7)^0,c
 14345   0046E6  EE20 F02A          	lfsr	2,42
 14346   0046EA  5039               	movf	sync_fs@fs^0,w,c
 14347   0046EC  26D9               	addwf	fsr2l,f,c
 14348   0046EE  503A               	movf	(sync_fs@fs+1)^0,w,c
 14349   0046F0  22DA               	addwfc	fsr2h,f,c
 14350   0046F2  C03F  FFDE         	movff	??_sync_fs+4,postinc2
 14351   0046F6  C040  FFDE         	movff	??_sync_fs+5,postinc2
 14352   0046FA  C041  FFDE         	movff	??_sync_fs+6,postinc2
 14353   0046FE  C042  FFDE         	movff	??_sync_fs+7,postinc2
 14354                           
 14355                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 14356   004702  0E2E               	movlw	46
 14357   004704  2439               	addwf	sync_fs@fs^0,w,c
 14358   004706  6E11               	movwf	disk_write@buff^0,c
 14359   004708  0E00               	movlw	0
 14360   00470A  203A               	addwfc	(sync_fs@fs+1)^0,w,c
 14361   00470C  6E12               	movwf	(disk_write@buff+1)^0,c
 14362   00470E  EE20 F02A          	lfsr	2,42
 14363   004712  5039               	movf	sync_fs@fs^0,w,c
 14364   004714  26D9               	addwf	fsr2l,f,c
 14365   004716  503A               	movf	(sync_fs@fs+1)^0,w,c
 14366   004718  22DA               	addwfc	fsr2h,f,c
 14367   00471A  CFDE F013          	movff	postinc2,disk_write@sector
 14368   00471E  CFDE F014          	movff	postinc2,disk_write@sector+1
 14369   004722  CFDE F015          	movff	postinc2,disk_write@sector+2
 14370   004726  CFDE F016          	movff	postinc2,disk_write@sector+3
 14371   00472A  0E00               	movlw	0
 14372   00472C  6E18               	movwf	(disk_write@count+1)^0,c
 14373   00472E  0E01               	movlw	1
 14374   004730  6E17               	movwf	disk_write@count^0,c
 14375   004732  EE20 F001          	lfsr	2,1
 14376   004736  5039               	movf	sync_fs@fs^0,w,c
 14377   004738  26D9               	addwf	fsr2l,f,c
 14378   00473A  503A               	movf	(sync_fs@fs+1)^0,w,c
 14379   00473C  22DA               	addwfc	fsr2h,f,c
 14380   00473E  50DF               	movf	indf2,w,c
 14381   004740  ECA7  F024         	call	_disk_write
 14382   004744                     
 14383                           ;ff.c: 781:    fs->fsi_flag = 0;
 14384   004744  EE20 F005          	lfsr	2,5
 14385   004748  5039               	movf	sync_fs@fs^0,w,c
 14386   00474A  26D9               	addwf	fsr2l,f,c
 14387   00474C  503A               	movf	(sync_fs@fs+1)^0,w,c
 14388   00474E  22DA               	addwfc	fsr2h,f,c
 14389   004750  6ADF               	clrf	indf2,c
 14390   004752                     l5175:
 14391                           
 14392                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 14393   004752  0E00               	movlw	0
 14394   004754  6E11               	movwf	disk_ioctl@cmd^0,c
 14395   004756  0E00               	movlw	0
 14396   004758  6E12               	movwf	disk_ioctl@buff^0,c
 14397   00475A  0E00               	movlw	0
 14398   00475C  6E13               	movwf	(disk_ioctl@buff+1)^0,c
 14399   00475E  EE20 F001          	lfsr	2,1
 14400   004762  5039               	movf	sync_fs@fs^0,w,c
 14401   004764  26D9               	addwf	fsr2l,f,c
 14402   004766  503A               	movf	(sync_fs@fs+1)^0,w,c
 14403   004768  22DA               	addwfc	fsr2h,f,c
 14404   00476A  50DF               	movf	indf2,w,c
 14405   00476C  EC9F  F010         	call	_disk_ioctl
 14406   004770  0900               	iorlw	0
 14407   004772  B4D8               	btfsc	status,2,c
 14408   004774  EFBE  F023         	goto	u6761
 14409   004778  EFC0  F023         	goto	u6760
 14410   00477C                     u6761:
 14411   00477C  EFC2  F023         	goto	l321
 14412   004780                     u6760:
 14413   004780                     
 14414                           ;ff.c: 785:    res = FR_DISK_ERR;
 14415   004780  0E01               	movlw	1
 14416   004782  6E43               	movwf	sync_fs@res^0,c
 14417   004784                     l321:
 14418                           
 14419                           ;ff.c: 788:  return res;
 14420   004784  5043               	movf	sync_fs@res^0,w,c
 14421   004786  0012               	return		;funcret
 14422   004788                     __end_of_sync_fs:
 14423                           	callstack 0
 14424                           
 14425 ;; *************** function _mem_set *****************
 14426 ;; Defined at:
 14427 ;;		line 524 in file "ff.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;  dst             2    0[COMRAM] PTR void 
 14430 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 14431 ;;  val             2    2[COMRAM] int 
 14432 ;;  cnt             2    4[COMRAM] unsigned short 
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;  d               2    6[COMRAM] PTR unsigned char 
 14435 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 14436 ;; Return value:  Size  Location     Type
 14437 ;;                  1    wreg      void 
 14438 ;; Registers used:
 14439 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14440 ;; Tracked objects:
 14441 ;;		On entry : 0/0
 14442 ;;		On exit  : 0/0
 14443 ;;		Unchanged: 0/0
 14444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14445 ;;      Params:         6       0       0       0       0       0       0
 14446 ;;      Locals:         2       0       0       0       0       0       0
 14447 ;;      Temps:          0       0       0       0       0       0       0
 14448 ;;      Totals:         8       0       0       0       0       0       0
 14449 ;;Total ram usage:        8 bytes
 14450 ;; Hardware stack levels used: 1
 14451 ;; This function calls:
 14452 ;;		Nothing
 14453 ;; This function is called by:
 14454 ;;		_sync_fs
 14455 ;;		_dir_next
 14456 ;;		_dir_register
 14457 ;;		_create_name
 14458 ;; This function uses a non-reentrant model
 14459 ;;
 14460                           
 14461                           	psect	text43
 14462   0064C2                     __ptext43:
 14463                           	callstack 0
 14464   0064C2                     _mem_set:
 14465                           	callstack 26
 14466   0064C2                     
 14467                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 14468   0064C2  C001  F007         	movff	mem_set@dst,mem_set@d
 14469   0064C6  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 14470                           
 14471                           ;ff.c: 527:  while (cnt--)
 14472   0064CA  EF6F  F032         	goto	l4519
 14473   0064CE                     l4515:
 14474                           
 14475                           ;ff.c: 528:   *d++ = (BYTE)val;
 14476   0064CE  C007  FFD9         	movff	mem_set@d,fsr2l
 14477   0064D2  C008  FFDA         	movff	mem_set@d+1,fsr2h
 14478   0064D6  C003  FFDF         	movff	mem_set@val,indf2
 14479   0064DA  4A07               	infsnz	mem_set@d^0,f,c
 14480   0064DC  2A08               	incf	(mem_set@d+1)^0,f,c
 14481   0064DE                     l4519:
 14482                           
 14483                           ;ff.c: 527:  while (cnt--)
 14484   0064DE  0605               	decf	mem_set@cnt^0,f,c
 14485   0064E0  A0D8               	btfss	status,0,c
 14486   0064E2  0606               	decf	(mem_set@cnt+1)^0,f,c
 14487   0064E4  2805               	incf	mem_set@cnt^0,w,c
 14488   0064E6  E106               	bnz	u5481
 14489   0064E8  2806               	incf	(mem_set@cnt+1)^0,w,c
 14490   0064EA  A4D8               	btfss	status,2,c
 14491   0064EC  EF7A  F032         	goto	u5481
 14492   0064F0  EF7C  F032         	goto	u5480
 14493   0064F4                     u5481:
 14494   0064F4  EF67  F032         	goto	l4515
 14495   0064F8                     u5480:
 14496   0064F8  0012               	return		;funcret
 14497   0064FA                     __end_of_mem_set:
 14498                           	callstack 0
 14499                           
 14500 ;; *************** function _disk_ioctl *****************
 14501 ;; Defined at:
 14502 ;;		line 456 in file "diskio.c"
 14503 ;; Parameters:    Size  Location     Type
 14504 ;;  pdrv            1    wreg     unsigned char 
 14505 ;;  cmd             1   16[COMRAM] unsigned char 
 14506 ;;  buff            2   17[COMRAM] PTR void 
 14507 ;;		 -> NULL(0), 
 14508 ;; Auto vars:     Size  Location     Type
 14509 ;;  pdrv            1   47[COMRAM] unsigned char 
 14510 ;;  csd            16   31[COMRAM] unsigned char [16]
 14511 ;;  csize           4   48[COMRAM] unsigned long 
 14512 ;;  ptr             2   54[COMRAM] PTR unsigned char 
 14513 ;;		 -> NULL(0), 
 14514 ;;  n               1   53[COMRAM] unsigned char 
 14515 ;;  res             1   52[COMRAM] enum E45
 14516 ;; Return value:  Size  Location     Type
 14517 ;;                  1    wreg      enum E45
 14518 ;; Registers used:
 14519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14520 ;; Tracked objects:
 14521 ;;		On entry : 0/0
 14522 ;;		On exit  : 0/0
 14523 ;;		Unchanged: 0/0
 14524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14525 ;;      Params:         3       0       0       0       0       0       0
 14526 ;;      Locals:        25       0       0       0       0       0       0
 14527 ;;      Temps:         12       0       0       0       0       0       0
 14528 ;;      Totals:        40       0       0       0       0       0       0
 14529 ;;Total ram usage:       40 bytes
 14530 ;; Hardware stack levels used: 1
 14531 ;; Hardware stack levels required when called: 5
 14532 ;; This function calls:
 14533 ;;		_SPI_Exchange8bit
 14534 ;;		_deselect
 14535 ;;		_rcvr_datablock
 14536 ;;		_select
 14537 ;;		_send_cmd
 14538 ;; This function is called by:
 14539 ;;		_sync_fs
 14540 ;; This function uses a non-reentrant model
 14541 ;;
 14542                           
 14543                           	psect	text44
 14544   00213E                     __ptext44:
 14545                           	callstack 0
 14546   00213E                     _disk_ioctl:
 14547                           	callstack 22
 14548                           
 14549                           ;incstack = 0
 14550                           ;disk_ioctl@pdrv stored from wreg
 14551   00213E  6E30               	movwf	disk_ioctl@pdrv^0,c
 14552   002140                     
 14553                           ;diskio.c: 457:  BYTE pdrv,;diskio.c: 458:  BYTE cmd,;diskio.c: 459:  void *buff;diskio.
      +                          c: 461: {;diskio.c: 462:  DRESULT res;;diskio.c: 463:  BYTE n, csd[16], *ptr = buff;
 14554   002140  C012  F037         	movff	disk_ioctl@buff,disk_ioctl@ptr
 14555   002144  C013  F038         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 14556   002148                     
 14557                           ;diskio.c: 464:  DWORD csize;;diskio.c: 467:  if (pdrv) return RES_PARERR;
 14558   002148  5030               	movf	disk_ioctl@pdrv^0,w,c
 14559   00214A  B4D8               	btfsc	status,2,c
 14560   00214C  EFAA  F010         	goto	u5681
 14561   002150  EFAC  F010         	goto	u5680
 14562   002154                     u5681:
 14563   002154  EFAF  F010         	goto	l4639
 14564   002158                     u5680:
 14565   002158  0E04               	movlw	4
 14566   00215A  EF97  F013         	goto	l224
 14567   00215E                     l4639:
 14568                           
 14569                           ;diskio.c: 469:  res = RES_ERROR;
 14570   00215E  0E01               	movlw	1
 14571   002160  6E35               	movwf	disk_ioctl@res^0,c
 14572   002162                     
 14573                           ;diskio.c: 471:  if (Stat & 0x01) return RES_NOTRDY;
 14574   002162  0100               	movlb	0	; () banked
 14575   002164  A1FA               	btfss	_Stat& (0+255),0,b
 14576   002166  EFB7  F010         	goto	u5691
 14577   00216A  EFB9  F010         	goto	u5690
 14578   00216E                     u5691:
 14579   00216E  EF71  F013         	goto	l4737
 14580   002172                     u5690:
 14581   002172                     
 14582                           ; BSR set to: 0
 14583   002172  0E03               	movlw	3
 14584   002174  EF97  F013         	goto	l224
 14585   002178                     l4647:
 14586                           
 14587                           ; BSR set to: 0
 14588                           ;diskio.c: 475:   if (select()) res = RES_OK;
 14589   002178  ECC7  F032         	call	_select	;wreg free
 14590   00217C  0900               	iorlw	0
 14591   00217E  B4D8               	btfsc	status,2,c
 14592   002180  EFC4  F010         	goto	u5701
 14593   002184  EFC6  F010         	goto	u5700
 14594   002188                     u5701:
 14595   002188  EF94  F013         	goto	l4739
 14596   00218C                     u5700:
 14597   00218C                     l4649:
 14598   00218C  6A35               	clrf	disk_ioctl@res^0,c
 14599   00218E  EF94  F013         	goto	l4739
 14600   002192                     l4651:
 14601                           
 14602                           ; BSR set to: 0
 14603                           ;diskio.c: 479:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 14604   002192  0E00               	movlw	0
 14605   002194  6E0B               	movwf	send_cmd@arg^0,c
 14606   002196  0E00               	movlw	0
 14607   002198  6E0C               	movwf	(send_cmd@arg+1)^0,c
 14608   00219A  0E00               	movlw	0
 14609   00219C  6E0D               	movwf	(send_cmd@arg+2)^0,c
 14610   00219E  0E00               	movlw	0
 14611   0021A0  6E0E               	movwf	(send_cmd@arg+3)^0,c
 14612   0021A2  0E09               	movlw	9
 14613   0021A4  ECAF  F031         	call	_send_cmd
 14614   0021A8  0900               	iorlw	0
 14615   0021AA  A4D8               	btfss	status,2,c
 14616   0021AC  EFDA  F010         	goto	u5711
 14617   0021B0  EFDC  F010         	goto	u5710
 14618   0021B4                     u5711:
 14619   0021B4  EF94  F013         	goto	l4739
 14620   0021B8                     u5710:
 14621   0021B8  0E20               	movlw	low disk_ioctl@csd
 14622   0021BA  6E02               	movwf	rcvr_datablock@buff^0,c
 14623   0021BC  6A03               	clrf	(rcvr_datablock@buff+1)^0,c
 14624   0021BE  0E00               	movlw	0
 14625   0021C0  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 14626   0021C2  0E10               	movlw	16
 14627   0021C4  6E04               	movwf	rcvr_datablock@btr^0,c
 14628   0021C6  ECBD  F02F         	call	_rcvr_datablock	;wreg free
 14629   0021CA  0900               	iorlw	0
 14630   0021CC  B4D8               	btfsc	status,2,c
 14631   0021CE  EFEB  F010         	goto	u5721
 14632   0021D2  EFED  F010         	goto	u5720
 14633   0021D6                     u5721:
 14634   0021D6  EF94  F013         	goto	l4739
 14635   0021DA                     u5720:
 14636   0021DA                     
 14637                           ;diskio.c: 480:    if ((csd[0] >> 6) == 1) {
 14638   0021DA  4420               	rlncf	disk_ioctl@csd^0,w,c
 14639   0021DC  46E8               	rlncf	wreg,f,c
 14640   0021DE  0B03               	andlw	3
 14641   0021E0  06E8               	decf	wreg,f,c
 14642   0021E2  A4D8               	btfss	status,2,c
 14643   0021E4  EFF6  F010         	goto	u5731
 14644   0021E8  EFF8  F010         	goto	u5730
 14645   0021EC                     u5731:
 14646   0021EC  EF42  F011         	goto	l4661
 14647   0021F0                     u5730:
 14648   0021F0                     
 14649                           ;diskio.c: 481:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 14650   0021F0  C027  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 14651   0021F4  0E3F               	movlw	63
 14652   0021F6  1614               	andwf	??_disk_ioctl^0,f,c
 14653   0021F8  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 14654   0021FC  6A16               	clrf	(??_disk_ioctl+2)^0,c
 14655   0021FE  6A17               	clrf	(??_disk_ioctl+3)^0,c
 14656   002200  6A18               	clrf	(??_disk_ioctl+4)^0,c
 14657   002202  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 14658   002206  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 14659   00220A  6A16               	clrf	(??_disk_ioctl+2)^0,c
 14660   00220C  6A15               	clrf	(??_disk_ioctl+1)^0,c
 14661   00220E  5028               	movf	(disk_ioctl@csd+8)^0,w,c
 14662   002210  6E1A               	movwf	(??_disk_ioctl+6)^0,c
 14663   002212  5029               	movf	(disk_ioctl@csd+9)^0,w,c
 14664   002214  6E19               	movwf	(??_disk_ioctl+5)^0,c
 14665   002216  5019               	movf	(??_disk_ioctl+5)^0,w,c
 14666   002218  2415               	addwf	(??_disk_ioctl+1)^0,w,c
 14667   00221A  6E1B               	movwf	(??_disk_ioctl+7)^0,c
 14668   00221C  501A               	movf	(??_disk_ioctl+6)^0,w,c
 14669   00221E  2016               	addwfc	(??_disk_ioctl+2)^0,w,c
 14670   002220  6E1C               	movwf	(??_disk_ioctl+8)^0,c
 14671   002222  0E00               	movlw	0
 14672   002224  2017               	addwfc	(??_disk_ioctl+3)^0,w,c
 14673   002226  6E1D               	movwf	(??_disk_ioctl+9)^0,c
 14674   002228  0E00               	movlw	0
 14675   00222A  2018               	addwfc	(??_disk_ioctl+4)^0,w,c
 14676   00222C  6E1E               	movwf	(??_disk_ioctl+10)^0,c
 14677   00222E  0E01               	movlw	1
 14678   002230  241B               	addwf	(??_disk_ioctl+7)^0,w,c
 14679   002232  6E31               	movwf	disk_ioctl@csize^0,c
 14680   002234  0E00               	movlw	0
 14681   002236  201C               	addwfc	(??_disk_ioctl+8)^0,w,c
 14682   002238  6E32               	movwf	(disk_ioctl@csize+1)^0,c
 14683   00223A  0E00               	movlw	0
 14684   00223C  201D               	addwfc	(??_disk_ioctl+9)^0,w,c
 14685   00223E  6E33               	movwf	(disk_ioctl@csize+2)^0,c
 14686   002240  0E00               	movlw	0
 14687   002242  201E               	addwfc	(??_disk_ioctl+10)^0,w,c
 14688   002244  6E34               	movwf	(disk_ioctl@csize+3)^0,c
 14689   002246                     
 14690                           ;diskio.c: 482:     *(DWORD*)buff = csize << 10;
 14691   002246  C031  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 14692   00224A  C032  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 14693   00224E  C033  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 14694   002252  C034  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 14695   002256  0E0A               	movlw	10
 14696   002258                     u5745:
 14697   002258  90D8               	bcf	status,0,c
 14698   00225A  3614               	rlcf	??_disk_ioctl^0,f,c
 14699   00225C  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 14700   00225E  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 14701   002260  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 14702   002262  2EE8               	decfsz	wreg,f,c
 14703   002264  EF2C  F011         	goto	u5745
 14704   002268  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14705   00226C  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14706   002270  C014  FFDE         	movff	??_disk_ioctl,postinc2
 14707   002274  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 14708   002278  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 14709   00227C  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 14710                           
 14711                           ;diskio.c: 483:    } else {
 14712   002280  EFC6  F010         	goto	l4649
 14713   002284                     l4661:
 14714                           
 14715                           ;diskio.c: 484:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 14716   002284  6A14               	clrf	??_disk_ioctl^0,c
 14717   002286  AE2A               	btfss	(disk_ioctl@csd+10)^0,7,c
 14718   002288  D001               	bra	u5755
 14719   00228A  2A14               	incf	??_disk_ioctl^0,f,c
 14720   00228C                     u5755:
 14721   00228C  0E01               	movlw	1
 14722   00228E  1614               	andwf	??_disk_ioctl^0,f,c
 14723   002290  C025  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 14724   002294  0E0F               	movlw	15
 14725   002296  1615               	andwf	(??_disk_ioctl+1)^0,f,c
 14726   002298  5029               	movf	(disk_ioctl@csd+9)^0,w,c
 14727   00229A  0B03               	andlw	3
 14728   00229C  0D02               	mullw	2
 14729   00229E  50F3               	movf	243,w,c
 14730   0022A0  2415               	addwf	(??_disk_ioctl+1)^0,w,c
 14731   0022A2  2414               	addwf	??_disk_ioctl^0,w,c
 14732   0022A4  0F02               	addlw	2
 14733   0022A6  6E36               	movwf	disk_ioctl@n^0,c
 14734   0022A8                     
 14735                           ;diskio.c: 485:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 14736   0022A8  5026               	movf	(disk_ioctl@csd+6)^0,w,c
 14737   0022AA  0B03               	andlw	3
 14738   0022AC  6E14               	movwf	??_disk_ioctl^0,c
 14739   0022AE  6A15               	clrf	(??_disk_ioctl+1)^0,c
 14740   0022B0  0E0A               	movlw	10
 14741   0022B2                     u5765:
 14742   0022B2  90D8               	bcf	status,0,c
 14743   0022B4  3614               	rlcf	??_disk_ioctl^0,f,c
 14744   0022B6  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 14745   0022B8  2EE8               	decfsz	wreg,f,c
 14746   0022BA  EF59  F011         	goto	u5765
 14747   0022BE  5027               	movf	(disk_ioctl@csd+7)^0,w,c
 14748   0022C0  6E16               	movwf	(??_disk_ioctl+2)^0,c
 14749   0022C2  6A17               	clrf	(??_disk_ioctl+3)^0,c
 14750   0022C4  90D8               	bcf	status,0,c
 14751   0022C6  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 14752   0022C8  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 14753   0022CA  90D8               	bcf	status,0,c
 14754   0022CC  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 14755   0022CE  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 14756   0022D0  C028  F018         	movff	disk_ioctl@csd+8,??_disk_ioctl+4
 14757   0022D4  0E06               	movlw	6
 14758   0022D6  6E19               	movwf	(??_disk_ioctl+5)^0,c
 14759   0022D8                     u5775:
 14760   0022D8  90D8               	bcf	status,0,c
 14761   0022DA  3218               	rrcf	(??_disk_ioctl+4)^0,f,c
 14762   0022DC  2E19               	decfsz	(??_disk_ioctl+5)^0,f,c
 14763   0022DE  EF6C  F011         	goto	u5775
 14764   0022E2  5018               	movf	(??_disk_ioctl+4)^0,w,c
 14765   0022E4  2416               	addwf	(??_disk_ioctl+2)^0,w,c
 14766   0022E6  6E1A               	movwf	(??_disk_ioctl+6)^0,c
 14767   0022E8  0E00               	movlw	0
 14768   0022EA  2017               	addwfc	(??_disk_ioctl+3)^0,w,c
 14769   0022EC  6E1B               	movwf	(??_disk_ioctl+7)^0,c
 14770   0022EE  5014               	movf	??_disk_ioctl^0,w,c
 14771   0022F0  241A               	addwf	(??_disk_ioctl+6)^0,w,c
 14772   0022F2  6E1C               	movwf	(??_disk_ioctl+8)^0,c
 14773   0022F4  5015               	movf	(??_disk_ioctl+1)^0,w,c
 14774   0022F6  201B               	addwfc	(??_disk_ioctl+7)^0,w,c
 14775   0022F8  6E1D               	movwf	(??_disk_ioctl+9)^0,c
 14776   0022FA  0E01               	movlw	1
 14777   0022FC  261C               	addwf	(??_disk_ioctl+8)^0,f,c
 14778   0022FE  0E00               	movlw	0
 14779   002300  221D               	addwfc	(??_disk_ioctl+9)^0,f,c
 14780   002302  C01C  F031         	movff	??_disk_ioctl+8,disk_ioctl@csize
 14781   002306  C01D  F032         	movff	??_disk_ioctl+9,disk_ioctl@csize+1
 14782   00230A  6A33               	clrf	(disk_ioctl@csize+2)^0,c
 14783   00230C  6A34               	clrf	(disk_ioctl@csize+3)^0,c
 14784   00230E                     
 14785                           ;diskio.c: 486:     *(DWORD*)buff = csize << (n - 9);
 14786   00230E  C036  F014         	movff	disk_ioctl@n,??_disk_ioctl
 14787   002312  0EF7               	movlw	-9
 14788   002314  2614               	addwf	??_disk_ioctl^0,f,c
 14789   002316  C031  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 14790   00231A  C032  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 14791   00231E  C033  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 14792   002322  C034  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 14793   002326  2A14               	incf	??_disk_ioctl^0,f,c
 14794   002328  EF9B  F011         	goto	u5780
 14795   00232C                     u5785:
 14796   00232C  90D8               	bcf	status,0,c
 14797   00232E  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 14798   002330  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 14799   002332  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 14800   002334  3618               	rlcf	(??_disk_ioctl+4)^0,f,c
 14801   002336                     u5780:
 14802   002336  2E14               	decfsz	??_disk_ioctl^0,f,c
 14803   002338  EF96  F011         	goto	u5785
 14804   00233C  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14805   002340  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14806   002344  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 14807   002348  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 14808   00234C  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 14809   002350  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 14810   002354  EFC6  F010         	goto	l4649
 14811   002358                     l234:
 14812                           
 14813                           ; BSR set to: 0
 14814                           ;diskio.c: 493:   if (CardType & 0x04) {
 14815   002358  A5F9               	btfss	_CardType& (0+255),2,b
 14816   00235A  EFB1  F011         	goto	u5791
 14817   00235E  EFB3  F011         	goto	u5790
 14818   002362                     u5791:
 14819   002362  EF0D  F012         	goto	l4687
 14820   002366                     u5790:
 14821   002366                     
 14822                           ; BSR set to: 0
 14823                           ;diskio.c: 494:    if (send_cmd((0x80+13), 0) == 0) {
 14824   002366  0E00               	movlw	0
 14825   002368  6E0B               	movwf	send_cmd@arg^0,c
 14826   00236A  0E00               	movlw	0
 14827   00236C  6E0C               	movwf	(send_cmd@arg+1)^0,c
 14828   00236E  0E00               	movlw	0
 14829   002370  6E0D               	movwf	(send_cmd@arg+2)^0,c
 14830   002372  0E00               	movlw	0
 14831   002374  6E0E               	movwf	(send_cmd@arg+3)^0,c
 14832   002376  0E8D               	movlw	141
 14833   002378  ECAF  F031         	call	_send_cmd
 14834   00237C  0900               	iorlw	0
 14835   00237E  A4D8               	btfss	status,2,c
 14836   002380  EFC4  F011         	goto	u5801
 14837   002384  EFC6  F011         	goto	u5800
 14838   002388                     u5801:
 14839   002388  EF94  F013         	goto	l4739
 14840   00238C                     u5800:
 14841   00238C                     
 14842                           ;diskio.c: 495:     SPI_Exchange8bit(0xFF);
 14843   00238C  0EFF               	movlw	255
 14844   00238E  ECFD  F032         	call	_SPI_Exchange8bit
 14845   002392                     
 14846                           ;diskio.c: 496:     if (rcvr_datablock(csd, 16)) {
 14847   002392  0E20               	movlw	low disk_ioctl@csd
 14848   002394  6E02               	movwf	rcvr_datablock@buff^0,c
 14849   002396  6A03               	clrf	(rcvr_datablock@buff+1)^0,c
 14850   002398  0E00               	movlw	0
 14851   00239A  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 14852   00239C  0E10               	movlw	16
 14853   00239E  6E04               	movwf	rcvr_datablock@btr^0,c
 14854   0023A0  ECBD  F02F         	call	_rcvr_datablock	;wreg free
 14855   0023A4  0900               	iorlw	0
 14856   0023A6  B4D8               	btfsc	status,2,c
 14857   0023A8  EFD8  F011         	goto	u5811
 14858   0023AC  EFDA  F011         	goto	u5810
 14859   0023B0                     u5811:
 14860   0023B0  EF94  F013         	goto	l4739
 14861   0023B4                     u5810:
 14862   0023B4                     
 14863                           ;diskio.c: 497:      for (n = 64 - 16; n; n--) SPI_Exchange8bit(0xFF);
 14864   0023B4  0E30               	movlw	48
 14865   0023B6  6E36               	movwf	disk_ioctl@n^0,c
 14866   0023B8  EFE2  F011         	goto	l4681
 14867   0023BC                     l4677:
 14868   0023BC  0EFF               	movlw	255
 14869   0023BE  ECFD  F032         	call	_SPI_Exchange8bit
 14870   0023C2  0636               	decf	disk_ioctl@n^0,f,c
 14871   0023C4                     l4681:
 14872   0023C4  5036               	movf	disk_ioctl@n^0,w,c
 14873   0023C6  A4D8               	btfss	status,2,c
 14874   0023C8  EFE8  F011         	goto	u5821
 14875   0023CC  EFEA  F011         	goto	u5820
 14876   0023D0                     u5821:
 14877   0023D0  EFDE  F011         	goto	l4677
 14878   0023D4                     u5820:
 14879   0023D4                     
 14880                           ;diskio.c: 498:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 14881   0023D4  C02A  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 14882   0023D8  3A14               	swapf	??_disk_ioctl^0,f,c
 14883   0023DA  0E0F               	movlw	15
 14884   0023DC  1614               	andwf	??_disk_ioctl^0,f,c
 14885   0023DE  0E10               	movlw	16
 14886   0023E0  6E15               	movwf	(??_disk_ioctl+1)^0,c
 14887   0023E2  6A16               	clrf	(??_disk_ioctl+2)^0,c
 14888   0023E4  6A17               	clrf	(??_disk_ioctl+3)^0,c
 14889   0023E6  6A18               	clrf	(??_disk_ioctl+4)^0,c
 14890   0023E8  2A14               	incf	??_disk_ioctl^0,f,c
 14891   0023EA  EFFC  F011         	goto	u5830
 14892   0023EE                     u5835:
 14893   0023EE  90D8               	bcf	status,0,c
 14894   0023F0  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 14895   0023F2  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 14896   0023F4  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 14897   0023F6  3618               	rlcf	(??_disk_ioctl+4)^0,f,c
 14898   0023F8                     u5830:
 14899   0023F8  2E14               	decfsz	??_disk_ioctl^0,f,c
 14900   0023FA  EFF7  F011         	goto	u5835
 14901   0023FE  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14902   002402  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14903   002406  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 14904   00240A  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 14905   00240E  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 14906   002412  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 14907   002416  EFC6  F010         	goto	l4649
 14908   00241A                     l4687:
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;diskio.c: 503:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 14912   00241A  0E00               	movlw	0
 14913   00241C  6E0B               	movwf	send_cmd@arg^0,c
 14914   00241E  0E00               	movlw	0
 14915   002420  6E0C               	movwf	(send_cmd@arg+1)^0,c
 14916   002422  0E00               	movlw	0
 14917   002424  6E0D               	movwf	(send_cmd@arg+2)^0,c
 14918   002426  0E00               	movlw	0
 14919   002428  6E0E               	movwf	(send_cmd@arg+3)^0,c
 14920   00242A  0E09               	movlw	9
 14921   00242C  ECAF  F031         	call	_send_cmd
 14922   002430  0900               	iorlw	0
 14923   002432  A4D8               	btfss	status,2,c
 14924   002434  EF1E  F012         	goto	u5841
 14925   002438  EF20  F012         	goto	u5840
 14926   00243C                     u5841:
 14927   00243C  EF94  F013         	goto	l4739
 14928   002440                     u5840:
 14929   002440  0E20               	movlw	low disk_ioctl@csd
 14930   002442  6E02               	movwf	rcvr_datablock@buff^0,c
 14931   002444  6A03               	clrf	(rcvr_datablock@buff+1)^0,c
 14932   002446  0E00               	movlw	0
 14933   002448  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 14934   00244A  0E10               	movlw	16
 14935   00244C  6E04               	movwf	rcvr_datablock@btr^0,c
 14936   00244E  ECBD  F02F         	call	_rcvr_datablock	;wreg free
 14937   002452  0900               	iorlw	0
 14938   002454  B4D8               	btfsc	status,2,c
 14939   002456  EF2F  F012         	goto	u5851
 14940   00245A  EF31  F012         	goto	u5850
 14941   00245E                     u5851:
 14942   00245E  EF94  F013         	goto	l4739
 14943   002462                     u5850:
 14944   002462                     
 14945                           ;diskio.c: 504:     if (CardType & 0x02) {
 14946   002462  0100               	movlb	0	; () banked
 14947   002464  A3F9               	btfss	_CardType& (0+255),1,b
 14948   002466  EF37  F012         	goto	u5861
 14949   00246A  EF39  F012         	goto	u5860
 14950   00246E                     u5861:
 14951   00246E  EF76  F012         	goto	l4695
 14952   002472                     u5860:
 14953   002472                     
 14954                           ; BSR set to: 0
 14955                           ;diskio.c: 505:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 14956   002472  C02D  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 14957   002476  0E06               	movlw	6
 14958   002478  6E15               	movwf	(??_disk_ioctl+1)^0,c
 14959   00247A                     u5875:
 14960   00247A  90D8               	bcf	status,0,c
 14961   00247C  3214               	rrcf	??_disk_ioctl^0,f,c
 14962   00247E  2E15               	decfsz	(??_disk_ioctl+1)^0,f,c
 14963   002480  EF3D  F012         	goto	u5875
 14964   002484  0EFF               	movlw	-1
 14965   002486  2614               	addwf	??_disk_ioctl^0,f,c
 14966   002488  502A               	movf	(disk_ioctl@csd+10)^0,w,c
 14967   00248A  0B3F               	andlw	63
 14968   00248C  6E16               	movwf	(??_disk_ioctl+2)^0,c
 14969   00248E  6A17               	clrf	(??_disk_ioctl+3)^0,c
 14970   002490  90D8               	bcf	status,0,c
 14971   002492  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 14972   002494  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 14973   002496  6A18               	clrf	(??_disk_ioctl+4)^0,c
 14974   002498  AE2B               	btfss	(disk_ioctl@csd+11)^0,7,c
 14975   00249A  D001               	bra	u5885
 14976   00249C  2A18               	incf	(??_disk_ioctl+4)^0,f,c
 14977   00249E                     u5885:
 14978   00249E  0E01               	movlw	1
 14979   0024A0  1618               	andwf	(??_disk_ioctl+4)^0,f,c
 14980   0024A2  5018               	movf	(??_disk_ioctl+4)^0,w,c
 14981   0024A4  2616               	addwf	(??_disk_ioctl+2)^0,f,c
 14982   0024A6  0E00               	movlw	0
 14983   0024A8  2217               	addwfc	(??_disk_ioctl+3)^0,f,c
 14984   0024AA  0E01               	movlw	1
 14985   0024AC  2616               	addwf	(??_disk_ioctl+2)^0,f,c
 14986   0024AE  0E00               	movlw	0
 14987   0024B0  2217               	addwfc	(??_disk_ioctl+3)^0,f,c
 14988   0024B2  2A14               	incf	??_disk_ioctl^0,f,c
 14989   0024B4  EF5F  F012         	goto	u5894
 14990   0024B8                     u5895:
 14991   0024B8  90D8               	bcf	status,0,c
 14992   0024BA  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 14993   0024BC  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 14994   0024BE                     u5894:
 14995   0024BE  2E14               	decfsz	??_disk_ioctl^0,f,c
 14996   0024C0  EF5C  F012         	goto	u5895
 14997   0024C4  5016               	movf	(??_disk_ioctl+2)^0,w,c
 14998   0024C6  6E19               	movwf	(??_disk_ioctl+5)^0,c
 14999   0024C8  5017               	movf	(??_disk_ioctl+3)^0,w,c
 15000   0024CA  6E1A               	movwf	(??_disk_ioctl+6)^0,c
 15001   0024CC  6A1B               	clrf	(??_disk_ioctl+7)^0,c
 15002   0024CE  6A1C               	clrf	(??_disk_ioctl+8)^0,c
 15003   0024D0  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 15004   0024D4  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 15005   0024D8  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 15006   0024DC  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 15007   0024E0  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 15008   0024E4  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 15009                           
 15010                           ;diskio.c: 506:     } else {
 15011   0024E8  EFC6  F010         	goto	l4649
 15012   0024EC                     l4695:
 15013                           
 15014                           ; BSR set to: 0
 15015                           ;diskio.c: 507:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 15016   0024EC  502B               	movf	(disk_ioctl@csd+11)^0,w,c
 15017   0024EE  0B03               	andlw	3
 15018   0024F0  6E14               	movwf	??_disk_ioctl^0,c
 15019   0024F2  6A15               	clrf	(??_disk_ioctl+1)^0,c
 15020   0024F4  90D8               	bcf	status,0,c
 15021   0024F6  3614               	rlcf	??_disk_ioctl^0,f,c
 15022   0024F8  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 15023   0024FA  90D8               	bcf	status,0,c
 15024   0024FC  3614               	rlcf	??_disk_ioctl^0,f,c
 15025   0024FE  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 15026   002500  90D8               	bcf	status,0,c
 15027   002502  3614               	rlcf	??_disk_ioctl^0,f,c
 15028   002504  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 15029   002506  C02B  F016         	movff	disk_ioctl@csd+11,??_disk_ioctl+2
 15030   00250A  0E05               	movlw	5
 15031   00250C  6E17               	movwf	(??_disk_ioctl+3)^0,c
 15032   00250E                     u5905:
 15033   00250E  90D8               	bcf	status,0,c
 15034   002510  3216               	rrcf	(??_disk_ioctl+2)^0,f,c
 15035   002512  2E17               	decfsz	(??_disk_ioctl+3)^0,f,c
 15036   002514  EF87  F012         	goto	u5905
 15037   002518  0E07               	movlw	7
 15038   00251A  1616               	andwf	(??_disk_ioctl+2)^0,f,c
 15039   00251C  5016               	movf	(??_disk_ioctl+2)^0,w,c
 15040   00251E  2614               	addwf	??_disk_ioctl^0,f,c
 15041   002520  0E00               	movlw	0
 15042   002522  2215               	addwfc	(??_disk_ioctl+1)^0,f,c
 15043   002524  0E01               	movlw	1
 15044   002526  2614               	addwf	??_disk_ioctl^0,f,c
 15045   002528  0E00               	movlw	0
 15046   00252A  2215               	addwfc	(??_disk_ioctl+1)^0,f,c
 15047   00252C  402A               	rrncf	(disk_ioctl@csd+10)^0,w,c
 15048   00252E  42E8               	rrncf	wreg,f,c
 15049   002530  0B3F               	andlw	63
 15050   002532  0B1F               	andlw	31
 15051   002534  6E18               	movwf	(??_disk_ioctl+4)^0,c
 15052   002536  6A19               	clrf	(??_disk_ioctl+5)^0,c
 15053   002538  0E01               	movlw	1
 15054   00253A  2618               	addwf	(??_disk_ioctl+4)^0,f,c
 15055   00253C  0E00               	movlw	0
 15056   00253E  2219               	addwfc	(??_disk_ioctl+5)^0,f,c
 15057   002540  5014               	movf	??_disk_ioctl^0,w,c
 15058   002542  0218               	mulwf	(??_disk_ioctl+4)^0,c
 15059   002544  CFF3 F01A          	movff	prodl,??_disk_ioctl+6
 15060   002548  CFF4 F01B          	movff	prodh,??_disk_ioctl+7
 15061   00254C  0219               	mulwf	(??_disk_ioctl+5)^0,c
 15062   00254E  50F3               	movf	prodl,w,c
 15063   002550  261B               	addwf	(??_disk_ioctl+7)^0,f,c
 15064   002552  5015               	movf	(??_disk_ioctl+1)^0,w,c
 15065   002554  0218               	mulwf	(??_disk_ioctl+4)^0,c
 15066   002556  50F3               	movf	prodl,w,c
 15067   002558  261B               	addwf	(??_disk_ioctl+7)^0,f,c
 15068   00255A  501A               	movf	(??_disk_ioctl+6)^0,w,c
 15069   00255C  6E1C               	movwf	(??_disk_ioctl+8)^0,c
 15070   00255E  501B               	movf	(??_disk_ioctl+7)^0,w,c
 15071   002560  6E1D               	movwf	(??_disk_ioctl+9)^0,c
 15072   002562  6A1E               	clrf	(??_disk_ioctl+10)^0,c
 15073   002564  6A1F               	clrf	(??_disk_ioctl+11)^0,c
 15074   002566  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 15075   00256A  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 15076   00256E  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 15077   002572  C01D  FFDE         	movff	??_disk_ioctl+9,postinc2
 15078   002576  C01E  FFDE         	movff	??_disk_ioctl+10,postinc2
 15079   00257A  C01F  FFDE         	movff	??_disk_ioctl+11,postinc2
 15080   00257E  EFC6  F010         	goto	l4649
 15081   002582                     l4699:
 15082                           
 15083                           ; BSR set to: 0
 15084                           ;diskio.c: 517:   *ptr = CardType;
 15085   002582  C037  FFD9         	movff	disk_ioctl@ptr,fsr2l
 15086   002586  C038  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 15087   00258A  C0F9  FFDF         	movff	_CardType,indf2
 15088   00258E  EFC6  F010         	goto	l4649
 15089   002592                     l4703:
 15090                           
 15091                           ; BSR set to: 0
 15092                           ;diskio.c: 522:   if (send_cmd((9), 0) == 0
 15093   002592  0E00               	movlw	0
 15094   002594  6E0B               	movwf	send_cmd@arg^0,c
 15095   002596  0E00               	movlw	0
 15096   002598  6E0C               	movwf	(send_cmd@arg+1)^0,c
 15097   00259A  0E00               	movlw	0
 15098   00259C  6E0D               	movwf	(send_cmd@arg+2)^0,c
 15099   00259E  0E00               	movlw	0
 15100   0025A0  6E0E               	movwf	(send_cmd@arg+3)^0,c
 15101   0025A2  0E09               	movlw	9
 15102   0025A4  ECAF  F031         	call	_send_cmd
 15103   0025A8  0900               	iorlw	0
 15104   0025AA  A4D8               	btfss	status,2,c
 15105   0025AC  EFDA  F012         	goto	u5911
 15106   0025B0  EFDC  F012         	goto	u5910
 15107   0025B4                     u5911:
 15108   0025B4  EF94  F013         	goto	l4739
 15109   0025B8                     u5910:
 15110   0025B8  C037  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 15111   0025BC  C038  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 15112   0025C0  0E00               	movlw	0
 15113   0025C2  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 15114   0025C4  0E10               	movlw	16
 15115   0025C6  6E04               	movwf	rcvr_datablock@btr^0,c
 15116   0025C8  ECBD  F02F         	call	_rcvr_datablock	;wreg free
 15117   0025CC  0900               	iorlw	0
 15118   0025CE  B4D8               	btfsc	status,2,c
 15119   0025D0  EFEC  F012         	goto	u5921
 15120   0025D4  EFEE  F012         	goto	u5920
 15121   0025D8                     u5921:
 15122   0025D8  EF94  F013         	goto	l4739
 15123   0025DC                     u5920:
 15124   0025DC  EFC6  F010         	goto	l4649
 15125   0025E0                     l4709:
 15126                           
 15127                           ; BSR set to: 0
 15128                           ;diskio.c: 528:   if (send_cmd((10), 0) == 0
 15129   0025E0  0E00               	movlw	0
 15130   0025E2  6E0B               	movwf	send_cmd@arg^0,c
 15131   0025E4  0E00               	movlw	0
 15132   0025E6  6E0C               	movwf	(send_cmd@arg+1)^0,c
 15133   0025E8  0E00               	movlw	0
 15134   0025EA  6E0D               	movwf	(send_cmd@arg+2)^0,c
 15135   0025EC  0E00               	movlw	0
 15136   0025EE  6E0E               	movwf	(send_cmd@arg+3)^0,c
 15137   0025F0  0E0A               	movlw	10
 15138   0025F2  ECAF  F031         	call	_send_cmd
 15139   0025F6  0900               	iorlw	0
 15140   0025F8  A4D8               	btfss	status,2,c
 15141   0025FA  EF01  F013         	goto	u5931
 15142   0025FE  EF03  F013         	goto	u5930
 15143   002602                     u5931:
 15144   002602  EF94  F013         	goto	l4739
 15145   002606                     u5930:
 15146   002606  C037  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 15147   00260A  C038  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 15148   00260E  0E00               	movlw	0
 15149   002610  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 15150   002612  0E10               	movlw	16
 15151   002614  6E04               	movwf	rcvr_datablock@btr^0,c
 15152   002616  ECBD  F02F         	call	_rcvr_datablock	;wreg free
 15153   00261A  0900               	iorlw	0
 15154   00261C  B4D8               	btfsc	status,2,c
 15155   00261E  EF13  F013         	goto	u5941
 15156   002622  EF15  F013         	goto	u5940
 15157   002626                     u5941:
 15158   002626  EF94  F013         	goto	l4739
 15159   00262A                     u5940:
 15160   00262A  EFC6  F010         	goto	l4649
 15161   00262E                     l4715:
 15162                           
 15163                           ; BSR set to: 0
 15164                           ;diskio.c: 534:   if (send_cmd((58), 0) == 0) {
 15165   00262E  0E00               	movlw	0
 15166   002630  6E0B               	movwf	send_cmd@arg^0,c
 15167   002632  0E00               	movlw	0
 15168   002634  6E0C               	movwf	(send_cmd@arg+1)^0,c
 15169   002636  0E00               	movlw	0
 15170   002638  6E0D               	movwf	(send_cmd@arg+2)^0,c
 15171   00263A  0E00               	movlw	0
 15172   00263C  6E0E               	movwf	(send_cmd@arg+3)^0,c
 15173   00263E  0E3A               	movlw	58
 15174   002640  ECAF  F031         	call	_send_cmd
 15175   002644  0900               	iorlw	0
 15176   002646  A4D8               	btfss	status,2,c
 15177   002648  EF28  F013         	goto	u5951
 15178   00264C  EF2A  F013         	goto	u5950
 15179   002650                     u5951:
 15180   002650  EF94  F013         	goto	l4739
 15181   002654                     u5950:
 15182   002654                     
 15183                           ;diskio.c: 535:    for (n = 4; n; n--) *ptr++ = SPI_Exchange8bit(0xFF);
 15184   002654  0E04               	movlw	4
 15185   002656  6E36               	movwf	disk_ioctl@n^0,c
 15186   002658  EF39  F013         	goto	l4725
 15187   00265C                     l4719:
 15188   00265C  0EFF               	movlw	255
 15189   00265E  ECFD  F032         	call	_SPI_Exchange8bit
 15190   002662  C037  FFD9         	movff	disk_ioctl@ptr,fsr2l
 15191   002666  C038  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 15192   00266A  6EDF               	movwf	indf2,c
 15193   00266C  4A37               	infsnz	disk_ioctl@ptr^0,f,c
 15194   00266E  2A38               	incf	(disk_ioctl@ptr+1)^0,f,c
 15195   002670  0636               	decf	disk_ioctl@n^0,f,c
 15196   002672                     l4725:
 15197   002672  5036               	movf	disk_ioctl@n^0,w,c
 15198   002674  A4D8               	btfss	status,2,c
 15199   002676  EF3F  F013         	goto	u5961
 15200   00267A  EF41  F013         	goto	u5960
 15201   00267E                     u5961:
 15202   00267E  EF2E  F013         	goto	l4719
 15203   002682                     u5960:
 15204   002682  EFC6  F010         	goto	l4649
 15205   002686                     l4727:
 15206                           
 15207                           ; BSR set to: 0
 15208                           ;diskio.c: 541:   if (send_cmd((0x80+13), 0) == 0) {
 15209   002686  0E00               	movlw	0
 15210   002688  6E0B               	movwf	send_cmd@arg^0,c
 15211   00268A  0E00               	movlw	0
 15212   00268C  6E0C               	movwf	(send_cmd@arg+1)^0,c
 15213   00268E  0E00               	movlw	0
 15214   002690  6E0D               	movwf	(send_cmd@arg+2)^0,c
 15215   002692  0E00               	movlw	0
 15216   002694  6E0E               	movwf	(send_cmd@arg+3)^0,c
 15217   002696  0E8D               	movlw	141
 15218   002698  ECAF  F031         	call	_send_cmd
 15219   00269C  0900               	iorlw	0
 15220   00269E  A4D8               	btfss	status,2,c
 15221   0026A0  EF54  F013         	goto	u5971
 15222   0026A4  EF56  F013         	goto	u5970
 15223   0026A8                     u5971:
 15224   0026A8  EF94  F013         	goto	l4739
 15225   0026AC                     u5970:
 15226   0026AC                     
 15227                           ;diskio.c: 542:    SPI_Exchange8bit(0xFF);
 15228   0026AC  0EFF               	movlw	255
 15229   0026AE  ECFD  F032         	call	_SPI_Exchange8bit
 15230   0026B2                     
 15231                           ;diskio.c: 543:    if (rcvr_datablock(ptr, 64))
 15232   0026B2  C037  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 15233   0026B6  C038  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 15234   0026BA  0E00               	movlw	0
 15235   0026BC  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 15236   0026BE  0E40               	movlw	64
 15237   0026C0  6E04               	movwf	rcvr_datablock@btr^0,c
 15238   0026C2  ECBD  F02F         	call	_rcvr_datablock	;wreg free
 15239   0026C6  0900               	iorlw	0
 15240   0026C8  B4D8               	btfsc	status,2,c
 15241   0026CA  EF69  F013         	goto	u5981
 15242   0026CE  EF6B  F013         	goto	u5980
 15243   0026D2                     u5981:
 15244   0026D2  EF94  F013         	goto	l4739
 15245   0026D6                     u5980:
 15246   0026D6  EFC6  F010         	goto	l4649
 15247   0026DA                     l4735:
 15248                           
 15249                           ; BSR set to: 0
 15250                           ;diskio.c: 549:   res = RES_PARERR;
 15251   0026DA  0E04               	movlw	4
 15252   0026DC  6E35               	movwf	disk_ioctl@res^0,c
 15253                           
 15254                           ;diskio.c: 550:  }
 15255   0026DE  EF94  F013         	goto	l4739
 15256   0026E2                     l4737:
 15257                           
 15258                           ; BSR set to: 0
 15259   0026E2  5011               	movf	disk_ioctl@cmd^0,w,c
 15260                           
 15261                           ; Switch size 1, requested type "simple"
 15262                           ; Number of cases is 8, Range of values is 0 to 14
 15263                           ; switch strategies available:
 15264                           ; Name         Instructions Cycles
 15265                           ; simple_byte           25    13 (average)
 15266                           ;	Chosen strategy is simple_byte
 15267   0026E4  0A00               	xorlw	0	; case 0
 15268   0026E6  B4D8               	btfsc	status,2,c
 15269   0026E8  EFBC  F010         	goto	l4647
 15270   0026EC  0A01               	xorlw	1	; case 1
 15271   0026EE  B4D8               	btfsc	status,2,c
 15272   0026F0  EFC9  F010         	goto	l4651
 15273   0026F4  0A02               	xorlw	2	; case 3
 15274   0026F6  B4D8               	btfsc	status,2,c
 15275   0026F8  EFAC  F011         	goto	l234
 15276   0026FC  0A09               	xorlw	9	; case 10
 15277   0026FE  B4D8               	btfsc	status,2,c
 15278   002700  EFC1  F012         	goto	l4699
 15279   002704  0A01               	xorlw	1	; case 11
 15280   002706  B4D8               	btfsc	status,2,c
 15281   002708  EFC9  F012         	goto	l4703
 15282   00270C  0A07               	xorlw	7	; case 12
 15283   00270E  B4D8               	btfsc	status,2,c
 15284   002710  EFF0  F012         	goto	l4709
 15285   002714  0A01               	xorlw	1	; case 13
 15286   002716  B4D8               	btfsc	status,2,c
 15287   002718  EF17  F013         	goto	l4715
 15288   00271C  0A03               	xorlw	3	; case 14
 15289   00271E  B4D8               	btfsc	status,2,c
 15290   002720  EF43  F013         	goto	l4727
 15291   002724  EF6D  F013         	goto	l4735
 15292   002728                     l4739:
 15293                           
 15294                           ;diskio.c: 552:  deselect();
 15295   002728  EC2D  F033         	call	_deselect	;wreg free
 15296   00272C                     
 15297                           ;diskio.c: 554:  return res;
 15298   00272C  5035               	movf	disk_ioctl@res^0,w,c
 15299   00272E                     l224:
 15300   00272E  0012               	return		;funcret
 15301   002730                     __end_of_disk_ioctl:
 15302                           	callstack 0
 15303                           
 15304 ;; *************** function _st_clust *****************
 15305 ;; Defined at:
 15306 ;;		line 1252 in file "ff.c"
 15307 ;; Parameters:    Size  Location     Type
 15308 ;;  dir             2    0[COMRAM] PTR unsigned char 
 15309 ;;		 -> FatFs(558), NULL(0), 
 15310 ;;  cl              4    2[COMRAM] unsigned long 
 15311 ;; Auto vars:     Size  Location     Type
 15312 ;;		None
 15313 ;; Return value:  Size  Location     Type
 15314 ;;                  1    wreg      void 
 15315 ;; Registers used:
 15316 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15317 ;; Tracked objects:
 15318 ;;		On entry : 0/0
 15319 ;;		On exit  : 0/0
 15320 ;;		Unchanged: 0/0
 15321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15322 ;;      Params:         6       0       0       0       0       0       0
 15323 ;;      Locals:         0       0       0       0       0       0       0
 15324 ;;      Temps:          0       0       0       0       0       0       0
 15325 ;;      Totals:         6       0       0       0       0       0       0
 15326 ;;Total ram usage:        6 bytes
 15327 ;; Hardware stack levels used: 1
 15328 ;; This function calls:
 15329 ;;		Nothing
 15330 ;; This function is called by:
 15331 ;;		_f_open
 15332 ;;		_f_sync
 15333 ;; This function uses a non-reentrant model
 15334 ;;
 15335                           
 15336                           	psect	text45
 15337   006564                     __ptext45:
 15338                           	callstack 0
 15339   006564                     _st_clust:
 15340                           	callstack 29
 15341   006564                     
 15342                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 15343   006564  EE20 F01A          	lfsr	2,26
 15344   006568  5001               	movf	st_clust@dir^0,w,c
 15345   00656A  26D9               	addwf	fsr2l,f,c
 15346   00656C  5002               	movf	(st_clust@dir+1)^0,w,c
 15347   00656E  22DA               	addwfc	fsr2h,f,c
 15348   006570  C003  FFDE         	movff	st_clust@cl,postinc2
 15349   006574  C004  FFDD         	movff	st_clust@cl+1,postdec2
 15350                           
 15351                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 15352   006578  EE20 F014          	lfsr	2,20
 15353   00657C  5001               	movf	st_clust@dir^0,w,c
 15354   00657E  26D9               	addwf	fsr2l,f,c
 15355   006580  5002               	movf	(st_clust@dir+1)^0,w,c
 15356   006582  22DA               	addwfc	fsr2h,f,c
 15357   006584  C005  FFDE         	movff	st_clust@cl+2,postinc2
 15358   006588  C006  FFDD         	movff	st_clust@cl+3,postdec2
 15359   00658C  0012               	return		;funcret
 15360   00658E                     __end_of_st_clust:
 15361                           	callstack 0
 15362                           
 15363 ;; *************** function _move_window *****************
 15364 ;; Defined at:
 15365 ;;		line 729 in file "ff.c"
 15366 ;; Parameters:    Size  Location     Type
 15367 ;;  fs              2   47[COMRAM] PTR struct .
 15368 ;;		 -> FatFs(558), NULL(0), 
 15369 ;;  sector          4   49[COMRAM] unsigned long 
 15370 ;; Auto vars:     Size  Location     Type
 15371 ;;  res             1   57[COMRAM] enum E95
 15372 ;; Return value:  Size  Location     Type
 15373 ;;                  1    wreg      enum E95
 15374 ;; Registers used:
 15375 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15376 ;; Tracked objects:
 15377 ;;		On entry : 0/0
 15378 ;;		On exit  : 0/0
 15379 ;;		Unchanged: 0/0
 15380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15381 ;;      Params:         6       0       0       0       0       0       0
 15382 ;;      Locals:         1       0       0       0       0       0       0
 15383 ;;      Temps:          4       0       0       0       0       0       0
 15384 ;;      Totals:        11       0       0       0       0       0       0
 15385 ;;Total ram usage:       11 bytes
 15386 ;; Hardware stack levels used: 1
 15387 ;; Hardware stack levels required when called: 7
 15388 ;; This function calls:
 15389 ;;		_disk_read
 15390 ;;		_sync_window
 15391 ;; This function is called by:
 15392 ;;		_get_fat
 15393 ;;		_put_fat
 15394 ;;		_dir_alloc
 15395 ;;		_dir_find
 15396 ;;		_dir_register
 15397 ;;		_check_fs
 15398 ;;		_find_volume
 15399 ;;		_f_open
 15400 ;;		_f_write
 15401 ;;		_f_sync
 15402 ;;		_f_read
 15403 ;; This function uses a non-reentrant model
 15404 ;;
 15405                           
 15406                           	psect	text46
 15407   005BEA                     __ptext46:
 15408                           	callstack 0
 15409   005BEA                     _move_window:
 15410                           	callstack 22
 15411   005BEA                     
 15412                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 15413   005BEA  6A3A               	clrf	move_window@res^0,c
 15414   005BEC                     
 15415                           ;ff.c: 737:  if (sector != fs->winsect) {
 15416   005BEC  EE20 F02A          	lfsr	2,42
 15417   005BF0  5030               	movf	move_window@fs^0,w,c
 15418   005BF2  26D9               	addwf	fsr2l,f,c
 15419   005BF4  5031               	movf	(move_window@fs+1)^0,w,c
 15420   005BF6  22DA               	addwfc	fsr2h,f,c
 15421   005BF8  5032               	movf	move_window@sector^0,w,c
 15422   005BFA  18DE               	xorwf	postinc2,w,c
 15423   005BFC  E10F               	bnz	u5200
 15424   005BFE  5033               	movf	(move_window@sector+1)^0,w,c
 15425   005C00  18DE               	xorwf	postinc2,w,c
 15426   005C02  E10C               	bnz	u5200
 15427   005C04  5034               	movf	(move_window@sector+2)^0,w,c
 15428   005C06  18DE               	xorwf	postinc2,w,c
 15429   005C08  E109               	bnz	u5200
 15430   005C0A  5035               	movf	(move_window@sector+3)^0,w,c
 15431   005C0C  18DE               	xorwf	postinc2,w,c
 15432   005C0E  B4D8               	btfsc	status,2,c
 15433   005C10  EF0C  F02E         	goto	u5201
 15434   005C14  EF0E  F02E         	goto	u5200
 15435   005C18                     u5201:
 15436   005C18  EF54  F02E         	goto	l4375
 15437   005C1C                     u5200:
 15438   005C1C                     
 15439                           ;ff.c: 739:   res = sync_window(fs);
 15440   005C1C  C030  F01B         	movff	move_window@fs,sync_window@fs
 15441   005C20  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 15442   005C24  EC16  F027         	call	_sync_window	;wreg free
 15443   005C28  6E3A               	movwf	move_window@res^0,c
 15444   005C2A                     
 15445                           ;ff.c: 741:   if (res == FR_OK) {
 15446   005C2A  503A               	movf	move_window@res^0,w,c
 15447   005C2C  A4D8               	btfss	status,2,c
 15448   005C2E  EF1B  F02E         	goto	u5211
 15449   005C32  EF1D  F02E         	goto	u5210
 15450   005C36                     u5211:
 15451   005C36  EF54  F02E         	goto	l4375
 15452   005C3A                     u5210:
 15453   005C3A                     
 15454                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 15455   005C3A  0E2E               	movlw	46
 15456   005C3C  2430               	addwf	move_window@fs^0,w,c
 15457   005C3E  6E11               	movwf	disk_read@buff^0,c
 15458   005C40  0E00               	movlw	0
 15459   005C42  2031               	addwfc	(move_window@fs+1)^0,w,c
 15460   005C44  6E12               	movwf	(disk_read@buff+1)^0,c
 15461   005C46  C032  F013         	movff	move_window@sector,disk_read@sector
 15462   005C4A  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 15463   005C4E  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 15464   005C52  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 15465   005C56  0E00               	movlw	0
 15466   005C58  6E18               	movwf	(disk_read@count+1)^0,c
 15467   005C5A  0E01               	movlw	1
 15468   005C5C  6E17               	movwf	disk_read@count^0,c
 15469   005C5E  EE20 F001          	lfsr	2,1
 15470   005C62  5030               	movf	move_window@fs^0,w,c
 15471   005C64  26D9               	addwf	fsr2l,f,c
 15472   005C66  5031               	movf	(move_window@fs+1)^0,w,c
 15473   005C68  22DA               	addwfc	fsr2h,f,c
 15474   005C6A  50DF               	movf	indf2,w,c
 15475   005C6C  EC24  F029         	call	_disk_read
 15476   005C70  0900               	iorlw	0
 15477   005C72  B4D8               	btfsc	status,2,c
 15478   005C74  EF3E  F02E         	goto	u5221
 15479   005C78  EF40  F02E         	goto	u5220
 15480   005C7C                     u5221:
 15481   005C7C  EF46  F02E         	goto	l4373
 15482   005C80                     u5220:
 15483   005C80                     
 15484                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 15485   005C80  6832               	setf	move_window@sector^0,c
 15486   005C82  6833               	setf	(move_window@sector+1)^0,c
 15487   005C84  6834               	setf	(move_window@sector+2)^0,c
 15488   005C86  6835               	setf	(move_window@sector+3)^0,c
 15489   005C88                     
 15490                           ;ff.c: 744:     res = FR_DISK_ERR;
 15491   005C88  0E01               	movlw	1
 15492   005C8A  6E3A               	movwf	move_window@res^0,c
 15493   005C8C                     l4373:
 15494                           
 15495                           ;ff.c: 746:    fs->winsect = sector;
 15496   005C8C  EE20 F02A          	lfsr	2,42
 15497   005C90  5030               	movf	move_window@fs^0,w,c
 15498   005C92  26D9               	addwf	fsr2l,f,c
 15499   005C94  5031               	movf	(move_window@fs+1)^0,w,c
 15500   005C96  22DA               	addwfc	fsr2h,f,c
 15501   005C98  C032  FFDE         	movff	move_window@sector,postinc2
 15502   005C9C  C033  FFDE         	movff	move_window@sector+1,postinc2
 15503   005CA0  C034  FFDE         	movff	move_window@sector+2,postinc2
 15504   005CA4  C035  FFDE         	movff	move_window@sector+3,postinc2
 15505   005CA8                     l4375:
 15506                           
 15507                           ;ff.c: 749:  return res;
 15508   005CA8  503A               	movf	move_window@res^0,w,c
 15509   005CAA  0012               	return		;funcret
 15510   005CAC                     __end_of_move_window:
 15511                           	callstack 0
 15512                           
 15513 ;; *************** function _sync_window *****************
 15514 ;; Defined at:
 15515 ;;		line 700 in file "ff.c"
 15516 ;; Parameters:    Size  Location     Type
 15517 ;;  fs              2   26[COMRAM] PTR struct .
 15518 ;;		 -> FatFs(558), NULL(0), 
 15519 ;; Auto vars:     Size  Location     Type
 15520 ;;  wsect           4   43[COMRAM] unsigned long 
 15521 ;;  nf              2   41[COMRAM] unsigned short 
 15522 ;;  res             1   40[COMRAM] enum E95
 15523 ;; Return value:  Size  Location     Type
 15524 ;;                  1    wreg      enum E95
 15525 ;; Registers used:
 15526 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15527 ;; Tracked objects:
 15528 ;;		On entry : 0/0
 15529 ;;		On exit  : 0/0
 15530 ;;		Unchanged: 0/0
 15531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15532 ;;      Params:         2       0       0       0       0       0       0
 15533 ;;      Locals:         7       0       0       0       0       0       0
 15534 ;;      Temps:         12       0       0       0       0       0       0
 15535 ;;      Totals:        21       0       0       0       0       0       0
 15536 ;;Total ram usage:       21 bytes
 15537 ;; Hardware stack levels used: 1
 15538 ;; Hardware stack levels required when called: 6
 15539 ;; This function calls:
 15540 ;;		_disk_write
 15541 ;; This function is called by:
 15542 ;;		_move_window
 15543 ;;		_sync_fs
 15544 ;;		_dir_next
 15545 ;;		_f_write
 15546 ;; This function uses a non-reentrant model
 15547 ;;
 15548                           
 15549                           	psect	text47
 15550   004E2C                     __ptext47:
 15551                           	callstack 0
 15552   004E2C                     _sync_window:
 15553                           	callstack 23
 15554   004E2C                     
 15555                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 15556   004E2C  6A29               	clrf	sync_window@res^0,c
 15557   004E2E                     
 15558                           ;ff.c: 709:  if (fs->wflag) {
 15559   004E2E  EE20 F004          	lfsr	2,4
 15560   004E32  501B               	movf	sync_window@fs^0,w,c
 15561   004E34  26D9               	addwf	fsr2l,f,c
 15562   004E36  501C               	movf	(sync_window@fs+1)^0,w,c
 15563   004E38  22DA               	addwfc	fsr2h,f,c
 15564   004E3A  50DF               	movf	indf2,w,c
 15565   004E3C  B4D8               	btfsc	status,2,c
 15566   004E3E  EF23  F027         	goto	u5161
 15567   004E42  EF25  F027         	goto	u5160
 15568   004E46                     u5161:
 15569   004E46  EFD6  F027         	goto	l4355
 15570   004E4A                     u5160:
 15571   004E4A                     
 15572                           ;ff.c: 710:   wsect = fs->winsect;
 15573   004E4A  EE20 F02A          	lfsr	2,42
 15574   004E4E  501B               	movf	sync_window@fs^0,w,c
 15575   004E50  26D9               	addwf	fsr2l,f,c
 15576   004E52  501C               	movf	(sync_window@fs+1)^0,w,c
 15577   004E54  22DA               	addwfc	fsr2h,f,c
 15578   004E56  CFDE F02C          	movff	postinc2,sync_window@wsect
 15579   004E5A  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 15580   004E5E  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 15581   004E62  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 15582   004E66                     
 15583                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 15584   004E66  0E2E               	movlw	46
 15585   004E68  241B               	addwf	sync_window@fs^0,w,c
 15586   004E6A  6E11               	movwf	disk_write@buff^0,c
 15587   004E6C  0E00               	movlw	0
 15588   004E6E  201C               	addwfc	(sync_window@fs+1)^0,w,c
 15589   004E70  6E12               	movwf	(disk_write@buff+1)^0,c
 15590   004E72  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 15591   004E76  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 15592   004E7A  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 15593   004E7E  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 15594   004E82  0E00               	movlw	0
 15595   004E84  6E18               	movwf	(disk_write@count+1)^0,c
 15596   004E86  0E01               	movlw	1
 15597   004E88  6E17               	movwf	disk_write@count^0,c
 15598   004E8A  EE20 F001          	lfsr	2,1
 15599   004E8E  501B               	movf	sync_window@fs^0,w,c
 15600   004E90  26D9               	addwf	fsr2l,f,c
 15601   004E92  501C               	movf	(sync_window@fs+1)^0,w,c
 15602   004E94  22DA               	addwfc	fsr2h,f,c
 15603   004E96  50DF               	movf	indf2,w,c
 15604   004E98  ECA7  F024         	call	_disk_write
 15605   004E9C  0900               	iorlw	0
 15606   004E9E  B4D8               	btfsc	status,2,c
 15607   004EA0  EF54  F027         	goto	u5171
 15608   004EA4  EF56  F027         	goto	u5170
 15609   004EA8                     u5171:
 15610   004EA8  EF5A  F027         	goto	l4337
 15611   004EAC                     u5170:
 15612   004EAC                     
 15613                           ;ff.c: 712:    res = FR_DISK_ERR;
 15614   004EAC  0E01               	movlw	1
 15615   004EAE  6E29               	movwf	sync_window@res^0,c
 15616                           
 15617                           ;ff.c: 713:   } else {
 15618   004EB0  EFD6  F027         	goto	l4355
 15619   004EB4                     l4337:
 15620                           
 15621                           ;ff.c: 714:    fs->wflag = 0;
 15622   004EB4  EE20 F004          	lfsr	2,4
 15623   004EB8  501B               	movf	sync_window@fs^0,w,c
 15624   004EBA  26D9               	addwf	fsr2l,f,c
 15625   004EBC  501C               	movf	(sync_window@fs+1)^0,w,c
 15626   004EBE  22DA               	addwfc	fsr2h,f,c
 15627   004EC0  6ADF               	clrf	indf2,c
 15628   004EC2                     
 15629                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 15630   004EC2  EE20 F016          	lfsr	2,22
 15631   004EC6  501B               	movf	sync_window@fs^0,w,c
 15632   004EC8  26D9               	addwf	fsr2l,f,c
 15633   004ECA  501C               	movf	(sync_window@fs+1)^0,w,c
 15634   004ECC  22DA               	addwfc	fsr2h,f,c
 15635   004ECE  EE10 F01E          	lfsr	1,30
 15636   004ED2  501B               	movf	sync_window@fs^0,w,c
 15637   004ED4  26E1               	addwf	fsr1l,f,c
 15638   004ED6  501C               	movf	(sync_window@fs+1)^0,w,c
 15639   004ED8  22E2               	addwfc	fsr1h,f,c
 15640   004EDA  CFE6 F021          	movff	postinc1,??_sync_window+4
 15641   004EDE  CFE6 F022          	movff	postinc1,??_sync_window+5
 15642   004EE2  CFE6 F023          	movff	postinc1,??_sync_window+6
 15643   004EE6  CFE6 F024          	movff	postinc1,??_sync_window+7
 15644   004EEA  5021               	movf	(??_sync_window+4)^0,w,c
 15645   004EEC  5C2C               	subwf	sync_window@wsect^0,w,c
 15646   004EEE  6E25               	movwf	(??_sync_window+8)^0,c
 15647   004EF0  5022               	movf	(??_sync_window+5)^0,w,c
 15648   004EF2  582D               	subwfb	(sync_window@wsect+1)^0,w,c
 15649   004EF4  6E26               	movwf	(??_sync_window+9)^0,c
 15650   004EF6  5023               	movf	(??_sync_window+6)^0,w,c
 15651   004EF8  582E               	subwfb	(sync_window@wsect+2)^0,w,c
 15652   004EFA  6E27               	movwf	(??_sync_window+10)^0,c
 15653   004EFC  5024               	movf	(??_sync_window+7)^0,w,c
 15654   004EFE  582F               	subwfb	(sync_window@wsect+3)^0,w,c
 15655   004F00  6E28               	movwf	(??_sync_window+11)^0,c
 15656   004F02  50DE               	movf	postinc2,w,c
 15657   004F04  5C25               	subwf	(??_sync_window+8)^0,w,c
 15658   004F06  50DE               	movf	postinc2,w,c
 15659   004F08  5826               	subwfb	(??_sync_window+9)^0,w,c
 15660   004F0A  50DE               	movf	postinc2,w,c
 15661   004F0C  5827               	subwfb	(??_sync_window+10)^0,w,c
 15662   004F0E  50DE               	movf	postinc2,w,c
 15663   004F10  5828               	subwfb	(??_sync_window+11)^0,w,c
 15664   004F12  B0D8               	btfsc	status,0,c
 15665   004F14  EF8E  F027         	goto	u5181
 15666   004F18  EF90  F027         	goto	u5180
 15667   004F1C                     u5181:
 15668   004F1C  EFD6  F027         	goto	l4355
 15669   004F20                     u5180:
 15670   004F20                     
 15671                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 15672   004F20  EE20 F003          	lfsr	2,3
 15673   004F24  501B               	movf	sync_window@fs^0,w,c
 15674   004F26  26D9               	addwf	fsr2l,f,c
 15675   004F28  501C               	movf	(sync_window@fs+1)^0,w,c
 15676   004F2A  22DA               	addwfc	fsr2h,f,c
 15677   004F2C  50DF               	movf	indf2,w,c
 15678   004F2E  6E1D               	movwf	??_sync_window^0,c
 15679   004F30  501D               	movf	??_sync_window^0,w,c
 15680   004F32  6E2A               	movwf	sync_window@nf^0,c
 15681   004F34  6A2B               	clrf	(sync_window@nf+1)^0,c
 15682   004F36                     l4343:
 15683   004F36  502B               	movf	(sync_window@nf+1)^0,w,c
 15684   004F38  E107               	bnz	u5191
 15685   004F3A  0E02               	movlw	2
 15686   004F3C  5C2A               	subwf	sync_window@nf^0,w,c
 15687   004F3E  B0D8               	btfsc	status,0,c
 15688   004F40  EFA4  F027         	goto	u5191
 15689   004F44  EFA6  F027         	goto	u5190
 15690   004F48                     u5191:
 15691   004F48  EFA8  F027         	goto	l4347
 15692   004F4C                     u5190:
 15693   004F4C  EFD6  F027         	goto	l4355
 15694   004F50                     l4347:
 15695                           
 15696                           ;ff.c: 717:      wsect += fs->fsize;
 15697   004F50  EE20 F016          	lfsr	2,22
 15698   004F54  501B               	movf	sync_window@fs^0,w,c
 15699   004F56  26D9               	addwf	fsr2l,f,c
 15700   004F58  501C               	movf	(sync_window@fs+1)^0,w,c
 15701   004F5A  22DA               	addwfc	fsr2h,f,c
 15702   004F5C  50DE               	movf	postinc2,w,c
 15703   004F5E  262C               	addwf	sync_window@wsect^0,f,c
 15704   004F60  50DE               	movf	postinc2,w,c
 15705   004F62  222D               	addwfc	(sync_window@wsect+1)^0,f,c
 15706   004F64  50DE               	movf	postinc2,w,c
 15707   004F66  222E               	addwfc	(sync_window@wsect+2)^0,f,c
 15708   004F68  50DD               	movf	postdec2,w,c
 15709   004F6A  222F               	addwfc	(sync_window@wsect+3)^0,f,c
 15710   004F6C                     
 15711                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 15712   004F6C  0E2E               	movlw	46
 15713   004F6E  241B               	addwf	sync_window@fs^0,w,c
 15714   004F70  6E11               	movwf	disk_write@buff^0,c
 15715   004F72  0E00               	movlw	0
 15716   004F74  201C               	addwfc	(sync_window@fs+1)^0,w,c
 15717   004F76  6E12               	movwf	(disk_write@buff+1)^0,c
 15718   004F78  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 15719   004F7C  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 15720   004F80  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 15721   004F84  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 15722   004F88  0E00               	movlw	0
 15723   004F8A  6E18               	movwf	(disk_write@count+1)^0,c
 15724   004F8C  0E01               	movlw	1
 15725   004F8E  6E17               	movwf	disk_write@count^0,c
 15726   004F90  EE20 F001          	lfsr	2,1
 15727   004F94  501B               	movf	sync_window@fs^0,w,c
 15728   004F96  26D9               	addwf	fsr2l,f,c
 15729   004F98  501C               	movf	(sync_window@fs+1)^0,w,c
 15730   004F9A  22DA               	addwfc	fsr2h,f,c
 15731   004F9C  50DF               	movf	indf2,w,c
 15732   004F9E  ECA7  F024         	call	_disk_write
 15733   004FA2                     
 15734                           ;ff.c: 719:     }
 15735   004FA2  062A               	decf	sync_window@nf^0,f,c
 15736   004FA4  A0D8               	btfss	status,0,c
 15737   004FA6  062B               	decf	(sync_window@nf+1)^0,f,c
 15738   004FA8  EF9B  F027         	goto	l4343
 15739   004FAC                     l4355:
 15740                           
 15741                           ;ff.c: 723:  return res;
 15742   004FAC  5029               	movf	sync_window@res^0,w,c
 15743   004FAE  0012               	return		;funcret
 15744   004FB0                     __end_of_sync_window:
 15745                           	callstack 0
 15746                           
 15747 ;; *************** function _disk_write *****************
 15748 ;; Defined at:
 15749 ;;		line 415 in file "diskio.c"
 15750 ;; Parameters:    Size  Location     Type
 15751 ;;  pdrv            1    wreg     unsigned char 
 15752 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 15753 ;;		 -> main@buffer(64), FatFs(558), FatFs$win(512), NULL(0), 
 15754 ;;  sector          4   18[COMRAM] unsigned long 
 15755 ;;  count           2   22[COMRAM] unsigned short 
 15756 ;; Auto vars:     Size  Location     Type
 15757 ;;  pdrv            1   25[COMRAM] unsigned char 
 15758 ;; Return value:  Size  Location     Type
 15759 ;;                  1    wreg      enum E45
 15760 ;; Registers used:
 15761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15762 ;; Tracked objects:
 15763 ;;		On entry : 0/0
 15764 ;;		On exit  : 0/0
 15765 ;;		Unchanged: 0/0
 15766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15767 ;;      Params:         8       0       0       0       0       0       0
 15768 ;;      Locals:         1       0       0       0       0       0       0
 15769 ;;      Temps:          1       0       0       0       0       0       0
 15770 ;;      Totals:        10       0       0       0       0       0       0
 15771 ;;Total ram usage:       10 bytes
 15772 ;; Hardware stack levels used: 1
 15773 ;; Hardware stack levels required when called: 5
 15774 ;; This function calls:
 15775 ;;		_deselect
 15776 ;;		_send_cmd
 15777 ;;		_xmit_datablock
 15778 ;; This function is called by:
 15779 ;;		_sync_window
 15780 ;;		_sync_fs
 15781 ;;		_f_write
 15782 ;; This function uses a non-reentrant model
 15783 ;;
 15784                           
 15785                           	psect	text48
 15786   00494E                     __ptext48:
 15787                           	callstack 0
 15788   00494E                     _disk_write:
 15789                           	callstack 23
 15790                           
 15791                           ;incstack = 0
 15792                           ;disk_write@pdrv stored from wreg
 15793   00494E  6E1A               	movwf	disk_write@pdrv^0,c
 15794   004950                     
 15795                           ;diskio.c: 416:  BYTE pdrv,;diskio.c: 417:  const BYTE *buff,;diskio.c: 418:  DWORD sect
      +                          or,;diskio.c: 419:  UINT count;diskio.c: 421: {;diskio.c: 422:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 15796   004950  501A               	movf	disk_write@pdrv^0,w,c
 15797   004952  A4D8               	btfss	status,2,c
 15798   004954  EFAE  F024         	goto	u4881
 15799   004958  EFB0  F024         	goto	u4880
 15800   00495C                     u4881:
 15801   00495C  EFB9  F024         	goto	l4249
 15802   004960                     u4880:
 15803   004960  5017               	movf	disk_write@count^0,w,c
 15804   004962  1018               	iorwf	(disk_write@count+1)^0,w,c
 15805   004964  A4D8               	btfss	status,2,c
 15806   004966  EFB7  F024         	goto	u4891
 15807   00496A  EFB9  F024         	goto	u4890
 15808   00496E                     u4891:
 15809   00496E  EFBC  F024         	goto	l205
 15810   004972                     u4890:
 15811   004972                     l4249:
 15812   004972  0E04               	movlw	4
 15813   004974  EF7B  F025         	goto	l208
 15814   004978                     l205:
 15815                           
 15816                           ;diskio.c: 423:  if (Stat & 0x01) return RES_NOTRDY;
 15817   004978  0100               	movlb	0	; () banked
 15818   00497A  A1FA               	btfss	_Stat& (0+255),0,b
 15819   00497C  EFC2  F024         	goto	u4901
 15820   004980  EFC4  F024         	goto	u4900
 15821   004984                     u4901:
 15822   004984  EFC7  F024         	goto	l209
 15823   004988                     u4900:
 15824   004988                     
 15825                           ; BSR set to: 0
 15826   004988  0E03               	movlw	3
 15827   00498A  EF7B  F025         	goto	l208
 15828   00498E                     l209:
 15829                           
 15830                           ; BSR set to: 0
 15831                           ;diskio.c: 424:  if (Stat & 0x04) return RES_WRPRT;
 15832   00498E  A5FA               	btfss	_Stat& (0+255),2,b
 15833   004990  EFCC  F024         	goto	u4911
 15834   004994  EFCE  F024         	goto	u4910
 15835   004998                     u4911:
 15836   004998  EFD1  F024         	goto	l210
 15837   00499C                     u4910:
 15838   00499C                     
 15839                           ; BSR set to: 0
 15840   00499C  0E02               	movlw	2
 15841   00499E  EF7B  F025         	goto	l208
 15842   0049A2                     l210:
 15843                           
 15844                           ; BSR set to: 0
 15845                           ;diskio.c: 426:  if (!(CardType & 0x08)) sector *= 512;
 15846   0049A2  B7F9               	btfsc	_CardType& (0+255),3,b
 15847   0049A4  EFD6  F024         	goto	u4921
 15848   0049A8  EFD8  F024         	goto	u4920
 15849   0049AC                     u4921:
 15850   0049AC  EFE1  F024         	goto	l211
 15851   0049B0                     u4920:
 15852   0049B0                     
 15853                           ; BSR set to: 0
 15854   0049B0  0E09               	movlw	9
 15855   0049B2                     u4935:
 15856   0049B2  90D8               	bcf	status,0,c
 15857   0049B4  3613               	rlcf	disk_write@sector^0,f,c
 15858   0049B6  3614               	rlcf	(disk_write@sector+1)^0,f,c
 15859   0049B8  3615               	rlcf	(disk_write@sector+2)^0,f,c
 15860   0049BA  3616               	rlcf	(disk_write@sector+3)^0,f,c
 15861   0049BC  2EE8               	decfsz	wreg,f,c
 15862   0049BE  EFD9  F024         	goto	u4935
 15863   0049C2                     l211:
 15864                           
 15865                           ; BSR set to: 0
 15866                           ;diskio.c: 428:  if (count == 1) {
 15867   0049C2  0417               	decf	disk_write@count^0,w,c
 15868   0049C4  1018               	iorwf	(disk_write@count+1)^0,w,c
 15869   0049C6  A4D8               	btfss	status,2,c
 15870   0049C8  EFE8  F024         	goto	u4941
 15871   0049CC  EFEA  F024         	goto	u4940
 15872   0049D0                     u4941:
 15873   0049D0  EF13  F025         	goto	l4269
 15874   0049D4                     u4940:
 15875   0049D4                     
 15876                           ; BSR set to: 0
 15877                           ;diskio.c: 429:   if ((send_cmd((24), sector) == 0)
 15878   0049D4  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 15879   0049D8  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 15880   0049DC  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 15881   0049E0  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 15882   0049E4  0E18               	movlw	24
 15883   0049E6  ECAF  F031         	call	_send_cmd
 15884   0049EA  0900               	iorlw	0
 15885   0049EC  A4D8               	btfss	status,2,c
 15886   0049EE  EFFB  F024         	goto	u4951
 15887   0049F2  EFFD  F024         	goto	u4950
 15888   0049F6                     u4951:
 15889   0049F6  EF6E  F025         	goto	l4283
 15890   0049FA                     u4950:
 15891   0049FA  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 15892   0049FE  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 15893   004A02  0EFE               	movlw	254
 15894   004A04  6E06               	movwf	xmit_datablock@token^0,c
 15895   004A06  EC56  F030         	call	_xmit_datablock	;wreg free
 15896   004A0A  0900               	iorlw	0
 15897   004A0C  B4D8               	btfsc	status,2,c
 15898   004A0E  EF0B  F025         	goto	u4961
 15899   004A12  EF0D  F025         	goto	u4960
 15900   004A16                     u4961:
 15901   004A16  EF6E  F025         	goto	l4283
 15902   004A1A                     u4960:
 15903   004A1A                     
 15904                           ;diskio.c: 431:    count = 0;
 15905   004A1A  0E00               	movlw	0
 15906   004A1C  6E18               	movwf	(disk_write@count+1)^0,c
 15907   004A1E  0E00               	movlw	0
 15908   004A20  6E17               	movwf	disk_write@count^0,c
 15909   004A22  EF6E  F025         	goto	l4283
 15910   004A26                     l4269:
 15911                           
 15912                           ; BSR set to: 0
 15913                           ;diskio.c: 434:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 15914   004A26  C0F9  F019         	movff	_CardType,??_disk_write
 15915   004A2A  0E06               	movlw	6
 15916   004A2C  1619               	andwf	??_disk_write^0,f,c
 15917   004A2E  B4D8               	btfsc	status,2,c
 15918   004A30  EF1C  F025         	goto	u4971
 15919   004A34  EF1E  F025         	goto	u4970
 15920   004A38                     u4971:
 15921   004A38  EF27  F025         	goto	l215
 15922   004A3C                     u4970:
 15923   004A3C                     
 15924                           ; BSR set to: 0
 15925   004A3C  C017  F00B         	movff	disk_write@count,send_cmd@arg
 15926   004A40  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 15927   004A44  6A0D               	clrf	(send_cmd@arg+2)^0,c
 15928   004A46  6A0E               	clrf	(send_cmd@arg+3)^0,c
 15929   004A48  0E97               	movlw	151
 15930   004A4A  ECAF  F031         	call	_send_cmd
 15931   004A4E                     l215:
 15932                           
 15933                           ;diskio.c: 435:   if (send_cmd((25), sector) == 0) {
 15934   004A4E  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 15935   004A52  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 15936   004A56  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 15937   004A5A  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 15938   004A5E  0E19               	movlw	25
 15939   004A60  ECAF  F031         	call	_send_cmd
 15940   004A64  0900               	iorlw	0
 15941   004A66  A4D8               	btfss	status,2,c
 15942   004A68  EF38  F025         	goto	u4981
 15943   004A6C  EF3A  F025         	goto	u4980
 15944   004A70                     u4981:
 15945   004A70  EF6E  F025         	goto	l4283
 15946   004A74                     u4980:
 15947   004A74                     l4273:
 15948                           
 15949                           ;diskio.c: 437:     if (!xmit_datablock(buff, 0xFC)) break;
 15950   004A74  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 15951   004A78  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 15952   004A7C  0EFC               	movlw	252
 15953   004A7E  6E06               	movwf	xmit_datablock@token^0,c
 15954   004A80  EC56  F030         	call	_xmit_datablock	;wreg free
 15955   004A84  0900               	iorlw	0
 15956   004A86  A4D8               	btfss	status,2,c
 15957   004A88  EF48  F025         	goto	u4991
 15958   004A8C  EF4A  F025         	goto	u4990
 15959   004A90                     u4991:
 15960   004A90  EF4C  F025         	goto	l4277
 15961   004A94                     u4990:
 15962   004A94  EF5A  F025         	goto	l4279
 15963   004A98                     l4277:
 15964                           
 15965                           ;diskio.c: 438:     buff += 512;
 15966   004A98  0E02               	movlw	2
 15967   004A9A  2612               	addwf	(disk_write@buff+1)^0,f,c
 15968                           
 15969                           ;diskio.c: 439:    } while (--count);
 15970   004A9C  0617               	decf	disk_write@count^0,f,c
 15971   004A9E  A0D8               	btfss	status,0,c
 15972   004AA0  0618               	decf	(disk_write@count+1)^0,f,c
 15973   004AA2  5017               	movf	disk_write@count^0,w,c
 15974   004AA4  1018               	iorwf	(disk_write@count+1)^0,w,c
 15975   004AA6  A4D8               	btfss	status,2,c
 15976   004AA8  EF58  F025         	goto	u5001
 15977   004AAC  EF5A  F025         	goto	u5000
 15978   004AB0                     u5001:
 15979   004AB0  EF3A  F025         	goto	l4273
 15980   004AB4                     u5000:
 15981   004AB4                     l4279:
 15982                           
 15983                           ;diskio.c: 440:    if (!xmit_datablock(0, 0xFD))
 15984   004AB4  0E00               	movlw	0
 15985   004AB6  6E04               	movwf	xmit_datablock@buff^0,c
 15986   004AB8  0E00               	movlw	0
 15987   004ABA  6E05               	movwf	(xmit_datablock@buff+1)^0,c
 15988   004ABC  0EFD               	movlw	253
 15989   004ABE  6E06               	movwf	xmit_datablock@token^0,c
 15990   004AC0  EC56  F030         	call	_xmit_datablock	;wreg free
 15991   004AC4  0900               	iorlw	0
 15992   004AC6  A4D8               	btfss	status,2,c
 15993   004AC8  EF68  F025         	goto	u5011
 15994   004ACC  EF6A  F025         	goto	u5010
 15995   004AD0                     u5011:
 15996   004AD0  EF6E  F025         	goto	l4283
 15997   004AD4                     u5010:
 15998   004AD4                     
 15999                           ;diskio.c: 441:     count = 1;
 16000   004AD4  0E00               	movlw	0
 16001   004AD6  6E18               	movwf	(disk_write@count+1)^0,c
 16002   004AD8  0E01               	movlw	1
 16003   004ADA  6E17               	movwf	disk_write@count^0,c
 16004   004ADC                     l4283:
 16005                           
 16006                           ;diskio.c: 444:  deselect();
 16007   004ADC  EC2D  F033         	call	_deselect	;wreg free
 16008   004AE0                     
 16009                           ;diskio.c: 446:  return count ? RES_ERROR : RES_OK;
 16010   004AE0  5017               	movf	disk_write@count^0,w,c
 16011   004AE2  1018               	iorwf	(disk_write@count+1)^0,w,c
 16012   004AE4  A4D8               	btfss	status,2,c
 16013   004AE6  EF77  F025         	goto	u5021
 16014   004AEA  EF7A  F025         	goto	u5020
 16015   004AEE                     u5021:
 16016   004AEE  0E01               	movlw	1
 16017   004AF0  EF7B  F025         	goto	u5030
 16018   004AF4                     u5020:
 16019   004AF4  0E00               	movlw	0
 16020   004AF6                     u5030:
 16021   004AF6                     l208:
 16022   004AF6  0012               	return		;funcret
 16023   004AF8                     __end_of_disk_write:
 16024                           	callstack 0
 16025                           
 16026 ;; *************** function _xmit_datablock *****************
 16027 ;; Defined at:
 16028 ;;		line 165 in file "diskio.c"
 16029 ;; Parameters:    Size  Location     Type
 16030 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 16031 ;;		 -> main@buffer(64), FatFs(558), FatFs$win(512), NULL(0), 
 16032 ;;  token           1    5[COMRAM] unsigned char 
 16033 ;; Auto vars:     Size  Location     Type
 16034 ;;  i               2    6[COMRAM] unsigned short 
 16035 ;;  resp            1    8[COMRAM] unsigned char 
 16036 ;; Return value:  Size  Location     Type
 16037 ;;                  1    wreg      unsigned char 
 16038 ;; Registers used:
 16039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16040 ;; Tracked objects:
 16041 ;;		On entry : 0/0
 16042 ;;		On exit  : 0/0
 16043 ;;		Unchanged: 0/0
 16044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16045 ;;      Params:         3       0       0       0       0       0       0
 16046 ;;      Locals:         3       0       0       0       0       0       0
 16047 ;;      Temps:          0       0       0       0       0       0       0
 16048 ;;      Totals:         6       0       0       0       0       0       0
 16049 ;;Total ram usage:        6 bytes
 16050 ;; Hardware stack levels used: 1
 16051 ;; Hardware stack levels required when called: 2
 16052 ;; This function calls:
 16053 ;;		_SPI_Exchange8bit
 16054 ;;		_wait_ready
 16055 ;; This function is called by:
 16056 ;;		_disk_write
 16057 ;; This function uses a non-reentrant model
 16058 ;;
 16059                           
 16060                           	psect	text49
 16061   0060AC                     __ptext49:
 16062                           	callstack 0
 16063   0060AC                     _xmit_datablock:
 16064                           	callstack 25
 16065   0060AC                     
 16066                           ;diskio.c: 166:  const BYTE *buff,;diskio.c: 167:  BYTE token;diskio.c: 169: {;diskio.c:
      +                           170:  BYTE resp;;diskio.c: 171:  WORD i;;diskio.c: 174:  if (!wait_ready()) return 0;
 16067   0060AC  EC52  F031         	call	_wait_ready	;wreg free
 16068   0060B0  0900               	iorlw	0
 16069   0060B2  A4D8               	btfss	status,2,c
 16070   0060B4  EF5E  F030         	goto	u4781
 16071   0060B8  EF60  F030         	goto	u4780
 16072   0060BC                     u4781:
 16073   0060BC  EF63  F030         	goto	l4175
 16074   0060C0                     u4780:
 16075   0060C0                     l4171:
 16076   0060C0  0E00               	movlw	0
 16077   0060C2  EF9F  F030         	goto	l125
 16078   0060C6                     l4175:
 16079                           
 16080                           ;diskio.c: 176:  SPI_Exchange8bit(token);
 16081   0060C6  5006               	movf	xmit_datablock@token^0,w,c
 16082   0060C8  ECFD  F032         	call	_SPI_Exchange8bit
 16083   0060CC                     
 16084                           ;diskio.c: 177:  if (token != 0xFD) {
 16085   0060CC  0EFD               	movlw	253
 16086   0060CE  1806               	xorwf	xmit_datablock@token^0,w,c
 16087   0060D0  B4D8               	btfsc	status,2,c
 16088   0060D2  EF6D  F030         	goto	u4791
 16089   0060D6  EF6F  F030         	goto	u4790
 16090   0060DA                     u4791:
 16091   0060DA  EF9E  F030         	goto	l4195
 16092   0060DE                     u4790:
 16093   0060DE                     
 16094                           ;diskio.c: 178:   i = 512;
 16095   0060DE  0E02               	movlw	2
 16096   0060E0  6E08               	movwf	(xmit_datablock@i+1)^0,c
 16097   0060E2  0E00               	movlw	0
 16098   0060E4  6E07               	movwf	xmit_datablock@i^0,c
 16099   0060E6                     l4181:
 16100                           
 16101                           ;diskio.c: 180:    SPI_Exchange8bit(*buff++);
 16102   0060E6  C004  FFD9         	movff	xmit_datablock@buff,fsr2l
 16103   0060EA  C005  FFDA         	movff	xmit_datablock@buff+1,fsr2h
 16104   0060EE  50DF               	movf	indf2,w,c
 16105   0060F0  ECFD  F032         	call	_SPI_Exchange8bit
 16106   0060F4  4A04               	infsnz	xmit_datablock@buff^0,f,c
 16107   0060F6  2A05               	incf	(xmit_datablock@buff+1)^0,f,c
 16108   0060F8  0607               	decf	xmit_datablock@i^0,f,c
 16109   0060FA  A0D8               	btfss	status,0,c
 16110   0060FC  0608               	decf	(xmit_datablock@i+1)^0,f,c
 16111   0060FE  5007               	movf	xmit_datablock@i^0,w,c
 16112   006100  1008               	iorwf	(xmit_datablock@i+1)^0,w,c
 16113   006102  A4D8               	btfss	status,2,c
 16114   006104  EF86  F030         	goto	u4801
 16115   006108  EF88  F030         	goto	u4800
 16116   00610C                     u4801:
 16117   00610C  EF73  F030         	goto	l4181
 16118   006110                     u4800:
 16119   006110                     
 16120                           ;diskio.c: 182:   SPI_Exchange8bit(0xFF);
 16121   006110  0EFF               	movlw	255
 16122   006112  ECFD  F032         	call	_SPI_Exchange8bit
 16123                           
 16124                           ;diskio.c: 183:   SPI_Exchange8bit(0xFF);
 16125   006116  0EFF               	movlw	255
 16126   006118  ECFD  F032         	call	_SPI_Exchange8bit
 16127                           
 16128                           ;diskio.c: 184:   resp = SPI_Exchange8bit(0xFF);
 16129   00611C  0EFF               	movlw	255
 16130   00611E  ECFD  F032         	call	_SPI_Exchange8bit
 16131   006122  6E09               	movwf	xmit_datablock@resp^0,c
 16132   006124                     
 16133                           ;diskio.c: 185:   if ((resp & 0x1F) != 0x05)
 16134   006124  5009               	movf	xmit_datablock@resp^0,w,c
 16135   006126  0B1F               	andlw	31
 16136   006128  0A05               	xorlw	5
 16137   00612A  B4D8               	btfsc	status,2,c
 16138   00612C  EF9A  F030         	goto	u4811
 16139   006130  EF9C  F030         	goto	u4810
 16140   006134                     u4811:
 16141   006134  EF9E  F030         	goto	l4195
 16142   006138                     u4810:
 16143   006138  EF60  F030         	goto	l4171
 16144   00613C                     l4195:
 16145                           
 16146                           ;diskio.c: 189:  return 1;
 16147   00613C  0E01               	movlw	1
 16148   00613E                     l125:
 16149   00613E  0012               	return		;funcret
 16150   006140                     __end_of_xmit_datablock:
 16151                           	callstack 0
 16152                           
 16153 ;; *************** function _disk_read *****************
 16154 ;; Defined at:
 16155 ;;		line 380 in file "diskio.c"
 16156 ;; Parameters:    Size  Location     Type
 16157 ;;  pdrv            1    wreg     unsigned char 
 16158 ;;  buff            2   16[COMRAM] PTR unsigned char 
 16159 ;;		 -> FatFs(558), NULL(0), 
 16160 ;;  sector          4   18[COMRAM] unsigned long 
 16161 ;;  count           2   22[COMRAM] unsigned short 
 16162 ;; Auto vars:     Size  Location     Type
 16163 ;;  pdrv            1   24[COMRAM] unsigned char 
 16164 ;;  cmd             1   27[COMRAM] unsigned char 
 16165 ;; Return value:  Size  Location     Type
 16166 ;;                  1    wreg      enum E45
 16167 ;; Registers used:
 16168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16169 ;; Tracked objects:
 16170 ;;		On entry : 0/0
 16171 ;;		On exit  : 0/0
 16172 ;;		Unchanged: 0/0
 16173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16174 ;;      Params:         8       0       0       0       0       0       0
 16175 ;;      Locals:         4       0       0       0       0       0       0
 16176 ;;      Temps:          0       0       0       0       0       0       0
 16177 ;;      Totals:        12       0       0       0       0       0       0
 16178 ;;Total ram usage:       12 bytes
 16179 ;; Hardware stack levels used: 1
 16180 ;; Hardware stack levels required when called: 5
 16181 ;; This function calls:
 16182 ;;		_deselect
 16183 ;;		_rcvr_datablock
 16184 ;;		_send_cmd
 16185 ;; This function is called by:
 16186 ;;		_move_window
 16187 ;;		_f_read
 16188 ;; This function uses a non-reentrant model
 16189 ;;
 16190                           
 16191                           	psect	text50
 16192   005248                     __ptext50:
 16193                           	callstack 0
 16194   005248                     _disk_read:
 16195                           	callstack 23
 16196                           
 16197                           ;incstack = 0
 16198                           ;disk_read@pdrv stored from wreg
 16199   005248  6E19               	movwf	disk_read@pdrv^0,c
 16200   00524A                     
 16201                           ;diskio.c: 381:  BYTE pdrv,;diskio.c: 382:  BYTE *buff,;diskio.c: 383:  DWORD sector,;di
      +                          skio.c: 384:  UINT count;diskio.c: 386: {;diskio.c: 387:  BYTE cmd;;diskio.c: 390:  if (
      +                          pdrv || !count) return RES_PARERR;
 16202   00524A  5019               	movf	disk_read@pdrv^0,w,c
 16203   00524C  A4D8               	btfss	status,2,c
 16204   00524E  EF2B  F029         	goto	u5041
 16205   005252  EF2D  F029         	goto	u5040
 16206   005256                     u5041:
 16207   005256  EF36  F029         	goto	l4293
 16208   00525A                     u5040:
 16209   00525A  5017               	movf	disk_read@count^0,w,c
 16210   00525C  1018               	iorwf	(disk_read@count+1)^0,w,c
 16211   00525E  A4D8               	btfss	status,2,c
 16212   005260  EF34  F029         	goto	u5051
 16213   005264  EF36  F029         	goto	u5050
 16214   005268                     u5051:
 16215   005268  EF39  F029         	goto	l188
 16216   00526C                     u5050:
 16217   00526C                     l4293:
 16218   00526C  0E04               	movlw	4
 16219   00526E  EFC1  F029         	goto	l191
 16220   005272                     l188:
 16221                           
 16222                           ;diskio.c: 391:  if (Stat & 0x01) return RES_NOTRDY;
 16223   005272  0100               	movlb	0	; () banked
 16224   005274  A1FA               	btfss	_Stat& (0+255),0,b
 16225   005276  EF3F  F029         	goto	u5061
 16226   00527A  EF41  F029         	goto	u5060
 16227   00527E                     u5061:
 16228   00527E  EF44  F029         	goto	l192
 16229   005282                     u5060:
 16230   005282                     
 16231                           ; BSR set to: 0
 16232   005282  0E03               	movlw	3
 16233   005284  EFC1  F029         	goto	l191
 16234   005288                     l192:
 16235                           
 16236                           ; BSR set to: 0
 16237                           ;diskio.c: 393:  if (!(CardType & 0x08)) sector *= 512;
 16238   005288  B7F9               	btfsc	_CardType& (0+255),3,b
 16239   00528A  EF49  F029         	goto	u5071
 16240   00528E  EF4B  F029         	goto	u5070
 16241   005292                     u5071:
 16242   005292  EF54  F029         	goto	l193
 16243   005296                     u5070:
 16244   005296                     
 16245                           ; BSR set to: 0
 16246   005296  0E09               	movlw	9
 16247   005298                     u5085:
 16248   005298  90D8               	bcf	status,0,c
 16249   00529A  3613               	rlcf	disk_read@sector^0,f,c
 16250   00529C  3614               	rlcf	(disk_read@sector+1)^0,f,c
 16251   00529E  3615               	rlcf	(disk_read@sector+2)^0,f,c
 16252   0052A0  3616               	rlcf	(disk_read@sector+3)^0,f,c
 16253   0052A2  2EE8               	decfsz	wreg,f,c
 16254   0052A4  EF4C  F029         	goto	u5085
 16255   0052A8                     l193:
 16256                           
 16257                           ; BSR set to: 0
 16258                           ;diskio.c: 395:  cmd = count > 1 ? (18) : (17);
 16259   0052A8  5018               	movf	(disk_read@count+1)^0,w,c
 16260   0052AA  E107               	bnz	u5091
 16261   0052AC  0E02               	movlw	2
 16262   0052AE  5C17               	subwf	disk_read@count^0,w,c
 16263   0052B0  B0D8               	btfsc	status,0,c
 16264   0052B2  EF5D  F029         	goto	u5091
 16265   0052B6  EF5F  F029         	goto	u5090
 16266   0052BA                     u5091:
 16267   0052BA  EF65  F029         	goto	l4305
 16268   0052BE                     u5090:
 16269   0052BE                     
 16270                           ; BSR set to: 0
 16271   0052BE  0E00               	movlw	0
 16272   0052C0  6E1B               	movwf	(_disk_read$450+1)^0,c
 16273   0052C2  0E11               	movlw	17
 16274   0052C4  6E1A               	movwf	_disk_read$450^0,c
 16275   0052C6  EF69  F029         	goto	l4307
 16276   0052CA                     l4305:
 16277                           
 16278                           ; BSR set to: 0
 16279   0052CA  0E00               	movlw	0
 16280   0052CC  6E1B               	movwf	(_disk_read$450+1)^0,c
 16281   0052CE  0E12               	movlw	18
 16282   0052D0  6E1A               	movwf	_disk_read$450^0,c
 16283   0052D2                     l4307:
 16284                           
 16285                           ; BSR set to: 0
 16286   0052D2  C01A  F01C         	movff	_disk_read$450,disk_read@cmd
 16287   0052D6                     
 16288                           ; BSR set to: 0
 16289                           ;diskio.c: 396:  if (send_cmd(cmd, sector) == 0) {
 16290   0052D6  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 16291   0052DA  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 16292   0052DE  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 16293   0052E2  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 16294   0052E6  501C               	movf	disk_read@cmd^0,w,c
 16295   0052E8  ECAF  F031         	call	_send_cmd
 16296   0052EC  0900               	iorlw	0
 16297   0052EE  A4D8               	btfss	status,2,c
 16298   0052F0  EF7C  F029         	goto	u5101
 16299   0052F4  EF7E  F029         	goto	u5100
 16300   0052F8                     u5101:
 16301   0052F8  EFB4  F029         	goto	l4321
 16302   0052FC                     u5100:
 16303   0052FC                     l4311:
 16304                           
 16305                           ;diskio.c: 398:    if (!rcvr_datablock(buff, 512)) break;
 16306   0052FC  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 16307   005300  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 16308   005304  0E02               	movlw	2
 16309   005306  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 16310   005308  0E00               	movlw	0
 16311   00530A  6E04               	movwf	rcvr_datablock@btr^0,c
 16312   00530C  ECBD  F02F         	call	_rcvr_datablock	;wreg free
 16313   005310  0900               	iorlw	0
 16314   005312  A4D8               	btfss	status,2,c
 16315   005314  EF8E  F029         	goto	u5111
 16316   005318  EF90  F029         	goto	u5110
 16317   00531C                     u5111:
 16318   00531C  EF92  F029         	goto	l4315
 16319   005320                     u5110:
 16320   005320  EFA0  F029         	goto	l4317
 16321   005324                     l4315:
 16322                           
 16323                           ;diskio.c: 399:    buff += 512;
 16324   005324  0E02               	movlw	2
 16325   005326  2612               	addwf	(disk_read@buff+1)^0,f,c
 16326                           
 16327                           ;diskio.c: 400:   } while (--count);
 16328   005328  0617               	decf	disk_read@count^0,f,c
 16329   00532A  A0D8               	btfss	status,0,c
 16330   00532C  0618               	decf	(disk_read@count+1)^0,f,c
 16331   00532E  5017               	movf	disk_read@count^0,w,c
 16332   005330  1018               	iorwf	(disk_read@count+1)^0,w,c
 16333   005332  A4D8               	btfss	status,2,c
 16334   005334  EF9E  F029         	goto	u5121
 16335   005338  EFA0  F029         	goto	u5120
 16336   00533C                     u5121:
 16337   00533C  EF7E  F029         	goto	l4311
 16338   005340                     u5120:
 16339   005340                     l4317:
 16340                           
 16341                           ;diskio.c: 401:   if (cmd == (18)) send_cmd((12), 0);
 16342   005340  0E12               	movlw	18
 16343   005342  181C               	xorwf	disk_read@cmd^0,w,c
 16344   005344  A4D8               	btfss	status,2,c
 16345   005346  EFA7  F029         	goto	u5131
 16346   00534A  EFA9  F029         	goto	u5130
 16347   00534E                     u5131:
 16348   00534E  EFB4  F029         	goto	l4321
 16349   005352                     u5130:
 16350   005352  0E00               	movlw	0
 16351   005354  6E0B               	movwf	send_cmd@arg^0,c
 16352   005356  0E00               	movlw	0
 16353   005358  6E0C               	movwf	(send_cmd@arg+1)^0,c
 16354   00535A  0E00               	movlw	0
 16355   00535C  6E0D               	movwf	(send_cmd@arg+2)^0,c
 16356   00535E  0E00               	movlw	0
 16357   005360  6E0E               	movwf	(send_cmd@arg+3)^0,c
 16358   005362  0E0C               	movlw	12
 16359   005364  ECAF  F031         	call	_send_cmd
 16360   005368                     l4321:
 16361                           
 16362                           ;diskio.c: 403:  deselect();
 16363   005368  EC2D  F033         	call	_deselect	;wreg free
 16364   00536C                     
 16365                           ;diskio.c: 405:  return count ? RES_ERROR : RES_OK;
 16366   00536C  5017               	movf	disk_read@count^0,w,c
 16367   00536E  1018               	iorwf	(disk_read@count+1)^0,w,c
 16368   005370  A4D8               	btfss	status,2,c
 16369   005372  EFBD  F029         	goto	u5141
 16370   005376  EFC0  F029         	goto	u5140
 16371   00537A                     u5141:
 16372   00537A  0E01               	movlw	1
 16373   00537C  EFC1  F029         	goto	u5150
 16374   005380                     u5140:
 16375   005380  0E00               	movlw	0
 16376   005382                     u5150:
 16377   005382                     l191:
 16378   005382  0012               	return		;funcret
 16379   005384                     __end_of_disk_read:
 16380                           	callstack 0
 16381                           
 16382 ;; *************** function _send_cmd *****************
 16383 ;; Defined at:
 16384 ;;		line 241 in file "diskio.c"
 16385 ;; Parameters:    Size  Location     Type
 16386 ;;  cmd             1    wreg     unsigned char 
 16387 ;;  arg             4   10[COMRAM] unsigned long 
 16388 ;; Auto vars:     Size  Location     Type
 16389 ;;  cmd             1   14[COMRAM] unsigned char 
 16390 ;;  res             1   15[COMRAM] unsigned char 
 16391 ;; Return value:  Size  Location     Type
 16392 ;;                  1    wreg      unsigned char 
 16393 ;; Registers used:
 16394 ;;		wreg, status,2, status,0, cstack
 16395 ;; Tracked objects:
 16396 ;;		On entry : 0/0
 16397 ;;		On exit  : 0/0
 16398 ;;		Unchanged: 0/0
 16399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16400 ;;      Params:         4       0       0       0       0       0       0
 16401 ;;      Locals:         2       0       0       0       0       0       0
 16402 ;;      Temps:          0       0       0       0       0       0       0
 16403 ;;      Totals:         6       0       0       0       0       0       0
 16404 ;;Total ram usage:        6 bytes
 16405 ;; Hardware stack levels used: 1
 16406 ;; Hardware stack levels required when called: 4
 16407 ;; This function calls:
 16408 ;;		___send_cmd
 16409 ;; This function is called by:
 16410 ;;		_disk_initialize
 16411 ;;		_disk_read
 16412 ;;		_disk_write
 16413 ;;		_disk_ioctl
 16414 ;; This function uses a non-reentrant model
 16415 ;;
 16416                           
 16417                           	psect	text51
 16418   00635E                     __ptext51:
 16419                           	callstack 0
 16420   00635E                     _send_cmd:
 16421                           	callstack 23
 16422                           
 16423                           ;incstack = 0
 16424                           ;send_cmd@cmd stored from wreg
 16425   00635E  6E0F               	movwf	send_cmd@cmd^0,c
 16426   006360                     
 16427                           ;diskio.c: 242:  BYTE cmd,;diskio.c: 243:  DWORD arg;diskio.c: 245: {;diskio.c: 249:  BY
      +                          TE res;;diskio.c: 252:  if (cmd & 0x80) {
 16428   006360  AE0F               	btfss	send_cmd@cmd^0,7,c
 16429   006362  EFB5  F031         	goto	u4821
 16430   006366  EFB7  F031         	goto	u4820
 16431   00636A                     u4821:
 16432   00636A  EFCF  F031         	goto	l4211
 16433   00636E                     u4820:
 16434   00636E                     
 16435                           ;diskio.c: 253:   cmd &= 0x7F;
 16436   00636E  9E0F               	bcf	send_cmd@cmd^0,7,c
 16437   006370                     
 16438                           ;diskio.c: 255:   res = __send_cmd((55), 0);
 16439   006370  0E00               	movlw	0
 16440   006372  6E04               	movwf	___send_cmd@arg^0,c
 16441   006374  0E00               	movlw	0
 16442   006376  6E05               	movwf	(___send_cmd@arg+1)^0,c
 16443   006378  0E00               	movlw	0
 16444   00637A  6E06               	movwf	(___send_cmd@arg+2)^0,c
 16445   00637C  0E00               	movlw	0
 16446   00637E  6E07               	movwf	(___send_cmd@arg+3)^0,c
 16447   006380  0E37               	movlw	55
 16448   006382  EC56  F02E         	call	___send_cmd
 16449   006386  6E10               	movwf	send_cmd@res^0,c
 16450   006388                     
 16451                           ;diskio.c: 259:   if (res > 1) return res;
 16452   006388  0E01               	movlw	1
 16453   00638A  6410               	cpfsgt	send_cmd@res^0,c
 16454   00638C  EFCA  F031         	goto	u4831
 16455   006390  EFCC  F031         	goto	u4830
 16456   006394                     u4831:
 16457   006394  EFCF  F031         	goto	l4211
 16458   006398                     u4830:
 16459   006398  5010               	movf	send_cmd@res^0,w,c
 16460   00639A  EFDA  F031         	goto	l146
 16461   00639E                     l4211:
 16462                           
 16463                           ;diskio.c: 263:  return __send_cmd(cmd, arg);
 16464   00639E  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 16465   0063A2  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 16466   0063A6  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 16467   0063AA  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 16468   0063AE  500F               	movf	send_cmd@cmd^0,w,c
 16469   0063B0  EC56  F02E         	call	___send_cmd
 16470   0063B4                     l146:
 16471   0063B4  0012               	return		;funcret
 16472   0063B6                     __end_of_send_cmd:
 16473                           	callstack 0
 16474                           
 16475 ;; *************** function ___send_cmd *****************
 16476 ;; Defined at:
 16477 ;;		line 204 in file "diskio.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;  cmd             1    wreg     unsigned char 
 16480 ;;  arg             4    3[COMRAM] unsigned long 
 16481 ;; Auto vars:     Size  Location     Type
 16482 ;;  cmd             1    9[COMRAM] unsigned char 
 16483 ;;  n               1    8[COMRAM] unsigned char 
 16484 ;;  res             1    7[COMRAM] unsigned char 
 16485 ;; Return value:  Size  Location     Type
 16486 ;;                  1    wreg      unsigned char 
 16487 ;; Registers used:
 16488 ;;		wreg, status,2, status,0, cstack
 16489 ;; Tracked objects:
 16490 ;;		On entry : 0/0
 16491 ;;		On exit  : 0/0
 16492 ;;		Unchanged: 0/0
 16493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16494 ;;      Params:         4       0       0       0       0       0       0
 16495 ;;      Locals:         3       0       0       0       0       0       0
 16496 ;;      Temps:          0       0       0       0       0       0       0
 16497 ;;      Totals:         7       0       0       0       0       0       0
 16498 ;;Total ram usage:        7 bytes
 16499 ;; Hardware stack levels used: 1
 16500 ;; Hardware stack levels required when called: 3
 16501 ;; This function calls:
 16502 ;;		_SPI_Exchange8bit
 16503 ;;		_deselect
 16504 ;;		_select
 16505 ;; This function is called by:
 16506 ;;		_send_cmd
 16507 ;; This function uses a non-reentrant model
 16508 ;;
 16509                           
 16510                           	psect	text52
 16511   005CAC                     __ptext52:
 16512                           	callstack 0
 16513   005CAC                     ___send_cmd:
 16514                           	callstack 23
 16515                           
 16516                           ;incstack = 0
 16517                           ;___send_cmd@cmd stored from wreg
 16518   005CAC  6E0A               	movwf	___send_cmd@cmd^0,c
 16519   005CAE                     
 16520                           ;diskio.c: 205:  BYTE cmd,;diskio.c: 206:  DWORD arg;diskio.c: 208: {;diskio.c: 209:  BY
      +                          TE n, res;;diskio.c: 213:  if (cmd != (12)) {
 16521   005CAE  0E0C               	movlw	12
 16522   005CB0  180A               	xorwf	___send_cmd@cmd^0,w,c
 16523   005CB2  B4D8               	btfsc	status,2,c
 16524   005CB4  EF5E  F02E         	goto	u4721
 16525   005CB8  EF60  F02E         	goto	u4720
 16526   005CBC                     u4721:
 16527   005CBC  EF6F  F02E         	goto	l4131
 16528   005CC0                     u4720:
 16529   005CC0                     
 16530                           ;diskio.c: 214:   deselect();
 16531   005CC0  EC2D  F033         	call	_deselect	;wreg free
 16532   005CC4                     
 16533                           ;diskio.c: 215:   if (!select()) return 0xFF;
 16534   005CC4  ECC7  F032         	call	_select	;wreg free
 16535   005CC8  0900               	iorlw	0
 16536   005CCA  A4D8               	btfss	status,2,c
 16537   005CCC  EF6A  F02E         	goto	u4731
 16538   005CD0  EF6C  F02E         	goto	u4730
 16539   005CD4                     u4731:
 16540   005CD4  EF6F  F02E         	goto	l4131
 16541   005CD8                     u4730:
 16542   005CD8  0EFF               	movlw	255
 16543   005CDA  EFB6  F02E         	goto	l134
 16544   005CDE                     l4131:
 16545                           
 16546                           ;diskio.c: 219:  SPI_Exchange8bit(0x40 | cmd);
 16547   005CDE  500A               	movf	___send_cmd@cmd^0,w,c
 16548   005CE0  0940               	iorlw	64
 16549   005CE2  ECFD  F032         	call	_SPI_Exchange8bit
 16550   005CE6                     
 16551                           ;diskio.c: 220:  SPI_Exchange8bit((BYTE)(arg >> 24));
 16552   005CE6  5007               	movf	(___send_cmd@arg+3)^0,w,c
 16553   005CE8  ECFD  F032         	call	_SPI_Exchange8bit
 16554   005CEC                     
 16555                           ;diskio.c: 221:  SPI_Exchange8bit((BYTE)(arg >> 16));
 16556   005CEC  5006               	movf	(___send_cmd@arg+2)^0,w,c
 16557   005CEE  ECFD  F032         	call	_SPI_Exchange8bit
 16558   005CF2                     
 16559                           ;diskio.c: 222:  SPI_Exchange8bit((BYTE)(arg >> 8));
 16560   005CF2  5005               	movf	(___send_cmd@arg+1)^0,w,c
 16561   005CF4  ECFD  F032         	call	_SPI_Exchange8bit
 16562   005CF8                     
 16563                           ;diskio.c: 223:  SPI_Exchange8bit((BYTE)arg);
 16564   005CF8  5004               	movf	___send_cmd@arg^0,w,c
 16565   005CFA  ECFD  F032         	call	_SPI_Exchange8bit
 16566   005CFE                     
 16567                           ;diskio.c: 224:  n = 0x01;
 16568   005CFE  0E01               	movlw	1
 16569   005D00  6E09               	movwf	___send_cmd@n^0,c
 16570   005D02                     
 16571                           ;diskio.c: 225:  if (cmd == (0)) n = 0x95;
 16572   005D02  500A               	movf	___send_cmd@cmd^0,w,c
 16573   005D04  A4D8               	btfss	status,2,c
 16574   005D06  EF87  F02E         	goto	u4741
 16575   005D0A  EF89  F02E         	goto	u4740
 16576   005D0E                     u4741:
 16577   005D0E  EF8B  F02E         	goto	l4147
 16578   005D12                     u4740:
 16579   005D12  0E95               	movlw	149
 16580   005D14  6E09               	movwf	___send_cmd@n^0,c
 16581   005D16                     l4147:
 16582                           
 16583                           ;diskio.c: 226:  if (cmd == (8)) n = 0x87;
 16584   005D16  0E08               	movlw	8
 16585   005D18  180A               	xorwf	___send_cmd@cmd^0,w,c
 16586   005D1A  A4D8               	btfss	status,2,c
 16587   005D1C  EF92  F02E         	goto	u4751
 16588   005D20  EF94  F02E         	goto	u4750
 16589   005D24                     u4751:
 16590   005D24  EF96  F02E         	goto	l4151
 16591   005D28                     u4750:
 16592   005D28  0E87               	movlw	135
 16593   005D2A  6E09               	movwf	___send_cmd@n^0,c
 16594   005D2C                     l4151:
 16595                           
 16596                           ;diskio.c: 227:  SPI_Exchange8bit(n);
 16597   005D2C  5009               	movf	___send_cmd@n^0,w,c
 16598   005D2E  ECFD  F032         	call	_SPI_Exchange8bit
 16599   005D32                     
 16600                           ;diskio.c: 230:  if (cmd == (12)) SPI_Exchange8bit(0xFF);
 16601   005D32  0E0C               	movlw	12
 16602   005D34  180A               	xorwf	___send_cmd@cmd^0,w,c
 16603   005D36  A4D8               	btfss	status,2,c
 16604   005D38  EFA0  F02E         	goto	u4761
 16605   005D3C  EFA2  F02E         	goto	u4760
 16606   005D40                     u4761:
 16607   005D40  EFA5  F02E         	goto	l4157
 16608   005D44                     u4760:
 16609   005D44  0EFF               	movlw	255
 16610   005D46  ECFD  F032         	call	_SPI_Exchange8bit
 16611   005D4A                     l4157:
 16612                           
 16613                           ;diskio.c: 231:  n = 10;
 16614   005D4A  0E0A               	movlw	10
 16615   005D4C  6E09               	movwf	___send_cmd@n^0,c
 16616   005D4E                     l4159:
 16617                           
 16618                           ;diskio.c: 233:   res = SPI_Exchange8bit(0xFF);
 16619   005D4E  0EFF               	movlw	255
 16620   005D50  ECFD  F032         	call	_SPI_Exchange8bit
 16621   005D54  6E08               	movwf	___send_cmd@res^0,c
 16622   005D56  AE08               	btfss	___send_cmd@res^0,7,c
 16623   005D58  EFB0  F02E         	goto	u4771
 16624   005D5C  EFB2  F02E         	goto	u4770
 16625   005D60                     u4771:
 16626   005D60  EFB5  F02E         	goto	l4165
 16627   005D64                     u4770:
 16628   005D64  2E09               	decfsz	___send_cmd@n^0,f,c
 16629   005D66  EFA7  F02E         	goto	l4159
 16630   005D6A                     l4165:
 16631                           
 16632                           ;diskio.c: 236:  return res;
 16633   005D6A  5008               	movf	___send_cmd@res^0,w,c
 16634   005D6C                     l134:
 16635   005D6C  0012               	return		;funcret
 16636   005D6E                     __end_of___send_cmd:
 16637                           	callstack 0
 16638                           
 16639 ;; *************** function _select *****************
 16640 ;; Defined at:
 16641 ;;		line 115 in file "diskio.c"
 16642 ;; Parameters:    Size  Location     Type
 16643 ;;		None
 16644 ;; Auto vars:     Size  Location     Type
 16645 ;;		None
 16646 ;; Return value:  Size  Location     Type
 16647 ;;                  1    wreg      unsigned char 
 16648 ;; Registers used:
 16649 ;;		wreg, status,2, status,0, cstack
 16650 ;; Tracked objects:
 16651 ;;		On entry : 0/0
 16652 ;;		On exit  : 0/0
 16653 ;;		Unchanged: 0/0
 16654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16655 ;;      Params:         0       0       0       0       0       0       0
 16656 ;;      Locals:         0       0       0       0       0       0       0
 16657 ;;      Temps:          0       0       0       0       0       0       0
 16658 ;;      Totals:         0       0       0       0       0       0       0
 16659 ;;Total ram usage:        0 bytes
 16660 ;; Hardware stack levels used: 1
 16661 ;; Hardware stack levels required when called: 2
 16662 ;; This function calls:
 16663 ;;		_SPI_Exchange8bit
 16664 ;;		_deselect
 16665 ;;		_wait_ready
 16666 ;; This function is called by:
 16667 ;;		___send_cmd
 16668 ;;		_disk_ioctl
 16669 ;; This function uses a non-reentrant model
 16670 ;;
 16671                           
 16672                           	psect	text53
 16673   00658E                     __ptext53:
 16674                           	callstack 0
 16675   00658E                     _select:
 16676                           	callstack 23
 16677   00658E  948B               	bcf	3979,2,c	;volatile
 16678   006590                     
 16679                           ;diskio.c: 118:  SPI_Exchange8bit(0xFF);
 16680   006590  0EFF               	movlw	255
 16681   006592  ECFD  F032         	call	_SPI_Exchange8bit
 16682   006596                     
 16683                           ;diskio.c: 119:  if (wait_ready()) return 1;
 16684   006596  EC52  F031         	call	_wait_ready	;wreg free
 16685   00659A  0900               	iorlw	0
 16686   00659C  B4D8               	btfsc	status,2,c
 16687   00659E  EFD3  F032         	goto	u4711
 16688   0065A2  EFD5  F032         	goto	u4710
 16689   0065A6                     u4711:
 16690   0065A6  EFD8  F032         	goto	l4115
 16691   0065AA                     u4710:
 16692   0065AA  0E01               	movlw	1
 16693   0065AC  EFDB  F032         	goto	l111
 16694   0065B0                     l4115:
 16695                           
 16696                           ;diskio.c: 121:  deselect();
 16697   0065B0  EC2D  F033         	call	_deselect	;wreg free
 16698   0065B4                     
 16699                           ;diskio.c: 122:  return 0;
 16700   0065B4  0E00               	movlw	0
 16701   0065B6                     l111:
 16702   0065B6  0012               	return		;funcret
 16703   0065B8                     __end_of_select:
 16704                           	callstack 0
 16705                           
 16706 ;; *************** function _wait_ready *****************
 16707 ;; Defined at:
 16708 ;;		line 82 in file "diskio.c"
 16709 ;; Parameters:    Size  Location     Type
 16710 ;;		None
 16711 ;; Auto vars:     Size  Location     Type
 16712 ;;  tmr             2    1[COMRAM] unsigned short 
 16713 ;; Return value:  Size  Location     Type
 16714 ;;                  1    wreg      unsigned char 
 16715 ;; Registers used:
 16716 ;;		wreg, status,2, status,0, cstack
 16717 ;; Tracked objects:
 16718 ;;		On entry : 0/0
 16719 ;;		On exit  : 0/0
 16720 ;;		Unchanged: 0/0
 16721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16722 ;;      Params:         0       0       0       0       0       0       0
 16723 ;;      Locals:         2       0       0       0       0       0       0
 16724 ;;      Temps:          0       0       0       0       0       0       0
 16725 ;;      Totals:         2       0       0       0       0       0       0
 16726 ;;Total ram usage:        2 bytes
 16727 ;; Hardware stack levels used: 1
 16728 ;; Hardware stack levels required when called: 1
 16729 ;; This function calls:
 16730 ;;		_SPI_Exchange8bit
 16731 ;; This function is called by:
 16732 ;;		_select
 16733 ;;		_xmit_datablock
 16734 ;; This function uses a non-reentrant model
 16735 ;;
 16736                           
 16737                           	psect	text54
 16738   0062A4                     __ptext54:
 16739                           	callstack 0
 16740   0062A4                     _wait_ready:
 16741                           	callstack 25
 16742   0062A4                     
 16743                           ;diskio.c: 84:  UINT tmr;;diskio.c: 87:  for (tmr = 5000; tmr; tmr--) {
 16744   0062A4  0E13               	movlw	19
 16745   0062A6  6E03               	movwf	(wait_ready@tmr+1)^0,c
 16746   0062A8  0E88               	movlw	136
 16747   0062AA  6E02               	movwf	wait_ready@tmr^0,c
 16748   0062AC  EF6C  F031         	goto	l96
 16749   0062B0                     l4093:
 16750                           
 16751                           ;diskio.c: 88:   if (SPI_Exchange8bit(0xFF) == 0xFF) break;
 16752   0062B0  0EFF               	movlw	255
 16753   0062B2  ECFD  F032         	call	_SPI_Exchange8bit
 16754   0062B6  0AFF               	xorlw	255
 16755   0062B8  A4D8               	btfss	status,2,c
 16756   0062BA  EF61  F031         	goto	u4671
 16757   0062BE  EF63  F031         	goto	u4670
 16758   0062C2                     u4671:
 16759   0062C2  EF65  F031         	goto	l4097
 16760   0062C6                     u4670:
 16761   0062C6  EF75  F031         	goto	l4101
 16762   0062CA                     l4097:
 16763                           
 16764                           ;diskio.c: 89:   _delay((unsigned long)((100)*(8000000UL/4000000.0)));
 16765   0062CA  0E42               	movlw	66
 16766   0062CC                     u9687:
 16767   0062CC  2EE8               	decfsz	wreg,f,c
 16768   0062CE  D7FE               	bra	u9687
 16769   0062D0  D000               	nop2	
 16770   0062D2                     
 16771                           ;diskio.c: 90:  }
 16772   0062D2  0602               	decf	wait_ready@tmr^0,f,c
 16773   0062D4  A0D8               	btfss	status,0,c
 16774   0062D6  0603               	decf	(wait_ready@tmr+1)^0,f,c
 16775   0062D8                     l96:
 16776   0062D8  5002               	movf	wait_ready@tmr^0,w,c
 16777   0062DA  1003               	iorwf	(wait_ready@tmr+1)^0,w,c
 16778   0062DC  A4D8               	btfss	status,2,c
 16779   0062DE  EF73  F031         	goto	u4681
 16780   0062E2  EF75  F031         	goto	u4680
 16781   0062E6                     u4681:
 16782   0062E6  EF58  F031         	goto	l4093
 16783   0062EA                     u4680:
 16784   0062EA                     l4101:
 16785                           
 16786                           ;diskio.c: 92:  return tmr ? 1 : 0;
 16787   0062EA  5002               	movf	wait_ready@tmr^0,w,c
 16788   0062EC  1003               	iorwf	(wait_ready@tmr+1)^0,w,c
 16789   0062EE  A4D8               	btfss	status,2,c
 16790   0062F0  EF7C  F031         	goto	u4691
 16791   0062F4  EF7F  F031         	goto	u4690
 16792   0062F8                     u4691:
 16793   0062F8  0E01               	movlw	1
 16794   0062FA  EF80  F031         	goto	u4700
 16795   0062FE                     u4690:
 16796   0062FE  0E00               	movlw	0
 16797   006300                     u4700:
 16798   006300  0012               	return		;funcret
 16799   006302                     __end_of_wait_ready:
 16800                           	callstack 0
 16801                           
 16802 ;; *************** function _deselect *****************
 16803 ;; Defined at:
 16804 ;;		line 102 in file "diskio.c"
 16805 ;; Parameters:    Size  Location     Type
 16806 ;;		None
 16807 ;; Auto vars:     Size  Location     Type
 16808 ;;		None
 16809 ;; Return value:  Size  Location     Type
 16810 ;;                  1    wreg      void 
 16811 ;; Registers used:
 16812 ;;		wreg, status,2, cstack
 16813 ;; Tracked objects:
 16814 ;;		On entry : 0/0
 16815 ;;		On exit  : 0/0
 16816 ;;		Unchanged: 0/0
 16817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16818 ;;      Params:         0       0       0       0       0       0       0
 16819 ;;      Locals:         0       0       0       0       0       0       0
 16820 ;;      Temps:          0       0       0       0       0       0       0
 16821 ;;      Totals:         0       0       0       0       0       0       0
 16822 ;;Total ram usage:        0 bytes
 16823 ;; Hardware stack levels used: 1
 16824 ;; Hardware stack levels required when called: 1
 16825 ;; This function calls:
 16826 ;;		_SPI_Exchange8bit
 16827 ;; This function is called by:
 16828 ;;		_select
 16829 ;;		___send_cmd
 16830 ;;		_disk_initialize
 16831 ;;		_disk_read
 16832 ;;		_disk_write
 16833 ;;		_disk_ioctl
 16834 ;; This function uses a non-reentrant model
 16835 ;;
 16836                           
 16837                           	psect	text55
 16838   00665A                     __ptext55:
 16839                           	callstack 0
 16840   00665A                     _deselect:
 16841                           	callstack 23
 16842   00665A  848B               	bsf	3979,2,c	;volatile
 16843   00665C                     
 16844                           ;diskio.c: 105:  SPI_Exchange8bit(0xFF);
 16845   00665C  0EFF               	movlw	255
 16846   00665E  ECFD  F032         	call	_SPI_Exchange8bit
 16847   006662  0012               	return		;funcret
 16848   006664                     __end_of_deselect:
 16849                           	callstack 0
 16850                           
 16851 ;; *************** function _rcvr_datablock *****************
 16852 ;; Defined at:
 16853 ;;		line 132 in file "diskio.c"
 16854 ;; Parameters:    Size  Location     Type
 16855 ;;  buff            2    1[COMRAM] PTR unsigned char 
 16856 ;;		 -> FatFs(558), disk_ioctl@csd(16), NULL(0), 
 16857 ;;  btr             2    3[COMRAM] unsigned short 
 16858 ;; Auto vars:     Size  Location     Type
 16859 ;;  tmr             2    5[COMRAM] unsigned short 
 16860 ;;  token           1    7[COMRAM] unsigned char 
 16861 ;; Return value:  Size  Location     Type
 16862 ;;                  1    wreg      unsigned char 
 16863 ;; Registers used:
 16864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16865 ;; Tracked objects:
 16866 ;;		On entry : 0/0
 16867 ;;		On exit  : 0/0
 16868 ;;		Unchanged: 0/0
 16869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16870 ;;      Params:         4       0       0       0       0       0       0
 16871 ;;      Locals:         3       0       0       0       0       0       0
 16872 ;;      Temps:          0       0       0       0       0       0       0
 16873 ;;      Totals:         7       0       0       0       0       0       0
 16874 ;;Total ram usage:        7 bytes
 16875 ;; Hardware stack levels used: 1
 16876 ;; Hardware stack levels required when called: 1
 16877 ;; This function calls:
 16878 ;;		_SPI_Exchange8bit
 16879 ;; This function is called by:
 16880 ;;		_disk_read
 16881 ;;		_disk_ioctl
 16882 ;; This function uses a non-reentrant model
 16883 ;;
 16884                           
 16885                           	psect	text56
 16886   005F7A                     __ptext56:
 16887                           	callstack 0
 16888   005F7A                     _rcvr_datablock:
 16889                           	callstack 26
 16890   005F7A                     
 16891                           ;diskio.c: 133:  BYTE *buff,;diskio.c: 134:  UINT btr;diskio.c: 136: {;diskio.c: 137:  B
      +                          YTE token;;diskio.c: 138:  UINT tmr;;diskio.c: 141:  for (tmr = 2000; tmr; tmr--) {
 16892   005F7A  0E07               	movlw	7
 16893   005F7C  6E07               	movwf	(rcvr_datablock@tmr+1)^0,c
 16894   005F7E  0ED0               	movlw	208
 16895   005F80  6E06               	movwf	rcvr_datablock@tmr^0,c
 16896   005F82  EFD8  F02F         	goto	l114
 16897   005F86                     l4217:
 16898                           
 16899                           ;diskio.c: 142:   token = SPI_Exchange8bit(0xFF);
 16900   005F86  0EFF               	movlw	255
 16901   005F88  ECFD  F032         	call	_SPI_Exchange8bit
 16902   005F8C  6E08               	movwf	rcvr_datablock@token^0,c
 16903   005F8E                     
 16904                           ;diskio.c: 143:   if (token != 0xFF) break;
 16905   005F8E  2808               	incf	rcvr_datablock@token^0,w,c
 16906   005F90  B4D8               	btfsc	status,2,c
 16907   005F92  EFCD  F02F         	goto	u4841
 16908   005F96  EFCF  F02F         	goto	u4840
 16909   005F9A                     u4841:
 16910   005F9A  EFD1  F02F         	goto	l4223
 16911   005F9E                     u4840:
 16912   005F9E  EFE1  F02F         	goto	l4227
 16913   005FA2                     l4223:
 16914                           
 16915                           ;diskio.c: 144:   _delay((unsigned long)((100)*(8000000UL/4000000.0)));
 16916   005FA2  0E42               	movlw	66
 16917   005FA4                     u9697:
 16918   005FA4  2EE8               	decfsz	wreg,f,c
 16919   005FA6  D7FE               	bra	u9697
 16920   005FA8  D000               	nop2	
 16921   005FAA                     
 16922                           ;diskio.c: 145:  }
 16923   005FAA  0606               	decf	rcvr_datablock@tmr^0,f,c
 16924   005FAC  A0D8               	btfss	status,0,c
 16925   005FAE  0607               	decf	(rcvr_datablock@tmr+1)^0,f,c
 16926   005FB0                     l114:
 16927   005FB0  5006               	movf	rcvr_datablock@tmr^0,w,c
 16928   005FB2  1007               	iorwf	(rcvr_datablock@tmr+1)^0,w,c
 16929   005FB4  A4D8               	btfss	status,2,c
 16930   005FB6  EFDF  F02F         	goto	u4851
 16931   005FBA  EFE1  F02F         	goto	u4850
 16932   005FBE                     u4851:
 16933   005FBE  EFC3  F02F         	goto	l4217
 16934   005FC2                     u4850:
 16935   005FC2                     l4227:
 16936                           
 16937                           ;diskio.c: 146:  if (token != 0xFE) return 0;
 16938   005FC2  0EFE               	movlw	254
 16939   005FC4  1808               	xorwf	rcvr_datablock@token^0,w,c
 16940   005FC6  B4D8               	btfsc	status,2,c
 16941   005FC8  EFE8  F02F         	goto	u4861
 16942   005FCC  EFEA  F02F         	goto	u4860
 16943   005FD0                     u4861:
 16944   005FD0  EFED  F02F         	goto	l4233
 16945   005FD4                     u4860:
 16946   005FD4  0E00               	movlw	0
 16947   005FD6  EF0A  F030         	goto	l119
 16948   005FDA                     l4233:
 16949                           
 16950                           ;diskio.c: 149:   *buff++ = SPI_Exchange8bit(0xFF);
 16951   005FDA  0EFF               	movlw	255
 16952   005FDC  ECFD  F032         	call	_SPI_Exchange8bit
 16953   005FE0  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 16954   005FE4  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 16955   005FE8  6EDF               	movwf	indf2,c
 16956   005FEA  4A02               	infsnz	rcvr_datablock@buff^0,f,c
 16957   005FEC  2A03               	incf	(rcvr_datablock@buff+1)^0,f,c
 16958   005FEE  0604               	decf	rcvr_datablock@btr^0,f,c
 16959   005FF0  A0D8               	btfss	status,0,c
 16960   005FF2  0605               	decf	(rcvr_datablock@btr+1)^0,f,c
 16961   005FF4  5004               	movf	rcvr_datablock@btr^0,w,c
 16962   005FF6  1005               	iorwf	(rcvr_datablock@btr+1)^0,w,c
 16963   005FF8  A4D8               	btfss	status,2,c
 16964   005FFA  EF01  F030         	goto	u4871
 16965   005FFE  EF03  F030         	goto	u4870
 16966   006002                     u4871:
 16967   006002  EFED  F02F         	goto	l4233
 16968   006006                     u4870:
 16969   006006                     
 16970                           ;diskio.c: 151:  SPI_Exchange8bit(0xFF);
 16971   006006  0EFF               	movlw	255
 16972   006008  ECFD  F032         	call	_SPI_Exchange8bit
 16973                           
 16974                           ;diskio.c: 152:  SPI_Exchange8bit(0xFF);
 16975   00600C  0EFF               	movlw	255
 16976   00600E  ECFD  F032         	call	_SPI_Exchange8bit
 16977   006012                     
 16978                           ;diskio.c: 154:  return 1;
 16979   006012  0E01               	movlw	1
 16980   006014                     l119:
 16981   006014  0012               	return		;funcret
 16982   006016                     __end_of_rcvr_datablock:
 16983                           	callstack 0
 16984                           
 16985 ;; *************** function _SPI_Exchange8bit *****************
 16986 ;; Defined at:
 16987 ;;		line 80 in file "mcc_generated_files/spi.c"
 16988 ;; Parameters:    Size  Location     Type
 16989 ;;  data            1    wreg     unsigned char 
 16990 ;; Auto vars:     Size  Location     Type
 16991 ;;  data            1    0[COMRAM] unsigned char 
 16992 ;; Return value:  Size  Location     Type
 16993 ;;                  1    wreg      unsigned char 
 16994 ;; Registers used:
 16995 ;;		wreg, status,2
 16996 ;; Tracked objects:
 16997 ;;		On entry : 0/0
 16998 ;;		On exit  : 0/0
 16999 ;;		Unchanged: 0/0
 17000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17001 ;;      Params:         0       0       0       0       0       0       0
 17002 ;;      Locals:         1       0       0       0       0       0       0
 17003 ;;      Temps:          0       0       0       0       0       0       0
 17004 ;;      Totals:         1       0       0       0       0       0       0
 17005 ;;Total ram usage:        1 bytes
 17006 ;; Hardware stack levels used: 1
 17007 ;; This function calls:
 17008 ;;		Nothing
 17009 ;; This function is called by:
 17010 ;;		_wait_ready
 17011 ;;		_deselect
 17012 ;;		_select
 17013 ;;		_rcvr_datablock
 17014 ;;		_xmit_datablock
 17015 ;;		___send_cmd
 17016 ;;		_disk_initialize
 17017 ;;		_disk_ioctl
 17018 ;;		_SPI_Exchange8bitBuffer
 17019 ;; This function uses a non-reentrant model
 17020 ;;
 17021                           
 17022                           	psect	text57
 17023   0065FA                     __ptext57:
 17024                           	callstack 0
 17025   0065FA                     _SPI_Exchange8bit:
 17026                           	callstack 25
 17027                           
 17028                           ;incstack = 0
 17029                           ;SPI_Exchange8bit@data stored from wreg
 17030   0065FA  6E01               	movwf	SPI_Exchange8bit@data^0,c
 17031   0065FC                     
 17032                           ;mcc_generated_files/spi.c: 82:     SSPCON1bits.WCOL = 0;
 17033   0065FC  9EC6               	bcf	198,7,c	;volatile
 17034   0065FE                     
 17035                           ;mcc_generated_files/spi.c: 84:     SSPBUF = data;
 17036   0065FE  C001  FFC9         	movff	SPI_Exchange8bit@data,4041	;volatile
 17037   006602                     l21:
 17038                           
 17039                           ;mcc_generated_files/spi.c: 86:     while (SSPSTATbits.BF == 0x0) {
 17040   006602  A0C7               	btfss	199,0,c	;volatile
 17041   006604  EF06  F033         	goto	u4661
 17042   006608  EF08  F033         	goto	u4660
 17043   00660C                     u4661:
 17044   00660C  EF01  F033         	goto	l21
 17045   006610                     u4660:
 17046   006610                     
 17047                           ;mcc_generated_files/spi.c: 89:     return (SSPBUF);
 17048   006610  50C9               	movf	201,w,c	;volatile
 17049   006612  0012               	return		;funcret
 17050   006614                     __end_of_SPI_Exchange8bit:
 17051                           	callstack 0
 17052                           
 17053 ;; *************** function _SYSTEM_Initialize *****************
 17054 ;; Defined at:
 17055 ;;		line 107 in file "mcc_generated_files/mcc.c"
 17056 ;; Parameters:    Size  Location     Type
 17057 ;;		None
 17058 ;; Auto vars:     Size  Location     Type
 17059 ;;		None
 17060 ;; Return value:  Size  Location     Type
 17061 ;;                  1    wreg      void 
 17062 ;; Registers used:
 17063 ;;		wreg, status,2, cstack
 17064 ;; Tracked objects:
 17065 ;;		On entry : 0/0
 17066 ;;		On exit  : 0/0
 17067 ;;		Unchanged: 0/0
 17068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17069 ;;      Params:         0       0       0       0       0       0       0
 17070 ;;      Locals:         0       0       0       0       0       0       0
 17071 ;;      Temps:          0       0       0       0       0       0       0
 17072 ;;      Totals:         0       0       0       0       0       0       0
 17073 ;;Total ram usage:        0 bytes
 17074 ;; Hardware stack levels used: 1
 17075 ;; Hardware stack levels required when called: 1
 17076 ;; This function calls:
 17077 ;;		_OSCILLATOR_Initialize
 17078 ;;		_PIN_MANAGER_Initialize
 17079 ;; This function is called by:
 17080 ;;		_main
 17081 ;; This function uses a non-reentrant model
 17082 ;;
 17083                           
 17084                           	psect	text58
 17085   006664                     __ptext58:
 17086                           	callstack 0
 17087   006664                     _SYSTEM_Initialize:
 17088                           	callstack 29
 17089   006664                     
 17090                           ;mcc_generated_files/mcc.c: 108:     OSCILLATOR_Initialize();
 17091   006664  EC27  F033         	call	_OSCILLATOR_Initialize	;wreg free
 17092                           
 17093                           ;mcc_generated_files/mcc.c: 109:     PIN_MANAGER_Initialize();
 17094   006668  EC0A  F033         	call	_PIN_MANAGER_Initialize	;wreg free
 17095   00666C  0012               	return		;funcret
 17096   00666E                     __end_of_SYSTEM_Initialize:
 17097                           	callstack 0
 17098                           
 17099 ;; *************** function _PIN_MANAGER_Initialize *****************
 17100 ;; Defined at:
 17101 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 17102 ;; Parameters:    Size  Location     Type
 17103 ;;		None
 17104 ;; Auto vars:     Size  Location     Type
 17105 ;;		None
 17106 ;; Return value:  Size  Location     Type
 17107 ;;                  1    wreg      void 
 17108 ;; Registers used:
 17109 ;;		wreg, status,2
 17110 ;; Tracked objects:
 17111 ;;		On entry : 0/0
 17112 ;;		On exit  : 0/0
 17113 ;;		Unchanged: 0/0
 17114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17115 ;;      Params:         0       0       0       0       0       0       0
 17116 ;;      Locals:         0       0       0       0       0       0       0
 17117 ;;      Temps:          0       0       0       0       0       0       0
 17118 ;;      Totals:         0       0       0       0       0       0       0
 17119 ;;Total ram usage:        0 bytes
 17120 ;; Hardware stack levels used: 1
 17121 ;; This function calls:
 17122 ;;		Nothing
 17123 ;; This function is called by:
 17124 ;;		_SYSTEM_Initialize
 17125 ;; This function uses a non-reentrant model
 17126 ;;
 17127                           
 17128                           	psect	text59
 17129   006614                     __ptext59:
 17130                           	callstack 0
 17131   006614                     _PIN_MANAGER_Initialize:
 17132                           	callstack 29
 17133   006614                     
 17134                           ;mcc_generated_files/pin_manager.c: 53:     TRISAbits.TRISA0 = 1;
 17135   006614  8092               	bsf	146,0,c	;volatile
 17136                           
 17137                           ;mcc_generated_files/pin_manager.c: 54:     TRISDbits.TRISD6 = 0;
 17138   006616  9C95               	bcf	149,6,c	;volatile
 17139   006618                     
 17140                           ;mcc_generated_files/pin_manager.c: 57:     ADCON1 = 0x0E;
 17141   006618  0E0E               	movlw	14
 17142   00661A  6EC1               	movwf	193,c	;volatile
 17143                           
 17144                           ;mcc_generated_files/pin_manager.c: 58:     ADCON2 = 0x89;
 17145   00661C  0E89               	movlw	137
 17146   00661E  6EC0               	movwf	192,c	;volatile
 17147                           
 17148                           ;mcc_generated_files/pin_manager.c: 59:     ADCON0 = 0x01;
 17149   006620  0E01               	movlw	1
 17150   006622  6EC2               	movwf	194,c	;volatile
 17151                           
 17152                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x04;
 17153   006624  0E04               	movlw	4
 17154   006626  6E8B               	movwf	139,c	;volatile
 17155                           
 17156                           ;mcc_generated_files/pin_manager.c: 63:     TRISC = 0xD3;
 17157   006628  0ED3               	movlw	211
 17158   00662A  6E94               	movwf	148,c	;volatile
 17159   00662C  0012               	return		;funcret
 17160   00662E                     __end_of_PIN_MANAGER_Initialize:
 17161                           	callstack 0
 17162                           
 17163 ;; *************** function _OSCILLATOR_Initialize *****************
 17164 ;; Defined at:
 17165 ;;		line 112 in file "mcc_generated_files/mcc.c"
 17166 ;; Parameters:    Size  Location     Type
 17167 ;;		None
 17168 ;; Auto vars:     Size  Location     Type
 17169 ;;		None
 17170 ;; Return value:  Size  Location     Type
 17171 ;;                  1    wreg      void 
 17172 ;; Registers used:
 17173 ;;		wreg, status,2
 17174 ;; Tracked objects:
 17175 ;;		On entry : 0/0
 17176 ;;		On exit  : 0/0
 17177 ;;		Unchanged: 0/0
 17178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17179 ;;      Params:         0       0       0       0       0       0       0
 17180 ;;      Locals:         0       0       0       0       0       0       0
 17181 ;;      Temps:          0       0       0       0       0       0       0
 17182 ;;      Totals:         0       0       0       0       0       0       0
 17183 ;;Total ram usage:        0 bytes
 17184 ;; Hardware stack levels used: 1
 17185 ;; This function calls:
 17186 ;;		Nothing
 17187 ;; This function is called by:
 17188 ;;		_SYSTEM_Initialize
 17189 ;; This function uses a non-reentrant model
 17190 ;;
 17191                           
 17192                           	psect	text60
 17193   00664E                     __ptext60:
 17194                           	callstack 0
 17195   00664E                     _OSCILLATOR_Initialize:
 17196                           	callstack 29
 17197   00664E                     
 17198                           ;mcc_generated_files/mcc.c: 115:     OSCCONbits.IRCF = 0b111;
 17199   00664E  0E70               	movlw	112
 17200   006650  12D3               	iorwf	211,f,c	;volatile
 17201                           
 17202                           ;mcc_generated_files/mcc.c: 116:     OSCCONbits.SCS = 0b00;
 17203   006652  0EFC               	movlw	-4
 17204   006654  16D3               	andwf	211,f,c	;volatile
 17205   006656                     
 17206                           ;mcc_generated_files/mcc.c: 117:     OSCTUNEbits.PLLEN = 0;
 17207   006656  9C9B               	bcf	155,6,c	;volatile
 17208   006658  0012               	return		;funcret
 17209   00665A                     __end_of_OSCILLATOR_Initialize:
 17210                           	callstack 0
 17211                           
 17212 ;; *************** function _ADC_Read *****************
 17213 ;; Defined at:
 17214 ;;		line 11 in file "main.c"
 17215 ;; Parameters:    Size  Location     Type
 17216 ;;		None
 17217 ;; Auto vars:     Size  Location     Type
 17218 ;;		None
 17219 ;; Return value:  Size  Location     Type
 17220 ;;                  2    0[COMRAM] unsigned int 
 17221 ;; Registers used:
 17222 ;;		wreg, status,2, status,0
 17223 ;; Tracked objects:
 17224 ;;		On entry : 0/0
 17225 ;;		On exit  : 0/0
 17226 ;;		Unchanged: 0/0
 17227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17228 ;;      Params:         2       0       0       0       0       0       0
 17229 ;;      Locals:         0       0       0       0       0       0       0
 17230 ;;      Temps:          2       0       0       0       0       0       0
 17231 ;;      Totals:         4       0       0       0       0       0       0
 17232 ;;Total ram usage:        4 bytes
 17233 ;; Hardware stack levels used: 1
 17234 ;; This function calls:
 17235 ;;		Nothing
 17236 ;; This function is called by:
 17237 ;;		_main
 17238 ;; This function uses a non-reentrant model
 17239 ;;
 17240                           
 17241                           	psect	text61
 17242   0065B8                     __ptext61:
 17243                           	callstack 0
 17244   0065B8                     _ADC_Read:
 17245                           	callstack 30
 17246   0065B8                     
 17247                           ;main.c: 12:     ADCON0bits.GO = 1;
 17248   0065B8  82C2               	bsf	194,1,c	;volatile
 17249   0065BA                     l802:
 17250   0065BA  B2C2               	btfsc	194,1,c	;volatile
 17251   0065BC  EFE2  F032         	goto	u8981
 17252   0065C0  EFE4  F032         	goto	u8980
 17253   0065C4                     u8981:
 17254   0065C4  EFDD  F032         	goto	l802
 17255   0065C8                     u8980:
 17256   0065C8                     
 17257                           ;main.c: 14:     return ((ADRESH << 8) + ADRESL);
 17258   0065C8  50C4               	movf	196,w,c	;volatile
 17259   0065CA  6E04               	movwf	(??_ADC_Read+1)^0,c
 17260   0065CC  6A03               	clrf	??_ADC_Read^0,c
 17261   0065CE  50C3               	movf	195,w,c	;volatile
 17262   0065D0  2403               	addwf	??_ADC_Read^0,w,c
 17263   0065D2  6E01               	movwf	?_ADC_Read^0,c
 17264   0065D4  0E00               	movlw	0
 17265   0065D6  2004               	addwfc	(??_ADC_Read+1)^0,w,c
 17266   0065D8  6E02               	movwf	(?_ADC_Read+1)^0,c
 17267   0065DA  0012               	return		;funcret
 17268   0065DC                     __end_of_ADC_Read:
 17269                           	callstack 0
 17270                           
 17271                           	psect	rparam
 17272   000001                     ___rparam_used  equ	1
 17273   000000                     ___param_bank   equ	0
 17274   000000                     __Lparam        equ	__Lrparam
 17275   000000                     __Hparam        equ	__Hrparam
 17276                           
 17277                           	psect	idloc
 17278                           
 17279                           ;Config register IDLOC0 @ 0x200000
 17280                           ;	unspecified, using default values
 17281   200000                     	org	2097152
 17282   200000  FF                 	db	255
 17283                           
 17284                           ;Config register IDLOC1 @ 0x200001
 17285                           ;	unspecified, using default values
 17286   200001                     	org	2097153
 17287   200001  FF                 	db	255
 17288                           
 17289                           ;Config register IDLOC2 @ 0x200002
 17290                           ;	unspecified, using default values
 17291   200002                     	org	2097154
 17292   200002  FF                 	db	255
 17293                           
 17294                           ;Config register IDLOC3 @ 0x200003
 17295                           ;	unspecified, using default values
 17296   200003                     	org	2097155
 17297   200003  FF                 	db	255
 17298                           
 17299                           ;Config register IDLOC4 @ 0x200004
 17300                           ;	unspecified, using default values
 17301   200004                     	org	2097156
 17302   200004  FF                 	db	255
 17303                           
 17304                           ;Config register IDLOC5 @ 0x200005
 17305                           ;	unspecified, using default values
 17306   200005                     	org	2097157
 17307   200005  FF                 	db	255
 17308                           
 17309                           ;Config register IDLOC6 @ 0x200006
 17310                           ;	unspecified, using default values
 17311   200006                     	org	2097158
 17312   200006  FF                 	db	255
 17313                           
 17314                           ;Config register IDLOC7 @ 0x200007
 17315                           ;	unspecified, using default values
 17316   200007                     	org	2097159
 17317   200007  FF                 	db	255
 17318                           
 17319                           	psect	config
 17320                           
 17321                           ; Padding undefined space
 17322   300000                     	org	3145728
 17323   300000  FF                 	db	255
 17324                           
 17325                           ;Config register CONFIG1H @ 0x300001
 17326                           ;	Oscillator Selection bits
 17327                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
 17328                           ;	Fail-Safe Clock Monitor Enable bit
 17329                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 17330                           ;	Internal/External Oscillator Switchover bit
 17331                           ;	IESO = OFF, Oscillator Switchover mode disabled
 17332   300001                     	org	3145729
 17333   300001  08                 	db	8
 17334                           
 17335                           ;Config register CONFIG2L @ 0x300002
 17336                           ;	Power-up Timer Enable bit
 17337                           ;	PWRT = ON, PWRT enabled
 17338                           ;	Brown-out Reset Enable bits
 17339                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 17340                           ;	Brown Out Reset Voltage bits
 17341                           ;	BORV = 0x12, user specified literal
 17342   300002                     	org	3145730
 17343   300002  96                 	db	150
 17344                           
 17345                           ;Config register CONFIG2H @ 0x300003
 17346                           ;	Watchdog Timer Enable bit
 17347                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 17348                           ;	Watchdog Timer Postscale Select bits
 17349                           ;	WDTPS = 32768, 1:32768
 17350   300003                     	org	3145731
 17351   300003  1E                 	db	30
 17352                           
 17353                           ; Padding undefined space
 17354   300004                     	org	3145732
 17355   300004  FF                 	db	255
 17356                           
 17357                           ;Config register CONFIG3H @ 0x300005
 17358                           ;	CCP2 MUX bit
 17359                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
 17360                           ;	PORTB A/D Enable bit
 17361                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 17362                           ;	Low-Power Timer1 Oscillator Enable bit
 17363                           ;	LPT1OSC = ON, Timer1 configured for low-power operation
 17364                           ;	MCLR Pin Enable bit
 17365                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
 17366   300005                     	org	3145733
 17367   300005  05                 	db	5
 17368                           
 17369                           ;Config register CONFIG4L @ 0x300006
 17370                           ;	Stack Full/Underflow Reset Enable bit
 17371                           ;	STVREN = ON, Stack full/underflow will cause Reset
 17372                           ;	Single-Supply ICSP Enable bit
 17373                           ;	LVP = OFF, Single-Supply ICSP disabled
 17374                           ;	Extended Instruction Set Enable bit
 17375                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 17376                           ;	Background Debugger Enable bit
 17377                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 17378   300006                     	org	3145734
 17379   300006  81                 	db	129
 17380                           
 17381                           ; Padding undefined space
 17382   300007                     	org	3145735
 17383   300007  FF                 	db	255
 17384                           
 17385                           ;Config register CONFIG5L @ 0x300008
 17386                           ;	Code Protection bit
 17387                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 17388                           ;	Code Protection bit
 17389                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 17390                           ;	Code Protection bit
 17391                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 17392                           ;	Code Protection bit
 17393                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 17394   300008                     	org	3145736
 17395   300008  0F                 	db	15
 17396                           
 17397                           ;Config register CONFIG5H @ 0x300009
 17398                           ;	Boot Block Code Protection bit
 17399                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 17400                           ;	Data EEPROM Code Protection bit
 17401                           ;	CPD = OFF, Data EEPROM not code-protected
 17402   300009                     	org	3145737
 17403   300009  C0                 	db	192
 17404                           
 17405                           ;Config register CONFIG6L @ 0x30000A
 17406                           ;	Write Protection bit
 17407                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 17408                           ;	Write Protection bit
 17409                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 17410                           ;	Write Protection bit
 17411                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 17412                           ;	Write Protection bit
 17413                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 17414   30000A                     	org	3145738
 17415   30000A  0F                 	db	15
 17416                           
 17417                           ;Config register CONFIG6H @ 0x30000B
 17418                           ;	Configuration Register Write Protection bit
 17419                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 17420                           ;	Boot Block Write Protection bit
 17421                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
 17422                           ;	Data EEPROM Write Protection bit
 17423                           ;	WRTD = OFF, Data EEPROM not write-protected
 17424   30000B                     	org	3145739
 17425   30000B  E0                 	db	224
 17426                           
 17427                           ;Config register CONFIG7L @ 0x30000C
 17428                           ;	Table Read Protection bit
 17429                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 17430                           ;	Table Read Protection bit
 17431                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 17432                           ;	Table Read Protection bit
 17433                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 17434                           ;	Table Read Protection bit
 17435                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 17436   30000C                     	org	3145740
 17437   30000C  0F                 	db	15
 17438                           
 17439                           ;Config register CONFIG7H @ 0x30000D
 17440                           ;	Boot Block Table Read Protection bit
 17441                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 17442   30000D                     	org	3145741
 17443   30000D  40                 	db	64
 17444                           tosu	equ	0xFFF
 17445                           tosh	equ	0xFFE
 17446                           tosl	equ	0xFFD
 17447                           stkptr	equ	0xFFC
 17448                           pclatu	equ	0xFFB
 17449                           pclath	equ	0xFFA
 17450                           pcl	equ	0xFF9
 17451                           tblptru	equ	0xFF8
 17452                           tblptrh	equ	0xFF7
 17453                           tblptrl	equ	0xFF6
 17454                           tablat	equ	0xFF5
 17455                           prodh	equ	0xFF4
 17456                           prodl	equ	0xFF3
 17457                           indf0	equ	0xFEF
 17458                           postinc0	equ	0xFEE
 17459                           postdec0	equ	0xFED
 17460                           preinc0	equ	0xFEC
 17461                           plusw0	equ	0xFEB
 17462                           fsr0h	equ	0xFEA
 17463                           fsr0l	equ	0xFE9
 17464                           wreg	equ	0xFE8
 17465                           indf1	equ	0xFE7
 17466                           postinc1	equ	0xFE6
 17467                           postdec1	equ	0xFE5
 17468                           preinc1	equ	0xFE4
 17469                           plusw1	equ	0xFE3
 17470                           fsr1h	equ	0xFE2
 17471                           fsr1l	equ	0xFE1
 17472                           bsr	equ	0xFE0
 17473                           indf2	equ	0xFDF
 17474                           postinc2	equ	0xFDE
 17475                           postdec2	equ	0xFDD
 17476                           preinc2	equ	0xFDC
 17477                           plusw2	equ	0xFDB
 17478                           fsr2h	equ	0xFDA
 17479                           fsr2l	equ	0xFD9
 17480                           status	equ	0xFD8

Data Sizes:
    Strings     41
    Constant    0
    Data        1
    BSS         632
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    127     127
    BANK0           128    112     123
    BANK1           256     71     135
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           244      0       0

Pointer List with Targets:

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    chk_chr@str	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[15]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    create_name@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@p	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    create_name@path	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> follow_path@path(BANK0[1]), 

    create_name@sfn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    dir_alloc@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    dir_find@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    dir_next@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    dir_register@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    dir_sdi@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), main@buffer(BANK1[64]), NULL(NULL[0]), 

    dj$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dj$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer(BANK1[64]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    f_close@fp	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    f_close@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    f_lseek@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@path	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    f_mount@rp	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    f_open@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@path	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    f_read@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_read@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    f_sync@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@buff	PTR const void  size(2) Largest target is 64
		 -> main@buffer(BANK1[64]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> main@bw(BANK1[2]), 

    f_write@fp	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    f_write@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 64
		 -> main@buffer(BANK1[64]), 

    FatFs@ff$F539	PTR struct .[1] size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    Fil$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    Fil$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@path	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> f_mount@path(COMRAM[1]), f_open@path(BANK0[1]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), NULL(NULL[0]), 

    find_volume@rfs	PTR PTR struct . size(1) Largest target is 22
		 -> f_mount@fs(COMRAM[2]), f_open@dj(BANK0[21]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    follow_path@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@path	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer(BANK1[64]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), NULL(NULL[0]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> f_mount@path(COMRAM[1]), f_mount@rp(COMRAM[1]), f_open@path(BANK0[1]), 

    get_ldnumber@tp	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    get_ldnumber@tt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@s	PTR const unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@src	PTR const void  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), NULL(NULL[0]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), NULL(NULL[0]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), FatFs(BIGRAM[558]), main@buffer(BANK1[64]), NULL(NULL[0]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), FatFs(BIGRAM[558]), main@buffer(BANK1[64]), NULL(NULL[0]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), NULL(NULL[0]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S2078$buffer	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer(BANK1[64]), 

    S2078$source	PTR const unsigned char  size(2) Largest target is 0

    S516$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S516$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S516$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S527$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S527$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[16]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer(BANK1[64]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 64
		 -> main@buffer(BANK1[64]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 64
		 -> main@buffer(BANK1[64]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    validate@fil$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@obj	PTR void  size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[16]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[16]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[16]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), main@buffer(BANK1[64]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _f_write->_create_chain
    _remove_chain->_put_fat
    _dir_find->_dir_next
    _create_name->_mem_set
    _dir_alloc->_dir_next
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI_Exchange8bit
    _deselect->_SPI_Exchange8bit
    _rcvr_datablock->_SPI_Exchange8bit

Critical Paths under _main in BANK0

    _main->_f_open
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_register->_dir_alloc
    _f_mount->_find_volume

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                73    73      0  134338
                                            110 BANK0      2     2      0
                                              0 BANK1     71    71      0
                           _ADC_Read
                  _SYSTEM_Initialize
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               4     2      2      91
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    14      5    1760
                                             25 COMRAM    17    12      5
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    1559
                                             21 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           11     8      3    1434
                                             10 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     230
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2      67
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     302
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _f_write                                             36    28      8   17706
                                            108 COMRAM     8     0      8
                                              0 BANK0     28    28      0
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (1) _f_open                                              52    48      4   79626
                                             58 BANK0     52    48      4
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (2) _remove_chain                                        15     9      6    8117
                                             85 COMRAM    15     9      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (2) _follow_path                                          6     4      2   29873
                                              5 BANK0      6     4      2
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (2) _ld_clust                                            14    10      4      96
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             5     4      1   23151
                                              0 BANK0      5     4      1
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             12     7      5     139
                                              0 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (3) _create_name                                         17    15      2    1432
                                              8 COMRAM    17    15      2
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _chk_chr                                              5     2      3      91
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _dir_register                                         3     2      1   26385
                                              9 BANK0      3     2      1
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _mem_cpy                                             10     4      6     198
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _dir_alloc                                            9     6      3   22969
                                              0 BANK0      9     6      3
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _dir_sdi                                             20    17      3    4630
                                             84 COMRAM    20    17      3
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            19    16      3   15152
                                            108 COMRAM    19    16      3
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (1) _f_mount                                             10     6      4   11303
                                             79 COMRAM    10     6      4
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (2) _find_volume                                         69    66      3   10566
                                             68 COMRAM    11     8      3
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_ldnumber                                        11     9      2     386
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _disk_initialize                                     13    13      0    1217
                                             16 COMRAM    13    13      0
                   _SPI_Exchange8bit
                     _SPI_Initialize
                           _SPI_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _SPI_Open                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_fs                                            10     4      6    3051
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (1) _f_lseek                                             39    33      6   14481
                                            108 COMRAM     6     0      6
                                              0 BANK0     33    33      0
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (2) _create_chain                                        23    17      6    8658
                                             85 COMRAM    23    17      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _put_fat                                             27    17     10    4064
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_fat                                             26    20      6    3648
                                             58 COMRAM    26    20      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          11     5      6     221
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8      98
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     168
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _f_close                                              3     1      2    9075
                                             72 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_sync                                               9     7      2    8767
                                             67 COMRAM     5     3      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (2) _validate                                             8     6      2     189
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (3) _disk_status                                          1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _sync_fs                                             11     9      2    5169
                                             56 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (5) _mem_set                                              8     2      6     102
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _disk_ioctl                                          40    37      3    1918
                                             16 COMRAM    40    37      3
                   _SPI_Exchange8bit
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (2) _st_clust                                             6     0      6      92
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _move_window                                         11     5      6    2893
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _sync_window                                         21    19      2    1546
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (3) _disk_write                                          10     2      8    1160
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (4) _xmit_datablock                                       6     3      3     223
                                              3 COMRAM     6     3      3
                   _SPI_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (3) _disk_read                                           12     4      8    1089
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _send_cmd                                             6     2      4     665
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (5) ___send_cmd                                           7     3      4     519
                                              3 COMRAM     7     3      4
                   _SPI_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (6) _select                                               0     0      0     133
                   _SPI_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _wait_ready                                           2     2      0      75
                                              1 COMRAM     2     2      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _deselect                                             0     0      0      29
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _rcvr_datablock                                       7     3      4     157
                                              1 COMRAM     7     3      4
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI_Exchange8bit                                     1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _f_close
     _f_sync
       _move_window
         _disk_read
           _deselect
             _SPI_Exchange8bit
           _rcvr_datablock
             _SPI_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI_Exchange8bit
               _deselect
               _select
                 _SPI_Exchange8bit
                 _deselect
                 _wait_ready
                   _SPI_Exchange8bit
         _sync_window
           _disk_write
             _deselect
             _send_cmd
             _xmit_datablock
               _SPI_Exchange8bit
               _wait_ready
       _st_clust
       _sync_fs
         _disk_ioctl
           _SPI_Exchange8bit
           _deselect
           _rcvr_datablock
           _select
           _send_cmd
         _disk_write
         _mem_set
         _sync_window
       _validate
         _disk_status
     _validate
   _f_lseek
     ___lldiv
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
       _put_fat
         _move_window
     _get_fat
     _validate
   _f_mount
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
       _disk_initialize
         _SPI_Exchange8bit
         _SPI_Initialize
         _SPI_Open
         _deselect
         _send_cmd
       _disk_status
       _get_ldnumber
       _move_window
     _get_ldnumber
   _f_open
     _dir_register
       _dir_alloc
         _dir_next
           _clust2sect
           _create_chain
           _get_fat
           _mem_set
           _sync_window
         _dir_sdi
           _clust2sect
           _get_fat
         _move_window
       _mem_cpy
       _mem_set
       _move_window
     _find_volume
     _follow_path
       _create_name
         _chk_chr
         _mem_set
       _dir_find
         _dir_next
         _dir_sdi
         _mem_cmp
         _move_window
       _dir_sdi
       _ld_clust
     _ld_clust
     _move_window
     _remove_chain
       _get_fat
       _put_fat
     _st_clust
   _f_write
     _clust2sect
     _create_chain
     _disk_write
     _mem_cpy
     _move_window
     _sync_window
     _validate
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch
   _strlen

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1523      0     558     36.6%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256     71     135     52.7%
BITBANK5           244      0       0      0.0%
BANK5              244      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128    112     123     96.1%
BITCOMRAM          127      0       0      0.0%
COMRAM             127    127     127    100.0%
BITBIGSFR_1l        35      0       0      0.0%
BITBIGSFR_1h        17      0       0      0.0%
BITBIGSFRh          15      0       0      0.0%
BITBIGSFR_5         13      0       0      0.0%
BITBIGSFRl          11      0       0      0.0%
BITBIGSFR_2          6      0       0      0.0%
BITBIGSFR_4          3      0       0      0.0%
BITBIGSFR_3          3      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     942      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sat Jan 11 20:15:26 2025

                _SPI_Initialize 663E                     get_fat@clst 003D                    create_name@b 0011  
                  create_name@c 0019                    create_name@d 0014                    create_name@i 0016  
                  create_name@p 0015                     _SSPSTATbits 0FC7                get_ldnumber@path 0001  
                            l21 6602                              l23 6610                              l15 664C  
                            l24 6612                              l18 663C                              l65 662C  
                            l76 666C                              l79 6658                              l96 62D8  
                  ___awdiv@sign 0006                     disk_ioctl@n 0036                  ??_dir_register 008A  
              disk_write@sector 0013                   create_name@dp 0009                   create_name@ni 0012  
                 create_name@si 000F                  create_chain@cs 0069                  create_chain@fs 0056  
                           l100 6300                             l103 665A                             l111 65B6  
                           l105 6662                             l114 5FB0                             l210 49A2  
                           l211 49C2                             l108 658E                             l125 613E  
                           l205 4978                             l134 5D6C                             l150 45A0  
                           l119 6014                             l215 4A4E                             l303 635C  
                           l208 4AF6                             l312 4FAE                             l224 272E  
                           l400 39B8                             l160 4412                             l209 498E  
                           l321 4784                             l146 63B4                             l234 2358  
                           l154 4334                             l331 34F4                             l155 457C  
                           l324 4786                             l180 457A                             l413 3C1C  
                           l173 44E6                             l149 42F8                             l318 5CAA  
                           l334 3868                             l174 4530                             l166 4480  
                           l191 5382                             l415 3C14                             l423 42DE  
                           l511 3D8C                             l192 5288                             l328 5B26  
                           l336 3500                             l193 52A8                             l185 65F8  
                           l441 3048                             l281 60AA                             l188 5272  
                           l612 09C2                             l428 41C8                             l349 3878  
                           l357 277C                             l509 3FB6                             l381 4C6E  
                           l374 2BBE                             l470 54AC                             l294 6230  
                           l550 4D96                             l702 1A16                             l287 64F8  
                           l471 54AE                             l535 3F7A                             l295 6238  
                           l640 599A                             l377 4B44                             l802 65BA  
                           l626 0F74                             l618 0B9E                             l482 55D0  
                           l475 61C6                             l811 5132                             l740 63FE  
                           l396 39C8                             l644 5A60                             l492 58D2  
                           l548 4DAC                             l660 3172                             l812 5216  
                           l805 65DA                             l573 57F6                             l557 4E2A  
                           l389 4C9A                             l661 3160                             l653 349A  
                           l478 658C                             l830 6292                             l398 3C2C  
                           l750 1D8C                             l735 510A                             l831 62A2  
                           l744 213C                             l584 118E                             l816 5244  
                           l577 56EC                             l746 1ABC                             l667 3354  
                           l853 5F78                             l669 3328                             l846 5F68  
                           _Fil 0167                             _abs 6530                    disk_read@cmd 001C  
                  ___awmod@sign 0006                  ??_create_chain 005C                             wreg 0FE8  
             disk_initialize@ty 001A                  create_name@sfn 0018                 create_chain@ncl 0065  
               create_chain@scl 0061                 create_chain@res 0060                     ld_clust@dir 0003  
                          l1050 5BE8                            ?_abs 0007                            l1063 5ED4  
                          l4101 62EA                            l1541 6484                            l4111 65AA  
                          l1535 494C                            l1560 5E26                            l4105 665C  
                          l4121 5CAE                            l4201 636E                            l5001 5EAE  
                          l1545 654A                            l4115 65B0                            l4107 6590  
                          l4123 5CC0                            l4131 5CDE                            l4203 6370  
                          l4211 639E                            l5003 5EB4                            l1571 666E  
                          l5011 5D6E                            l1548 6562                            l4117 65B4  
                          l4109 6596                            l4141 5CFE                            l4133 5CE6  
                          l4125 5CC4                            l4205 6388                            l4301 5296  
                          l5101 44AA                            l5005 5EC4                            l5021 5DE6  
                          l5013 5D7E                            l4223 5FA2                            l4215 5F7A  
                          l4151 5D2C                            l4143 5D02                            l4135 5CEC  
                          l4127 5CD8                            l4207 6398                            l4311 52FC  
                          l4303 52BE                            l5111 451C                            l5103 44D2  
                          l5031 42F2                            l5007 5ECC                            l5015 5D8E  
                          l4241 6012                            l4233 5FDA                            l4225 5FAA  
                          l4217 5F86                            l4161 5D56                            l4153 5D32  
                          l4145 5D12                            l4137 5CF2                            l4321 5368  
                          l4305 52CA                            l4401 365A                            l5121 4584  
                          l5113 452A                            l5105 44DE                            l5041 4314  
                          l6001 5A24                            l5201 546A                            l5025 6530  
                          l5017 5D98                            l1497 64C0                            l1577 652E  
                          l4235 5FEA                            l4227 5FC2                            l4219 5F8E  
                          l4091 62A4                            l4163 5D64                            l4155 5D44  
                          l4147 5D16                            l4139 5CF8                            l4323 536C  
                          l4315 5324                            l4307 52D2                            l4171 60C0  
                          l4331 4E4A                            l4403 3668                            l5123 4594  
                          l5115 4542                            l5107 44F2                            l5051 435C  
                          l5043 431C                            l5035 4308                            l6011 5A5E  
                          l6003 5A36                            l5203 5472                            l5131 6016  
                          l5027 653E                            l5019 5DB4                            l4237 5FEE  
                          l4229 5FD4                            l4093 62B0                            l4165 5D6A  
                          l4157 5D4A                            l4149 5D28                            l4317 5340  
                          l4309 52D6                            l4181 60E6                            l4261 49B0  
                          l4253 4988                            l4245 4950                            l4341 4F20  
                          l4333 4E66                            l5221 6564                            l4421 37E6  
                          l4413 371A                            l4405 3678                            l5125 4598  
                          l5117 4554                            l5061 4394                            l5053 4382  
                          l5045 4322                            l5029 42E2                            l6005 5A46  
                          l5205 5486                            l5133 602A                            l5141 605A  
                          l5301 3D78                            l5213 6140                            l6101 3364  
                          l6021 3064                            l4087 65FC                            l4239 6006  
                          l4159 5D4E                            l4319 5352                            l4183 60F4  
                          l4175 60C6                            l4271 4A3C                            l4263 49D4  
                          l4247 4960                            l4351 4FA2                            l4343 4F36  
                          l4335 4EAC                            l4327 4E2C                            l5151 45A2  
                          l4511 6272                            l4503 623A                            l4423 381E  
                          l4415 374C                            l4407 3698                            l4431 274A  
                          l5119 4580                            l5071 43D4                            l5063 4396  
                          l5047 4324                            l5039 4310                            l5207 5496  
                          l5143 6074                            l5135 6042                            l5311 3DCC  
                          l5303 3D88                            l5231 54DC                            l5223 54B0  
                          l5215 617A                            l6111 33C0                            l6103 3372  
                          l6031 30A2                            l6023 3070                            l6015 304A  
                          l4089 65FE                            l4097 62CA                            l4185 60F8  
                          l4177 60CC                            l4169 60AC                            l4281 4AD4  
                          l4273 4A74                            l4265 49FA                            l4257 499C  
                          l4249 4972                            l4337 4EB4                            l4329 4E2E  
                          l4361 5BEC                            l4513 64C2                            l5161 4616  
                          l5153 45B0                            l4505 624A                            l4521 5A62  
                          l4417 376C                            l4409 36A8                            l4433 2774  
                          l4601 3BF0                            l5081 4436                            l5065 43A6  
                          l5049 4336                            l5401 5716                            l6009 5A4C  
                          l5209 54A8                            l5145 6088                            l5137 604A  
                          l5321 3E14                            l5313 3DE0                            l5305 3D9C  
                          l5241 553E                            l5233 550C                            l5225 54C4  
                          l5217 61B6                            l6121 3460                            l6113 33DE  
                          l6105 3374                            l6041 30E0                            l6033 30A6  
                          l6025 3078                            l6017 305E                            l4099 62D2  
                          l4291 525A                            l4187 6110                            l4179 60DE  
                          l4195 613C                            l4267 4A1A                            l4283 4ADC  
                          l4347 4F50                            l4339 4EC2                            l4355 4FAC  
                          l4371 5C88                            l4363 5C1C                            l4515 64CE  
                          l5171 46B2                            l5163 462A                            l5155 45C0  
                          l4507 6258                            l4523 5A6E                            l4427 3842  
                          l4451 2844                            l4443 2804                            l4435 2784  
                          l4603 3C00                            l4611 664A                            l5091 446E  
                          l5083 445C                            l5075 43FE                            l5067 43B6  
                          l5059 4384                            l5411 574E                            l5403 5718  
                          l5147 608C                            l5139 6052                            l5331 3E56  
                          l5323 3E24                            l5315 3DE4                            l5307 3DAC  
                          l5251 55A8                            l5243 554E                            l5227 54D4  
                          l6123 3470                            l6115 3410                            l6107 339C  
                          l6051 3128                            l6043 30E4                            l6035 30B6  
                          l6027 307C                            l4293 526C                            l4189 6124  
                          l4285 4AE0                            l4277 4A98                            l4269 4A26  
                          l4349 4F6C                            l4373 5C8C                            l4365 5C2A  
                          l4517 64DA                            l5173 4744                            l5165 4646  
                          l5157 45DA                            l4621 65DE                            l5501 5F46  
                          l4509 6268                            l4525 5AB0                            l4381 34B6  
                          l4453 2878                            l4445 2828                            l4437 2796  
                          l4429 2730                            l4541 38EC                            l4533 387A  
                          l6301 1B5E                            l4605 663E                            l4613 662E  
                          l5093 4470                            l5077 440C                            l5069 43C8  
                          l5421 57A6                            l5413 576A                            l5181 5384  
                          l5149 6090                            l5341 3E92                            l5333 3E5A  
                          l5317 3DF4                            l5309 3DBC                            l5261 3C3C  
                          l5253 55BC                            l5245 5556                            l5237 5520  
                          l6117 3438                            l6109 33B0                            l6061 3182  
                          l6053 312A                            l6045 30FA                            l6037 30BE  
                          l6125 3498                            l6029 3092                            l4199 6360  
                          l4279 4AB4                            l4367 5C3A                            l4375 5CA8  
                          l4359 5BEA                            l4711 2606                            l4703 2592  
                          l4631 2140                            l4519 64DE                            l5167 4662  
                          l5159 45F6                            l5175 4752                            l4623 65EE  
                          l5503 5F56                            l4391 3586                            l4383 34E0  
                          l4471 299C                            l4463 2902                            l4455 2884  
                          l4447 282C                            l4439 27F0                            l4551 395A  
                          l4535 3890                            l4543 3900                            l6311 1CE0  
                          l6303 1B74                            l4607 6646                            l4615 6636  
                          l5095 448E                            l5079 4424                            l5423 57B8  
                          l5415 5774                            l5407 5718                            l5183 5398  
                          l5351 3ED8                            l5343 3EA2                            l5319 3E04  
                          l5335 3E6E                            l5271 3C9E                            l5263 3C3E  
                          l5247 5570                            l5239 5532                            l6119 344C  
                          l6071 31D6                            l6063 3190                            l6047 310A  
                          l6055 3136                            l6039 30CE                            l5511 47AA  
                          l4297 5282                            l4289 524A                            l4369 5C80  
                          l4721 266C                            l4705 25B8                            l4641 2162  
                          l4633 2148                            l5177 4780                            l5169 468A  
                          l5505 5F58                            l4529 5AC4                            l4393 35B4  
                          l4385 3508                            l4481 2A62                            l4473 29BC  
                          l4465 2926                            l4457 2894                            l4449 283A  
                          l4561 39E4                            l4553 3976                            l4545 392C  
                          l4537 38AC                            l6321 1D5C                            l6313 1D14  
                          l6305 1BFE                            l5441 55FC                            l4609 6648  
                          l4617 6638                            l5097 449A                            l5089 445E  
                          l5425 57CA                            l5417 578E                            l5433 57EA  
                          l5409 5732                            l4801 4172                            l5193 53F4  
                          l5185 53A8                            l5361 3EFE                            l5353 3EDA  
                          l5345 3EB2                            l5329 3E4A                            l5281 3CE0  
                          l5273 3CB0                            l5265 3C5A                            l6081 3252  
                          l6073 31EA                            l6065 3190                            l6057 3158  
                          l6049 311C                            l5521 47EA                            l5513 47B2  
                          l6401 64A2                            l4731 26B2                            l4723 2670  
                          l4715 262E                            l4651 2192                            l4643 2172  
                          l4635 2158                            l4627 65F4                            l5507 5F62  
                          l4395 35B8                            l4387 351A                            l4379 349C  
                          l4491 2B3A                            l4483 2A86                            l4475 2A1C  
                          l4467 2934                            l4459 28EE                            l4563 3A0E  
                          l4571 3A4C                            l4555 398A                            l4547 3946  
                          l4539 38C2                            l6331 1DC2                            l6315 1D2C  
                          l6307 1CAE                            l5443 5628                            l4619 663A  
                          l5099 44A2                            l5427 57D2                            l5419 5790  
                          l4811 41DE                            l4803 418C                            l5195 5420  
                          l5187 53B0                            l5611 585E                            l5603 57F8  
                          l5363 3F0E                            l5355 3EDE                            l5347 3EB8  
                          l5291 3D44                            l5283 3CF2                            l5275 3CB8  
                          l5267 3C76                            l5259 3C2E                            l6083 326E  
                          l6075 320E                            l6067 31AC                            l6059 316E  
                          l6091 32F6                            l5531 4874                            l5523 4806  
                          l5515 47C0                            l6403 64B2                            l6411 650A  
                          l4741 272C                            l4725 2672                            l4717 2654  
                          l4709 25E0                            l4661 2284                            l4653 21B8  
                          l4493 2B82                            l4485 2AEE                            l4469 2970  
                          l4581 3AC8                            l4573 3A78                            l4565 3A1E  
                          l6341 1E70                            l6333 1DDC                            l6325 1D70  
                          l6309 1CCA                            l5453 5658                            l5429 57DE  
                          l5701 06F0                            l4901 2EDA                            l4821 4244  
                          l4813 4210                            l5197 544A                            l5189 53E0  
                          l5613 5884                            l5605 580E                            l5381 3F72  
                          l5365 3F1A                            l5357 3EEA                            l5349 3EC8  
                          l5293 3D56                            l5285 3D08                            l5277 3CCC  
                          l5269 3C84                            l5621 4C9C                            l6093 3306  
                          l6085 328E                            l6077 322A                            l6069 31C8  
                          l5541 48D2                            l5533 4890                            l5525 481E  
                          l5517 47C4                            l5509 4788                            l6413 6522  
                          l4735 26DA                            l4727 2686                            l4719 265C  
                          l4671 238C                            l4663 22A8                            l4655 21DA  
                          l4647 2178                            l4639 215E                            l5471 58EE  
                          l6271 63C4                            l4399 3624                            l4479 2A30  
                          l4591 3B2E                            l4567 3A38                            l4559 39D8  
                          l6351 1EEE                            l6343 1E8E                            l6335 1E10  
                          l6319 1D40                            l6327 1DA8                            l5455 569C  
                          l5447 562E                            l5439 55D2                            l5711 0706  
                          l4911 2F22                            l4903 2EE6                            l4831 2BF0  
                          l4823 42DC                            l4815 422A                            l5615 58B8  
                          l5607 581E                            l5391 3FB4                            l5383 3F8E  
                          l5375 3F3C                            l5367 3F22                            l5287 3D1A  
                          l5359 3EF2                            l5279 3CD0                            l4751 61F6  
                          l5631 4D06                            l5623 4CB8                            l6095 3320  
                          l6087 329E                            l6079 323C                            l5543 48E8  
                          l5535 48A2                            l5527 4828                            l5519 47CE  
                          l6407 64FA                            l5561 6618                            l4729 26AC  
                          l4681 23C4                            l4673 2392                            l4665 230E  
                          l4657 21F0                            l4649 218C                            l4737 26E2  
                          l5473 5908                            l6273 63D4                            l4489 2B02  
                          l4497 2B96                            l4593 3B44                            l4577 3A92  
                          l6361 1F68                            l6337 1E28                            l6281 1A18  
                          l5465 56EA                            l5449 5652                            l5801 09A6  
                          l5721 0740                            l5713 0716                            l5705 06F6  
                          l4921 2FAA                            l4913 2F3E                            l4905 2EFC  
                          l4841 2C68                            l4833 2C10                            l4809 41C0  
                          l5609 584E                            l5617 58D0                            l4761 634C  
                          l4753 6302                            l5385 3F90                            l5377 3F54  
                          l5369 3F26                            l5297 3D5C                            l5289 3D30  
                          l4745 61C8                            l5641 4D50                            l5633 4D1A  
                          l5625 4CD4                            l6097 3336                            l6089 32D2  
                          l6601 1206                            l5545 4906                            l5537 48B2  
                          l5529 4840                            l5553 492A                            l6409 6506  
                          l5563 664E                            l4691 2462                            l4683 23D4  
                          l4675 23B4                            l4659 2246                            l4739 2728  
                          l5483 5998                            l5475 5930                            l6275 63E2  
                          l5491 5EFC                            l4499 2BBC                            l4595 3B72  
                          l4579 3AAE                            l4587 3AF0                            l6363 1F84  
                          l6355 1F02                            l6347 1EA2                            l6339 1E3C  
                          l6291 1A5C                            l6283 1A28                            l5459 56A2  
                          l5395 56EE                            l5803 09DE                            l5731 0772  
                          l5723 0750                            l5715 072C                            l4915 2F42  
                          l4851 2D28                            l4923 2FE6                            l4827 2BC0  
                          l4771 402A                            l4755 6306                            l5387 3FA4  
                          l5379 3F5E                            l5299 3D6C                            l4747 61D4  
                          l5643 4D5C                            l5635 4D2C                            l5627 4CD8  
                          l5571 4B3C                            l6099 3350                            l6611 130A  
                          l6603 1264                            l4931 5B28                            l5539 48C2  
                          l5547 4908                            l5565 6656                            l4693 2472  
                          l4677 23BC                            l4669 2366                            l5477 5968  
                          l5469 58D4                            l6277 63F2                            l6269 63B6  
                          l5493 5F04                            l4597 3B82                            l4589 3B1E  
                          l6381 20CE                            l6373 2012                            l6365 1FB2  
                          l6357 1F3A                            l6349 1EBC                            l6293 1A86  
                          l5397 56F2                            l5901 0EBA                            l5813 0A38  
                          l5805 09FA                            l5741 07AE                            l5733 0792  
                          l5717 073A                            l5709 06FC                            l4925 2FF8  
                          l4917 2F70                            l4853 2D42                            l4837 2C16  
                          l4829 2BDE                            l4781 4090                            l4765 3FB8  
                          l4757 6308                            l5389 3FA6                            l4749 61DC  
                          l5645 4D74                            l5637 4D3C                            l5629 4CEC  
                          l5573 4B4A                            l6701 18E4                            l6621 13D6  
                          l6613 132C                            l6605 1270                            l4941 5B52  
                          l4933 5B2A                            l5549 491E                            l6391 65C8  
                          l5559 6614                            l4695 24EC                            l4679 23C2  
                          l4687 241A                            l5479 5992                            l5495 5F10  
                          l5487 5ED6                            l4599 3BC6                            l6383 2104  
                          l6367 1FE6                            l6359 1F4A                            l6375 2048  
                          l6295 1AA0                            l6287 1A3C                            l5399 5708  
                          l5911 100C                            l5903 0F46                            l5815 0A76  
                          l5807 0A16                            l5751 082A                            l4927 3046  
                          l4871 2DB0                            l4919 2F90                            l4863 2D6A  
                          l4847 2C94                            l4839 2C34                            l4783 40A6  
                          l4791 40F8                            l4775 4030                            l4767 3FE4  
                          l4759 6324                            l5663 4DBE                            l5647 4D84  
                          l5583 4BAA                            l5575 4B76                            l5567 4AF8  
                          l6711 198E                            l6703 1942                            l6631 141C  
                          l6615 1348                            l6607 12AA                            l4951 5B80  
                          l4943 5B5A                            l4935 5B38                            l4689 2440  
                          l5497 5F1E                            l5489 5EE6                            l6385 212C  
                          l6377 2082                            l6369 1FFE                            l6297 1B04  
                          l5921 10B4                            l5913 101C                            l5833 0B4C  
                          l5825 0AFA                            l5817 0A94                            l5761 0872  
                          l5753 0846                            l5745 07C8                            l5729 0762  
                          l5673 062C                            l4873 2DEC                            l4865 2D9A  
                          l4857 2D48                            l4849 2CEC                            l4793 411E  
                          l4777 4046                            l4769 3FFA                            l5593 4C10  
                          l5585 4BC6                            l5569 4B12                            l6705 195A  
                          l6633 1438                            l6625 13F2                            l6617 135E  
                          l6641 14A6                            l6609 12FA                            l6713 1996  
                          l4961 5BBA                            l4953 5B88                            l4945 5B5E  
                          l4937 5B40                            l4699 2582                            l5499 5F28  
                          l6379 20B2                            l6299 1B1A                            l5923 10E4  
                          l5915 102E                            l5835 0B6C                            l5827 0B1A  
                          l5819 0AB0                            l5771 08C8                            l5763 0884  
                          l5755 0862                            l5747 07FA                            l5739 07A6  
                          l5691 0688                            l5683 065C                            l5675 0636  
                          l4891 2E42                            l4875 2E02                            l4859 2D64  
                          l4795 4150                            l4779 406E                            l5667 4DEE  
                          l5659 4DA4                            l5595 4C38                            l5587 4BCE  
                          l5579 4B90                            l6707 1964                            l6651 1562  
                          l6643 14EA                            l6627 1408                            l6715 19A8  
                          l6619 1396                            l4971 5BE0                            l4963 5BBC  
                          l4955 5B96                            l4947 5B66                            l4939 5B44  
                          l6395 6486                            l6731 5114                            l6723 510C  
                          l6389 65B8                            l5941 4FE8                            l5925 1114  
                          l5917 104C                            l5909 0FD0                            l5861 0C9C  
                          l5853 0C3A                            l5845 0BC8                            l5837 0B82  
                          l5781 092E                            l5773 08EE                            l5765 088A  
                          l5749 0816                            l5693 06AE                            l5685 0670  
                          l5677 0646                            l4885 2E22                            l4797 416C  
                          l4789 40D2                            l5669 4E28                            l5597 4C5E  
                          l5589 4BFC                            l6717 19DE                            l6709 197E  
                          l6661 1608                            l6653 157A                            l6645 150E  
                          l6637 144C                            l4965 5BC2                            l4957 5B9C  
                          l4949 5B78                            l4981 5E40                            l6397 6492  
                          l6741 517E                            l6733 5116                            l6725 510C  
                          l5951 509E                            l5943 501A                            l5935 4FB0  
                          l5919 1080                            l5927 1164                            l5871 0CE0  
                          l5863 0CA0                            l5855 0C80                            l5847 0C18  
                          l5839 0BB2                            l5791 094A                            l5775 08F2  
                          l5767 08A6                            l5759 086A                            l5695 06C4  
                          l5687 0682                            l5679 0656                            l4879 2E08  
                          l5599 4C98                            l6719 1A06                            l6671 16F2  
                          l6663 162C                            l6639 148A                            l6583 1190  
                          l4959 5BB2                            l4967 5BC8                            l4991 5E74  
                          l4983 5E44                            l4975 5E28                            l6399 649A  
                          l6751 51E2                            l6743 5182                            l6735 5134  
                          l6727 5110                            l5961 50F2                            l5953 509E  
                          l5945 502A                            l5937 4FBE                            l5929 1170  
                          l5881 0DAA                            l5873 0D14                            l5865 0CBC  
                          l5785 0934                            l5777 0902                            l5769 08BC  
                          l5697 06D2                            l4897 2E68                            l6681 17EC  
                          l6673 1758                            l6665 1676                            l6657 158E  
                          l6649 1522                            l6593 11C8                            l6585 1198  
                          l4969 5BD8                            l4993 5E7C                            l4985 5E52  
                          l4977 5E2A                            l6753 5206                            l6745 519A  
                          l6737 5140                            l6729 5112                            l5955 50BA  
                          l5947 504E                            l5939 4FCE                            l5963 5108  
                          l5891 0E36                            l5875 0D30                            l5867 0CC0  
                          l5787 0944                            l5779 091C                            l5699 06E2  
                          l4899 2E96                            l6691 1872                            l6675 176E  
                          l6659 15CC                            l6587 11A4                            l4995 5E8A  
                          l4987 5E5A                            l4979 5E38                            l5971 6460  
                          l6755 5218                            l6747 51B6                            l6739 5158  
                          l5957 50CA                            l5949 5076                            l5877 0D64  
                          l5869 0CDC                            l5797 0970                            l5981 59A0  
                          l6693 1888                            l6685 1800                            l6669 168A  
                          l6677 1792                            l6597 11E8                            l6589 11B4  
                          l4997 5EA0                            l4989 5E6C                            l5973 647C  
                          l6749 51CE                            l6757 5232                            l5959 50DA  
                          l5887 0DCC                            l5879 0D98                            l5799 0990  
                          l5991 59D8                            l5983 59B0                            l6695 1890  
                          l6679 17C8                            l6687 1824                            l4999 5EA8  
                          l5967 6448                            l5977 6664                            l5897 0E58  
                          l5889 0DF4                            l5993 59EA                            l5985 59BE  
                          l6697 18D0                            l6689 1840                            l5969 6450  
                          l5899 0EA8                            l5995 59F4                            l5979 599C  
                          l5997 5A06                            l5989 59C4                            l5999 5A10  
                          STR_1 0611                            STR_2 0611                            STR_3 0610  
                          STR_4 0620                            STR_5 0601                            _LATC 0F8B  
                          u5000 4AB4                            u5001 4AB0                            u5010 4AD4  
                          u5011 4AD0                            u5100 52FC                            u5020 4AF4  
                          u5101 52F8                            u5021 4AEE                            u5110 5320  
                          u5030 4AF6                            u5111 531C                            u5120 5340  
                          u5040 525A                            u5200 5C1C                            u6000 6230  
                          u5121 533C                            u5041 5256                            u5201 5C18  
                          u6001 622C                            u5130 5352                            u5050 526C  
                          u5210 5C3A                            u6010 6324                            u5131 534E  
                          u5051 5268                            u5211 5C36                            u6011 6320  
                          u5140 5380                            u5060 5282                            u5220 5C80  
                          u6100 418C                            u6020 634C                            u5141 537A  
                          u5061 527E                            u5221 5C7C                            u6101 4188  
                          u6021 6348                            u5150 5382                            u5070 5296  
                          u5310 3716                            u5230 34B6                            u6110 41BC  
                          u6030 3FFA                            u5071 5292                            u5311 3712  
                          u5231 34B2                            u6111 41B8                            u6031 3FF6  
                          u5160 4E4A                            u5320 37B0                            u5240 34E0  
                          u5400 28FE                            u6200 2C90                            u6120 41DE  
                          u6040 402A                            u7000 3D88                            u5161 4E46  
                          u5305 3684                            u5241 34DC                            u5401 28FA  
                          u6201 2C8C                            u6121 41DA                            u6041 4026  
                          u7001 3D84                            u5090 52BE                            u5170 4EAC  
                          u5330 37E2                            u5410 2934                            u6130 4240  
                          u6050 4046                            u7010 3D9C                            u5091 52BA  
                          u5171 4EA8                            u5331 37DE                            u5411 2930  
                          u6131 423C                            u6051 4042                            u7011 3D98  
                          u4700 6300                            u5180 4F20                            u5260 3582  
                          u5420 2990                            u5340 274A                            u5500 3890  
                          u6300 2E64                            u6220 2CEC                            u6060 406E  
                          u7100 3E8E                            u7020 3DAC                            u5085 5298  
                          u5181 4F1C                            u5325 37A6                            u5261 357E  
                          u5341 2746                            u5501 388C                            u6301 2E60  
                          u6221 2CE8                            u6061 406A                            u7101 3E8A  
                          u7021 3DA8                            u4710 65AA                            u5190 4F4C  
                          u5430 2A2C                            u5350 2774                            u5510 38C2  
                          u6310 2F1E                            u6230 2D42                            u6070 40A6  
                          u7110 3EA2                            u7030 3DBC                            u4711 65A6  
                          u5191 4F48                            u5255 354A                            u5431 2A28  
                          u5351 2770                            u5511 38BE                            u6311 2F1A  
                          u6231 2D3E                            u6215 2CA0                            u6071 40A2  
                          u7111 3E9E                            u7031 3DB8                            u4720 5CC0  
                          u4800 6110                            u5280 3620                            u5440 2ACA  
                          u5600 3AC4                            u5520 38EC                            u8000 0CDC  
                          u6320 2F70                            u6240 2D64                            u6160 2BF0  
                          u6080 40CE                            u7200 3FA4                            u7120 3EB2  
                          u7040 3DCC                            u6400 5E38                            u4721 5CBC  
                          u4801 610C                            u5281 361C                            u5425 2986  
                          u5601 3AC0                            u5521 38E8                            u8001 0CD8  
                          u6321 2F6C                            u6241 2D60                            u6161 2BEC  
                          u6145 4250                            u6081 40CA                            u7201 3FA0  
                          u7121 3EAE                            u7041 3DC8                            u6401 5E34  
                          u4730 5CD8                            u4810 6138                            u5290 3668  
                          u5450 2AFE                            u5370 2800                            u5610 3AEC  
                          u5530 3946                            u7210 5708                            u8010 0DAA  
                          u6250 2D9A                            u6170 2C10                            u6090 416C  
                          u7130 3EC8                            u7050 3DF4                            u6410 5E52  
                          u4731 5CD4                            u4811 6134                            u5291 3664  
                          u5275 35E8                            u5451 2AFA                            u5371 27FC  
                          u5611 3AE8                            u5531 3942                            u7211 5704  
                          u8011 0DA6                            u6251 2D96                            u6171 2C0C  
                          u6155 429C                            u6091 4168                            u7131 3EC4  
                          u7051 3DF0                            u6411 5E4E                            u4660 6610  
                          u4740 5D12                            u4820 636E                            u4900 4988  
                          u5700 218C                            u5460 6258                            u5380 283A  
                          u5620 3B2E                            u5540 3976                            u7300 569C  
                          u7220 5732                            u8100 1080                            u8020 0DC8  
                          u6260 2DAC                            u6180 2C34                            u7140 3ED8  
                          u7060 3E04                            u6340 5B38                            u6420 5E6C  
                          u6500 653E                            u4661 660C                            u4741 5D0E  
                          u4821 636A                            u4901 4984                            u5701 2188  
                          u5461 6254                            u5445 2AC0                            u5381 2836  
                          u5365 27C6                            u5621 3B2A                            u5541 3972  
                          u7301 5698                            u7221 572E                            u8101 107C  
                          u8021 0DC4                            u6261 2DA8                            u6181 2C30  
                          u7141 3ED4                            u7061 3E00                            u6341 5B34  
                          u6421 5E68                            u6501 653A                            u4670 62C6  
                          u4750 5D28                            u4830 6398                            u4910 499C  
                          u5710 21B8                            u5470 6292                            u5630 3B44  
                          u5550 39B4                            u7310 56E6                            u6510 42F2  
                          u7230 574E                            u8110 10B4                            u6270 2E02  
                          u6190 2C68                            u7150 3F0E                            u7070 3E14  
                          u6350 5B52                            u6430 5E8A                            u4671 62C2  
                          u4751 5D24                            u4831 6394                            u4911 4998  
                          u5711 21B4                            u5471 628E                            u5631 3B40  
                          u5551 39B0                            u7311 56E2                            u6511 42EE  
                          u7231 574A                            u8111 10B0                            u6335 3006  
                          u6271 2DFE                            u6191 2C64                            u7151 3F0A  
                          u7071 3E10                            u6351 5B4E                            u6431 5E86  
                          u4840 5F9E                            u4680 62EA                            u4760 5D44  
                          u4920 49B0                            u5800 238C                            u5720 21DA  
                          u5480 64F8                            u7320 58EE                            u5640 3B82  
                          u5560 3A0E                            u6600 4424                            u6520 4308  
                          u7240 576A                            u8120 10E4                            u8040 0E54  
                          u8200 5A06                            u6280 2E1E                            u7160 3F38  
                          u7080 3E24                            u6360 5B78                            u6440 5EA0  
                          u7400 47AA                            u4841 5F9A                            u4681 62E6  
                          u4761 5D40                            u4921 49AC                            u5801 2388  
                          u5721 21D6                            u5481 64F4                            u7321 58EA  
                          u5641 3B7E                            u5561 3A0A                            u6601 4420  
                          u6521 4304                            u7241 5766                            u8121 10E0  
                          u8041 0E50                            u8201 5A02                            u6281 2E1A  
                          u7161 3F34                            u7081 3E20                            u6361 5B74  
                          u6441 5E9C                            u7401 47A6                            u4850 5FC2  
                          u4690 62FE                            u4770 5D64                            u5810 23B4  
                          u5730 21F0                            u7330 5908                            u5490 5AB0  
                          u5650 3BC6                            u5570 3A38                            u6610 4436  
                          u6530 4334                            u7250 57A6                            u8130 1114  
                          u8050 0EBA                            u8210 5A36                            u6290 2E3E  
                          u7170 3F54                            u7090 3E46                            u6370 5B96  
                          u6450 5EC4                            u7410 47EA                            u4851 5FBE  
                          u4691 62F8                            u4771 5D60                            u5811 23B0  
                          u5731 21EC                            u7331 5904                            u5491 5AAC  
                          u5395 28C4                            u5651 3BC2                            u5571 3A34  
                          u6611 4432                            u6531 4330                            u7251 57A2  
                          u8131 1110                            u8051 0EB6                            u8035 0E12  
                          u8211 5A32                            u6291 2E3A                            u7171 3F50  
                          u7091 3E42                            u6371 5B92                            u6451 5EC0  
                          u7411 47E6                            u4860 5FD4                            u4780 60C0  
                          u4940 49D4                            u5820 23D4                            u7340 5930  
                          u8140 4FCE                            u5660 3C00                            u5580 3A8E  
                          u6700 4594                            u6620 445C                            u6540 435C  
                          u7260 57B8                            u8060 0F9C                            u8220 5A46  
                          u7180 3F72                            u7500 4B12                            u8300 3158  
                          u6380 5BB2                            u6460 5D7E                            u7420 4806  
                          u4861 5FD0                            u4781 60BC                            u4941 49D0  
                          u5821 23D0                            u7341 592C                            u8141 4FCA  
                          u5661 3BFC                            u5581 3A8A                            u6701 4590  
                          u6621 4458                            u6541 4358                            u7261 57B4  
                          u8221 5A42                            u7181 3F6E                            u7501 4B0E  
                          u8301 3154                            u6381 5BAE                            u6461 5D7A  
                          u7421 4802                            u4870 6006                            u4790 60DE  
                          u4950 49FA                            u5910 25B8                            u5830 23F8  
                          u5670 65EE                            u7350 5968                            u8150 4FE8  
                          u5590 3AAE                            u6630 4480                            u6550 4382  
                          u7270 57CA                            u8070 0FCC                            u6710 6070  
                          u7190 3F8E                            u7510 4B3C                            u8310 316E  
                          u8230 305E                            u6390 5BD8                            u6470 5D8E  
                          u7430 483C                            u4871 6002                            u4791 60DA  
                          u4951 49F6                            u4935 49B2                            u5911 25B4  
                          u5671 65EA                            u7351 5964                            u8151 4FE4  
                          u5591 3AAA                            u6631 447C                            u6551 437E  
                          u7271 57C6                            u8071 0FC8                            u6711 606C  
                          u7191 3F8A                            u7511 4B38                            u8311 316A  
                          u8231 305A                            u6391 5BD4                            u6471 5D8A  
                          u7431 4836                            u4960 4A1A                            u4880 4960  
                          u5920 25DC                            u5840 2440                            u5680 2158  
                          u7360 5992                            u8160 502A                            u7280 5628  
                          u6640 448E                            u6560 43A6                            u8080 102E  
                          u6800 544A                            u6720 60AA                            u7600 4CB8  
                          u7520 4B8C                            u8400 3364                            u8320 3182  
                          u8240 30A2                            u6480 5DB4                            u7440 483E  
                          u4961 4A16                            u4881 495C                            u5921 25D8  
                          u5905 250E                            u5841 243C                            u5745 2258  
                          u5681 2154                            u7361 598E                            u8161 5026  
                          u7281 5624                            u6641 448A                            u6561 43A2  
                          u8081 102A                            u8065 0F92                            u6801 5446  
                          u6721 60A6                            u7601 4CB4                            u7521 4B88  
                          u8401 3360                            u8321 317E                            u8241 309E  
                          u6481 5DB0                            u4970 4A3C                            u4890 4972  
                          u5930 2606                            u5850 2462                            u5690 2172  
                          u6730 45C0                            u7370 5EFC                            u7290 5652  
                          u6650 44D2                            u6570 43B6                            u8090 104C  
                          u6810 5466                            u7610 4CD4                            u7530 4BA6  
                          u8410 3372                            u8330 3190                            u8250 30CE  
                          u6490 5DE6                            u7450 48A2                            u8170 647C  
                          u4971 4A38                            u4891 496E                            u5931 2602  
                          u5851 245E                            u5835 23EE                            u5755 228C  
                          u5691 216E                            u6731 45BC                            u7371 5EF8  
                          u7291 564E                            u6651 44CE                            u6571 43B2  
                          u8091 1048                            u6811 5462                            u7611 4CD0  
                          u7531 4BA2                            u8411 336E                            u8331 318C  
                          u8251 30CA                            u6491 5DE2                            u7451 489E  
                          u8171 6478                            u4980 4A74                            u5940 262A  
                          u5860 2472                            u5780 2336                            u6740 45DA  
                          u7380 5F1E                            u6660 4518                            u6580 43C8  
                          u7700 0682                            u8180 59BE                            u6820 5496  
                          u6900 55CC                            u7620 4D06                            u7540 4BC6  
                          u8420 33C0                            u8340 3252                            u8260 30E0  
                          u7460 48B2                            u4981 4A70                            u5941 2626  
                          u5861 246E                            u5765 22B2                            u6741 45D6  
                          u7381 5F1A                            u6661 4514                            u6581 43C4  
                          u7701 067E                            u8181 59BA                            u6821 5492  
                          u6901 55C8                            u7621 4D02                            u7541 4BC2  
                          u8421 33BC                            u8341 324E                            u8261 30DC  
                          u7461 48AE                            u4990 4A94                            u5950 2654  
                          u5790 2366                            u6750 45F6                            u7390 5F46  
                          u6670 4542                            u6590 43FA                            u7710 06AE  
                          u8190 59EA                            u6830 54A8                            u6910 3C5A  
                          u7630 4D4C                            u7550 4C0C                            u8350 329E  
                          u8270 30FA                            u7470 48C2                            u4991 4A90  
                          u5951 2650                            u5791 2362                            u5775 22D8  
                          u6751 45F2                            u7391 5F42                            u6671 453E  
                          u6591 43F6                            u7711 06AA                            u8191 59E6  
                          u6831 54A4                            u6911 3C56                            u7631 4D48  
                          u7551 4C08                            u8351 329A                            u8271 30F6  
                          u7471 48BE                            u5960 2682                            u6760 4780  
                          u6680 4554                            u7800 0816                            u7720 06D2  
                          u6920 3C76                            u6840 617A                            u7640 4D84  
                          u7560 4C38                            u8360 3306                            u8280 310A  
                          u9400 135E                            u9320 11C4                            u7480 48D2  
                          u5961 267E                            u5785 232C                            u6761 477C  
                          u6681 4550                            u7801 0812                            u7721 06CE  
                          u6921 3C72                            u6841 6176                            u7641 4D80  
                          u7561 4C34                            u8361 3302                            u8281 3106  
                          u9401 135A                            u9321 11C0                            u7481 48CE  
                          u5970 26AC                            u6690 457A                            u7810 0884  
                          u7730 06E2                            u6770 53A8                            u6930 3CE0  
                          u6850 54D4                            u7650 4D96                            u7570 4C98  
                          u8370 3320                            u8290 311C                            u9410 13EE  
                          u9330 11E4                            u7490 491A                            u5971 26A8  
                          u5875 247A                            u6691 4576                            u7811 0880  
                          u7731 06DE                            u6771 53A4                            u6931 3CDC  
                          u6851 54D0                            u7651 4D92                            u7571 4C94  
                          u8371 331C                            u8291 3118                            u9411 13EA  
                          u9331 11E0                            u7491 4916                            u5980 26D6  
                          u7900 0A34                            u7820 08BC                            u7740 06F0  
                          u6780 53F0                            u7580 581E                            u6940 3CF2  
                          u6860 551C                            u7660 4DA4                            u8380 3336  
                          u9500 1608                            u9420 1408                            u9340 1202  
                          u5981 26D2                            u5885 249E                            u7901 0A30  
                          u7821 08B8                            u7741 06EC                            u6781 53EC  
                          u7581 581A                            u6941 3CEE                            u6861 5518  
                          u7661 4DA0                            u8381 3332                            u9501 1604  
                          u9421 1404                            u9341 11FE                            u5894 24BE  
                          u7910 0AB0                            u7830 0902                            u7750 073A  
                          u6790 5420                            u7590 585E                            u6950 3D04  
                          u5990 61F6                            u6870 554E                            u7670 4DBA  
                          u8390 3350                            u9510 1676                            u9430 1438  
                          u9350 1264                            u5895 24B8                            u7911 0AAC  
                          u7831 08FE                            u7751 0736                            u6791 541C  
                          u7591 585A                            u6951 3D00                            u5991 61F2  
                          u6871 554A                            u7671 4DB6                            u8391 334C  
                          u9511 1672                            u9431 1434                            u9351 1260  
                          u8720 63D4                            u8800 1B74                            u7920 0AF6  
                          u7840 091C                            u7760 0750                            u6960 3D1A  
                          u6880 5570                            u7680 4DEA                            u9600 19DE  
                          u9520 16F2                            u9440 148A                            u9360 12AA  
                          u8721 63D0                            u8801 1B70                            u7921 0AF2  
                          u7841 0918                            u7761 074C                            u6961 3D16  
                          u6881 556C                            u7681 4DE6                            u9601 19DA  
                          u9521 16EE                            u9441 1486                            u9361 12A6  
                          u8730 63F2                            u8810 1BFE                            u7930 0B48  
                          u7850 092E                            u7770 075E                            u7690 0656  
                          u6970 3D30                            u6890 55A4                            u9450 14EA  
                          u9370 12D6                            u9610 5158                            u8731 63EE  
                          u8811 1BFA                            u7931 0B44                            u7851 092A  
                          u7771 075A                            u7691 0652                            u6971 3D2C  
                          u6891 55A0                            u9451 14E6                            u9611 5154  
                          u8900 1EEE                            u8820 1CE0                            u8740 1A38  
                          u7940 0B82                            u7860 0944                            u7780 07A2  
                          u6980 3D44                            u9460 150E                            u9380 130A  
                          u9620 517E                            u8901 1EEA                            u8821 1CDC  
                          u8741 1A34                            u7941 0B7E                            u7861 0940  
                          u7781 079E                            u6981 3D40                            u9461 150A  
                          u9381 1306                            u9621 517A                            u8910 1F68  
                          u8830 1D2C                            u8750 1A58                            u7950 0BC4  
                          u7870 096C                            u7790 07C4                            u6990 3D56  
                          u9550 17C8                            u9470 157A                            u9390 132C  
                          u9630 519A                            u8911 1F64                            u8831 1D28  
                          u8751 1A54                            u7951 0BC0                            u7871 0968  
                          u7791 07C0                            u6991 3D52                            u9551 17C4  
                          u9535 1734                            u9471 1576                            u9391 1328  
                          u9375 12CC                            u9631 5196                            u8920 1FB2  
                          u8840 1D5C                            u8760 1A86                            u7880 09A6  
                          u9560 17EC                            u9640 5244                            u8921 1FAE  
                          u8841 1D58                            u8761 1A82                            u7881 09A2  
                          u9561 17E8                            u9545 1778                            u9641 5240  
                          u8930 1FFE                            u8850 1DBE                            u8770 1AA0  
                          u7970 0C36                            u7890 0A16                            u9570 1888  
                          u9490 15CC                            u8931 1FFA                            u8851 1DBA  
                          u8771 1A9C                            u7971 0C32                            u7891 0A12  
                          u9571 1884                            u9491 15C8                            u8940 2032  
                          u8860 1DDC                            u8780 1B1A                            u7980 0C98  
                          u9580 18D0                            u8861 1DD8                            u8781 1B16  
                          u7981 0C94                            u7965 0BE0                            u9581 18CC  
                          u9485 15A6                            u8950 2082                            u8870 1E28  
                          u7990 0CBC                            u9590 19A8                            u8951 207E  
                          u8871 1E24                            u7991 0CB8                            u9591 19A4  
                          u8960 20B2                            u8880 1E8E                            u8961 20AE  
                          u8945 2028                            u8881 1E8A                            u9657 5224  
                          u8970 2104                            u8890 1EBC                            u8971 2100  
                          u8891 1EB8                            u8795 1B3E                            u9667 4404  
                          u8980 65C8                            u8981 65C4                            u9677 4522  
                          u8990 6522                            u9687 62CC                            u8991 651E  
                          u9697 5FA4                            _Fsid 00F4                            _Stat 00FA  
                          abs@a 0007                            _dbuf 0147                            _main 510C  
                  find_volume@i 00B5                            _prec 00F2                            fsr0h 0FEA  
                          fsr1h 0FE2                            fsr2h 0FDA                            fsr0l 0FE9  
                          indf1 0FE7                            indf2 0FDF                            fsr1l 0FE1  
                          fsr2l 0FD9                   disk_ioctl@cmd 0011                   disk_ioctl@csd 0020  
                 disk_read@buff 0011                __end_of_ADC_Read 65DC                   disk_ioctl@res 0035  
                 disk_ioctl@ptr 0037                   disk_read@pdrv 0019                            prodh 0FF4  
                          prodl 0FF3                  ??_get_ldnumber 0003                            start 0000  
        __end_of_SPI_Initialize 664E              disk_initialize@cmd 0019                    ?_follow_path 0085  
            disk_initialize@ocr 0013                    ___param_bank 0000              disk_initialize@tmr 001B  
               create_name@path 000A                create_chain@clst 0058                           ??_abs 0009  
                   _sync_window 4E2C   __end_of_OSCILLATOR_Initialize 665A                           ?_main 0001  
               __end_of___awdiv 5BEA                 __end_of___awmod 5ED6                 __end_of___lldiv 5F7A  
               ___awdiv@divisor 0003                           _LATC2 7C5A                 ___awdiv@counter 0005  
                  vfpfcnvrt@fmt 000C                           _TRISC 0F94                 __end_of_f_close 6400  
                         _FatFs 0187                 __end_of_chk_chr 635E                 __end_of_f_lseek 213E  
           ___lmul@multiplicand 0005                 __end_of_f_mount 5A62                    ___send_cmd@n 0009  
               __end_of_dir_sdi 42E0                 __end_of_f_write 1A18                 __end_of_get_fat 387A  
                         _flags 00F8                 __end_of_mem_cmp 623A                 __end_of_mem_cpy 60AC  
               __end_of_mem_set 64FA                           _fputc 5D6E                   find_volume@br 0080  
                 find_volume@fs 00B8                   find_volume@pt 009A                           _width 00F0  
                         _putch 666E                __end_of_SPI_Open 663E                  disk_ioctl@buff 0012  
                disk_read@count 0017                           tablat 0FF5                  disk_ioctl@pdrv 0030  
                         plusw2 0FDB                 __end_of_put_fat 2BC0                           status 0FD8  
               __end_of_sprintf 64C2                 __end_of_sync_fs 4788                   main@adc_value 0145  
                 get_ldnumber@i 0007                 ?_SPI_Initialize 0001                 __initialization 6400  
           disk_initialize@pdrv 0012                    __end_of_main 5248                    clust2sect@fs 000D  
                        ??_main 00EE                   __activetblptr 0002        __end_of_SPI_Exchange8bit 6614  
                        _ADCON0 0FC2                          _ADCON1 0FC1                          _ADCON2 0FC0  
                        ?_fputc 0001                          _ADRESH 0FC4                          _ADRESL 0FC3  
              ___awdiv@dividend 0001                          ?_putch 0001                   vfpfcnvrt@done 000F  
                        _SSPADD 0FC8                          _SSPBUF 0FC9            __end_of_dir_register 58D4  
              __end_of_check_fs 56EE                __end_of_deselect 6664                __end_of_dir_find 55D2  
              __end_of_dir_next 304A                    ?_move_window 0030            __end_of_create_chain 3C2E  
                  vfprintf@cfmt 0019                __end_of_ld_clust 61C8                          ___lmul 623A  
                     ??___awdiv 0005                       ??___awmod 0005                       ??___lldiv 0009  
                        _f_open 304A                          _f_sync 4FB0                       ??_f_close 004B  
                find_volume@fmt 00B7                          clear_0 641A                          clear_1 642C  
                        clear_2 6438                  find_volume@rfs 0045                       ??_chk_chr 0004  
                find_volume@vol 00A0                ___awdiv@quotient 0007                 ___awmod@divisor 0003  
                        _select 658E                       ??_f_lseek 0080                          isa$std 0001  
                     ??_f_mount 0054                 ___awmod@counter 0005                       ??_dir_sdi 0058  
                     ??_f_write 0080                       ??_get_fat 0041                          main@bw 0143  
                        _strlen 64FA                __end_of_send_cmd 63B6                       ??_mem_cmp 0006  
                     ??_mem_cpy 0007                          fputc@c 0001                       ??_mem_set 0007  
               disk_ioctl@csize 0031                __end_of_validate 599C            __end_of_get_ldnumber 57F8  
                     ?_ADC_Read 0001                    __mediumconst 0000                 disk_read@sector 0013  
                        tblptrh 0FF7                          tblptrl 0FF6                          tblptru 0FF8  
              __end_of_st_clust 658E                          putch@c 0001                __end_of_vfprintf 6486  
                     ??_put_fat 0045                 xmit_datablock@i 0007                       ??_sprintf 001F  
                     ??_sync_fs 003B              rcvr_datablock@buff 0002               _SYSTEM_Initialize 6664  
                    __accesstop 0080         __end_of__initialization 643E                  disk_write@buff 0011  
                get_ldnumber@tp 0006                  get_ldnumber@tt 0009                  disk_write@pdrv 001A  
                 _FatFs@ff$F539 00F6              ?_SYSTEM_Initialize 0001                   ___rparam_used 0001  
                __pcstackCOMRAM 0001                    __pidataBANK0 6670             ??_SYSTEM_Initialize 0001  
                    ___send_cmd 5CAC                   __end_of_fputc 5E28                   __end_of_putch 6670  
                     ?_SPI_Open 0001                      ??_ADC_Read 0003                         ??_fputc 0004  
     __end_of_SYSTEM_Initialize 666E                         ??_putch 0001                      __pbssBANK0 00F0  
                    __pbssBANK1 0147                _find_volume$1034 0090                _find_volume$1035 0094  
                       ?___lmul 0001                         ?_f_open 00BA                         ?_f_sync 0044  
             ??_disk_initialize 0011                    ?_sync_window 001B                  ___lmul@product 0009  
                       ?_select 0001                      ??_SPI_Open 0001                         ?_strlen 0001  
                     ?_check_fs 003B                      _disk_ioctl 213E                  follow_path@dir 0087  
                follow_path@res 008A                      _disk_write 494E                     send_cmd@cmd 000F  
                     ?_deselect 0001                     send_cmd@arg 000B                     send_cmd@res 0010  
                remove_chain@fs 0056                       ?_dir_find 0080                       ?_dir_next 006D  
                       _SSPCON1 0FC6                       ?_ld_clust 0001                         _SSPSTAT 0FC7  
                    _clust2sect 5A62                sync_window@wsect 002C                ??_SPI_Initialize 0001  
                 ?_remove_chain 0056               __end_of_dir_alloc 54B0                       ?_send_cmd 000B  
                       __Hparam 0000                  ___send_cmd@cmd 000A                  ___send_cmd@arg 0004  
                ___send_cmd@res 0008                         __Lparam 0000                       ?_validate 0002  
             __end_of_disk_read 5384                      f_close@res 004B                         ___awdiv 5B28  
                     ?_st_clust 0001                         ___awmod 5E28                     ?___send_cmd 0004  
                       ___lldiv 5ED6                      check_fs@fs 003B                       ?_vfprintf 0016  
                  __psmallconst 0600                         _f_close 63B6             _disk_initialize$440 0017  
                       __pcinit 6400                         _chk_chr 6302                         _f_lseek 1A18  
                       __ramtop 0600                         _f_mount 599C                         __ptext0 510C  
                       __ptext1 64FA                         __ptext2 6486                         __ptext3 6448  
                       __ptext4 4788                         __ptext5 5D6E                         __ptext6 666E  
                       __ptext7 6530                         __ptext8 5E28                         __ptext9 5B28  
                       _dir_sdi 3FB8                     validate@fil 0008                         _f_write 1190  
                   validate@obj 0002                         _get_fat 349C                      chk_chr@chr 0002  
                  _dir_register 57F8                      chk_chr@str 0001                         _mem_cmp 61C8  
                       _mem_cpy 6016           _OSCILLATOR_Initialize 664E                         _mem_set 64C2  
                    ??_check_fs 0041                ___awmod@dividend 0001                 find_volume@path 0046  
               find_volume@nrsv 00A2                 find_volume@stat 00AC        ??_PIN_MANAGER_Initialize 0001  
                  _create_chain 387A                      ??_deselect 0002                      ??_dir_find 0080  
             ?_SPI_Exchange8bit 0001                         _put_fat 2730                      ??_dir_next 0070  
                       _sprintf 6486                         main@res 0140                      f_lseek@bcs 0099  
                    ??_ld_clust 0005                         _sync_fs 45A2                      f_lseek@ofs 006F  
                    f_lseek@res 0090            end_of_initialization 643E              ??_SPI_Exchange8bit 0001  
          SPI_Exchange8bit@data 0001                      f_open@mode 00BD                      f_open@path 00BC  
                ??_remove_chain 005C                         fputc@fp 0003                   __Lmediumconst 0000  
               disk_status@pdrv 0001                  _rcvr_datablock 5F7A                 ___lldiv@divisor 0005  
                    f_mount@cfs 0055                      f_mount@res 0054                      ??_send_cmd 000F  
                    f_mount@opt 0053                      f_mount@vol 0058                 ___lldiv@counter 000D  
                  _get_ldnumber 56EE                      ??_validate 0004               __end_of_vfpfcnvrt 494E  
                       postdec1 0FE5                         postdec2 0FDD                         postinc0 0FEE  
                       postinc1 0FE6                         postinc2 0FDE                vfpfcnvrt@convarg 0011  
                    ??_st_clust 0007                  move_window@res 003A                      ??_vfprintf 0019  
                    _wait_ready 62A4                      dir_alloc@n 0086                         strlen@a 0003  
                       strlen@s 0001                remove_chain@clst 0058                      dir_find@dp 0080  
               _create_name$930 000D                      dir_sdi@idx 0056                      dir_next@dp 006D  
                   ?_disk_ioctl 0011             rcvr_datablock@token 0008                      f_write@btw 0071  
                    f_write@res 008C                       _TRISAbits 0F92                     ?_disk_write 0011  
                     _TRISDbits 0F95                      get_fat@val 004B                 get_ldnumber@vol 0004  
               disk_write@count 0017                     ?_clust2sect 000D          __end_of_rcvr_datablock 6016  
                 ??_create_name 000B                disk_initialize@n 001D                      ld_clust@cl 000B  
                    ld_clust@fs 0001                      main@buffer 0100                      main@length 0141  
                 ??_find_volume 0048                   ??_disk_status 0001                  _xmit_datablock 60AC  
                __end_of___lmul 62A4                     vfpfcnvrt@ap 000D                     st_clust@dir 0001  
                   vfpfcnvrt@cp 0010                     vfpfcnvrt@fp 000B                  __end_of_f_open 349C  
                __end_of_f_sync 510C                  clust2sect@clst 000F          ?_OSCILLATOR_Initialize 0001  
                __end_of_select 65B8                  __end_of_strlen 6530             start_initialization 6400  
                   __end_of_abs 6564                      mem_cmp@cnt 0004                      mem_cmp@dst 0001  
                    mem_cmp@src 0003                      mem_cpy@cnt 0005                     put_fat@clst 003D  
                    mem_cpy@dst 0001                      mem_cpy@src 0003                 ?_rcvr_datablock 0002  
               _disk_initialize 42E0                      mem_set@cnt 0005                      mem_set@dst 0001  
                    mem_set@val 0003          __end_of_xmit_datablock 6140                   ??_follow_path 0080  
           __end_of_create_name 3FB8                     vfprintf@fmt 0017                        ??___lmul 0009  
                      ??_f_open 00BE                        ??_f_sync 0046                     ?_wait_ready 0001  
                   __pdataBANK0 00FA             __end_of_find_volume 1190             __end_of_disk_status 65FA  
                      ??_select 0004            __end_of_remove_chain 4C9C                        ??_strlen 0003  
             rcvr_datablock@btr 0004               rcvr_datablock@tmr 0006                     __pbssBIGRAM 0187  
                 __pcstackBANK0 0080                   __pcstackBANK1 0100                    check_fs@sect 003D  
        _PIN_MANAGER_Initialize 6614                 ?_xmit_datablock 0004                        ?___awdiv 0001  
                  ??___send_cmd 0008                        ?___awmod 0001                       _dir_alloc 5384  
                      ?___lldiv 0001                        ?_f_close 0049                       _disk_read 5248  
                      ?_chk_chr 0001                   follow_path@dp 0085                        ?_f_lseek 006D  
                 follow_path@ns 0089             __end_of_follow_path 4E2C                        ?_f_mount 0050  
                      ?_dir_sdi 0055                        ?_f_write 006D                        ?_get_fat 003B  
                   __smallconst 0600                        ?_mem_cmp 0001                        ?_mem_cpy 0001  
                      ?_mem_set 0001                        _ADC_Read 65B8                       f_close@fp 0049  
                      ?_put_fat 003B         __end_of_disk_initialize 45A2                        ?_sprintf 001A  
                      ?_sync_fs 0039                     _get_fat$680 0049               find_volume@fasize 00AD  
            __end_of___send_cmd 5D6E                     _create_name 3C2E                       f_lseek@fp 006D  
                      _LATDbits 0F8C               find_volume@szbfat 0096                       f_open@dir 00D7  
                     f_open@res 00D6                       f_open@sfn 00C2               find_volume@sysect 009C  
                   _find_volume 062C                     _disk_status 65DC                   ??_move_window 0036  
                     f_mount@fs 0050                       f_mount@rp 0057                 follow_path@path 0086  
                 move_window@fs 0030                       dir_find@c 0081                      ?_dir_alloc 0080  
               remove_chain@res 0060                 remove_chain@nxt 0061                       f_sync@dir 0047  
                     f_sync@res 0046                       dir_sdi@ic 005F                       dir_sdi@dp 0055  
                     dir_next@c 0078                       dir_next@i 007A                      ?_disk_read 0011  
                     _vfpfcnvrt 4788                       f_write@cc 0090                       f_write@bw 0073  
                     f_write@fp 006D                        _SPI_Open 662E                       get_fat@bc 0053  
                     get_fat@fs 003B                       get_fat@wc 004F                      _ADCON0bits 0FC2  
                      _CardType 00F9                    ??_disk_ioctl 0014                    ??_disk_write 0019  
                  f_lseek@ifptr 0091                    f_lseek@nsect 0095                      st_clust@cl 0003  
                    vfpfcnvrt@c 0015                    ??_clust2sect 0013               ___lmul@multiplier 0001  
                    put_fat@res 0053                      put_fat@val 0041               move_window@sector 0032  
               dir_next@stretch 006E                        __Hrparam 0000                      vfprintf@ap 0018  
                      __Lrparam 0000                      vfprintf@fp 0016                     _follow_path 4C9C  
            __end_of_disk_ioctl 2730              __end_of_disk_write 4AF8         ??_OSCILLATOR_Initialize 0001  
                    ?_vfpfcnvrt 000B             __end_of_move_window 5CAC              __end_of_clust2sect 5B28  
                    sprintf@fmt 001C                        _check_fs 55D2             xmit_datablock@token 0006  
              ??_rcvr_datablock 0006                 dir_register@res 008B                        _deselect 665A  
                      __ptext10 1190                        __ptext11 304A                        __ptext20 6016  
                      __ptext12 4AF8                        __ptext21 5384                        __ptext13 4C9C  
                      __ptext30 55D2                        __ptext22 3FB8                        __ptext14 6140  
                      __ptext31 1A18                        __ptext23 2BC0                        __ptext15 54B0  
                      __ptext40 58D4                        __ptext32 387A                        __ptext24 599C  
                      __ptext16 61C8                        __ptext41 65DC                        __ptext33 2730  
                      __ptext25 062C                        __ptext17 3C2E                        __ptext50 5248  
                      __ptext42 45A2                        __ptext34 349C                        __ptext26 56EE  
                      __ptext18 6302                        __ptext51 635E                        __ptext43 64C2  
                      __ptext35 5A62                        __ptext27 42E0                        __ptext19 57F8  
                      __ptext60 664E                        __ptext52 5CAC                        __ptext44 213E  
                      __ptext36 623A                        __ptext28 662E                        __ptext61 65B8  
                      __ptext53 658E                        __ptext45 6564                        __ptext37 5ED6  
                      __ptext29 663E                        __ptext54 62A4                        __ptext46 5BEA  
                      __ptext38 63B6                        __ptext55 665A                        __ptext47 4E2C  
                      __ptext39 4FB0                        __ptext56 5F7A                        __ptext48 494E  
                      __ptext57 65FA                        __ptext49 60AC                        __ptext58 6664  
                      __ptext59 6614                        _dir_find 54B0                        _dir_next 2BC0  
                 dir_alloc@nent 0081                ?_disk_initialize 0001                        _ld_clust 6140  
                sync_window@res 0029                      sync_fs@res 0043                    _remove_chain 4AF8  
              find_volume@bsect 00B1                find_volume@nclst 00A8                find_volume@tsect 00A4  
              find_volume@wmode 0047                        f_open@dj 00D9                        f_open@cl 00CE  
                      f_open@fp 00BA                        f_open@dw 00D2                        _send_cmd 635E  
                      _validate 58D4                        isa$xinst 0000                        f_sync@fp 0044  
                   ??_dir_alloc 0083                        _st_clust 6564                        get_fat@p 0051  
                  ??_wait_ready 0002                        _vfprintf 6448                   ??_sync_window 001D  
                   ??_disk_read 0019                   _disk_read$450 001A                     f_lseek@clst 009D  
                      mem_cmp@d 0008                     _OSCTUNEbits 0F9B                        mem_cmp@r 000A  
                      mem_cmp@s 000C                       put_fat@bc 0051                        mem_cpy@d 0007  
                     put_fat@fs 003B                        mem_cpy@s 0009                        mem_set@d 0007  
                 wait_ready@tmr 0002                       sprintf@ap 001F              xmit_datablock@buff 0004  
            xmit_datablock@resp 0009                  dir_register@dp 0089                ??_xmit_datablock 0007  
            __end_of_wait_ready 6302                ___lldiv@dividend 0001         ?_PIN_MANAGER_Initialize 0001  
                  dir_alloc@res 0088                   sync_window@fs 001B                   sync_window@nf 002A  
                   f_mount@path 0052                       sync_fs@fs 0039                      _OSCCONbits 0FD3  
                   _move_window 5BEA                _SPI_Exchange8bit 65FA                     ??_vfpfcnvrt 000E  
                      put_fat@p 0054                   ?_dir_register 0089                        sprintf@f 0020  
                      sprintf@s 001A                     dir_alloc@dp 0080                ___lldiv@quotient 0009  
                   dir_find@dir 0082             __end_of_sync_window 4FB0                     dir_find@res 0084  
                 ?_create_chain 0056                     _SSPCON1bits 0FC6                    dir_next@clst 007C  
                   dir_sdi@clst 0065  __end_of_PIN_MANAGER_Initialize 662E                     dir_sdi@sect 0061  
                  ?_create_name 0009                    f_write@csect 008F                    f_write@wbuff 008D  
                   f_write@buff 006F                     f_write@clst 0096                     f_write@sect 0092  
                  ?_find_volume 0045                     f_write@wcnt 009A                   ?_get_ldnumber 0001  
                  ?_disk_status 0001                     _put_fat$706 004D                     _put_fat$707 004F  
