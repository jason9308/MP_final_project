

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec 26 17:54:49 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    71   000000                     
    72                           ; Generated 25/07/2024 GMT
    73                           ; 
    74                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution. Publication is not required when
    88                           ;        this file is used in an embedded application.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F4520 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106   000FE0                     bsr             equ	4064
   107   000FE9                     fsr0            equ	4073
   108   000FEA                     fsr0h           equ	4074
   109   000FE9                     fsr0l           equ	4073
   110   000FE1                     fsr1            equ	4065
   111   000FE2                     fsr1h           equ	4066
   112   000FE1                     fsr1l           equ	4065
   113   000FD9                     fsr2            equ	4057
   114   000FDA                     fsr2h           equ	4058
   115   000FD9                     fsr2l           equ	4057
   116   000FEF                     indf0           equ	4079
   117   000FE7                     indf1           equ	4071
   118   000FDF                     indf2           equ	4063
   119   000FF2                     intcon          equ	4082
   120   000000                     nvmcon          equ	0
   121   000FF9                     pcl             equ	4089
   122   000FFA                     pclath          equ	4090
   123   000FFB                     pclatu          equ	4091
   124   000FEB                     plusw0          equ	4075
   125   000FE3                     plusw1          equ	4067
   126   000FDB                     plusw2          equ	4059
   127   000FED                     postdec0        equ	4077
   128   000FE5                     postdec1        equ	4069
   129   000FDD                     postdec2        equ	4061
   130   000FEE                     postinc0        equ	4078
   131   000FE6                     postinc1        equ	4070
   132   000FDE                     postinc2        equ	4062
   133   000FEC                     preinc0         equ	4076
   134   000FE4                     preinc1         equ	4068
   135   000FDC                     preinc2         equ	4060
   136   000FF3                     prod            equ	4083
   137   000FF4                     prodh           equ	4084
   138   000FF3                     prodl           equ	4083
   139   000FD8                     status          equ	4056
   140   000FF5                     tablat          equ	4085
   141   000FF6                     tblptr          equ	4086
   142   000FF7                     tblptrh         equ	4087
   143   000FF6                     tblptrl         equ	4086
   144   000FF8                     tblptru         equ	4088
   145   000FFD                     tosl            equ	4093
   146   000FE8                     wreg            equ	4072
   147   000F80                     PORTA           equ	3968	;# 
   148   000F81                     PORTB           equ	3969	;# 
   149   000F82                     PORTC           equ	3970	;# 
   150   000F83                     PORTD           equ	3971	;# 
   151   000F84                     PORTE           equ	3972	;# 
   152   000F89                     LATA            equ	3977	;# 
   153   000F8A                     LATB            equ	3978	;# 
   154   000F8B                     LATC            equ	3979	;# 
   155   000F8C                     LATD            equ	3980	;# 
   156   000F8D                     LATE            equ	3981	;# 
   157   000F92                     TRISA           equ	3986	;# 
   158   000F92                     DDRA            equ	3986	;# 
   159   000F93                     TRISB           equ	3987	;# 
   160   000F93                     DDRB            equ	3987	;# 
   161   000F94                     TRISC           equ	3988	;# 
   162   000F94                     DDRC            equ	3988	;# 
   163   000F95                     TRISD           equ	3989	;# 
   164   000F95                     DDRD            equ	3989	;# 
   165   000F96                     TRISE           equ	3990	;# 
   166   000F96                     DDRE            equ	3990	;# 
   167   000F9B                     OSCTUNE         equ	3995	;# 
   168   000F9D                     PIE1            equ	3997	;# 
   169   000F9E                     PIR1            equ	3998	;# 
   170   000F9F                     IPR1            equ	3999	;# 
   171   000FA0                     PIE2            equ	4000	;# 
   172   000FA1                     PIR2            equ	4001	;# 
   173   000FA2                     IPR2            equ	4002	;# 
   174   000FA6                     EECON1          equ	4006	;# 
   175   000FA7                     EECON2          equ	4007	;# 
   176   000FA8                     EEDATA          equ	4008	;# 
   177   000FA9                     EEADR           equ	4009	;# 
   178   000FAB                     RCSTA           equ	4011	;# 
   179   000FAB                     RCSTA1          equ	4011	;# 
   180   000FAC                     TXSTA           equ	4012	;# 
   181   000FAC                     TXSTA1          equ	4012	;# 
   182   000FAD                     TXREG           equ	4013	;# 
   183   000FAD                     TXREG1          equ	4013	;# 
   184   000FAE                     RCREG           equ	4014	;# 
   185   000FAE                     RCREG1          equ	4014	;# 
   186   000FAF                     SPBRG           equ	4015	;# 
   187   000FAF                     SPBRG1          equ	4015	;# 
   188   000FB0                     SPBRGH          equ	4016	;# 
   189   000FB1                     T3CON           equ	4017	;# 
   190   000FB2                     TMR3            equ	4018	;# 
   191   000FB2                     TMR3L           equ	4018	;# 
   192   000FB3                     TMR3H           equ	4019	;# 
   193   000FB4                     CMCON           equ	4020	;# 
   194   000FB5                     CVRCON          equ	4021	;# 
   195   000FB6                     ECCP1AS         equ	4022	;# 
   196   000FB6                     ECCPAS          equ	4022	;# 
   197   000FB7                     PWM1CON         equ	4023	;# 
   198   000FB7                     ECCP1DEL        equ	4023	;# 
   199   000FB8                     BAUDCON         equ	4024	;# 
   200   000FB8                     BAUDCTL         equ	4024	;# 
   201   000FBA                     CCP2CON         equ	4026	;# 
   202   000FBB                     CCPR2           equ	4027	;# 
   203   000FBB                     CCPR2L          equ	4027	;# 
   204   000FBC                     CCPR2H          equ	4028	;# 
   205   000FBD                     CCP1CON         equ	4029	;# 
   206   000FBE                     CCPR1           equ	4030	;# 
   207   000FBE                     CCPR1L          equ	4030	;# 
   208   000FBF                     CCPR1H          equ	4031	;# 
   209   000FC0                     ADCON2          equ	4032	;# 
   210   000FC1                     ADCON1          equ	4033	;# 
   211   000FC2                     ADCON0          equ	4034	;# 
   212   000FC3                     ADRES           equ	4035	;# 
   213   000FC3                     ADRESL          equ	4035	;# 
   214   000FC4                     ADRESH          equ	4036	;# 
   215   000FC5                     SSPCON2         equ	4037	;# 
   216   000FC6                     SSPCON1         equ	4038	;# 
   217   000FC7                     SSPSTAT         equ	4039	;# 
   218   000FC8                     SSPADD          equ	4040	;# 
   219   000FC9                     SSPBUF          equ	4041	;# 
   220   000FCA                     T2CON           equ	4042	;# 
   221   000FCB                     PR2             equ	4043	;# 
   222   000FCB                     MEMCON          equ	4043	;# 
   223   000FCC                     TMR2            equ	4044	;# 
   224   000FCD                     T1CON           equ	4045	;# 
   225   000FCE                     TMR1            equ	4046	;# 
   226   000FCE                     TMR1L           equ	4046	;# 
   227   000FCF                     TMR1H           equ	4047	;# 
   228   000FD0                     RCON            equ	4048	;# 
   229   000FD1                     WDTCON          equ	4049	;# 
   230   000FD2                     HLVDCON         equ	4050	;# 
   231   000FD2                     LVDCON          equ	4050	;# 
   232   000FD3                     OSCCON          equ	4051	;# 
   233   000FD5                     T0CON           equ	4053	;# 
   234   000FD6                     TMR0            equ	4054	;# 
   235   000FD6                     TMR0L           equ	4054	;# 
   236   000FD7                     TMR0H           equ	4055	;# 
   237   000FD8                     STATUS          equ	4056	;# 
   238   000FD9                     FSR2            equ	4057	;# 
   239   000FD9                     FSR2L           equ	4057	;# 
   240   000FDA                     FSR2H           equ	4058	;# 
   241   000FDB                     PLUSW2          equ	4059	;# 
   242   000FDC                     PREINC2         equ	4060	;# 
   243   000FDD                     POSTDEC2        equ	4061	;# 
   244   000FDE                     POSTINC2        equ	4062	;# 
   245   000FDF                     INDF2           equ	4063	;# 
   246   000FE0                     BSR             equ	4064	;# 
   247   000FE1                     FSR1            equ	4065	;# 
   248   000FE1                     FSR1L           equ	4065	;# 
   249   000FE2                     FSR1H           equ	4066	;# 
   250   000FE3                     PLUSW1          equ	4067	;# 
   251   000FE4                     PREINC1         equ	4068	;# 
   252   000FE5                     POSTDEC1        equ	4069	;# 
   253   000FE6                     POSTINC1        equ	4070	;# 
   254   000FE7                     INDF1           equ	4071	;# 
   255   000FE8                     WREG            equ	4072	;# 
   256   000FE9                     FSR0            equ	4073	;# 
   257   000FE9                     FSR0L           equ	4073	;# 
   258   000FEA                     FSR0H           equ	4074	;# 
   259   000FEB                     PLUSW0          equ	4075	;# 
   260   000FEC                     PREINC0         equ	4076	;# 
   261   000FED                     POSTDEC0        equ	4077	;# 
   262   000FEE                     POSTINC0        equ	4078	;# 
   263   000FEF                     INDF0           equ	4079	;# 
   264   000FF0                     INTCON3         equ	4080	;# 
   265   000FF1                     INTCON2         equ	4081	;# 
   266   000FF2                     INTCON          equ	4082	;# 
   267   000FF3                     PROD            equ	4083	;# 
   268   000FF3                     PRODL           equ	4083	;# 
   269   000FF4                     PRODH           equ	4084	;# 
   270   000FF5                     TABLAT          equ	4085	;# 
   271   000FF6                     TBLPTR          equ	4086	;# 
   272   000FF6                     TBLPTRL         equ	4086	;# 
   273   000FF7                     TBLPTRH         equ	4087	;# 
   274   000FF8                     TBLPTRU         equ	4088	;# 
   275   000FF9                     PCLAT           equ	4089	;# 
   276   000FF9                     PC              equ	4089	;# 
   277   000FF9                     PCL             equ	4089	;# 
   278   000FFA                     PCLATH          equ	4090	;# 
   279   000FFB                     PCLATU          equ	4091	;# 
   280   000FFC                     STKPTR          equ	4092	;# 
   281   000FFD                     TOS             equ	4093	;# 
   282   000FFD                     TOSL            equ	4093	;# 
   283   000FFE                     TOSH            equ	4094	;# 
   284   000FFF                     TOSU            equ	4095	;# 
   285   000F80                     PORTA           equ	3968	;# 
   286   000F81                     PORTB           equ	3969	;# 
   287   000F82                     PORTC           equ	3970	;# 
   288   000F83                     PORTD           equ	3971	;# 
   289   000F84                     PORTE           equ	3972	;# 
   290   000F89                     LATA            equ	3977	;# 
   291   000F8A                     LATB            equ	3978	;# 
   292   000F8B                     LATC            equ	3979	;# 
   293   000F8C                     LATD            equ	3980	;# 
   294   000F8D                     LATE            equ	3981	;# 
   295   000F92                     TRISA           equ	3986	;# 
   296   000F92                     DDRA            equ	3986	;# 
   297   000F93                     TRISB           equ	3987	;# 
   298   000F93                     DDRB            equ	3987	;# 
   299   000F94                     TRISC           equ	3988	;# 
   300   000F94                     DDRC            equ	3988	;# 
   301   000F95                     TRISD           equ	3989	;# 
   302   000F95                     DDRD            equ	3989	;# 
   303   000F96                     TRISE           equ	3990	;# 
   304   000F96                     DDRE            equ	3990	;# 
   305   000F9B                     OSCTUNE         equ	3995	;# 
   306   000F9D                     PIE1            equ	3997	;# 
   307   000F9E                     PIR1            equ	3998	;# 
   308   000F9F                     IPR1            equ	3999	;# 
   309   000FA0                     PIE2            equ	4000	;# 
   310   000FA1                     PIR2            equ	4001	;# 
   311   000FA2                     IPR2            equ	4002	;# 
   312   000FA6                     EECON1          equ	4006	;# 
   313   000FA7                     EECON2          equ	4007	;# 
   314   000FA8                     EEDATA          equ	4008	;# 
   315   000FA9                     EEADR           equ	4009	;# 
   316   000FAB                     RCSTA           equ	4011	;# 
   317   000FAB                     RCSTA1          equ	4011	;# 
   318   000FAC                     TXSTA           equ	4012	;# 
   319   000FAC                     TXSTA1          equ	4012	;# 
   320   000FAD                     TXREG           equ	4013	;# 
   321   000FAD                     TXREG1          equ	4013	;# 
   322   000FAE                     RCREG           equ	4014	;# 
   323   000FAE                     RCREG1          equ	4014	;# 
   324   000FAF                     SPBRG           equ	4015	;# 
   325   000FAF                     SPBRG1          equ	4015	;# 
   326   000FB0                     SPBRGH          equ	4016	;# 
   327   000FB1                     T3CON           equ	4017	;# 
   328   000FB2                     TMR3            equ	4018	;# 
   329   000FB2                     TMR3L           equ	4018	;# 
   330   000FB3                     TMR3H           equ	4019	;# 
   331   000FB4                     CMCON           equ	4020	;# 
   332   000FB5                     CVRCON          equ	4021	;# 
   333   000FB6                     ECCP1AS         equ	4022	;# 
   334   000FB6                     ECCPAS          equ	4022	;# 
   335   000FB7                     PWM1CON         equ	4023	;# 
   336   000FB7                     ECCP1DEL        equ	4023	;# 
   337   000FB8                     BAUDCON         equ	4024	;# 
   338   000FB8                     BAUDCTL         equ	4024	;# 
   339   000FBA                     CCP2CON         equ	4026	;# 
   340   000FBB                     CCPR2           equ	4027	;# 
   341   000FBB                     CCPR2L          equ	4027	;# 
   342   000FBC                     CCPR2H          equ	4028	;# 
   343   000FBD                     CCP1CON         equ	4029	;# 
   344   000FBE                     CCPR1           equ	4030	;# 
   345   000FBE                     CCPR1L          equ	4030	;# 
   346   000FBF                     CCPR1H          equ	4031	;# 
   347   000FC0                     ADCON2          equ	4032	;# 
   348   000FC1                     ADCON1          equ	4033	;# 
   349   000FC2                     ADCON0          equ	4034	;# 
   350   000FC3                     ADRES           equ	4035	;# 
   351   000FC3                     ADRESL          equ	4035	;# 
   352   000FC4                     ADRESH          equ	4036	;# 
   353   000FC5                     SSPCON2         equ	4037	;# 
   354   000FC6                     SSPCON1         equ	4038	;# 
   355   000FC7                     SSPSTAT         equ	4039	;# 
   356   000FC8                     SSPADD          equ	4040	;# 
   357   000FC9                     SSPBUF          equ	4041	;# 
   358   000FCA                     T2CON           equ	4042	;# 
   359   000FCB                     PR2             equ	4043	;# 
   360   000FCB                     MEMCON          equ	4043	;# 
   361   000FCC                     TMR2            equ	4044	;# 
   362   000FCD                     T1CON           equ	4045	;# 
   363   000FCE                     TMR1            equ	4046	;# 
   364   000FCE                     TMR1L           equ	4046	;# 
   365   000FCF                     TMR1H           equ	4047	;# 
   366   000FD0                     RCON            equ	4048	;# 
   367   000FD1                     WDTCON          equ	4049	;# 
   368   000FD2                     HLVDCON         equ	4050	;# 
   369   000FD2                     LVDCON          equ	4050	;# 
   370   000FD3                     OSCCON          equ	4051	;# 
   371   000FD5                     T0CON           equ	4053	;# 
   372   000FD6                     TMR0            equ	4054	;# 
   373   000FD6                     TMR0L           equ	4054	;# 
   374   000FD7                     TMR0H           equ	4055	;# 
   375   000FD8                     STATUS          equ	4056	;# 
   376   000FD9                     FSR2            equ	4057	;# 
   377   000FD9                     FSR2L           equ	4057	;# 
   378   000FDA                     FSR2H           equ	4058	;# 
   379   000FDB                     PLUSW2          equ	4059	;# 
   380   000FDC                     PREINC2         equ	4060	;# 
   381   000FDD                     POSTDEC2        equ	4061	;# 
   382   000FDE                     POSTINC2        equ	4062	;# 
   383   000FDF                     INDF2           equ	4063	;# 
   384   000FE0                     BSR             equ	4064	;# 
   385   000FE1                     FSR1            equ	4065	;# 
   386   000FE1                     FSR1L           equ	4065	;# 
   387   000FE2                     FSR1H           equ	4066	;# 
   388   000FE3                     PLUSW1          equ	4067	;# 
   389   000FE4                     PREINC1         equ	4068	;# 
   390   000FE5                     POSTDEC1        equ	4069	;# 
   391   000FE6                     POSTINC1        equ	4070	;# 
   392   000FE7                     INDF1           equ	4071	;# 
   393   000FE8                     WREG            equ	4072	;# 
   394   000FE9                     FSR0            equ	4073	;# 
   395   000FE9                     FSR0L           equ	4073	;# 
   396   000FEA                     FSR0H           equ	4074	;# 
   397   000FEB                     PLUSW0          equ	4075	;# 
   398   000FEC                     PREINC0         equ	4076	;# 
   399   000FED                     POSTDEC0        equ	4077	;# 
   400   000FEE                     POSTINC0        equ	4078	;# 
   401   000FEF                     INDF0           equ	4079	;# 
   402   000FF0                     INTCON3         equ	4080	;# 
   403   000FF1                     INTCON2         equ	4081	;# 
   404   000FF2                     INTCON          equ	4082	;# 
   405   000FF3                     PROD            equ	4083	;# 
   406   000FF3                     PRODL           equ	4083	;# 
   407   000FF4                     PRODH           equ	4084	;# 
   408   000FF5                     TABLAT          equ	4085	;# 
   409   000FF6                     TBLPTR          equ	4086	;# 
   410   000FF6                     TBLPTRL         equ	4086	;# 
   411   000FF7                     TBLPTRH         equ	4087	;# 
   412   000FF8                     TBLPTRU         equ	4088	;# 
   413   000FF9                     PCLAT           equ	4089	;# 
   414   000FF9                     PC              equ	4089	;# 
   415   000FF9                     PCL             equ	4089	;# 
   416   000FFA                     PCLATH          equ	4090	;# 
   417   000FFB                     PCLATU          equ	4091	;# 
   418   000FFC                     STKPTR          equ	4092	;# 
   419   000FFD                     TOS             equ	4093	;# 
   420   000FFD                     TOSL            equ	4093	;# 
   421   000FFE                     TOSH            equ	4094	;# 
   422   000FFF                     TOSU            equ	4095	;# 
   423   000F80                     PORTA           equ	3968	;# 
   424   000F81                     PORTB           equ	3969	;# 
   425   000F82                     PORTC           equ	3970	;# 
   426   000F83                     PORTD           equ	3971	;# 
   427   000F84                     PORTE           equ	3972	;# 
   428   000F89                     LATA            equ	3977	;# 
   429   000F8A                     LATB            equ	3978	;# 
   430   000F8B                     LATC            equ	3979	;# 
   431   000F8C                     LATD            equ	3980	;# 
   432   000F8D                     LATE            equ	3981	;# 
   433   000F92                     TRISA           equ	3986	;# 
   434   000F92                     DDRA            equ	3986	;# 
   435   000F93                     TRISB           equ	3987	;# 
   436   000F93                     DDRB            equ	3987	;# 
   437   000F94                     TRISC           equ	3988	;# 
   438   000F94                     DDRC            equ	3988	;# 
   439   000F95                     TRISD           equ	3989	;# 
   440   000F95                     DDRD            equ	3989	;# 
   441   000F96                     TRISE           equ	3990	;# 
   442   000F96                     DDRE            equ	3990	;# 
   443   000F9B                     OSCTUNE         equ	3995	;# 
   444   000F9D                     PIE1            equ	3997	;# 
   445   000F9E                     PIR1            equ	3998	;# 
   446   000F9F                     IPR1            equ	3999	;# 
   447   000FA0                     PIE2            equ	4000	;# 
   448   000FA1                     PIR2            equ	4001	;# 
   449   000FA2                     IPR2            equ	4002	;# 
   450   000FA6                     EECON1          equ	4006	;# 
   451   000FA7                     EECON2          equ	4007	;# 
   452   000FA8                     EEDATA          equ	4008	;# 
   453   000FA9                     EEADR           equ	4009	;# 
   454   000FAB                     RCSTA           equ	4011	;# 
   455   000FAB                     RCSTA1          equ	4011	;# 
   456   000FAC                     TXSTA           equ	4012	;# 
   457   000FAC                     TXSTA1          equ	4012	;# 
   458   000FAD                     TXREG           equ	4013	;# 
   459   000FAD                     TXREG1          equ	4013	;# 
   460   000FAE                     RCREG           equ	4014	;# 
   461   000FAE                     RCREG1          equ	4014	;# 
   462   000FAF                     SPBRG           equ	4015	;# 
   463   000FAF                     SPBRG1          equ	4015	;# 
   464   000FB0                     SPBRGH          equ	4016	;# 
   465   000FB1                     T3CON           equ	4017	;# 
   466   000FB2                     TMR3            equ	4018	;# 
   467   000FB2                     TMR3L           equ	4018	;# 
   468   000FB3                     TMR3H           equ	4019	;# 
   469   000FB4                     CMCON           equ	4020	;# 
   470   000FB5                     CVRCON          equ	4021	;# 
   471   000FB6                     ECCP1AS         equ	4022	;# 
   472   000FB6                     ECCPAS          equ	4022	;# 
   473   000FB7                     PWM1CON         equ	4023	;# 
   474   000FB7                     ECCP1DEL        equ	4023	;# 
   475   000FB8                     BAUDCON         equ	4024	;# 
   476   000FB8                     BAUDCTL         equ	4024	;# 
   477   000FBA                     CCP2CON         equ	4026	;# 
   478   000FBB                     CCPR2           equ	4027	;# 
   479   000FBB                     CCPR2L          equ	4027	;# 
   480   000FBC                     CCPR2H          equ	4028	;# 
   481   000FBD                     CCP1CON         equ	4029	;# 
   482   000FBE                     CCPR1           equ	4030	;# 
   483   000FBE                     CCPR1L          equ	4030	;# 
   484   000FBF                     CCPR1H          equ	4031	;# 
   485   000FC0                     ADCON2          equ	4032	;# 
   486   000FC1                     ADCON1          equ	4033	;# 
   487   000FC2                     ADCON0          equ	4034	;# 
   488   000FC3                     ADRES           equ	4035	;# 
   489   000FC3                     ADRESL          equ	4035	;# 
   490   000FC4                     ADRESH          equ	4036	;# 
   491   000FC5                     SSPCON2         equ	4037	;# 
   492   000FC6                     SSPCON1         equ	4038	;# 
   493   000FC7                     SSPSTAT         equ	4039	;# 
   494   000FC8                     SSPADD          equ	4040	;# 
   495   000FC9                     SSPBUF          equ	4041	;# 
   496   000FCA                     T2CON           equ	4042	;# 
   497   000FCB                     PR2             equ	4043	;# 
   498   000FCB                     MEMCON          equ	4043	;# 
   499   000FCC                     TMR2            equ	4044	;# 
   500   000FCD                     T1CON           equ	4045	;# 
   501   000FCE                     TMR1            equ	4046	;# 
   502   000FCE                     TMR1L           equ	4046	;# 
   503   000FCF                     TMR1H           equ	4047	;# 
   504   000FD0                     RCON            equ	4048	;# 
   505   000FD1                     WDTCON          equ	4049	;# 
   506   000FD2                     HLVDCON         equ	4050	;# 
   507   000FD2                     LVDCON          equ	4050	;# 
   508   000FD3                     OSCCON          equ	4051	;# 
   509   000FD5                     T0CON           equ	4053	;# 
   510   000FD6                     TMR0            equ	4054	;# 
   511   000FD6                     TMR0L           equ	4054	;# 
   512   000FD7                     TMR0H           equ	4055	;# 
   513   000FD8                     STATUS          equ	4056	;# 
   514   000FD9                     FSR2            equ	4057	;# 
   515   000FD9                     FSR2L           equ	4057	;# 
   516   000FDA                     FSR2H           equ	4058	;# 
   517   000FDB                     PLUSW2          equ	4059	;# 
   518   000FDC                     PREINC2         equ	4060	;# 
   519   000FDD                     POSTDEC2        equ	4061	;# 
   520   000FDE                     POSTINC2        equ	4062	;# 
   521   000FDF                     INDF2           equ	4063	;# 
   522   000FE0                     BSR             equ	4064	;# 
   523   000FE1                     FSR1            equ	4065	;# 
   524   000FE1                     FSR1L           equ	4065	;# 
   525   000FE2                     FSR1H           equ	4066	;# 
   526   000FE3                     PLUSW1          equ	4067	;# 
   527   000FE4                     PREINC1         equ	4068	;# 
   528   000FE5                     POSTDEC1        equ	4069	;# 
   529   000FE6                     POSTINC1        equ	4070	;# 
   530   000FE7                     INDF1           equ	4071	;# 
   531   000FE8                     WREG            equ	4072	;# 
   532   000FE9                     FSR0            equ	4073	;# 
   533   000FE9                     FSR0L           equ	4073	;# 
   534   000FEA                     FSR0H           equ	4074	;# 
   535   000FEB                     PLUSW0          equ	4075	;# 
   536   000FEC                     PREINC0         equ	4076	;# 
   537   000FED                     POSTDEC0        equ	4077	;# 
   538   000FEE                     POSTINC0        equ	4078	;# 
   539   000FEF                     INDF0           equ	4079	;# 
   540   000FF0                     INTCON3         equ	4080	;# 
   541   000FF1                     INTCON2         equ	4081	;# 
   542   000FF2                     INTCON          equ	4082	;# 
   543   000FF3                     PROD            equ	4083	;# 
   544   000FF3                     PRODL           equ	4083	;# 
   545   000FF4                     PRODH           equ	4084	;# 
   546   000FF5                     TABLAT          equ	4085	;# 
   547   000FF6                     TBLPTR          equ	4086	;# 
   548   000FF6                     TBLPTRL         equ	4086	;# 
   549   000FF7                     TBLPTRH         equ	4087	;# 
   550   000FF8                     TBLPTRU         equ	4088	;# 
   551   000FF9                     PCLAT           equ	4089	;# 
   552   000FF9                     PC              equ	4089	;# 
   553   000FF9                     PCL             equ	4089	;# 
   554   000FFA                     PCLATH          equ	4090	;# 
   555   000FFB                     PCLATU          equ	4091	;# 
   556   000FFC                     STKPTR          equ	4092	;# 
   557   000FFD                     TOS             equ	4093	;# 
   558   000FFD                     TOSL            equ	4093	;# 
   559   000FFE                     TOSH            equ	4094	;# 
   560   000FFF                     TOSU            equ	4095	;# 
   561   000F80                     PORTA           equ	3968	;# 
   562   000F81                     PORTB           equ	3969	;# 
   563   000F82                     PORTC           equ	3970	;# 
   564   000F83                     PORTD           equ	3971	;# 
   565   000F84                     PORTE           equ	3972	;# 
   566   000F89                     LATA            equ	3977	;# 
   567   000F8A                     LATB            equ	3978	;# 
   568   000F8B                     LATC            equ	3979	;# 
   569   000F8C                     LATD            equ	3980	;# 
   570   000F8D                     LATE            equ	3981	;# 
   571   000F92                     TRISA           equ	3986	;# 
   572   000F92                     DDRA            equ	3986	;# 
   573   000F93                     TRISB           equ	3987	;# 
   574   000F93                     DDRB            equ	3987	;# 
   575   000F94                     TRISC           equ	3988	;# 
   576   000F94                     DDRC            equ	3988	;# 
   577   000F95                     TRISD           equ	3989	;# 
   578   000F95                     DDRD            equ	3989	;# 
   579   000F96                     TRISE           equ	3990	;# 
   580   000F96                     DDRE            equ	3990	;# 
   581   000F9B                     OSCTUNE         equ	3995	;# 
   582   000F9D                     PIE1            equ	3997	;# 
   583   000F9E                     PIR1            equ	3998	;# 
   584   000F9F                     IPR1            equ	3999	;# 
   585   000FA0                     PIE2            equ	4000	;# 
   586   000FA1                     PIR2            equ	4001	;# 
   587   000FA2                     IPR2            equ	4002	;# 
   588   000FA6                     EECON1          equ	4006	;# 
   589   000FA7                     EECON2          equ	4007	;# 
   590   000FA8                     EEDATA          equ	4008	;# 
   591   000FA9                     EEADR           equ	4009	;# 
   592   000FAB                     RCSTA           equ	4011	;# 
   593   000FAB                     RCSTA1          equ	4011	;# 
   594   000FAC                     TXSTA           equ	4012	;# 
   595   000FAC                     TXSTA1          equ	4012	;# 
   596   000FAD                     TXREG           equ	4013	;# 
   597   000FAD                     TXREG1          equ	4013	;# 
   598   000FAE                     RCREG           equ	4014	;# 
   599   000FAE                     RCREG1          equ	4014	;# 
   600   000FAF                     SPBRG           equ	4015	;# 
   601   000FAF                     SPBRG1          equ	4015	;# 
   602   000FB0                     SPBRGH          equ	4016	;# 
   603   000FB1                     T3CON           equ	4017	;# 
   604   000FB2                     TMR3            equ	4018	;# 
   605   000FB2                     TMR3L           equ	4018	;# 
   606   000FB3                     TMR3H           equ	4019	;# 
   607   000FB4                     CMCON           equ	4020	;# 
   608   000FB5                     CVRCON          equ	4021	;# 
   609   000FB6                     ECCP1AS         equ	4022	;# 
   610   000FB6                     ECCPAS          equ	4022	;# 
   611   000FB7                     PWM1CON         equ	4023	;# 
   612   000FB7                     ECCP1DEL        equ	4023	;# 
   613   000FB8                     BAUDCON         equ	4024	;# 
   614   000FB8                     BAUDCTL         equ	4024	;# 
   615   000FBA                     CCP2CON         equ	4026	;# 
   616   000FBB                     CCPR2           equ	4027	;# 
   617   000FBB                     CCPR2L          equ	4027	;# 
   618   000FBC                     CCPR2H          equ	4028	;# 
   619   000FBD                     CCP1CON         equ	4029	;# 
   620   000FBE                     CCPR1           equ	4030	;# 
   621   000FBE                     CCPR1L          equ	4030	;# 
   622   000FBF                     CCPR1H          equ	4031	;# 
   623   000FC0                     ADCON2          equ	4032	;# 
   624   000FC1                     ADCON1          equ	4033	;# 
   625   000FC2                     ADCON0          equ	4034	;# 
   626   000FC3                     ADRES           equ	4035	;# 
   627   000FC3                     ADRESL          equ	4035	;# 
   628   000FC4                     ADRESH          equ	4036	;# 
   629   000FC5                     SSPCON2         equ	4037	;# 
   630   000FC6                     SSPCON1         equ	4038	;# 
   631   000FC7                     SSPSTAT         equ	4039	;# 
   632   000FC8                     SSPADD          equ	4040	;# 
   633   000FC9                     SSPBUF          equ	4041	;# 
   634   000FCA                     T2CON           equ	4042	;# 
   635   000FCB                     PR2             equ	4043	;# 
   636   000FCB                     MEMCON          equ	4043	;# 
   637   000FCC                     TMR2            equ	4044	;# 
   638   000FCD                     T1CON           equ	4045	;# 
   639   000FCE                     TMR1            equ	4046	;# 
   640   000FCE                     TMR1L           equ	4046	;# 
   641   000FCF                     TMR1H           equ	4047	;# 
   642   000FD0                     RCON            equ	4048	;# 
   643   000FD1                     WDTCON          equ	4049	;# 
   644   000FD2                     HLVDCON         equ	4050	;# 
   645   000FD2                     LVDCON          equ	4050	;# 
   646   000FD3                     OSCCON          equ	4051	;# 
   647   000FD5                     T0CON           equ	4053	;# 
   648   000FD6                     TMR0            equ	4054	;# 
   649   000FD6                     TMR0L           equ	4054	;# 
   650   000FD7                     TMR0H           equ	4055	;# 
   651   000FD8                     STATUS          equ	4056	;# 
   652   000FD9                     FSR2            equ	4057	;# 
   653   000FD9                     FSR2L           equ	4057	;# 
   654   000FDA                     FSR2H           equ	4058	;# 
   655   000FDB                     PLUSW2          equ	4059	;# 
   656   000FDC                     PREINC2         equ	4060	;# 
   657   000FDD                     POSTDEC2        equ	4061	;# 
   658   000FDE                     POSTINC2        equ	4062	;# 
   659   000FDF                     INDF2           equ	4063	;# 
   660   000FE0                     BSR             equ	4064	;# 
   661   000FE1                     FSR1            equ	4065	;# 
   662   000FE1                     FSR1L           equ	4065	;# 
   663   000FE2                     FSR1H           equ	4066	;# 
   664   000FE3                     PLUSW1          equ	4067	;# 
   665   000FE4                     PREINC1         equ	4068	;# 
   666   000FE5                     POSTDEC1        equ	4069	;# 
   667   000FE6                     POSTINC1        equ	4070	;# 
   668   000FE7                     INDF1           equ	4071	;# 
   669   000FE8                     WREG            equ	4072	;# 
   670   000FE9                     FSR0            equ	4073	;# 
   671   000FE9                     FSR0L           equ	4073	;# 
   672   000FEA                     FSR0H           equ	4074	;# 
   673   000FEB                     PLUSW0          equ	4075	;# 
   674   000FEC                     PREINC0         equ	4076	;# 
   675   000FED                     POSTDEC0        equ	4077	;# 
   676   000FEE                     POSTINC0        equ	4078	;# 
   677   000FEF                     INDF0           equ	4079	;# 
   678   000FF0                     INTCON3         equ	4080	;# 
   679   000FF1                     INTCON2         equ	4081	;# 
   680   000FF2                     INTCON          equ	4082	;# 
   681   000FF3                     PROD            equ	4083	;# 
   682   000FF3                     PRODL           equ	4083	;# 
   683   000FF4                     PRODH           equ	4084	;# 
   684   000FF5                     TABLAT          equ	4085	;# 
   685   000FF6                     TBLPTR          equ	4086	;# 
   686   000FF6                     TBLPTRL         equ	4086	;# 
   687   000FF7                     TBLPTRH         equ	4087	;# 
   688   000FF8                     TBLPTRU         equ	4088	;# 
   689   000FF9                     PCLAT           equ	4089	;# 
   690   000FF9                     PC              equ	4089	;# 
   691   000FF9                     PCL             equ	4089	;# 
   692   000FFA                     PCLATH          equ	4090	;# 
   693   000FFB                     PCLATU          equ	4091	;# 
   694   000FFC                     STKPTR          equ	4092	;# 
   695   000FFD                     TOS             equ	4093	;# 
   696   000FFD                     TOSL            equ	4093	;# 
   697   000FFE                     TOSH            equ	4094	;# 
   698   000FFF                     TOSU            equ	4095	;# 
   699   000F80                     PORTA           equ	3968	;# 
   700   000F81                     PORTB           equ	3969	;# 
   701   000F82                     PORTC           equ	3970	;# 
   702   000F83                     PORTD           equ	3971	;# 
   703   000F84                     PORTE           equ	3972	;# 
   704   000F89                     LATA            equ	3977	;# 
   705   000F8A                     LATB            equ	3978	;# 
   706   000F8B                     LATC            equ	3979	;# 
   707   000F8C                     LATD            equ	3980	;# 
   708   000F8D                     LATE            equ	3981	;# 
   709   000F92                     TRISA           equ	3986	;# 
   710   000F92                     DDRA            equ	3986	;# 
   711   000F93                     TRISB           equ	3987	;# 
   712   000F93                     DDRB            equ	3987	;# 
   713   000F94                     TRISC           equ	3988	;# 
   714   000F94                     DDRC            equ	3988	;# 
   715   000F95                     TRISD           equ	3989	;# 
   716   000F95                     DDRD            equ	3989	;# 
   717   000F96                     TRISE           equ	3990	;# 
   718   000F96                     DDRE            equ	3990	;# 
   719   000F9B                     OSCTUNE         equ	3995	;# 
   720   000F9D                     PIE1            equ	3997	;# 
   721   000F9E                     PIR1            equ	3998	;# 
   722   000F9F                     IPR1            equ	3999	;# 
   723   000FA0                     PIE2            equ	4000	;# 
   724   000FA1                     PIR2            equ	4001	;# 
   725   000FA2                     IPR2            equ	4002	;# 
   726   000FA6                     EECON1          equ	4006	;# 
   727   000FA7                     EECON2          equ	4007	;# 
   728   000FA8                     EEDATA          equ	4008	;# 
   729   000FA9                     EEADR           equ	4009	;# 
   730   000FAB                     RCSTA           equ	4011	;# 
   731   000FAB                     RCSTA1          equ	4011	;# 
   732   000FAC                     TXSTA           equ	4012	;# 
   733   000FAC                     TXSTA1          equ	4012	;# 
   734   000FAD                     TXREG           equ	4013	;# 
   735   000FAD                     TXREG1          equ	4013	;# 
   736   000FAE                     RCREG           equ	4014	;# 
   737   000FAE                     RCREG1          equ	4014	;# 
   738   000FAF                     SPBRG           equ	4015	;# 
   739   000FAF                     SPBRG1          equ	4015	;# 
   740   000FB0                     SPBRGH          equ	4016	;# 
   741   000FB1                     T3CON           equ	4017	;# 
   742   000FB2                     TMR3            equ	4018	;# 
   743   000FB2                     TMR3L           equ	4018	;# 
   744   000FB3                     TMR3H           equ	4019	;# 
   745   000FB4                     CMCON           equ	4020	;# 
   746   000FB5                     CVRCON          equ	4021	;# 
   747   000FB6                     ECCP1AS         equ	4022	;# 
   748   000FB6                     ECCPAS          equ	4022	;# 
   749   000FB7                     PWM1CON         equ	4023	;# 
   750   000FB7                     ECCP1DEL        equ	4023	;# 
   751   000FB8                     BAUDCON         equ	4024	;# 
   752   000FB8                     BAUDCTL         equ	4024	;# 
   753   000FBA                     CCP2CON         equ	4026	;# 
   754   000FBB                     CCPR2           equ	4027	;# 
   755   000FBB                     CCPR2L          equ	4027	;# 
   756   000FBC                     CCPR2H          equ	4028	;# 
   757   000FBD                     CCP1CON         equ	4029	;# 
   758   000FBE                     CCPR1           equ	4030	;# 
   759   000FBE                     CCPR1L          equ	4030	;# 
   760   000FBF                     CCPR1H          equ	4031	;# 
   761   000FC0                     ADCON2          equ	4032	;# 
   762   000FC1                     ADCON1          equ	4033	;# 
   763   000FC2                     ADCON0          equ	4034	;# 
   764   000FC3                     ADRES           equ	4035	;# 
   765   000FC3                     ADRESL          equ	4035	;# 
   766   000FC4                     ADRESH          equ	4036	;# 
   767   000FC5                     SSPCON2         equ	4037	;# 
   768   000FC6                     SSPCON1         equ	4038	;# 
   769   000FC7                     SSPSTAT         equ	4039	;# 
   770   000FC8                     SSPADD          equ	4040	;# 
   771   000FC9                     SSPBUF          equ	4041	;# 
   772   000FCA                     T2CON           equ	4042	;# 
   773   000FCB                     PR2             equ	4043	;# 
   774   000FCB                     MEMCON          equ	4043	;# 
   775   000FCC                     TMR2            equ	4044	;# 
   776   000FCD                     T1CON           equ	4045	;# 
   777   000FCE                     TMR1            equ	4046	;# 
   778   000FCE                     TMR1L           equ	4046	;# 
   779   000FCF                     TMR1H           equ	4047	;# 
   780   000FD0                     RCON            equ	4048	;# 
   781   000FD1                     WDTCON          equ	4049	;# 
   782   000FD2                     HLVDCON         equ	4050	;# 
   783   000FD2                     LVDCON          equ	4050	;# 
   784   000FD3                     OSCCON          equ	4051	;# 
   785   000FD5                     T0CON           equ	4053	;# 
   786   000FD6                     TMR0            equ	4054	;# 
   787   000FD6                     TMR0L           equ	4054	;# 
   788   000FD7                     TMR0H           equ	4055	;# 
   789   000FD8                     STATUS          equ	4056	;# 
   790   000FD9                     FSR2            equ	4057	;# 
   791   000FD9                     FSR2L           equ	4057	;# 
   792   000FDA                     FSR2H           equ	4058	;# 
   793   000FDB                     PLUSW2          equ	4059	;# 
   794   000FDC                     PREINC2         equ	4060	;# 
   795   000FDD                     POSTDEC2        equ	4061	;# 
   796   000FDE                     POSTINC2        equ	4062	;# 
   797   000FDF                     INDF2           equ	4063	;# 
   798   000FE0                     BSR             equ	4064	;# 
   799   000FE1                     FSR1            equ	4065	;# 
   800   000FE1                     FSR1L           equ	4065	;# 
   801   000FE2                     FSR1H           equ	4066	;# 
   802   000FE3                     PLUSW1          equ	4067	;# 
   803   000FE4                     PREINC1         equ	4068	;# 
   804   000FE5                     POSTDEC1        equ	4069	;# 
   805   000FE6                     POSTINC1        equ	4070	;# 
   806   000FE7                     INDF1           equ	4071	;# 
   807   000FE8                     WREG            equ	4072	;# 
   808   000FE9                     FSR0            equ	4073	;# 
   809   000FE9                     FSR0L           equ	4073	;# 
   810   000FEA                     FSR0H           equ	4074	;# 
   811   000FEB                     PLUSW0          equ	4075	;# 
   812   000FEC                     PREINC0         equ	4076	;# 
   813   000FED                     POSTDEC0        equ	4077	;# 
   814   000FEE                     POSTINC0        equ	4078	;# 
   815   000FEF                     INDF0           equ	4079	;# 
   816   000FF0                     INTCON3         equ	4080	;# 
   817   000FF1                     INTCON2         equ	4081	;# 
   818   000FF2                     INTCON          equ	4082	;# 
   819   000FF3                     PROD            equ	4083	;# 
   820   000FF3                     PRODL           equ	4083	;# 
   821   000FF4                     PRODH           equ	4084	;# 
   822   000FF5                     TABLAT          equ	4085	;# 
   823   000FF6                     TBLPTR          equ	4086	;# 
   824   000FF6                     TBLPTRL         equ	4086	;# 
   825   000FF7                     TBLPTRH         equ	4087	;# 
   826   000FF8                     TBLPTRU         equ	4088	;# 
   827   000FF9                     PCLAT           equ	4089	;# 
   828   000FF9                     PC              equ	4089	;# 
   829   000FF9                     PCL             equ	4089	;# 
   830   000FFA                     PCLATH          equ	4090	;# 
   831   000FFB                     PCLATU          equ	4091	;# 
   832   000FFC                     STKPTR          equ	4092	;# 
   833   000FFD                     TOS             equ	4093	;# 
   834   000FFD                     TOSL            equ	4093	;# 
   835   000FFE                     TOSH            equ	4094	;# 
   836   000FFF                     TOSU            equ	4095	;# 
   837                           
   838                           	psect	idataBANK0
   839   006234                     __pidataBANK0:
   840                           	callstack 0
   841                           
   842                           ;initializer for _Stat
   843   006234  01                 	db	1
   844   007C5A                     _LATC2          set	31834
   845   007CB1                     _TRISE1         set	31921
   846   007CAA                     _TRISD2         set	31914
   847   007CB0                     _TRISE0         set	31920
   848   007C90                     _TRISA0         set	31888
   849   000F83                     _PORTDbits      set	3971
   850   000F8D                     _LATEbits       set	3981
   851   000F9B                     _OSCTUNEbits    set	3995
   852   000F94                     _TRISC          set	3988
   853   000F8B                     _LATC           set	3979
   854   000FC3                     _ADRESL         set	4035
   855   000FC4                     _ADRESH         set	4036
   856   000FC2                     _ADCON0bits     set	4034
   857   000FD3                     _OSCCONbits     set	4051
   858   000FC2                     _ADCON0         set	4034
   859   000FC0                     _ADCON2         set	4032
   860   000FC1                     _ADCON1         set	4033
   861   000FC7                     _SSPSTATbits    set	4039
   862   000FC9                     _SSPBUF         set	4041
   863   000FC8                     _SSPADD         set	4040
   864   000FC6                     _SSPCON1bits    set	4038
   865   000FC6                     _SSPCON1        set	4038
   866   000FC7                     _SSPSTAT        set	4039
   867                           
   868                           	psect	smallconst
   869   000600                     __psmallconst:
   870                           	callstack 0
   871   000600  00                 	db	0
   872   000601                     STR_5:
   873   000601  48                 	db	72	;'H'
   874   000602  65                 	db	101	;'e'
   875   000603  6C                 	db	108	;'l'
   876   000604  6C                 	db	108	;'l'
   877   000605  6F                 	db	111	;'o'
   878   000606  20                 	db	32
   879   000607  73                 	db	115	;'s'
   880   000608  6D                 	db	109	;'m'
   881   000609  6F                 	db	111	;'o'
   882   00060A  6B                 	db	107	;'k'
   883   00060B  65                 	db	101	;'e'
   884   00060C  21                 	db	33
   885   00060D  0D                 	db	13
   886   00060E  0A                 	db	10
   887   00060F  00                 	db	0
   888   000610                     STR_6:
   889   000610  48                 	db	72	;'H'
   890   000611  65                 	db	101	;'e'
   891   000612  6C                 	db	108	;'l'
   892   000613  6C                 	db	108	;'l'
   893   000614  6F                 	db	111	;'o'
   894   000615  20                 	db	32
   895   000616  77                 	db	119	;'w'
   896   000617  61                 	db	97	;'a'
   897   000618  74                 	db	116	;'t'
   898   000619  65                 	db	101	;'e'
   899   00061A  72                 	db	114	;'r'
   900   00061B  3F                 	db	63	;'?'
   901   00061C  0D                 	db	13
   902   00061D  0A                 	db	10
   903   00061E  00                 	db	0
   904   00061F                     STR_1:
   905   00061F  22                 	db	34
   906   000620  2A                 	db	42
   907   000621  2B                 	db	43
   908   000622  2C                 	db	44
   909   000623  3A                 	db	58	;':'
   910   000624  3B                 	db	59	;';'
   911   000625  3C                 	db	60	;'<'
   912   000626  3D                 	db	61	;'='
   913   000627  3E                 	db	62	;'>'
   914   000628  3F                 	db	63	;'?'
   915   000629  5B                 	db	91	;'['
   916   00062A  5D                 	db	93	;']'
   917   00062B  7C                 	db	124
   918   00062C  7F                 	db	127
   919   00062D  00                 	db	0
   920   00062E                     STR_4:
   921   00062E  68                 	db	104	;'h'
   922   00062F  65                 	db	101	;'e'
   923   000630  6C                 	db	108	;'l'
   924   000631  6C                 	db	108	;'l'
   925   000632  6F                 	db	111	;'o'
   926   000633  2E                 	db	46
   927   000634  74                 	db	116	;'t'
   928   000635  78                 	db	120	;'x'
   929   000636  74                 	db	116	;'t'
   930   000637  00                 	db	0
   931   00061F                     STR_2           equ	STR_1
   932   00060F                     STR_3           equ	STR_5+14
   933   000638  00                 	db	0	; dummy byte at the end
   934   000002                     __activetblptr  equ	2
   935                           
   936                           ; #config settings
   937                           
   938                           	psect	cinit
   939   0060A6                     __pcinit:
   940                           	callstack 0
   941   0060A6                     start_initialization:
   942                           	callstack 0
   943   0060A6                     __initialization:
   944                           	callstack 0
   945                           
   946                           ; Initialize objects allocated to BANK0 (1 bytes)
   947                           ; load TBLPTR registers with __pidataBANK0
   948   0060A6  0E34               	movlw	low __pidataBANK0
   949   0060A8  6EF6               	movwf	tblptrl,c
   950   0060AA  0E62               	movlw	high __pidataBANK0
   951   0060AC  6EF7               	movwf	tblptrh,c
   952   0060AE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   953   0060B0  6EF8               	movwf	tblptru,c
   954   0060B2  0009               	tblrd		*+	;fetch initializer
   955   0060B4  CFF5 F0FD          	movff	tablat,__pdataBANK0
   956                           
   957                           ; Clear objects allocated to BIGRAM (558 bytes)
   958   0060B8  EE01  F020         	lfsr	0,__pbssBIGRAM
   959   0060BC  EE12 F02E          	lfsr	1,558
   960   0060C0                     clear_0:
   961   0060C0  6AEE               	clrf	postinc0,c
   962   0060C2  50E5               	movf	postdec1,w,c
   963   0060C4  50E1               	movf	fsr1l,w,c
   964   0060C6  E1FC               	bnz	clear_0
   965   0060C8  50E2               	movf	fsr1h,w,c
   966   0060CA  E1FA               	bnz	clear_0
   967                           
   968                           ; Clear objects allocated to BANK1 (32 bytes)
   969   0060CC  EE01  F000         	lfsr	0,__pbssBANK1
   970   0060D0  0E20               	movlw	32
   971   0060D2                     clear_1:
   972   0060D2  6AEE               	clrf	postinc0,c
   973   0060D4  06E8               	decf	wreg,f,c
   974   0060D6  E1FD               	bnz	clear_1
   975                           
   976                           ; Clear objects allocated to BANK0 (5 bytes)
   977   0060D8  0100               	movlb	0
   978   0060DA  6BFC               	clrf	(__pbssBANK0+4)& (0+255),b
   979   0060DC  6BFB               	clrf	(__pbssBANK0+3)& (0+255),b
   980   0060DE  6BFA               	clrf	(__pbssBANK0+2)& (0+255),b
   981   0060E0  6BF9               	clrf	(__pbssBANK0+1)& (0+255),b
   982   0060E2  6BF8               	clrf	__pbssBANK0& (0+255),b
   983   0060E4                     end_of_initialization:
   984                           	callstack 0
   985   0060E4                     __end_of__initialization:
   986                           	callstack 0
   987   0060E4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   988   0060E6  6EF8               	movwf	tblptru,c
   989   0060E8  0100               	movlb	0
   990   0060EA  EFAE  F023         	goto	_main	;jump to C main() function
   991                           
   992                           	psect	bssBANK0
   993   0000F8                     __pbssBANK0:
   994                           	callstack 0
   995   0000F8                     _Fsid:
   996                           	callstack 0
   997   0000F8                     	ds	2
   998   0000FA                     _FatFs@ff$F447:
   999                           	callstack 0
  1000   0000FA                     	ds	2
  1001   0000FC                     _CardType:
  1002                           	callstack 0
  1003   0000FC                     	ds	1
  1004                           
  1005                           	psect	dataBANK0
  1006   0000FD                     __pdataBANK0:
  1007                           	callstack 0
  1008   0000FD                     _Stat:
  1009                           	callstack 0
  1010   0000FD                     	ds	1
  1011                           
  1012                           	psect	bssBANK1
  1013   000100                     __pbssBANK1:
  1014                           	callstack 0
  1015   000100                     _Fil:
  1016                           	callstack 0
  1017   000100                     	ds	32
  1018                           
  1019                           	psect	bssBIGRAM
  1020   000120                     __pbssBIGRAM:
  1021                           	callstack 0
  1022   000120                     _FatFs:
  1023                           	callstack 0
  1024   000120                     	ds	558
  1025                           
  1026                           	psect	cstackBANK0
  1027   000080                     __pcstackBANK0:
  1028                           	callstack 0
  1029   000080                     dir_alloc@dp:
  1030                           	callstack 0
  1031   000080                     dir_find@dp:
  1032                           	callstack 0
  1033   000080                     f_write@res:
  1034                           	callstack 0
  1035   000080                     find_volume@br:
  1036                           	callstack 0
  1037   000080                     ??_f_lseek:
  1038                           
  1039                           ; 1 bytes @ 0x0
  1040   000080                     	ds	1
  1041   000081                     dir_find@c:
  1042                           	callstack 0
  1043   000081                     f_write@wbuff:
  1044                           	callstack 0
  1045   000081                     dir_alloc@nent:
  1046                           	callstack 0
  1047                           
  1048                           ; 2 bytes @ 0x1
  1049   000081                     	ds	1
  1050   000082                     f_write@csect:
  1051                           	callstack 0
  1052   000082                     dir_find@dir:
  1053                           	callstack 0
  1054                           
  1055                           ; 2 bytes @ 0x2
  1056   000082                     	ds	1
  1057   000083                     f_write@sect:
  1058                           	callstack 0
  1059   000083                     ??_dir_alloc:
  1060                           
  1061                           ; 1 bytes @ 0x3
  1062   000083                     	ds	1
  1063   000084                     dir_find@res:
  1064                           	callstack 0
  1065                           
  1066                           ; 1 bytes @ 0x4
  1067   000084                     	ds	1
  1068   000085                     follow_path@dp:
  1069                           	callstack 0
  1070                           
  1071                           ; 1 bytes @ 0x5
  1072   000085                     	ds	1
  1073   000086                     follow_path@path:
  1074                           	callstack 0
  1075   000086                     dir_alloc@n:
  1076                           	callstack 0
  1077                           
  1078                           ; 2 bytes @ 0x6
  1079   000086                     	ds	1
  1080   000087                     follow_path@dir:
  1081                           	callstack 0
  1082   000087                     f_write@cc:
  1083                           	callstack 0
  1084                           
  1085                           ; 2 bytes @ 0x7
  1086   000087                     	ds	1
  1087   000088                     dir_alloc@res:
  1088                           	callstack 0
  1089                           
  1090                           ; 1 bytes @ 0x8
  1091   000088                     	ds	1
  1092   000089                     dir_register@dp:
  1093                           	callstack 0
  1094   000089                     follow_path@ns:
  1095                           	callstack 0
  1096   000089                     f_write@clst:
  1097                           	callstack 0
  1098                           
  1099                           ; 4 bytes @ 0x9
  1100   000089                     	ds	1
  1101   00008A                     follow_path@res:
  1102                           	callstack 0
  1103   00008A                     ??_dir_register:
  1104                           
  1105                           ; 1 bytes @ 0xA
  1106   00008A                     	ds	1
  1107   00008B                     dir_register@res:
  1108                           	callstack 0
  1109                           
  1110                           ; 1 bytes @ 0xB
  1111   00008B                     	ds	2
  1112   00008D                     f_write@wcnt:
  1113                           	callstack 0
  1114                           
  1115                           ; 2 bytes @ 0xD
  1116   00008D                     	ds	3
  1117   000090                     f_lseek@res:
  1118                           	callstack 0
  1119   000090                     _find_volume$942:
  1120                           	callstack 0
  1121                           
  1122                           ; 4 bytes @ 0x10
  1123   000090                     	ds	1
  1124   000091                     f_lseek@ifptr:
  1125                           	callstack 0
  1126                           
  1127                           ; 4 bytes @ 0x11
  1128   000091                     	ds	3
  1129   000094                     _find_volume$943:
  1130                           	callstack 0
  1131                           
  1132                           ; 2 bytes @ 0x14
  1133   000094                     	ds	1
  1134   000095                     f_lseek@nsect:
  1135                           	callstack 0
  1136                           
  1137                           ; 4 bytes @ 0x15
  1138   000095                     	ds	1
  1139   000096                     find_volume@szbfat:
  1140                           	callstack 0
  1141                           
  1142                           ; 4 bytes @ 0x16
  1143   000096                     	ds	3
  1144   000099                     f_lseek@bcs:
  1145                           	callstack 0
  1146                           
  1147                           ; 4 bytes @ 0x19
  1148   000099                     	ds	1
  1149   00009A                     find_volume@pt:
  1150                           	callstack 0
  1151                           
  1152                           ; 2 bytes @ 0x1A
  1153   00009A                     	ds	2
  1154   00009C                     find_volume@sysect:
  1155                           	callstack 0
  1156                           
  1157                           ; 4 bytes @ 0x1C
  1158   00009C                     	ds	1
  1159   00009D                     f_lseek@clst:
  1160                           	callstack 0
  1161                           
  1162                           ; 4 bytes @ 0x1D
  1163   00009D                     	ds	3
  1164   0000A0                     find_volume@vol:
  1165                           	callstack 0
  1166                           
  1167                           ; 2 bytes @ 0x20
  1168   0000A0                     	ds	2
  1169   0000A2                     find_volume@nrsv:
  1170                           	callstack 0
  1171                           
  1172                           ; 2 bytes @ 0x22
  1173   0000A2                     	ds	2
  1174   0000A4                     find_volume@tsect:
  1175                           	callstack 0
  1176                           
  1177                           ; 4 bytes @ 0x24
  1178   0000A4                     	ds	4
  1179   0000A8                     find_volume@nclst:
  1180                           	callstack 0
  1181                           
  1182                           ; 4 bytes @ 0x28
  1183   0000A8                     	ds	4
  1184   0000AC                     find_volume@stat:
  1185                           	callstack 0
  1186                           
  1187                           ; 1 bytes @ 0x2C
  1188   0000AC                     	ds	1
  1189   0000AD                     find_volume@fasize:
  1190                           	callstack 0
  1191                           
  1192                           ; 4 bytes @ 0x2D
  1193   0000AD                     	ds	4
  1194   0000B1                     find_volume@bsect:
  1195                           	callstack 0
  1196                           
  1197                           ; 4 bytes @ 0x31
  1198   0000B1                     	ds	4
  1199   0000B5                     find_volume@i:
  1200                           	callstack 0
  1201                           
  1202                           ; 2 bytes @ 0x35
  1203   0000B5                     	ds	2
  1204   0000B7                     find_volume@fmt:
  1205                           	callstack 0
  1206                           
  1207                           ; 1 bytes @ 0x37
  1208   0000B7                     	ds	1
  1209   0000B8                     find_volume@fs:
  1210                           	callstack 0
  1211                           
  1212                           ; 2 bytes @ 0x38
  1213   0000B8                     	ds	2
  1214   0000BA                     f_open@fp:
  1215                           	callstack 0
  1216                           
  1217                           ; 2 bytes @ 0x3A
  1218   0000BA                     	ds	2
  1219   0000BC                     f_open@path:
  1220                           	callstack 0
  1221                           
  1222                           ; 1 bytes @ 0x3C
  1223   0000BC                     	ds	1
  1224   0000BD                     f_open@mode:
  1225                           	callstack 0
  1226                           
  1227                           ; 1 bytes @ 0x3D
  1228   0000BD                     	ds	1
  1229   0000BE                     ??_f_open:
  1230                           
  1231                           ; 1 bytes @ 0x3E
  1232   0000BE                     	ds	4
  1233   0000C2                     f_open@sfn:
  1234                           	callstack 0
  1235                           
  1236                           ; 12 bytes @ 0x42
  1237   0000C2                     	ds	12
  1238   0000CE                     f_open@cl:
  1239                           	callstack 0
  1240                           
  1241                           ; 4 bytes @ 0x4E
  1242   0000CE                     	ds	4
  1243   0000D2                     f_open@dw:
  1244                           	callstack 0
  1245                           
  1246                           ; 4 bytes @ 0x52
  1247   0000D2                     	ds	4
  1248   0000D6                     f_open@res:
  1249                           	callstack 0
  1250                           
  1251                           ; 1 bytes @ 0x56
  1252   0000D6                     	ds	1
  1253   0000D7                     f_open@dir:
  1254                           	callstack 0
  1255                           
  1256                           ; 2 bytes @ 0x57
  1257   0000D7                     	ds	2
  1258   0000D9                     f_open@dj:
  1259                           	callstack 0
  1260                           
  1261                           ; 21 bytes @ 0x59
  1262   0000D9                     	ds	21
  1263   0000EE                     ??_main:
  1264                           
  1265                           ; 1 bytes @ 0x6E
  1266   0000EE                     	ds	2
  1267   0000F0                     main@adc_value:
  1268                           	callstack 0
  1269                           
  1270                           ; 2 bytes @ 0x70
  1271   0000F0                     	ds	2
  1272   0000F2                     main@res:
  1273                           	callstack 0
  1274                           
  1275                           ; 1 bytes @ 0x72
  1276   0000F2                     	ds	1
  1277   0000F3                     main@open_res:
  1278                           	callstack 0
  1279                           
  1280                           ; 1 bytes @ 0x73
  1281   0000F3                     	ds	1
  1282   0000F4                     main@smoke:
  1283                           	callstack 0
  1284                           
  1285                           ; 1 bytes @ 0x74
  1286   0000F4                     	ds	1
  1287   0000F5                     main@flame:
  1288                           	callstack 0
  1289                           
  1290                           ; 1 bytes @ 0x75
  1291   0000F5                     	ds	1
  1292   0000F6                     main@bw:
  1293                           	callstack 0
  1294                           
  1295                           ; 2 bytes @ 0x76
  1296   0000F6                     	ds	2
  1297                           
  1298                           	psect	cstackCOMRAM
  1299   000001                     __pcstackCOMRAM:
  1300                           	callstack 0
  1301   000001                     ?_mem_cmp:
  1302                           	callstack 0
  1303   000001                     ?_chk_chr:
  1304                           	callstack 0
  1305   000001                     ?_get_ldnumber:
  1306                           	callstack 0
  1307   000001                     ?_ADC_Read:
  1308                           	callstack 0
  1309   000001                     ?_ld_clust:
  1310                           	callstack 0
  1311   000001                     ?___lmul:
  1312                           	callstack 0
  1313   000001                     ?___lldiv:
  1314                           	callstack 0
  1315   000001                     SPI_Exchange8bit@data:
  1316                           	callstack 0
  1317   000001                     disk_status@pdrv:
  1318                           	callstack 0
  1319   000001                     chk_chr@str:
  1320                           	callstack 0
  1321   000001                     get_ldnumber@path:
  1322                           	callstack 0
  1323   000001                     mem_cpy@dst:
  1324                           	callstack 0
  1325   000001                     mem_set@dst:
  1326                           	callstack 0
  1327   000001                     mem_cmp@dst:
  1328                           	callstack 0
  1329   000001                     ld_clust@fs:
  1330                           	callstack 0
  1331   000001                     st_clust@dir:
  1332                           	callstack 0
  1333   000001                     ___lmul@multiplier:
  1334                           	callstack 0
  1335   000001                     ___lldiv@dividend:
  1336                           	callstack 0
  1337   000001                     
  1338                           ; 1 bytes @ 0x0
  1339   000001                     	ds	1
  1340   000002                     wait_ready@tmr:
  1341                           	callstack 0
  1342   000002                     rcvr_datablock@buff:
  1343                           	callstack 0
  1344   000002                     chk_chr@chr:
  1345                           	callstack 0
  1346   000002                     validate@obj:
  1347                           	callstack 0
  1348   000002                     
  1349                           ; 1 bytes @ 0x1
  1350   000002                     	ds	1
  1351   000003                     mem_cmp@src:
  1352                           	callstack 0
  1353   000003                     mem_cpy@src:
  1354                           	callstack 0
  1355   000003                     mem_set@val:
  1356                           	callstack 0
  1357   000003                     ld_clust@dir:
  1358                           	callstack 0
  1359   000003                     st_clust@cl:
  1360                           	callstack 0
  1361   000003                     ??_get_ldnumber:
  1362   000003                     ??_ADC_Read:
  1363                           
  1364                           ; 1 bytes @ 0x2
  1365   000003                     	ds	1
  1366   000004                     rcvr_datablock@btr:
  1367                           	callstack 0
  1368   000004                     xmit_datablock@buff:
  1369                           	callstack 0
  1370   000004                     mem_cmp@cnt:
  1371                           	callstack 0
  1372   000004                     get_ldnumber@vol:
  1373                           	callstack 0
  1374   000004                     ___send_cmd@arg:
  1375                           	callstack 0
  1376   000004                     ??_chk_chr:
  1377   000004                     ??_validate:
  1378                           
  1379                           ; 1 bytes @ 0x3
  1380   000004                     	ds	1
  1381   000005                     mem_cpy@cnt:
  1382                           	callstack 0
  1383   000005                     mem_set@cnt:
  1384                           	callstack 0
  1385   000005                     ___lmul@multiplicand:
  1386                           	callstack 0
  1387   000005                     ___lldiv@divisor:
  1388                           	callstack 0
  1389   000005                     ??_ld_clust:
  1390                           
  1391                           ; 1 bytes @ 0x4
  1392   000005                     	ds	1
  1393   000006                     xmit_datablock@token:
  1394                           	callstack 0
  1395   000006                     get_ldnumber@tp:
  1396                           	callstack 0
  1397   000006                     rcvr_datablock@tmr:
  1398                           	callstack 0
  1399   000006                     ??_mem_cmp:
  1400                           
  1401                           ; 1 bytes @ 0x5
  1402   000006                     	ds	1
  1403   000007                     xmit_datablock@i:
  1404                           	callstack 0
  1405   000007                     mem_set@d:
  1406                           	callstack 0
  1407   000007                     get_ldnumber@i:
  1408                           	callstack 0
  1409   000007                     ??_mem_cpy:
  1410   000007                     
  1411                           ; 1 bytes @ 0x6
  1412   000007                     	ds	1
  1413   000008                     rcvr_datablock@token:
  1414                           	callstack 0
  1415   000008                     ___send_cmd@res:
  1416                           	callstack 0
  1417   000008                     mem_cmp@d:
  1418                           	callstack 0
  1419   000008                     validate@fil:
  1420                           	callstack 0
  1421   000008                     
  1422                           ; 1 bytes @ 0x7
  1423   000008                     	ds	1
  1424   000009                     xmit_datablock@resp:
  1425                           	callstack 0
  1426   000009                     ___send_cmd@n:
  1427                           	callstack 0
  1428   000009                     create_name@dp:
  1429                           	callstack 0
  1430   000009                     get_ldnumber@tt:
  1431                           	callstack 0
  1432   000009                     mem_cpy@d:
  1433                           	callstack 0
  1434   000009                     ___lmul@product:
  1435                           	callstack 0
  1436   000009                     ___lldiv@quotient:
  1437                           	callstack 0
  1438   000009                     
  1439                           ; 1 bytes @ 0x8
  1440   000009                     	ds	1
  1441   00000A                     ___send_cmd@cmd:
  1442                           	callstack 0
  1443   00000A                     create_name@path:
  1444                           	callstack 0
  1445   00000A                     mem_cmp@r:
  1446                           	callstack 0
  1447                           
  1448                           ; 2 bytes @ 0x9
  1449   00000A                     	ds	1
  1450   00000B                     mem_cpy@s:
  1451                           	callstack 0
  1452   00000B                     send_cmd@arg:
  1453                           	callstack 0
  1454   00000B                     ld_clust@cl:
  1455                           	callstack 0
  1456   00000B                     ??_create_name:
  1457                           
  1458                           ; 1 bytes @ 0xA
  1459   00000B                     	ds	1
  1460   00000C                     mem_cmp@s:
  1461                           	callstack 0
  1462                           
  1463                           ; 1 bytes @ 0xB
  1464   00000C                     	ds	1
  1465   00000D                     ?_clust2sect:
  1466                           	callstack 0
  1467   00000D                     ___lldiv@counter:
  1468                           	callstack 0
  1469   00000D                     clust2sect@fs:
  1470                           	callstack 0
  1471   00000D                     _create_name$838:
  1472                           	callstack 0
  1473                           
  1474                           ; 2 bytes @ 0xC
  1475   00000D                     	ds	2
  1476   00000F                     send_cmd@cmd:
  1477                           	callstack 0
  1478   00000F                     create_name@si:
  1479                           	callstack 0
  1480   00000F                     clust2sect@clst:
  1481                           	callstack 0
  1482   00000F                     
  1483                           ; 1 bytes @ 0xE
  1484   00000F                     	ds	1
  1485   000010                     send_cmd@res:
  1486                           	callstack 0
  1487                           
  1488                           ; 1 bytes @ 0xF
  1489   000010                     	ds	1
  1490   000011                     disk_ioctl@cmd:
  1491                           	callstack 0
  1492   000011                     create_name@b:
  1493                           	callstack 0
  1494   000011                     disk_read@buff:
  1495                           	callstack 0
  1496   000011                     disk_write@buff:
  1497                           	callstack 0
  1498   000011                     ??_disk_initialize:
  1499                           
  1500                           ; 1 bytes @ 0x10
  1501   000011                     	ds	1
  1502   000012                     disk_initialize@pdrv:
  1503                           	callstack 0
  1504   000012                     disk_ioctl@buff:
  1505                           	callstack 0
  1506   000012                     create_name@ni:
  1507                           	callstack 0
  1508                           
  1509                           ; 2 bytes @ 0x11
  1510   000012                     	ds	1
  1511   000013                     disk_initialize@ocr:
  1512                           	callstack 0
  1513   000013                     disk_read@sector:
  1514                           	callstack 0
  1515   000013                     disk_write@sector:
  1516                           	callstack 0
  1517   000013                     ??_clust2sect:
  1518                           
  1519                           ; 1 bytes @ 0x12
  1520   000013                     	ds	1
  1521   000014                     create_name@d:
  1522                           	callstack 0
  1523   000014                     ??_disk_ioctl:
  1524                           
  1525                           ; 1 bytes @ 0x13
  1526   000014                     	ds	1
  1527   000015                     create_name@p:
  1528                           	callstack 0
  1529                           
  1530                           ; 1 bytes @ 0x14
  1531   000015                     	ds	1
  1532   000016                     create_name@i:
  1533                           	callstack 0
  1534                           
  1535                           ; 2 bytes @ 0x15
  1536   000016                     	ds	1
  1537   000017                     _disk_initialize$348:
  1538                           	callstack 0
  1539   000017                     disk_read@count:
  1540                           	callstack 0
  1541   000017                     disk_write@count:
  1542                           	callstack 0
  1543                           
  1544                           ; 2 bytes @ 0x16
  1545   000017                     	ds	1
  1546   000018                     create_name@sfn:
  1547                           	callstack 0
  1548                           
  1549                           ; 1 bytes @ 0x17
  1550   000018                     	ds	1
  1551   000019                     disk_initialize@cmd:
  1552                           	callstack 0
  1553   000019                     disk_read@pdrv:
  1554                           	callstack 0
  1555   000019                     create_name@c:
  1556                           	callstack 0
  1557   000019                     ??_disk_write:
  1558                           
  1559                           ; 1 bytes @ 0x18
  1560   000019                     	ds	1
  1561   00001A                     disk_initialize@ty:
  1562                           	callstack 0
  1563   00001A                     disk_write@pdrv:
  1564                           	callstack 0
  1565   00001A                     _disk_read$358:
  1566                           	callstack 0
  1567                           
  1568                           ; 2 bytes @ 0x19
  1569   00001A                     	ds	1
  1570   00001B                     disk_initialize@tmr:
  1571                           	callstack 0
  1572   00001B                     sync_window@fs:
  1573                           	callstack 0
  1574                           
  1575                           ; 2 bytes @ 0x1A
  1576   00001B                     	ds	1
  1577   00001C                     disk_read@cmd:
  1578                           	callstack 0
  1579                           
  1580                           ; 1 bytes @ 0x1B
  1581   00001C                     	ds	1
  1582   00001D                     disk_initialize@n:
  1583                           	callstack 0
  1584   00001D                     ??_sync_window:
  1585                           
  1586                           ; 1 bytes @ 0x1C
  1587   00001D                     	ds	3
  1588   000020                     disk_ioctl@csd:
  1589                           	callstack 0
  1590                           
  1591                           ; 16 bytes @ 0x1F
  1592   000020                     	ds	9
  1593   000029                     sync_window@res:
  1594                           	callstack 0
  1595                           
  1596                           ; 1 bytes @ 0x28
  1597   000029                     	ds	1
  1598   00002A                     sync_window@nf:
  1599                           	callstack 0
  1600                           
  1601                           ; 2 bytes @ 0x29
  1602   00002A                     	ds	2
  1603   00002C                     sync_window@wsect:
  1604                           	callstack 0
  1605                           
  1606                           ; 4 bytes @ 0x2B
  1607   00002C                     	ds	4
  1608   000030                     disk_ioctl@pdrv:
  1609                           	callstack 0
  1610   000030                     move_window@fs:
  1611                           	callstack 0
  1612                           
  1613                           ; 2 bytes @ 0x2F
  1614   000030                     	ds	1
  1615   000031                     disk_ioctl@csize:
  1616                           	callstack 0
  1617                           
  1618                           ; 4 bytes @ 0x30
  1619   000031                     	ds	1
  1620   000032                     move_window@sector:
  1621                           	callstack 0
  1622                           
  1623                           ; 4 bytes @ 0x31
  1624   000032                     	ds	3
  1625   000035                     disk_ioctl@res:
  1626                           	callstack 0
  1627                           
  1628                           ; 1 bytes @ 0x34
  1629   000035                     	ds	1
  1630   000036                     disk_ioctl@n:
  1631                           	callstack 0
  1632   000036                     
  1633                           ; 1 bytes @ 0x35
  1634   000036                     	ds	1
  1635   000037                     disk_ioctl@ptr:
  1636                           	callstack 0
  1637                           
  1638                           ; 2 bytes @ 0x36
  1639   000037                     	ds	2
  1640   000039                     sync_fs@fs:
  1641                           	callstack 0
  1642                           
  1643                           ; 2 bytes @ 0x38
  1644   000039                     	ds	1
  1645   00003A                     move_window@res:
  1646                           	callstack 0
  1647                           
  1648                           ; 1 bytes @ 0x39
  1649   00003A                     	ds	1
  1650   00003B                     ?_get_fat:
  1651                           	callstack 0
  1652   00003B                     get_fat@fs:
  1653                           	callstack 0
  1654   00003B                     put_fat@fs:
  1655                           	callstack 0
  1656   00003B                     check_fs@fs:
  1657                           	callstack 0
  1658   00003B                     ??_sync_fs:
  1659                           
  1660                           ; 1 bytes @ 0x3A
  1661   00003B                     	ds	2
  1662   00003D                     get_fat@clst:
  1663                           	callstack 0
  1664   00003D                     put_fat@clst:
  1665                           	callstack 0
  1666   00003D                     check_fs@sect:
  1667                           	callstack 0
  1668                           
  1669                           ; 4 bytes @ 0x3C
  1670   00003D                     	ds	4
  1671   000041                     put_fat@val:
  1672                           	callstack 0
  1673   000041                     ??_get_fat:
  1674   000041                     ??_check_fs:
  1675                           
  1676                           ; 1 bytes @ 0x40
  1677   000041                     	ds	2
  1678   000043                     sync_fs@res:
  1679                           	callstack 0
  1680                           
  1681                           ; 1 bytes @ 0x42
  1682   000043                     	ds	1
  1683   000044                     f_sync@fp:
  1684                           	callstack 0
  1685                           
  1686                           ; 2 bytes @ 0x43
  1687   000044                     	ds	1
  1688   000045                     find_volume@rfs:
  1689                           	callstack 0
  1690   000045                     ??_put_fat:
  1691                           
  1692                           ; 1 bytes @ 0x44
  1693   000045                     	ds	1
  1694   000046                     find_volume@path:
  1695                           	callstack 0
  1696   000046                     f_sync@res:
  1697                           	callstack 0
  1698   000046                     
  1699                           ; 1 bytes @ 0x45
  1700   000046                     	ds	1
  1701   000047                     find_volume@wmode:
  1702                           	callstack 0
  1703   000047                     f_sync@dir:
  1704                           	callstack 0
  1705                           
  1706                           ; 2 bytes @ 0x46
  1707   000047                     	ds	1
  1708   000048                     ??_find_volume:
  1709                           
  1710                           ; 1 bytes @ 0x47
  1711   000048                     	ds	1
  1712   000049                     _get_fat$588:
  1713                           	callstack 0
  1714   000049                     f_close@fp:
  1715                           	callstack 0
  1716                           
  1717                           ; 2 bytes @ 0x48
  1718   000049                     	ds	2
  1719   00004B                     f_close@res:
  1720                           	callstack 0
  1721   00004B                     get_fat@val:
  1722                           	callstack 0
  1723   00004B                     
  1724                           ; 1 bytes @ 0x4A
  1725   00004B                     	ds	2
  1726   00004D                     _put_fat$614:
  1727                           	callstack 0
  1728                           
  1729                           ; 2 bytes @ 0x4C
  1730   00004D                     	ds	2
  1731   00004F                     get_fat@wc:
  1732                           	callstack 0
  1733   00004F                     _put_fat$615:
  1734                           	callstack 0
  1735                           
  1736                           ; 2 bytes @ 0x4E
  1737   00004F                     	ds	1
  1738   000050                     f_mount@fs:
  1739                           	callstack 0
  1740                           
  1741                           ; 2 bytes @ 0x4F
  1742   000050                     	ds	1
  1743   000051                     get_fat@p:
  1744                           	callstack 0
  1745   000051                     put_fat@bc:
  1746                           	callstack 0
  1747                           
  1748                           ; 2 bytes @ 0x50
  1749   000051                     	ds	1
  1750   000052                     f_mount@path:
  1751                           	callstack 0
  1752                           
  1753                           ; 1 bytes @ 0x51
  1754   000052                     	ds	1
  1755   000053                     put_fat@res:
  1756                           	callstack 0
  1757   000053                     f_mount@opt:
  1758                           	callstack 0
  1759   000053                     get_fat@bc:
  1760                           	callstack 0
  1761                           
  1762                           ; 2 bytes @ 0x52
  1763   000053                     	ds	1
  1764   000054                     f_mount@res:
  1765                           	callstack 0
  1766   000054                     put_fat@p:
  1767                           	callstack 0
  1768   000054                     
  1769                           ; 1 bytes @ 0x53
  1770   000054                     	ds	1
  1771   000055                     dir_sdi@dp:
  1772                           	callstack 0
  1773   000055                     f_mount@cfs:
  1774                           	callstack 0
  1775                           
  1776                           ; 2 bytes @ 0x54
  1777   000055                     	ds	1
  1778   000056                     ?_create_chain:
  1779                           	callstack 0
  1780   000056                     remove_chain@fs:
  1781                           	callstack 0
  1782   000056                     create_chain@fs:
  1783                           	callstack 0
  1784   000056                     dir_sdi@idx:
  1785                           	callstack 0
  1786                           
  1787                           ; 2 bytes @ 0x55
  1788   000056                     	ds	1
  1789   000057                     f_mount@rp:
  1790                           	callstack 0
  1791                           
  1792                           ; 1 bytes @ 0x56
  1793   000057                     	ds	1
  1794   000058                     f_mount@vol:
  1795                           	callstack 0
  1796   000058                     remove_chain@clst:
  1797                           	callstack 0
  1798   000058                     create_chain@clst:
  1799                           	callstack 0
  1800   000058                     ??_dir_sdi:
  1801                           
  1802                           ; 1 bytes @ 0x57
  1803   000058                     	ds	4
  1804   00005C                     
  1805                           ; 1 bytes @ 0x5B
  1806   00005C                     	ds	3
  1807   00005F                     dir_sdi@ic:
  1808                           	callstack 0
  1809                           
  1810                           ; 2 bytes @ 0x5E
  1811   00005F                     	ds	1
  1812   000060                     remove_chain@res:
  1813                           	callstack 0
  1814   000060                     create_chain@res:
  1815                           	callstack 0
  1816                           
  1817                           ; 1 bytes @ 0x5F
  1818   000060                     	ds	1
  1819   000061                     remove_chain@nxt:
  1820                           	callstack 0
  1821   000061                     create_chain@scl:
  1822                           	callstack 0
  1823   000061                     dir_sdi@sect:
  1824                           	callstack 0
  1825                           
  1826                           ; 4 bytes @ 0x60
  1827   000061                     	ds	4
  1828   000065                     create_chain@ncl:
  1829                           	callstack 0
  1830   000065                     dir_sdi@clst:
  1831                           	callstack 0
  1832                           
  1833                           ; 4 bytes @ 0x64
  1834   000065                     	ds	4
  1835   000069                     create_chain@cs:
  1836                           	callstack 0
  1837                           
  1838                           ; 4 bytes @ 0x68
  1839   000069                     	ds	4
  1840   00006D                     dir_next@dp:
  1841                           	callstack 0
  1842   00006D                     f_write@fp:
  1843                           	callstack 0
  1844   00006D                     f_lseek@fp:
  1845                           	callstack 0
  1846                           
  1847                           ; 2 bytes @ 0x6C
  1848   00006D                     	ds	1
  1849   00006E                     dir_next@stretch:
  1850                           	callstack 0
  1851                           
  1852                           ; 2 bytes @ 0x6D
  1853   00006E                     	ds	1
  1854   00006F                     f_write@buff:
  1855                           	callstack 0
  1856   00006F                     f_lseek@ofs:
  1857                           	callstack 0
  1858                           
  1859                           ; 4 bytes @ 0x6E
  1860   00006F                     	ds	1
  1861   000070                     f_write@btw:
  1862                           	callstack 0
  1863   000070                     ??_dir_next:
  1864                           
  1865                           ; 1 bytes @ 0x6F
  1866   000070                     	ds	2
  1867   000072                     f_write@bw:
  1868                           	callstack 0
  1869                           
  1870                           ; 1 bytes @ 0x71
  1871   000072                     	ds	1
  1872   000073                     ??_f_write:
  1873                           
  1874                           ; 1 bytes @ 0x72
  1875   000073                     	ds	5
  1876   000078                     dir_next@c:
  1877                           	callstack 0
  1878                           
  1879                           ; 2 bytes @ 0x77
  1880   000078                     	ds	2
  1881   00007A                     dir_next@i:
  1882                           	callstack 0
  1883                           
  1884                           ; 2 bytes @ 0x79
  1885   00007A                     	ds	2
  1886   00007C                     dir_next@clst:
  1887                           	callstack 0
  1888                           
  1889                           ; 4 bytes @ 0x7B
  1890   00007C                     	ds	4
  1891   000080                     
  1892                           ; 1 bytes @ 0x7F
  1893 ;;
  1894 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1895 ;;
  1896 ;; *************** function _main *****************
  1897 ;; Defined at:
  1898 ;;		line 18 in file "main.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;		None
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  adc_value       2  112[BANK0 ] unsigned int 
  1903 ;;  bw              2  118[BANK0 ] unsigned short 
  1904 ;;  flame           1  117[BANK0 ] unsigned char 
  1905 ;;  smoke           1  116[BANK0 ] unsigned char 
  1906 ;;  open_res        1  115[BANK0 ] enum E2655
  1907 ;;  res             1  114[BANK0 ] enum E2655
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  1    wreg      void 
  1910 ;; Registers used:
  1911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1917 ;;      Params:         0       0       0       0       0       0       0
  1918 ;;      Locals:         0       8       0       0       0       0       0
  1919 ;;      Temps:          0       2       0       0       0       0       0
  1920 ;;      Totals:         0      10       0       0       0       0       0
  1921 ;;Total ram usage:       10 bytes
  1922 ;; Hardware stack levels required when called: 14
  1923 ;; This function calls:
  1924 ;;		_ADC_Read
  1925 ;;		_SYSTEM_Initialize
  1926 ;;		_f_close
  1927 ;;		_f_lseek
  1928 ;;		_f_mount
  1929 ;;		_f_open
  1930 ;;		_f_sync
  1931 ;;		_f_write
  1932 ;; This function is called by:
  1933 ;;		Startup code after reset
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text0
  1938   00475C                     __ptext0:
  1939                           	callstack 0
  1940   00475C                     _main:
  1941                           	callstack 17
  1942   00475C                     
  1943                           ;main.c: 19:  UINT bw;;main.c: 21:  SYSTEM_Initialize();
  1944   00475C  EC15  F031         	call	_SYSTEM_Initialize	;wreg free
  1945   004760                     
  1946                           ;main.c: 23:     FRESULT res = f_mount(&FatFs, "", 1);
  1947   004760  0E20               	movlw	low _FatFs
  1948   004762  6E50               	movwf	f_mount@fs^0,c
  1949   004764  0E01               	movlw	high _FatFs
  1950   004766  6E51               	movwf	(f_mount@fs+1)^0,c
  1951   004768  0E0F               	movlw	low (STR_5+14)
  1952   00476A  6E52               	movwf	f_mount@path^0,c
  1953   00476C  0E01               	movlw	1
  1954   00476E  6E53               	movwf	f_mount@opt^0,c
  1955   004770  EC76  F02C         	call	_f_mount	;wreg free
  1956   004774  0100               	movlb	0	; () banked
  1957   004776  6FF2               	movwf	main@res& (0+255),b
  1958   004778                     
  1959                           ; BSR set to: 0
  1960                           ;main.c: 29:     while (res == FR_OK) {
  1961   004778  EF79  F024         	goto	l6174
  1962   00477C                     l6134:
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;main.c: 34:         unsigned int adc_value = ADC_Read();
  1966   00477C  ECBD  F030         	call	_ADC_Read	;wreg free
  1967   004780  C001  F0F0         	movff	?_ADC_Read,main@adc_value
  1968   004784  C002  F0F1         	movff	?_ADC_Read+1,main@adc_value+1
  1969   004788                     
  1970                           ;main.c: 36:         smoke = 0;
  1971   004788  0100               	movlb	0	; () banked
  1972   00478A  6BF4               	clrf	main@smoke& (0+255),b
  1973   00478C                     
  1974                           ; BSR set to: 0
  1975                           ;main.c: 37:         flame = 0;
  1976   00478C  6BF5               	clrf	main@flame& (0+255),b
  1977   00478E                     
  1978                           ; BSR set to: 0
  1979                           ;main.c: 40:         if (adc_value >= 500) {
  1980   00478E  0EF4               	movlw	244
  1981   004790  5DF0               	subwf	main@adc_value& (0+255),w,b
  1982   004792  0E01               	movlw	1
  1983   004794  59F1               	subwfb	(main@adc_value+1)& (0+255),w,b
  1984   004796  A0D8               	btfss	status,0,c
  1985   004798  EFD0  F023         	goto	u8791
  1986   00479C  EFD2  F023         	goto	u8790
  1987   0047A0                     u8791:
  1988   0047A0  EFD7  F023         	goto	l814
  1989   0047A4                     u8790:
  1990   0047A4                     
  1991                           ; BSR set to: 0
  1992                           ;main.c: 41:             LATEbits.LATE0 = 1;
  1993   0047A4  808D               	bsf	141,0,c	;volatile
  1994   0047A6                     
  1995                           ; BSR set to: 0
  1996                           ;main.c: 43:             smoke = 1;
  1997   0047A6  0E01               	movlw	1
  1998   0047A8  6FF4               	movwf	main@smoke& (0+255),b
  1999                           
  2000                           ;main.c: 44:         } else {
  2001   0047AA  EFD8  F023         	goto	l815
  2002   0047AE                     l814:
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;main.c: 45:             LATEbits.LATE0 = 0;
  2006   0047AE  908D               	bcf	141,0,c	;volatile
  2007   0047B0                     l815:
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;main.c: 49:         if (PORTDbits.RD2 == 0) {
  2011   0047B0  B483               	btfsc	131,2,c	;volatile
  2012   0047B2  EFDD  F023         	goto	u8801
  2013   0047B6  EFDF  F023         	goto	u8800
  2014   0047BA                     u8801:
  2015   0047BA  EFE4  F023         	goto	l816
  2016   0047BE                     u8800:
  2017   0047BE                     
  2018                           ; BSR set to: 0
  2019                           ;main.c: 50:             LATEbits.LATE1 = 1;
  2020   0047BE  828D               	bsf	141,1,c	;volatile
  2021   0047C0                     
  2022                           ; BSR set to: 0
  2023                           ;main.c: 52:             flame = 1;
  2024   0047C0  0E01               	movlw	1
  2025   0047C2  6FF5               	movwf	main@flame& (0+255),b
  2026                           
  2027                           ;main.c: 53:         } else {
  2028   0047C4  EFE5  F023         	goto	l6150
  2029   0047C8                     l816:
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;main.c: 54:             LATEbits.LATE1 = 0;
  2033   0047C8  928D               	bcf	141,1,c	;volatile
  2034   0047CA                     l6150:
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;main.c: 57:         open_res = f_open(&Fil, "hello.txt",
  2038   0047CA  0E00               	movlw	low _Fil
  2039   0047CC  6FBA               	movwf	f_open@fp& (0+255),b
  2040   0047CE  0E01               	movlw	high _Fil
  2041   0047D0  6FBB               	movwf	(f_open@fp+1)& (0+255),b
  2042   0047D2  0E2E               	movlw	low STR_4
  2043   0047D4  6FBC               	movwf	f_open@path& (0+255),b
  2044   0047D6  0E12               	movlw	18
  2045   0047D8  6FBD               	movwf	f_open@mode& (0+255),b
  2046   0047DA  EC0F  F018         	call	_f_open	;wreg free
  2047   0047DE  0100               	movlb	0	; () banked
  2048   0047E0  6FF3               	movwf	main@open_res& (0+255),b
  2049   0047E2                     
  2050                           ; BSR set to: 0
  2051                           ;main.c: 60:         if (open_res == FR_OK){
  2052   0047E2  51F3               	movf	main@open_res& (0+255),w,b
  2053   0047E4  A4D8               	btfss	status,2,c
  2054   0047E6  EFF7  F023         	goto	u8811
  2055   0047EA  EFF9  F023         	goto	u8810
  2056   0047EE                     u8811:
  2057   0047EE  EF6C  F024         	goto	l6172
  2058   0047F2                     u8810:
  2059   0047F2                     
  2060                           ; BSR set to: 0
  2061                           ;main.c: 62:             if (smoke){
  2062   0047F2  51F4               	movf	main@smoke& (0+255),w,b
  2063   0047F4  B4D8               	btfsc	status,2,c
  2064   0047F6  EFFF  F023         	goto	u8821
  2065   0047FA  EF01  F024         	goto	u8820
  2066   0047FE                     u8821:
  2067   0047FE  EF2F  F024         	goto	l6162
  2068   004802                     u8820:
  2069   004802                     
  2070                           ; BSR set to: 0
  2071                           ;main.c: 63:                 if (Fil.fsize != 0) {
  2072   004802  0101               	movlb	1	; () banked
  2073   004804  510A               	movf	(_Fil+10)& (0+255),w,b
  2074   004806  110B               	iorwf	(_Fil+11)& (0+255),w,b
  2075   004808  110C               	iorwf	(_Fil+12)& (0+255),w,b
  2076   00480A  110D               	iorwf	(_Fil+13)& (0+255),w,b
  2077   00480C  B4D8               	btfsc	status,2,c
  2078   00480E  EF0B  F024         	goto	u8831
  2079   004812  EF0D  F024         	goto	u8830
  2080   004816                     u8831:
  2081   004816  EF1B  F024         	goto	l820
  2082   00481A                     u8830:
  2083   00481A                     
  2084                           ; BSR set to: 1
  2085                           ;main.c: 64:                     f_lseek(&Fil, Fil.fsize);
  2086   00481A  0E00               	movlw	low _Fil
  2087   00481C  6E6D               	movwf	f_lseek@fp^0,c
  2088   00481E  0E01               	movlw	high _Fil
  2089   004820  6E6E               	movwf	(f_lseek@fp+1)^0,c
  2090   004822  C10A  F06F         	movff	_Fil+10,f_lseek@ofs
  2091   004826  C10B  F070         	movff	_Fil+11,f_lseek@ofs+1
  2092   00482A  C10C  F071         	movff	_Fil+12,f_lseek@ofs+2
  2093   00482E  C10D  F072         	movff	_Fil+13,f_lseek@ofs+3
  2094   004832  ECF6  F00C         	call	_f_lseek	;wreg free
  2095   004836                     l820:
  2096                           
  2097                           ;main.c: 66:                 f_write(&Fil, "Hello smoke!\r\n", 14, &bw);
  2098   004836  0E00               	movlw	low _Fil
  2099   004838  6E6D               	movwf	f_write@fp^0,c
  2100   00483A  0E01               	movlw	high _Fil
  2101   00483C  6E6E               	movwf	(f_write@fp+1)^0,c
  2102   00483E  0E01               	movlw	low STR_5
  2103   004840  6E6F               	movwf	f_write@buff^0,c
  2104   004842  0E00               	movlw	0
  2105   004844  6E71               	movwf	(f_write@btw+1)^0,c
  2106   004846  0E0E               	movlw	14
  2107   004848  6E70               	movwf	f_write@btw^0,c
  2108   00484A  0EF6               	movlw	low main@bw
  2109   00484C  6E72               	movwf	f_write@bw^0,c
  2110   00484E  ECCF  F008         	call	_f_write	;wreg free
  2111   004852                     
  2112                           ;main.c: 67:                 f_sync(&Fil);
  2113   004852  0E00               	movlw	low _Fil
  2114   004854  6E44               	movwf	f_sync@fp^0,c
  2115   004856  0E01               	movlw	high _Fil
  2116   004858  6E45               	movwf	(f_sync@fp+1)^0,c
  2117   00485A  ECB5  F027         	call	_f_sync	;wreg free
  2118   00485E                     l6162:
  2119                           
  2120                           ;main.c: 70:             if (flame) {
  2121   00485E  0100               	movlb	0	; () banked
  2122   004860  51F5               	movf	main@flame& (0+255),w,b
  2123   004862  B4D8               	btfsc	status,2,c
  2124   004864  EF36  F024         	goto	u8841
  2125   004868  EF38  F024         	goto	u8840
  2126   00486C                     u8841:
  2127   00486C  EF66  F024         	goto	l6170
  2128   004870                     u8840:
  2129   004870                     
  2130                           ; BSR set to: 0
  2131                           ;main.c: 71:                 if (Fil.fsize != 0) {
  2132   004870  0101               	movlb	1	; () banked
  2133   004872  510A               	movf	(_Fil+10)& (0+255),w,b
  2134   004874  110B               	iorwf	(_Fil+11)& (0+255),w,b
  2135   004876  110C               	iorwf	(_Fil+12)& (0+255),w,b
  2136   004878  110D               	iorwf	(_Fil+13)& (0+255),w,b
  2137   00487A  B4D8               	btfsc	status,2,c
  2138   00487C  EF42  F024         	goto	u8851
  2139   004880  EF44  F024         	goto	u8850
  2140   004884                     u8851:
  2141   004884  EF52  F024         	goto	l822
  2142   004888                     u8850:
  2143   004888                     
  2144                           ; BSR set to: 1
  2145                           ;main.c: 72:                     f_lseek(&Fil, Fil.fsize);
  2146   004888  0E00               	movlw	low _Fil
  2147   00488A  6E6D               	movwf	f_lseek@fp^0,c
  2148   00488C  0E01               	movlw	high _Fil
  2149   00488E  6E6E               	movwf	(f_lseek@fp+1)^0,c
  2150   004890  C10A  F06F         	movff	_Fil+10,f_lseek@ofs
  2151   004894  C10B  F070         	movff	_Fil+11,f_lseek@ofs+1
  2152   004898  C10C  F071         	movff	_Fil+12,f_lseek@ofs+2
  2153   00489C  C10D  F072         	movff	_Fil+13,f_lseek@ofs+3
  2154   0048A0  ECF6  F00C         	call	_f_lseek	;wreg free
  2155   0048A4                     l822:
  2156                           
  2157                           ;main.c: 74:                 f_write(&Fil, "Hello water?\r\n", 14, &bw);
  2158   0048A4  0E00               	movlw	low _Fil
  2159   0048A6  6E6D               	movwf	f_write@fp^0,c
  2160   0048A8  0E01               	movlw	high _Fil
  2161   0048AA  6E6E               	movwf	(f_write@fp+1)^0,c
  2162   0048AC  0E10               	movlw	low STR_6
  2163   0048AE  6E6F               	movwf	f_write@buff^0,c
  2164   0048B0  0E00               	movlw	0
  2165   0048B2  6E71               	movwf	(f_write@btw+1)^0,c
  2166   0048B4  0E0E               	movlw	14
  2167   0048B6  6E70               	movwf	f_write@btw^0,c
  2168   0048B8  0EF6               	movlw	low main@bw
  2169   0048BA  6E72               	movwf	f_write@bw^0,c
  2170   0048BC  ECCF  F008         	call	_f_write	;wreg free
  2171   0048C0                     
  2172                           ;main.c: 75:                 f_sync(&Fil);
  2173   0048C0  0E00               	movlw	low _Fil
  2174   0048C2  6E44               	movwf	f_sync@fp^0,c
  2175   0048C4  0E01               	movlw	high _Fil
  2176   0048C6  6E45               	movwf	(f_sync@fp+1)^0,c
  2177   0048C8  ECB5  F027         	call	_f_sync	;wreg free
  2178   0048CC                     l6170:
  2179                           
  2180                           ;main.c: 78:             f_close(&Fil);
  2181   0048CC  0E00               	movlw	low _Fil
  2182   0048CE  6E49               	movwf	f_close@fp^0,c
  2183   0048D0  0E01               	movlw	high _Fil
  2184   0048D2  6E4A               	movwf	(f_close@fp+1)^0,c
  2185   0048D4  EC2E  F030         	call	_f_close	;wreg free
  2186   0048D8                     l6172:
  2187                           
  2188                           ;main.c: 81:         _delay((unsigned long)((100)*(8000000UL/4000.0)));
  2189   0048D8  0E02               	movlw	2
  2190   0048DA  0100               	movlb	0	; () banked
  2191   0048DC  6FEF               	movwf	(??_main+1)& (0+255),b
  2192   0048DE  0E04               	movlw	4
  2193   0048E0  6FEE               	movwf	??_main& (0+255),b
  2194   0048E2  0EBA               	movlw	186
  2195   0048E4                     u8877:
  2196   0048E4  2EE8               	decfsz	wreg,f,c
  2197   0048E6  D7FE               	bra	u8877
  2198   0048E8  2FEE               	decfsz	??_main& (0+255),f,b
  2199   0048EA  D7FC               	bra	u8877
  2200   0048EC  2FEF               	decfsz	(??_main+1)& (0+255),f,b
  2201   0048EE  D7FA               	bra	u8877
  2202   0048F0  0000               	nop	
  2203   0048F2                     l6174:
  2204                           
  2205                           ;main.c: 29:     while (res == FR_OK) {
  2206   0048F2  0100               	movlb	0	; () banked
  2207   0048F4  51F2               	movf	main@res& (0+255),w,b
  2208   0048F6  B4D8               	btfsc	status,2,c
  2209   0048F8  EF80  F024         	goto	u8861
  2210   0048FC  EF82  F024         	goto	u8860
  2211   004900                     u8861:
  2212   004900  EFBE  F023         	goto	l6134
  2213   004904                     u8860:
  2214   004904                     
  2215                           ; BSR set to: 0
  2216   004904  EF00  F000         	goto	start
  2217   004908                     __end_of_main:
  2218                           	callstack 0
  2219                           
  2220 ;; *************** function _f_write *****************
  2221 ;; Defined at:
  2222 ;;		line 2691 in file "ff.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;  fp              2  108[COMRAM] PTR struct .
  2225 ;;		 -> Fil(32), 
  2226 ;;  buff            1  110[COMRAM] PTR const void 
  2227 ;;		 -> STR_6(15), STR_5(15), 
  2228 ;;  btw             2  111[COMRAM] unsigned short 
  2229 ;;  bw              1  113[COMRAM] PTR unsigned short 
  2230 ;;		 -> main@bw(2), 
  2231 ;; Auto vars:     Size  Location     Type
  2232 ;;  clst            4    9[BANK0 ] unsigned long 
  2233 ;;  sect            4    3[BANK0 ] unsigned long 
  2234 ;;  wcnt            2   13[BANK0 ] unsigned short 
  2235 ;;  cc              2    7[BANK0 ] unsigned short 
  2236 ;;  csect           1    2[BANK0 ] unsigned char 
  2237 ;;  wbuff           1    1[BANK0 ] PTR const unsigned char 
  2238 ;;		 -> STR_6(15), STR_5(15), 
  2239 ;;  res             1    0[BANK0 ] enum E95
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      enum E95
  2242 ;; Registers used:
  2243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2249 ;;      Params:         6       0       0       0       0       0       0
  2250 ;;      Locals:         0      15       0       0       0       0       0
  2251 ;;      Temps:         12       0       0       0       0       0       0
  2252 ;;      Totals:        18      15       0       0       0       0       0
  2253 ;;Total ram usage:       33 bytes
  2254 ;; Hardware stack levels used: 1
  2255 ;; Hardware stack levels required when called: 10
  2256 ;; This function calls:
  2257 ;;		_clust2sect
  2258 ;;		_create_chain
  2259 ;;		_disk_write
  2260 ;;		_mem_cpy
  2261 ;;		_move_window
  2262 ;;		_sync_window
  2263 ;;		_validate
  2264 ;; This function is called by:
  2265 ;;		_main
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text1
  2270   00119E                     __ptext1:
  2271                           	callstack 0
  2272   00119E                     _f_write:
  2273                           	callstack 20
  2274   00119E                     
  2275                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  2276   00119E  C06F  F081         	movff	f_write@buff,f_write@wbuff
  2277   0011A2                     
  2278                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  2279   0011A2  5072               	movf	f_write@bw^0,w,c
  2280   0011A4  6ED9               	movwf	fsr2l,c
  2281   0011A6  6ADA               	clrf	fsr2h,c
  2282   0011A8  6ADE               	clrf	postinc2,c
  2283   0011AA  6ADD               	clrf	postdec2,c
  2284   0011AC                     
  2285                           ;ff.c: 2707:  res = validate(fp);
  2286   0011AC  C06D  F002         	movff	f_write@fp,validate@obj
  2287   0011B0  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  2288   0011B4  EC12  F02C         	call	_validate	;wreg free
  2289   0011B8  0100               	movlb	0	; () banked
  2290   0011BA  6F80               	movwf	f_write@res& (0+255),b
  2291   0011BC                     
  2292                           ; BSR set to: 0
  2293                           ;ff.c: 2708:  if (res != FR_OK) return res;
  2294   0011BC  5180               	movf	f_write@res& (0+255),w,b
  2295   0011BE  B4D8               	btfsc	status,2,c
  2296   0011C0  EFE4  F008         	goto	u7961
  2297   0011C4  EFE6  F008         	goto	u7960
  2298   0011C8                     u7961:
  2299   0011C8  EFE8  F008         	goto	l5740
  2300   0011CC                     u7960:
  2301   0011CC  EFF5  F00C         	goto	l706
  2302   0011D0                     l5740:
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;ff.c: 2709:  if (fp->err)
  2306   0011D0  EE20 F005          	lfsr	2,5
  2307   0011D4  506D               	movf	f_write@fp^0,w,c
  2308   0011D6  26D9               	addwf	fsr2l,f,c
  2309   0011D8  506E               	movf	(f_write@fp+1)^0,w,c
  2310   0011DA  22DA               	addwfc	fsr2h,f,c
  2311   0011DC  50DF               	movf	indf2,w,c
  2312   0011DE  B4D8               	btfsc	status,2,c
  2313   0011E0  EFF4  F008         	goto	u7971
  2314   0011E4  EFF6  F008         	goto	u7970
  2315   0011E8                     u7971:
  2316   0011E8  EFF8  F008         	goto	l5744
  2317   0011EC                     u7970:
  2318   0011EC  EFF5  F00C         	goto	l706
  2319   0011F0                     l5744:
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  2323   0011F0  EE20 F004          	lfsr	2,4
  2324   0011F4  506D               	movf	f_write@fp^0,w,c
  2325   0011F6  26D9               	addwf	fsr2l,f,c
  2326   0011F8  506E               	movf	(f_write@fp+1)^0,w,c
  2327   0011FA  22DA               	addwfc	fsr2h,f,c
  2328   0011FC  B2DF               	btfsc	indf2,1,c
  2329   0011FE  EF03  F009         	goto	u7981
  2330   001202  EF05  F009         	goto	u7980
  2331   001206                     u7981:
  2332   001206  EF07  F009         	goto	l5748
  2333   00120A                     u7980:
  2334   00120A  EFF5  F00C         	goto	l706
  2335   00120E                     l5748:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  2339   00120E  EE20 F006          	lfsr	2,6
  2340   001212  506D               	movf	f_write@fp^0,w,c
  2341   001214  26D9               	addwf	fsr2l,f,c
  2342   001216  506E               	movf	(f_write@fp+1)^0,w,c
  2343   001218  22DA               	addwfc	fsr2h,f,c
  2344   00121A  EE10 F006          	lfsr	1,6
  2345   00121E  506D               	movf	f_write@fp^0,w,c
  2346   001220  26E1               	addwf	fsr1l,f,c
  2347   001222  506E               	movf	(f_write@fp+1)^0,w,c
  2348   001224  22E2               	addwfc	fsr1h,f,c
  2349   001226  CFE6 F077          	movff	postinc1,??_f_write+4
  2350   00122A  CFE6 F078          	movff	postinc1,??_f_write+5
  2351   00122E  CFE6 F079          	movff	postinc1,??_f_write+6
  2352   001232  CFE6 F07A          	movff	postinc1,??_f_write+7
  2353   001236  5070               	movf	f_write@btw^0,w,c
  2354   001238  2477               	addwf	(??_f_write+4)^0,w,c
  2355   00123A  6E7B               	movwf	(??_f_write+8)^0,c
  2356   00123C  5071               	movf	(f_write@btw+1)^0,w,c
  2357   00123E  2078               	addwfc	(??_f_write+5)^0,w,c
  2358   001240  6E7C               	movwf	(??_f_write+9)^0,c
  2359   001242  0E00               	movlw	0
  2360   001244  2079               	addwfc	(??_f_write+6)^0,w,c
  2361   001246  6E7D               	movwf	(??_f_write+10)^0,c
  2362   001248  0E00               	movlw	0
  2363   00124A  207A               	addwfc	(??_f_write+7)^0,w,c
  2364   00124C  6E7E               	movwf	(??_f_write+11)^0,c
  2365   00124E  50DE               	movf	postinc2,w,c
  2366   001250  5C7B               	subwf	(??_f_write+8)^0,w,c
  2367   001252  50DE               	movf	postinc2,w,c
  2368   001254  587C               	subwfb	(??_f_write+9)^0,w,c
  2369   001256  50DE               	movf	postinc2,w,c
  2370   001258  587D               	subwfb	(??_f_write+10)^0,w,c
  2371   00125A  50DE               	movf	postinc2,w,c
  2372   00125C  587E               	subwfb	(??_f_write+11)^0,w,c
  2373   00125E  B0D8               	btfsc	status,0,c
  2374   001260  EF34  F009         	goto	u7991
  2375   001264  EF36  F009         	goto	u7990
  2376   001268                     u7991:
  2377   001268  EFB5  F00C         	goto	l5860
  2378   00126C                     u7990:
  2379   00126C                     
  2380                           ; BSR set to: 0
  2381   00126C  0E00               	movlw	0
  2382   00126E  6E71               	movwf	(f_write@btw+1)^0,c
  2383   001270  0E00               	movlw	0
  2384   001272  6E70               	movwf	f_write@btw^0,c
  2385   001274  EFB5  F00C         	goto	l5860
  2386   001278                     l5752:
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  2390   001278  EE20 F006          	lfsr	2,6
  2391   00127C  506D               	movf	f_write@fp^0,w,c
  2392   00127E  26D9               	addwf	fsr2l,f,c
  2393   001280  506E               	movf	(f_write@fp+1)^0,w,c
  2394   001282  22DA               	addwfc	fsr2h,f,c
  2395   001284  0EFF               	movlw	255
  2396   001286  14DE               	andwf	postinc2,w,c
  2397   001288  6E73               	movwf	??_f_write^0,c
  2398   00128A  0E01               	movlw	1
  2399   00128C  14DE               	andwf	postinc2,w,c
  2400   00128E  6E74               	movwf	(??_f_write+1)^0,c
  2401   001290  0E00               	movlw	0
  2402   001292  14DE               	andwf	postinc2,w,c
  2403   001294  6E75               	movwf	(??_f_write+2)^0,c
  2404   001296  0E00               	movlw	0
  2405   001298  14DE               	andwf	postinc2,w,c
  2406   00129A  6E76               	movwf	(??_f_write+3)^0,c
  2407   00129C  5073               	movf	??_f_write^0,w,c
  2408   00129E  1074               	iorwf	(??_f_write+1)^0,w,c
  2409   0012A0  1075               	iorwf	(??_f_write+2)^0,w,c
  2410   0012A2  1076               	iorwf	(??_f_write+3)^0,w,c
  2411   0012A4  A4D8               	btfss	status,2,c
  2412   0012A6  EF57  F009         	goto	u8001
  2413   0012AA  EF59  F009         	goto	u8000
  2414   0012AE                     u8001:
  2415   0012AE  EF0C  F00C         	goto	l5836
  2416   0012B2                     u8000:
  2417   0012B2                     
  2418                           ; BSR set to: 0
  2419                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  2420   0012B2  EE20 F006          	lfsr	2,6
  2421   0012B6  506D               	movf	f_write@fp^0,w,c
  2422   0012B8  26D9               	addwf	fsr2l,f,c
  2423   0012BA  506E               	movf	(f_write@fp+1)^0,w,c
  2424   0012BC  22DA               	addwfc	fsr2h,f,c
  2425   0012BE  CFDE F073          	movff	postinc2,??_f_write
  2426   0012C2  CFDE F074          	movff	postinc2,??_f_write+1
  2427   0012C6  CFDE F075          	movff	postinc2,??_f_write+2
  2428   0012CA  CFDE F076          	movff	postinc2,??_f_write+3
  2429   0012CE  0E0A               	movlw	10
  2430   0012D0  EF6F  F009         	goto	u8010
  2431   0012D4                     u8015:
  2432   0012D4  90D8               	bcf	status,0,c
  2433   0012D6  3276               	rrcf	(??_f_write+3)^0,f,c
  2434   0012D8  3275               	rrcf	(??_f_write+2)^0,f,c
  2435   0012DA  3274               	rrcf	(??_f_write+1)^0,f,c
  2436   0012DC  3273               	rrcf	??_f_write^0,f,c
  2437   0012DE                     u8010:
  2438   0012DE  2EE8               	decfsz	wreg,f,c
  2439   0012E0  EF6A  F009         	goto	u8015
  2440   0012E4  C06D  FFD9         	movff	f_write@fp,fsr2l
  2441   0012E8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2442   0012EC  EE10 F002          	lfsr	1,2
  2443   0012F0  50DE               	movf	postinc2,w,c
  2444   0012F2  26E1               	addwf	fsr1l,f,c
  2445   0012F4  50DD               	movf	postdec2,w,c
  2446   0012F6  22E2               	addwfc	fsr1h,f,c
  2447   0012F8  50E7               	movf	indf1,w,c
  2448   0012FA  6E77               	movwf	(??_f_write+4)^0,c
  2449   0012FC  0477               	decf	(??_f_write+4)^0,w,c
  2450   0012FE  1473               	andwf	??_f_write^0,w,c
  2451   001300  6F82               	movwf	f_write@csect& (0+255),b
  2452   001302                     
  2453                           ; BSR set to: 0
  2454                           ;ff.c: 2719:    if (!csect) {
  2455   001302  5182               	movf	f_write@csect& (0+255),w,b
  2456   001304  A4D8               	btfss	status,2,c
  2457   001306  EF87  F009         	goto	u8021
  2458   00130A  EF89  F009         	goto	u8020
  2459   00130E                     u8021:
  2460   00130E  EF57  F00A         	goto	l5788
  2461   001312                     u8020:
  2462   001312                     
  2463                           ; BSR set to: 0
  2464                           ;ff.c: 2720:     if (fp->fptr == 0) {
  2465   001312  EE20 F006          	lfsr	2,6
  2466   001316  506D               	movf	f_write@fp^0,w,c
  2467   001318  26D9               	addwf	fsr2l,f,c
  2468   00131A  506E               	movf	(f_write@fp+1)^0,w,c
  2469   00131C  22DA               	addwfc	fsr2h,f,c
  2470   00131E  50DE               	movf	postinc2,w,c
  2471   001320  10DE               	iorwf	postinc2,w,c
  2472   001322  10DE               	iorwf	postinc2,w,c
  2473   001324  10DE               	iorwf	postinc2,w,c
  2474   001326  A4D8               	btfss	status,2,c
  2475   001328  EF98  F009         	goto	u8031
  2476   00132C  EF9A  F009         	goto	u8030
  2477   001330                     u8031:
  2478   001330  EFCF  F009         	goto	l5766
  2479   001334                     u8030:
  2480   001334                     
  2481                           ; BSR set to: 0
  2482                           ;ff.c: 2721:      clst = fp->sclust;
  2483   001334  EE20 F00E          	lfsr	2,14
  2484   001338  506D               	movf	f_write@fp^0,w,c
  2485   00133A  26D9               	addwf	fsr2l,f,c
  2486   00133C  506E               	movf	(f_write@fp+1)^0,w,c
  2487   00133E  22DA               	addwfc	fsr2h,f,c
  2488   001340  CFDE F089          	movff	postinc2,f_write@clst
  2489   001344  CFDE F08A          	movff	postinc2,f_write@clst+1
  2490   001348  CFDE F08B          	movff	postinc2,f_write@clst+2
  2491   00134C  CFDE F08C          	movff	postinc2,f_write@clst+3
  2492   001350                     
  2493                           ; BSR set to: 0
  2494                           ;ff.c: 2722:      if (clst == 0)
  2495   001350  5189               	movf	f_write@clst& (0+255),w,b
  2496   001352  118A               	iorwf	(f_write@clst+1)& (0+255),w,b
  2497   001354  118B               	iorwf	(f_write@clst+2)& (0+255),w,b
  2498   001356  118C               	iorwf	(f_write@clst+3)& (0+255),w,b
  2499   001358  A4D8               	btfss	status,2,c
  2500   00135A  EFB1  F009         	goto	u8041
  2501   00135E  EFB3  F009         	goto	u8040
  2502   001362                     u8041:
  2503   001362  EFEF  F009         	goto	l5768
  2504   001366                     u8040:
  2505   001366                     
  2506                           ; BSR set to: 0
  2507                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  2508   001366  C06D  FFD9         	movff	f_write@fp,fsr2l
  2509   00136A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2510   00136E  CFDE F056          	movff	postinc2,create_chain@fs
  2511   001372  CFDD F057          	movff	postdec2,create_chain@fs+1
  2512   001376  0E00               	movlw	0
  2513   001378  6E58               	movwf	create_chain@clst^0,c
  2514   00137A  0E00               	movlw	0
  2515   00137C  6E59               	movwf	(create_chain@clst+1)^0,c
  2516   00137E  0E00               	movlw	0
  2517   001380  6E5A               	movwf	(create_chain@clst+2)^0,c
  2518   001382  0E00               	movlw	0
  2519   001384  6E5B               	movwf	(create_chain@clst+3)^0,c
  2520   001386  EC27  F01C         	call	_create_chain	;wreg free
  2521   00138A  C056  F089         	movff	?_create_chain,f_write@clst
  2522   00138E  C057  F08A         	movff	?_create_chain+1,f_write@clst+1
  2523   001392  C058  F08B         	movff	?_create_chain+2,f_write@clst+2
  2524   001396  C059  F08C         	movff	?_create_chain+3,f_write@clst+3
  2525   00139A  EFEF  F009         	goto	l5768
  2526   00139E                     l5766:
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  2530   00139E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2531   0013A2  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2532   0013A6  CFDE F056          	movff	postinc2,create_chain@fs
  2533   0013AA  CFDD F057          	movff	postdec2,create_chain@fs+1
  2534   0013AE  EE20 F012          	lfsr	2,18
  2535   0013B2  506D               	movf	f_write@fp^0,w,c
  2536   0013B4  26D9               	addwf	fsr2l,f,c
  2537   0013B6  506E               	movf	(f_write@fp+1)^0,w,c
  2538   0013B8  22DA               	addwfc	fsr2h,f,c
  2539   0013BA  CFDE F058          	movff	postinc2,create_chain@clst
  2540   0013BE  CFDE F059          	movff	postinc2,create_chain@clst+1
  2541   0013C2  CFDE F05A          	movff	postinc2,create_chain@clst+2
  2542   0013C6  CFDE F05B          	movff	postinc2,create_chain@clst+3
  2543   0013CA  EC27  F01C         	call	_create_chain	;wreg free
  2544   0013CE  C056  F089         	movff	?_create_chain,f_write@clst
  2545   0013D2  C057  F08A         	movff	?_create_chain+1,f_write@clst+1
  2546   0013D6  C058  F08B         	movff	?_create_chain+2,f_write@clst+2
  2547   0013DA  C059  F08C         	movff	?_create_chain+3,f_write@clst+3
  2548   0013DE                     l5768:
  2549                           
  2550                           ;ff.c: 2732:     if (clst == 0) break;
  2551   0013DE  0100               	movlb	0	; () banked
  2552   0013E0  5189               	movf	f_write@clst& (0+255),w,b
  2553   0013E2  118A               	iorwf	(f_write@clst+1)& (0+255),w,b
  2554   0013E4  118B               	iorwf	(f_write@clst+2)& (0+255),w,b
  2555   0013E6  118C               	iorwf	(f_write@clst+3)& (0+255),w,b
  2556   0013E8  A4D8               	btfss	status,2,c
  2557   0013EA  EFF9  F009         	goto	u8051
  2558   0013EE  EFFB  F009         	goto	u8050
  2559   0013F2                     u8051:
  2560   0013F2  EFFD  F009         	goto	l5772
  2561   0013F6                     u8050:
  2562   0013F6  EFBE  F00C         	goto	l5862
  2563   0013FA                     l5772:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2567   0013FA  0589               	decf	f_write@clst& (0+255),w,b
  2568   0013FC  118A               	iorwf	(f_write@clst+1)& (0+255),w,b
  2569   0013FE  118B               	iorwf	(f_write@clst+2)& (0+255),w,b
  2570   001400  118C               	iorwf	(f_write@clst+3)& (0+255),w,b
  2571   001402  A4D8               	btfss	status,2,c
  2572   001404  EF06  F00A         	goto	u8061
  2573   001408  EF08  F00A         	goto	u8060
  2574   00140C                     u8061:
  2575   00140C  EF12  F00A         	goto	l5778
  2576   001410                     u8060:
  2577   001410                     
  2578                           ; BSR set to: 0
  2579   001410  EE20 F005          	lfsr	2,5
  2580   001414  506D               	movf	f_write@fp^0,w,c
  2581   001416  26D9               	addwf	fsr2l,f,c
  2582   001418  506E               	movf	(f_write@fp+1)^0,w,c
  2583   00141A  22DA               	addwfc	fsr2h,f,c
  2584   00141C  0E02               	movlw	2
  2585   00141E  6EDF               	movwf	indf2,c
  2586   001420  EFF5  F00C         	goto	l706
  2587   001424                     l5778:
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  2591   001424  2989               	incf	f_write@clst& (0+255),w,b
  2592   001426  E10A               	bnz	u8071
  2593   001428  298A               	incf	(f_write@clst+1)& (0+255),w,b
  2594   00142A  E108               	bnz	u8071
  2595   00142C  298B               	incf	(f_write@clst+2)& (0+255),w,b
  2596   00142E  E106               	bnz	u8071
  2597   001430  298C               	incf	(f_write@clst+3)& (0+255),w,b
  2598   001432  A4D8               	btfss	status,2,c
  2599   001434  EF1E  F00A         	goto	u8071
  2600   001438  EF20  F00A         	goto	u8070
  2601   00143C                     u8071:
  2602   00143C  EF2A  F00A         	goto	l5784
  2603   001440                     u8070:
  2604   001440                     
  2605                           ; BSR set to: 0
  2606   001440  EE20 F005          	lfsr	2,5
  2607   001444  506D               	movf	f_write@fp^0,w,c
  2608   001446  26D9               	addwf	fsr2l,f,c
  2609   001448  506E               	movf	(f_write@fp+1)^0,w,c
  2610   00144A  22DA               	addwfc	fsr2h,f,c
  2611   00144C  0E01               	movlw	1
  2612   00144E  6EDF               	movwf	indf2,c
  2613   001450  EFF5  F00C         	goto	l706
  2614   001454                     l5784:
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;ff.c: 2735:     fp->clust = clst;
  2618   001454  EE20 F012          	lfsr	2,18
  2619   001458  506D               	movf	f_write@fp^0,w,c
  2620   00145A  26D9               	addwf	fsr2l,f,c
  2621   00145C  506E               	movf	(f_write@fp+1)^0,w,c
  2622   00145E  22DA               	addwfc	fsr2h,f,c
  2623   001460  C089  FFDE         	movff	f_write@clst,postinc2
  2624   001464  C08A  FFDE         	movff	f_write@clst+1,postinc2
  2625   001468  C08B  FFDE         	movff	f_write@clst+2,postinc2
  2626   00146C  C08C  FFDE         	movff	f_write@clst+3,postinc2
  2627                           
  2628                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  2629   001470  EE20 F00E          	lfsr	2,14
  2630   001474  506D               	movf	f_write@fp^0,w,c
  2631   001476  26D9               	addwf	fsr2l,f,c
  2632   001478  506E               	movf	(f_write@fp+1)^0,w,c
  2633   00147A  22DA               	addwfc	fsr2h,f,c
  2634   00147C  50DE               	movf	postinc2,w,c
  2635   00147E  10DE               	iorwf	postinc2,w,c
  2636   001480  10DE               	iorwf	postinc2,w,c
  2637   001482  10DE               	iorwf	postinc2,w,c
  2638   001484  A4D8               	btfss	status,2,c
  2639   001486  EF47  F00A         	goto	u8081
  2640   00148A  EF49  F00A         	goto	u8080
  2641   00148E                     u8081:
  2642   00148E  EF57  F00A         	goto	l5788
  2643   001492                     u8080:
  2644   001492                     
  2645                           ; BSR set to: 0
  2646   001492  EE20 F00E          	lfsr	2,14
  2647   001496  506D               	movf	f_write@fp^0,w,c
  2648   001498  26D9               	addwf	fsr2l,f,c
  2649   00149A  506E               	movf	(f_write@fp+1)^0,w,c
  2650   00149C  22DA               	addwfc	fsr2h,f,c
  2651   00149E  C089  FFDE         	movff	f_write@clst,postinc2
  2652   0014A2  C08A  FFDE         	movff	f_write@clst+1,postinc2
  2653   0014A6  C08B  FFDE         	movff	f_write@clst+2,postinc2
  2654   0014AA  C08C  FFDE         	movff	f_write@clst+3,postinc2
  2655   0014AE                     l5788:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  2659   0014AE  EE20 F016          	lfsr	2,22
  2660   0014B2  506D               	movf	f_write@fp^0,w,c
  2661   0014B4  26D9               	addwf	fsr2l,f,c
  2662   0014B6  506E               	movf	(f_write@fp+1)^0,w,c
  2663   0014B8  22DA               	addwfc	fsr2h,f,c
  2664   0014BA  C06D  FFE1         	movff	f_write@fp,fsr1l
  2665   0014BE  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  2666   0014C2  EE00 F02A          	lfsr	0,42
  2667   0014C6  50E6               	movf	postinc1,w,c
  2668   0014C8  26E9               	addwf	fsr0l,f,c
  2669   0014CA  50E5               	movf	postdec1,w,c
  2670   0014CC  22EA               	addwfc	fsr0h,f,c
  2671   0014CE  50DE               	movf	postinc2,w,c
  2672   0014D0  18EE               	xorwf	postinc0,w,c
  2673   0014D2  E10D               	bnz	u8091
  2674   0014D4  50DE               	movf	postinc2,w,c
  2675   0014D6  18EE               	xorwf	postinc0,w,c
  2676   0014D8  E10A               	bnz	u8091
  2677   0014DA  50DE               	movf	postinc2,w,c
  2678   0014DC  18EE               	xorwf	postinc0,w,c
  2679   0014DE  E107               	bnz	u8091
  2680   0014E0  50DE               	movf	postinc2,w,c
  2681   0014E2  18EE               	xorwf	postinc0,w,c
  2682   0014E4  A4D8               	btfss	status,2,c
  2683   0014E6  EF77  F00A         	goto	u8091
  2684   0014EA  EF79  F00A         	goto	u8090
  2685   0014EE                     u8091:
  2686   0014EE  EF95  F00A         	goto	l5796
  2687   0014F2                     u8090:
  2688   0014F2                     
  2689                           ; BSR set to: 0
  2690   0014F2  C06D  FFD9         	movff	f_write@fp,fsr2l
  2691   0014F6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2692   0014FA  CFDE F01B          	movff	postinc2,sync_window@fs
  2693   0014FE  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2694   001502  ECF3  F026         	call	_sync_window	;wreg free
  2695   001506  0900               	iorlw	0
  2696   001508  B4D8               	btfsc	status,2,c
  2697   00150A  EF89  F00A         	goto	u8101
  2698   00150E  EF8B  F00A         	goto	u8100
  2699   001512                     u8101:
  2700   001512  EF95  F00A         	goto	l5796
  2701   001516                     u8100:
  2702   001516                     
  2703                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2704   001516  EE20 F005          	lfsr	2,5
  2705   00151A  506D               	movf	f_write@fp^0,w,c
  2706   00151C  26D9               	addwf	fsr2l,f,c
  2707   00151E  506E               	movf	(f_write@fp+1)^0,w,c
  2708   001520  22DA               	addwfc	fsr2h,f,c
  2709   001522  0E01               	movlw	1
  2710   001524  6EDF               	movwf	indf2,c
  2711   001526  EFF5  F00C         	goto	l706
  2712   00152A                     l5796:
  2713                           
  2714                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  2715   00152A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2716   00152E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2717   001532  CFDE F00D          	movff	postinc2,clust2sect@fs
  2718   001536  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  2719   00153A  EE20 F012          	lfsr	2,18
  2720   00153E  506D               	movf	f_write@fp^0,w,c
  2721   001540  26D9               	addwf	fsr2l,f,c
  2722   001542  506E               	movf	(f_write@fp+1)^0,w,c
  2723   001544  22DA               	addwfc	fsr2h,f,c
  2724   001546  CFDE F00F          	movff	postinc2,clust2sect@clst
  2725   00154A  CFDE F010          	movff	postinc2,clust2sect@clst+1
  2726   00154E  CFDE F011          	movff	postinc2,clust2sect@clst+2
  2727   001552  CFDE F012          	movff	postinc2,clust2sect@clst+3
  2728   001556  ECD9  F02C         	call	_clust2sect	;wreg free
  2729   00155A  C00D  F083         	movff	?_clust2sect,f_write@sect
  2730   00155E  C00E  F084         	movff	?_clust2sect+1,f_write@sect+1
  2731   001562  C00F  F085         	movff	?_clust2sect+2,f_write@sect+2
  2732   001566  C010  F086         	movff	?_clust2sect+3,f_write@sect+3
  2733   00156A                     
  2734                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2735   00156A  0100               	movlb	0	; () banked
  2736   00156C  5183               	movf	f_write@sect& (0+255),w,b
  2737   00156E  1184               	iorwf	(f_write@sect+1)& (0+255),w,b
  2738   001570  1185               	iorwf	(f_write@sect+2)& (0+255),w,b
  2739   001572  1186               	iorwf	(f_write@sect+3)& (0+255),w,b
  2740   001574  A4D8               	btfss	status,2,c
  2741   001576  EFBF  F00A         	goto	u8111
  2742   00157A  EFC1  F00A         	goto	u8110
  2743   00157E                     u8111:
  2744   00157E  EFCB  F00A         	goto	l5804
  2745   001582                     u8110:
  2746   001582                     
  2747                           ; BSR set to: 0
  2748   001582  EE20 F005          	lfsr	2,5
  2749   001586  506D               	movf	f_write@fp^0,w,c
  2750   001588  26D9               	addwf	fsr2l,f,c
  2751   00158A  506E               	movf	(f_write@fp+1)^0,w,c
  2752   00158C  22DA               	addwfc	fsr2h,f,c
  2753   00158E  0E02               	movlw	2
  2754   001590  6EDF               	movwf	indf2,c
  2755   001592  EFF5  F00C         	goto	l706
  2756   001596                     l5804:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;ff.c: 2750:    sect += csect;
  2760   001596  5182               	movf	f_write@csect& (0+255),w,b
  2761   001598  2783               	addwf	f_write@sect& (0+255),f,b
  2762   00159A  0E00               	movlw	0
  2763   00159C  2384               	addwfc	(f_write@sect+1)& (0+255),f,b
  2764   00159E  2385               	addwfc	(f_write@sect+2)& (0+255),f,b
  2765   0015A0  2386               	addwfc	(f_write@sect+3)& (0+255),f,b
  2766                           
  2767                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  2768   0015A2  C070  F073         	movff	f_write@btw,??_f_write
  2769   0015A6  C071  F074         	movff	f_write@btw+1,??_f_write+1
  2770   0015AA  0E09               	movlw	9
  2771   0015AC  6E75               	movwf	(??_f_write+2)^0,c
  2772   0015AE                     u8125:
  2773   0015AE  90D8               	bcf	status,0,c
  2774   0015B0  3274               	rrcf	(??_f_write+1)^0,f,c
  2775   0015B2  3273               	rrcf	??_f_write^0,f,c
  2776   0015B4  2E75               	decfsz	(??_f_write+2)^0,f,c
  2777   0015B6  EFD7  F00A         	goto	u8125
  2778   0015BA  C073  F087         	movff	??_f_write,f_write@cc
  2779   0015BE  C074  F088         	movff	??_f_write+1,f_write@cc+1
  2780                           
  2781                           ;ff.c: 2752:    if (cc) {
  2782   0015C2  5187               	movf	f_write@cc& (0+255),w,b
  2783   0015C4  1188               	iorwf	(f_write@cc+1)& (0+255),w,b
  2784   0015C6  B4D8               	btfsc	status,2,c
  2785   0015C8  EFE8  F00A         	goto	u8131
  2786   0015CC  EFEA  F00A         	goto	u8130
  2787   0015D0                     u8131:
  2788   0015D0  EFB5  F00B         	goto	l5824
  2789   0015D4                     u8130:
  2790   0015D4                     
  2791                           ; BSR set to: 0
  2792                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  2793   0015D4  5182               	movf	f_write@csect& (0+255),w,b
  2794   0015D6  2587               	addwf	f_write@cc& (0+255),w,b
  2795   0015D8  6E73               	movwf	??_f_write^0,c
  2796   0015DA  0E00               	movlw	0
  2797   0015DC  2188               	addwfc	(f_write@cc+1)& (0+255),w,b
  2798   0015DE  6E74               	movwf	(??_f_write+1)^0,c
  2799   0015E0  C06D  FFD9         	movff	f_write@fp,fsr2l
  2800   0015E4  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2801   0015E8  EE10 F002          	lfsr	1,2
  2802   0015EC  50DE               	movf	postinc2,w,c
  2803   0015EE  26E1               	addwf	fsr1l,f,c
  2804   0015F0  50DD               	movf	postdec2,w,c
  2805   0015F2  22E2               	addwfc	fsr1h,f,c
  2806   0015F4  50E7               	movf	indf1,w,c
  2807   0015F6  6E75               	movwf	(??_f_write+2)^0,c
  2808   0015F8  6A76               	clrf	(??_f_write+3)^0,c
  2809   0015FA  5073               	movf	??_f_write^0,w,c
  2810   0015FC  5C75               	subwf	(??_f_write+2)^0,w,c
  2811   0015FE  5074               	movf	(??_f_write+1)^0,w,c
  2812   001600  5876               	subwfb	(??_f_write+3)^0,w,c
  2813   001602  B0D8               	btfsc	status,0,c
  2814   001604  EF06  F00B         	goto	u8141
  2815   001608  EF08  F00B         	goto	u8140
  2816   00160C                     u8141:
  2817   00160C  EF1A  F00B         	goto	l5810
  2818   001610                     u8140:
  2819   001610                     
  2820                           ; BSR set to: 0
  2821                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  2822   001610  C06D  FFD9         	movff	f_write@fp,fsr2l
  2823   001614  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2824   001618  EE10 F002          	lfsr	1,2
  2825   00161C  50DE               	movf	postinc2,w,c
  2826   00161E  26E1               	addwf	fsr1l,f,c
  2827   001620  50DD               	movf	postdec2,w,c
  2828   001622  22E2               	addwfc	fsr1h,f,c
  2829   001624  50E7               	movf	indf1,w,c
  2830   001626  6E73               	movwf	??_f_write^0,c
  2831   001628  5182               	movf	f_write@csect& (0+255),w,b
  2832   00162A  5C73               	subwf	??_f_write^0,w,c
  2833   00162C  6F87               	movwf	f_write@cc& (0+255),b
  2834   00162E  6B88               	clrf	(f_write@cc+1)& (0+255),b
  2835   001630  A0D8               	btfss	status,0,c
  2836   001632  0788               	decf	(f_write@cc+1)& (0+255),f,b
  2837   001634                     l5810:
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  2841   001634  C081  F011         	movff	f_write@wbuff,disk_write@buff
  2842   001638  5011               	movf	disk_write@buff^0,w,c
  2843   00163A  A4D8               	btfss	status,2,c
  2844   00163C  0E06               	movlw	high __smallconst
  2845   00163E  6E12               	movwf	(disk_write@buff+1)^0,c
  2846   001640  C083  F013         	movff	f_write@sect,disk_write@sector
  2847   001644  C084  F014         	movff	f_write@sect+1,disk_write@sector+1
  2848   001648  C085  F015         	movff	f_write@sect+2,disk_write@sector+2
  2849   00164C  C086  F016         	movff	f_write@sect+3,disk_write@sector+3
  2850   001650  C087  F017         	movff	f_write@cc,disk_write@count
  2851   001654  C088  F018         	movff	f_write@cc+1,disk_write@count+1
  2852   001658  C06D  FFD9         	movff	f_write@fp,fsr2l
  2853   00165C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2854   001660  EE10 F001          	lfsr	1,1
  2855   001664  50DE               	movf	postinc2,w,c
  2856   001666  26E1               	addwf	fsr1l,f,c
  2857   001668  50DD               	movf	postdec2,w,c
  2858   00166A  22E2               	addwfc	fsr1h,f,c
  2859   00166C  50E7               	movf	indf1,w,c
  2860   00166E  EC84  F024         	call	_disk_write
  2861   001672  0900               	iorlw	0
  2862   001674  B4D8               	btfsc	status,2,c
  2863   001676  EF3F  F00B         	goto	u8151
  2864   00167A  EF41  F00B         	goto	u8150
  2865   00167E                     u8151:
  2866   00167E  EF4B  F00B         	goto	l5816
  2867   001682                     u8150:
  2868   001682                     
  2869                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2870   001682  EE20 F005          	lfsr	2,5
  2871   001686  506D               	movf	f_write@fp^0,w,c
  2872   001688  26D9               	addwf	fsr2l,f,c
  2873   00168A  506E               	movf	(f_write@fp+1)^0,w,c
  2874   00168C  22DA               	addwfc	fsr2h,f,c
  2875   00168E  0E01               	movlw	1
  2876   001690  6EDF               	movwf	indf2,c
  2877   001692  EFF5  F00C         	goto	l706
  2878   001696                     l5816:
  2879                           
  2880                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  2881   001696  0100               	movlb	0	; () banked
  2882   001698  5187               	movf	f_write@cc& (0+255),w,b
  2883   00169A  6E73               	movwf	??_f_write^0,c
  2884   00169C  5188               	movf	(f_write@cc+1)& (0+255),w,b
  2885   00169E  6E74               	movwf	(??_f_write+1)^0,c
  2886   0016A0  6A75               	clrf	(??_f_write+2)^0,c
  2887   0016A2  6A76               	clrf	(??_f_write+3)^0,c
  2888   0016A4  C06D  FFD9         	movff	f_write@fp,fsr2l
  2889   0016A8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2890   0016AC  EE10 F02A          	lfsr	1,42
  2891   0016B0  50DE               	movf	postinc2,w,c
  2892   0016B2  26E1               	addwf	fsr1l,f,c
  2893   0016B4  50DD               	movf	postdec2,w,c
  2894   0016B6  22E2               	addwfc	fsr1h,f,c
  2895   0016B8  CFE6 F077          	movff	postinc1,??_f_write+4
  2896   0016BC  CFE6 F078          	movff	postinc1,??_f_write+5
  2897   0016C0  CFE6 F079          	movff	postinc1,??_f_write+6
  2898   0016C4  CFE6 F07A          	movff	postinc1,??_f_write+7
  2899   0016C8  5183               	movf	f_write@sect& (0+255),w,b
  2900   0016CA  5C77               	subwf	(??_f_write+4)^0,w,c
  2901   0016CC  6E7B               	movwf	(??_f_write+8)^0,c
  2902   0016CE  5184               	movf	(f_write@sect+1)& (0+255),w,b
  2903   0016D0  5878               	subwfb	(??_f_write+5)^0,w,c
  2904   0016D2  6E7C               	movwf	(??_f_write+9)^0,c
  2905   0016D4  5185               	movf	(f_write@sect+2)& (0+255),w,b
  2906   0016D6  5879               	subwfb	(??_f_write+6)^0,w,c
  2907   0016D8  6E7D               	movwf	(??_f_write+10)^0,c
  2908   0016DA  5186               	movf	(f_write@sect+3)& (0+255),w,b
  2909   0016DC  587A               	subwfb	(??_f_write+7)^0,w,c
  2910   0016DE  6E7E               	movwf	(??_f_write+11)^0,c
  2911   0016E0  5073               	movf	??_f_write^0,w,c
  2912   0016E2  5C7B               	subwf	(??_f_write+8)^0,w,c
  2913   0016E4  5074               	movf	(??_f_write+1)^0,w,c
  2914   0016E6  587C               	subwfb	(??_f_write+9)^0,w,c
  2915   0016E8  5075               	movf	(??_f_write+2)^0,w,c
  2916   0016EA  587D               	subwfb	(??_f_write+10)^0,w,c
  2917   0016EC  5076               	movf	(??_f_write+3)^0,w,c
  2918   0016EE  587E               	subwfb	(??_f_write+11)^0,w,c
  2919   0016F0  B0D8               	btfsc	status,0,c
  2920   0016F2  EF7D  F00B         	goto	u8161
  2921   0016F6  EF7F  F00B         	goto	u8160
  2922   0016FA                     u8161:
  2923   0016FA  EFA4  F00B         	goto	l5822
  2924   0016FE                     u8160:
  2925   0016FE                     
  2926                           ; BSR set to: 0
  2927                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2928   0016FE  C06D  FFD9         	movff	f_write@fp,fsr2l
  2929   001702  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2930   001706  CFDE F073          	movff	postinc2,??_f_write
  2931   00170A  CFDD F074          	movff	postdec2,??_f_write+1
  2932   00170E  0E2E               	movlw	46
  2933   001710  2473               	addwf	??_f_write^0,w,c
  2934   001712  6E01               	movwf	mem_cpy@dst^0,c
  2935   001714  0E00               	movlw	0
  2936   001716  2074               	addwfc	(??_f_write+1)^0,w,c
  2937   001718  6E02               	movwf	(mem_cpy@dst+1)^0,c
  2938   00171A  C081  F003         	movff	f_write@wbuff,mem_cpy@src
  2939   00171E  5003               	movf	mem_cpy@src^0,w,c
  2940   001720  A4D8               	btfss	status,2,c
  2941   001722  0E06               	movlw	high __smallconst
  2942   001724  6E04               	movwf	(mem_cpy@src+1)^0,c
  2943   001726  0E02               	movlw	2
  2944   001728  6E06               	movwf	(mem_cpy@cnt+1)^0,c
  2945   00172A  0E00               	movlw	0
  2946   00172C  6E05               	movwf	mem_cpy@cnt^0,c
  2947   00172E  ECA9  F02B         	call	_mem_cpy	;wreg free
  2948   001732                     
  2949                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2950   001732  C06D  FFD9         	movff	f_write@fp,fsr2l
  2951   001736  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2952   00173A  EE10 F004          	lfsr	1,4
  2953   00173E  50DE               	movf	postinc2,w,c
  2954   001740  26E1               	addwf	fsr1l,f,c
  2955   001742  50DD               	movf	postdec2,w,c
  2956   001744  22E2               	addwfc	fsr1h,f,c
  2957   001746  6AE7               	clrf	indf1,c
  2958   001748                     l5822:
  2959                           
  2960                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2961   001748  C087  F073         	movff	f_write@cc,??_f_write
  2962   00174C  C088  F074         	movff	f_write@cc+1,??_f_write+1
  2963   001750  0E09               	movlw	9
  2964   001752                     u8175:
  2965   001752  90D8               	bcf	status,0,c
  2966   001754  3673               	rlcf	??_f_write^0,f,c
  2967   001756  3674               	rlcf	(??_f_write+1)^0,f,c
  2968   001758  2EE8               	decfsz	wreg,f,c
  2969   00175A  EFA9  F00B         	goto	u8175
  2970   00175E  C073  F08D         	movff	??_f_write,f_write@wcnt
  2971   001762  C074  F08E         	movff	??_f_write+1,f_write@wcnt+1
  2972                           
  2973                           ;ff.c: 2771:     continue;
  2974   001766  EF9A  F00C         	goto	l5852
  2975   00176A                     l5824:
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2979   00176A  EE20 F00A          	lfsr	2,10
  2980   00176E  506D               	movf	f_write@fp^0,w,c
  2981   001770  26D9               	addwf	fsr2l,f,c
  2982   001772  506E               	movf	(f_write@fp+1)^0,w,c
  2983   001774  22DA               	addwfc	fsr2h,f,c
  2984   001776  EE10 F006          	lfsr	1,6
  2985   00177A  506D               	movf	f_write@fp^0,w,c
  2986   00177C  26E1               	addwf	fsr1l,f,c
  2987   00177E  506E               	movf	(f_write@fp+1)^0,w,c
  2988   001780  22E2               	addwfc	fsr1h,f,c
  2989   001782  50DE               	movf	postinc2,w,c
  2990   001784  5CE6               	subwf	postinc1,w,c
  2991   001786  50DE               	movf	postinc2,w,c
  2992   001788  58E6               	subwfb	postinc1,w,c
  2993   00178A  50DE               	movf	postinc2,w,c
  2994   00178C  58E6               	subwfb	postinc1,w,c
  2995   00178E  50DE               	movf	postinc2,w,c
  2996   001790  58E6               	subwfb	postinc1,w,c
  2997   001792  A0D8               	btfss	status,0,c
  2998   001794  EFCE  F00B         	goto	u8181
  2999   001798  EFD0  F00B         	goto	u8180
  3000   00179C                     u8181:
  3001   00179C  EFFE  F00B         	goto	l5834
  3002   0017A0                     u8180:
  3003   0017A0                     
  3004                           ; BSR set to: 0
  3005                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  3006   0017A0  C06D  FFD9         	movff	f_write@fp,fsr2l
  3007   0017A4  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3008   0017A8  CFDE F01B          	movff	postinc2,sync_window@fs
  3009   0017AC  CFDD F01C          	movff	postdec2,sync_window@fs+1
  3010   0017B0  ECF3  F026         	call	_sync_window	;wreg free
  3011   0017B4  0900               	iorlw	0
  3012   0017B6  B4D8               	btfsc	status,2,c
  3013   0017B8  EFE0  F00B         	goto	u8191
  3014   0017BC  EFE2  F00B         	goto	u8190
  3015   0017C0                     u8191:
  3016   0017C0  EFEC  F00B         	goto	l5832
  3017   0017C4                     u8190:
  3018   0017C4  EE20 F005          	lfsr	2,5
  3019   0017C8  506D               	movf	f_write@fp^0,w,c
  3020   0017CA  26D9               	addwf	fsr2l,f,c
  3021   0017CC  506E               	movf	(f_write@fp+1)^0,w,c
  3022   0017CE  22DA               	addwfc	fsr2h,f,c
  3023   0017D0  0E01               	movlw	1
  3024   0017D2  6EDF               	movwf	indf2,c
  3025   0017D4  EFF5  F00C         	goto	l706
  3026   0017D8                     l5832:
  3027                           
  3028                           ;ff.c: 2776:     fp->fs->winsect = sect;
  3029   0017D8  C06D  FFD9         	movff	f_write@fp,fsr2l
  3030   0017DC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3031   0017E0  EE10 F02A          	lfsr	1,42
  3032   0017E4  50DE               	movf	postinc2,w,c
  3033   0017E6  26E1               	addwf	fsr1l,f,c
  3034   0017E8  50DD               	movf	postdec2,w,c
  3035   0017EA  22E2               	addwfc	fsr1h,f,c
  3036   0017EC  C083  FFE6         	movff	f_write@sect,postinc1
  3037   0017F0  C084  FFE6         	movff	f_write@sect+1,postinc1
  3038   0017F4  C085  FFE6         	movff	f_write@sect+2,postinc1
  3039   0017F8  C086  FFE6         	movff	f_write@sect+3,postinc1
  3040   0017FC                     l5834:
  3041                           
  3042                           ;ff.c: 2785:    fp->dsect = sect;
  3043   0017FC  EE20 F016          	lfsr	2,22
  3044   001800  506D               	movf	f_write@fp^0,w,c
  3045   001802  26D9               	addwf	fsr2l,f,c
  3046   001804  506E               	movf	(f_write@fp+1)^0,w,c
  3047   001806  22DA               	addwfc	fsr2h,f,c
  3048   001808  C083  FFDE         	movff	f_write@sect,postinc2
  3049   00180C  C084  FFDE         	movff	f_write@sect+1,postinc2
  3050   001810  C085  FFDE         	movff	f_write@sect+2,postinc2
  3051   001814  C086  FFDE         	movff	f_write@sect+3,postinc2
  3052   001818                     l5836:
  3053                           
  3054                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  3055   001818  EE20 F006          	lfsr	2,6
  3056   00181C  506D               	movf	f_write@fp^0,w,c
  3057   00181E  26D9               	addwf	fsr2l,f,c
  3058   001820  506E               	movf	(f_write@fp+1)^0,w,c
  3059   001822  22DA               	addwfc	fsr2h,f,c
  3060   001824  CFDE F073          	movff	postinc2,??_f_write
  3061   001828  CFDD F074          	movff	postdec2,??_f_write+1
  3062   00182C  0EFF               	movlw	255
  3063   00182E  1473               	andwf	??_f_write^0,w,c
  3064   001830  6E75               	movwf	(??_f_write+2)^0,c
  3065   001832  0E01               	movlw	1
  3066   001834  1474               	andwf	(??_f_write+1)^0,w,c
  3067   001836  6E76               	movwf	(??_f_write+3)^0,c
  3068   001838  5075               	movf	(??_f_write+2)^0,w,c
  3069   00183A  0800               	sublw	0
  3070   00183C  0100               	movlb	0	; () banked
  3071   00183E  6F8D               	movwf	f_write@wcnt& (0+255),b
  3072   001840  5076               	movf	(??_f_write+3)^0,w,c
  3073   001842  A0D8               	btfss	status,0,c
  3074   001844  2AE8               	incf	wreg,f,c
  3075   001846  0802               	sublw	2
  3076   001848  6F8E               	movwf	(f_write@wcnt+1)& (0+255),b
  3077   00184A                     
  3078                           ; BSR set to: 0
  3079                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  3080   00184A  518D               	movf	f_write@wcnt& (0+255),w,b
  3081   00184C  5C70               	subwf	f_write@btw^0,w,c
  3082   00184E  518E               	movf	(f_write@wcnt+1)& (0+255),w,b
  3083   001850  5871               	subwfb	(f_write@btw+1)^0,w,c
  3084   001852  B0D8               	btfsc	status,0,c
  3085   001854  EF2E  F00C         	goto	u8201
  3086   001858  EF30  F00C         	goto	u8200
  3087   00185C                     u8201:
  3088   00185C  EF34  F00C         	goto	l5842
  3089   001860                     u8200:
  3090   001860                     
  3091                           ; BSR set to: 0
  3092   001860  C070  F08D         	movff	f_write@btw,f_write@wcnt
  3093   001864  C071  F08E         	movff	f_write@btw+1,f_write@wcnt+1
  3094   001868                     l5842:
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  3098   001868  C06D  FFD9         	movff	f_write@fp,fsr2l
  3099   00186C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3100   001870  CFDE F030          	movff	postinc2,move_window@fs
  3101   001874  CFDD F031          	movff	postdec2,move_window@fs+1
  3102   001878  EE20 F016          	lfsr	2,22
  3103   00187C  506D               	movf	f_write@fp^0,w,c
  3104   00187E  26D9               	addwf	fsr2l,f,c
  3105   001880  506E               	movf	(f_write@fp+1)^0,w,c
  3106   001882  22DA               	addwfc	fsr2h,f,c
  3107   001884  CFDE F032          	movff	postinc2,move_window@sector
  3108   001888  CFDE F033          	movff	postinc2,move_window@sector+1
  3109   00188C  CFDE F034          	movff	postinc2,move_window@sector+2
  3110   001890  CFDE F035          	movff	postinc2,move_window@sector+3
  3111   001894  EC3C  F02D         	call	_move_window	;wreg free
  3112   001898  0900               	iorlw	0
  3113   00189A  B4D8               	btfsc	status,2,c
  3114   00189C  EF52  F00C         	goto	u8211
  3115   0018A0  EF54  F00C         	goto	u8210
  3116   0018A4                     u8211:
  3117   0018A4  EF5E  F00C         	goto	l5848
  3118   0018A8                     u8210:
  3119   0018A8                     
  3120                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  3121   0018A8  EE20 F005          	lfsr	2,5
  3122   0018AC  506D               	movf	f_write@fp^0,w,c
  3123   0018AE  26D9               	addwf	fsr2l,f,c
  3124   0018B0  506E               	movf	(f_write@fp+1)^0,w,c
  3125   0018B2  22DA               	addwfc	fsr2h,f,c
  3126   0018B4  0E01               	movlw	1
  3127   0018B6  6EDF               	movwf	indf2,c
  3128   0018B8  EFF5  F00C         	goto	l706
  3129   0018BC                     l5848:
  3130                           
  3131                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  3132   0018BC  EE20 F006          	lfsr	2,6
  3133   0018C0  506D               	movf	f_write@fp^0,w,c
  3134   0018C2  26D9               	addwf	fsr2l,f,c
  3135   0018C4  506E               	movf	(f_write@fp+1)^0,w,c
  3136   0018C6  22DA               	addwfc	fsr2h,f,c
  3137   0018C8  CFDE F073          	movff	postinc2,??_f_write
  3138   0018CC  CFDD F074          	movff	postdec2,??_f_write+1
  3139   0018D0  0EFF               	movlw	255
  3140   0018D2  1473               	andwf	??_f_write^0,w,c
  3141   0018D4  6E75               	movwf	(??_f_write+2)^0,c
  3142   0018D6  0E01               	movlw	1
  3143   0018D8  1474               	andwf	(??_f_write+1)^0,w,c
  3144   0018DA  6E76               	movwf	(??_f_write+3)^0,c
  3145   0018DC  C06D  FFD9         	movff	f_write@fp,fsr2l
  3146   0018E0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3147   0018E4  CFDE F077          	movff	postinc2,??_f_write+4
  3148   0018E8  CFDD F078          	movff	postdec2,??_f_write+5
  3149   0018EC  5075               	movf	(??_f_write+2)^0,w,c
  3150   0018EE  2477               	addwf	(??_f_write+4)^0,w,c
  3151   0018F0  6E79               	movwf	(??_f_write+6)^0,c
  3152   0018F2  5076               	movf	(??_f_write+3)^0,w,c
  3153   0018F4  2078               	addwfc	(??_f_write+5)^0,w,c
  3154   0018F6  6E7A               	movwf	(??_f_write+7)^0,c
  3155   0018F8  0E2E               	movlw	46
  3156   0018FA  2479               	addwf	(??_f_write+6)^0,w,c
  3157   0018FC  6E01               	movwf	mem_cpy@dst^0,c
  3158   0018FE  0E00               	movlw	0
  3159   001900  207A               	addwfc	(??_f_write+7)^0,w,c
  3160   001902  6E02               	movwf	(mem_cpy@dst+1)^0,c
  3161   001904  C081  F003         	movff	f_write@wbuff,mem_cpy@src
  3162   001908  5003               	movf	mem_cpy@src^0,w,c
  3163   00190A  A4D8               	btfss	status,2,c
  3164   00190C  0E06               	movlw	high __smallconst
  3165   00190E  6E04               	movwf	(mem_cpy@src+1)^0,c
  3166   001910  C08D  F005         	movff	f_write@wcnt,mem_cpy@cnt
  3167   001914  C08E  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  3168   001918  ECA9  F02B         	call	_mem_cpy	;wreg free
  3169   00191C                     
  3170                           ;ff.c: 2793:   fp->fs->wflag = 1;
  3171   00191C  C06D  FFD9         	movff	f_write@fp,fsr2l
  3172   001920  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3173   001924  EE10 F004          	lfsr	1,4
  3174   001928  50DE               	movf	postinc2,w,c
  3175   00192A  26E1               	addwf	fsr1l,f,c
  3176   00192C  50DD               	movf	postdec2,w,c
  3177   00192E  22E2               	addwfc	fsr1h,f,c
  3178   001930  0E01               	movlw	1
  3179   001932  6EE7               	movwf	indf1,c
  3180   001934                     l5852:
  3181   001934  0100               	movlb	0	; () banked
  3182   001936  518D               	movf	f_write@wcnt& (0+255),w,b
  3183   001938  2781               	addwf	f_write@wbuff& (0+255),f,b
  3184   00193A                     
  3185                           ; BSR set to: 0
  3186   00193A  EE20 F006          	lfsr	2,6
  3187   00193E  506D               	movf	f_write@fp^0,w,c
  3188   001940  26D9               	addwf	fsr2l,f,c
  3189   001942  506E               	movf	(f_write@fp+1)^0,w,c
  3190   001944  22DA               	addwfc	fsr2h,f,c
  3191   001946  518D               	movf	f_write@wcnt& (0+255),w,b
  3192   001948  26DE               	addwf	postinc2,f,c
  3193   00194A  518E               	movf	(f_write@wcnt+1)& (0+255),w,b
  3194   00194C  22DE               	addwfc	postinc2,f,c
  3195   00194E  0E00               	movlw	0
  3196   001950  22DE               	addwfc	postinc2,f,c
  3197   001952  22DE               	addwfc	postinc2,f,c
  3198   001954                     
  3199                           ; BSR set to: 0
  3200   001954  5072               	movf	f_write@bw^0,w,c
  3201   001956  6ED9               	movwf	fsr2l,c
  3202   001958  6ADA               	clrf	fsr2h,c
  3203   00195A  518D               	movf	f_write@wcnt& (0+255),w,b
  3204   00195C  26DE               	addwf	postinc2,f,c
  3205   00195E  518E               	movf	(f_write@wcnt+1)& (0+255),w,b
  3206   001960  22DD               	addwfc	postdec2,f,c
  3207   001962                     
  3208                           ; BSR set to: 0
  3209   001962  518D               	movf	f_write@wcnt& (0+255),w,b
  3210   001964  5E70               	subwf	f_write@btw^0,f,c
  3211   001966  518E               	movf	(f_write@wcnt+1)& (0+255),w,b
  3212   001968  5A71               	subwfb	(f_write@btw+1)^0,f,c
  3213   00196A                     l5860:
  3214                           
  3215                           ; BSR set to: 0
  3216   00196A  5070               	movf	f_write@btw^0,w,c
  3217   00196C  1071               	iorwf	(f_write@btw+1)^0,w,c
  3218   00196E  A4D8               	btfss	status,2,c
  3219   001970  EFBC  F00C         	goto	u8221
  3220   001974  EFBE  F00C         	goto	u8220
  3221   001978                     u8221:
  3222   001978  EF3C  F009         	goto	l5752
  3223   00197C                     u8220:
  3224   00197C                     l5862:
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  3228   00197C  EE20 F006          	lfsr	2,6
  3229   001980  506D               	movf	f_write@fp^0,w,c
  3230   001982  26D9               	addwf	fsr2l,f,c
  3231   001984  506E               	movf	(f_write@fp+1)^0,w,c
  3232   001986  22DA               	addwfc	fsr2h,f,c
  3233   001988  EE10 F00A          	lfsr	1,10
  3234   00198C  506D               	movf	f_write@fp^0,w,c
  3235   00198E  26E1               	addwf	fsr1l,f,c
  3236   001990  506E               	movf	(f_write@fp+1)^0,w,c
  3237   001992  22E2               	addwfc	fsr1h,f,c
  3238   001994  50DE               	movf	postinc2,w,c
  3239   001996  5CE6               	subwf	postinc1,w,c
  3240   001998  50DE               	movf	postinc2,w,c
  3241   00199A  58E6               	subwfb	postinc1,w,c
  3242   00199C  50DE               	movf	postinc2,w,c
  3243   00199E  58E6               	subwfb	postinc1,w,c
  3244   0019A0  50DE               	movf	postinc2,w,c
  3245   0019A2  58E6               	subwfb	postinc1,w,c
  3246   0019A4  B0D8               	btfsc	status,0,c
  3247   0019A6  EFD7  F00C         	goto	u8231
  3248   0019AA  EFD9  F00C         	goto	u8230
  3249   0019AE                     u8231:
  3250   0019AE  EFED  F00C         	goto	l5866
  3251   0019B2                     u8230:
  3252   0019B2                     
  3253                           ; BSR set to: 0
  3254   0019B2  EE20 F006          	lfsr	2,6
  3255   0019B6  506D               	movf	f_write@fp^0,w,c
  3256   0019B8  26D9               	addwf	fsr2l,f,c
  3257   0019BA  506E               	movf	(f_write@fp+1)^0,w,c
  3258   0019BC  22DA               	addwfc	fsr2h,f,c
  3259   0019BE  EE10 F00A          	lfsr	1,10
  3260   0019C2  506D               	movf	f_write@fp^0,w,c
  3261   0019C4  26E1               	addwf	fsr1l,f,c
  3262   0019C6  506E               	movf	(f_write@fp+1)^0,w,c
  3263   0019C8  22E2               	addwfc	fsr1h,f,c
  3264   0019CA  CFDE FFE6          	movff	postinc2,postinc1
  3265   0019CE  CFDE FFE6          	movff	postinc2,postinc1
  3266   0019D2  CFDE FFE6          	movff	postinc2,postinc1
  3267   0019D6  CFDE FFE6          	movff	postinc2,postinc1
  3268   0019DA                     l5866:
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;ff.c: 2801:  fp->flag |= 0x20;
  3272   0019DA  EE20 F004          	lfsr	2,4
  3273   0019DE  506D               	movf	f_write@fp^0,w,c
  3274   0019E0  26D9               	addwf	fsr2l,f,c
  3275   0019E2  506E               	movf	(f_write@fp+1)^0,w,c
  3276   0019E4  22DA               	addwfc	fsr2h,f,c
  3277   0019E6  0E00               	movlw	0
  3278   0019E8  8ADB               	bsf	plusw2,5,c
  3279   0019EA                     l706:
  3280   0019EA  0012               	return		;funcret
  3281   0019EC                     __end_of_f_write:
  3282                           	callstack 0
  3283                           
  3284 ;; *************** function _f_open *****************
  3285 ;; Defined at:
  3286 ;;		line 2449 in file "ff.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;  fp              2   58[BANK0 ] PTR struct .
  3289 ;;		 -> Fil(32), 
  3290 ;;  path            1   60[BANK0 ] PTR const unsigned char 
  3291 ;;		 -> STR_4(10), STR_3(1), 
  3292 ;;  mode            1   61[BANK0 ] unsigned char 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  dj             21   89[BANK0 ] struct .
  3295 ;;  sfn            12   66[BANK0 ] unsigned char [12]
  3296 ;;  dw              4   82[BANK0 ] unsigned long 
  3297 ;;  cl              4   78[BANK0 ] unsigned long 
  3298 ;;  dir             2   87[BANK0 ] PTR unsigned char 
  3299 ;;		 -> FatFs(558), NULL(0), 
  3300 ;;  res             1   86[BANK0 ] enum E95
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      enum E95
  3303 ;; Registers used:
  3304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3310 ;;      Params:         0       4       0       0       0       0       0
  3311 ;;      Locals:         0      44       0       0       0       0       0
  3312 ;;      Temps:          0       4       0       0       0       0       0
  3313 ;;      Totals:         0      52       0       0       0       0       0
  3314 ;;Total ram usage:       52 bytes
  3315 ;; Hardware stack levels used: 1
  3316 ;; Hardware stack levels required when called: 13
  3317 ;; This function calls:
  3318 ;;		_dir_register
  3319 ;;		_find_volume
  3320 ;;		_follow_path
  3321 ;;		_ld_clust
  3322 ;;		_move_window
  3323 ;;		_remove_chain
  3324 ;;		_st_clust
  3325 ;; This function is called by:
  3326 ;;		_main
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text2
  3331   00301E                     __ptext2:
  3332                           	callstack 0
  3333   00301E                     _f_open:
  3334                           	callstack 17
  3335   00301E                     
  3336                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIR dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458:  
      +                          BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT;
  3337   00301E  0100               	movlb	0	; () banked
  3338   003020  51BA               	movf	f_open@fp& (0+255),w,b
  3339   003022  11BB               	iorwf	(f_open@fp+1)& (0+255),w,b
  3340   003024  A4D8               	btfss	status,2,c
  3341   003026  EF17  F018         	goto	u7761
  3342   00302A  EF19  F018         	goto	u7760
  3343   00302E                     u7761:
  3344   00302E  EF1C  F018         	goto	l5622
  3345   003032                     u7760:
  3346   003032                     
  3347                           ; BSR set to: 0
  3348   003032  0E09               	movlw	9
  3349   003034  EF37  F01A         	goto	l657
  3350   003038                     l5622:
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;ff.c: 2465:  fp->fs = 0;
  3354   003038  C0BA  FFD9         	movff	f_open@fp,fsr2l
  3355   00303C  C0BB  FFDA         	movff	f_open@fp+1,fsr2h
  3356   003040  6ADE               	clrf	postinc2,c
  3357   003042  6ADD               	clrf	postdec2,c
  3358   003044                     
  3359                           ; BSR set to: 0
  3360                           ;ff.c: 2468:  dj.fs = FatFs[0];
  3361   003044  C0FA  F0D9         	movff	_FatFs@ff$F447,f_open@dj
  3362   003048  C0FB  F0DA         	movff	_FatFs@ff$F447+1,f_open@dj+1
  3363   00304C                     
  3364                           ; BSR set to: 0
  3365                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  3366   00304C  0E1F               	movlw	31
  3367   00304E  17BD               	andwf	f_open@mode& (0+255),f,b
  3368   003050                     
  3369                           ; BSR set to: 0
  3370                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  3371   003050  0ED9               	movlw	low f_open@dj
  3372   003052  6E45               	movwf	find_volume@rfs^0,c
  3373   003054  0EBC               	movlw	low f_open@path
  3374   003056  6E46               	movwf	find_volume@path^0,c
  3375   003058  51BD               	movf	f_open@mode& (0+255),w,b
  3376   00305A  0BFE               	andlw	254
  3377   00305C  6E47               	movwf	find_volume@wmode^0,c
  3378   00305E  EC1D  F003         	call	_find_volume	;wreg free
  3379   003062  0100               	movlb	0	; () banked
  3380   003064  6FD6               	movwf	f_open@res& (0+255),b
  3381   003066                     
  3382                           ; BSR set to: 0
  3383                           ;ff.c: 2479:  if (res == FR_OK) {
  3384   003066  51D6               	movf	f_open@res& (0+255),w,b
  3385   003068  A4D8               	btfss	status,2,c
  3386   00306A  EF39  F018         	goto	u7771
  3387   00306E  EF3B  F018         	goto	u7770
  3388   003072                     u7771:
  3389   003072  EF36  F01A         	goto	l5726
  3390   003076                     u7770:
  3391   003076                     
  3392                           ; BSR set to: 0
  3393                           ;ff.c: 2480:   (dj).fn = sfn;
  3394   003076  0EC2               	movlw	low f_open@sfn
  3395   003078  6FED               	movwf	(f_open@dj+20)& (0+255),b
  3396   00307A                     
  3397                           ; BSR set to: 0
  3398                           ;ff.c: 2481:   res = follow_path(&dj, path);
  3399   00307A  0ED9               	movlw	low f_open@dj
  3400   00307C  6F85               	movwf	follow_path@dp& (0+255),b
  3401   00307E  C0BC  F086         	movff	f_open@path,follow_path@path
  3402   003082  EC2B  F026         	call	_follow_path	;wreg free
  3403   003086  0100               	movlb	0	; () banked
  3404   003088  6FD6               	movwf	f_open@res& (0+255),b
  3405   00308A                     
  3406                           ; BSR set to: 0
  3407                           ;ff.c: 2482:   dir = dj.dir;
  3408   00308A  C0EB  F0D7         	movff	f_open@dj+18,f_open@dir
  3409   00308E  C0EC  F0D8         	movff	f_open@dj+19,f_open@dir+1
  3410   003092                     
  3411                           ; BSR set to: 0
  3412                           ;ff.c: 2484:   if (res == FR_OK) {
  3413   003092  51D6               	movf	f_open@res& (0+255),w,b
  3414   003094  A4D8               	btfss	status,2,c
  3415   003096  EF4F  F018         	goto	u7781
  3416   00309A  EF51  F018         	goto	u7780
  3417   00309E                     u7781:
  3418   00309E  EF5C  F018         	goto	l5644
  3419   0030A2                     u7780:
  3420   0030A2                     
  3421                           ; BSR set to: 0
  3422                           ;ff.c: 2485:    if (!dir)
  3423   0030A2  51D7               	movf	f_open@dir& (0+255),w,b
  3424   0030A4  11D8               	iorwf	(f_open@dir+1)& (0+255),w,b
  3425   0030A6  A4D8               	btfss	status,2,c
  3426   0030A8  EF58  F018         	goto	u7791
  3427   0030AC  EF5A  F018         	goto	u7790
  3428   0030B0                     u7791:
  3429   0030B0  EF5C  F018         	goto	l5644
  3430   0030B4                     u7790:
  3431   0030B4                     
  3432                           ; BSR set to: 0
  3433                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  3434   0030B4  0E06               	movlw	6
  3435   0030B6  6FD6               	movwf	f_open@res& (0+255),b
  3436   0030B8                     l5644:
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  3440   0030B8  C0BD  F0BE         	movff	f_open@mode,??_f_open
  3441   0030BC  0E1C               	movlw	28
  3442   0030BE  17BE               	andwf	??_f_open& (0+255),f,b
  3443   0030C0  B4D8               	btfsc	status,2,c
  3444   0030C2  EF65  F018         	goto	u7801
  3445   0030C6  EF67  F018         	goto	u7800
  3446   0030CA                     u7801:
  3447   0030CA  EF65  F019         	goto	l5692
  3448   0030CE                     u7800:
  3449   0030CE                     
  3450                           ; BSR set to: 0
  3451                           ;ff.c: 2494:    if (res != FR_OK) {
  3452   0030CE  51D6               	movf	f_open@res& (0+255),w,b
  3453   0030D0  B4D8               	btfsc	status,2,c
  3454   0030D2  EF6D  F018         	goto	u7811
  3455   0030D6  EF6F  F018         	goto	u7810
  3456   0030DA                     u7811:
  3457   0030DA  EF85  F018         	goto	l5656
  3458   0030DE                     u7810:
  3459   0030DE                     
  3460                           ; BSR set to: 0
  3461                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  3462   0030DE  0E04               	movlw	4
  3463   0030E0  19D6               	xorwf	f_open@res& (0+255),w,b
  3464   0030E2  A4D8               	btfss	status,2,c
  3465   0030E4  EF76  F018         	goto	u7821
  3466   0030E8  EF78  F018         	goto	u7820
  3467   0030EC                     u7821:
  3468   0030EC  EF7E  F018         	goto	l5652
  3469   0030F0                     u7820:
  3470   0030F0                     
  3471                           ; BSR set to: 0
  3472                           ;ff.c: 2499:      res = dir_register(&dj);
  3473   0030F0  0ED9               	movlw	low f_open@dj
  3474   0030F2  6F89               	movwf	dir_register@dp& (0+255),b
  3475   0030F4  EC3B  F02B         	call	_dir_register	;wreg free
  3476   0030F8  0100               	movlb	0	; () banked
  3477   0030FA  6FD6               	movwf	f_open@res& (0+255),b
  3478   0030FC                     l5652:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;ff.c: 2501:     mode |= 0x08;
  3482   0030FC  87BD               	bsf	f_open@mode& (0+255),3,b
  3483   0030FE                     
  3484                           ; BSR set to: 0
  3485                           ;ff.c: 2502:     dir = dj.dir;
  3486   0030FE  C0EB  F0D7         	movff	f_open@dj+18,f_open@dir
  3487   003102  C0EC  F0D8         	movff	f_open@dj+19,f_open@dir+1
  3488                           
  3489                           ;ff.c: 2503:    }
  3490   003106  EFA3  F018         	goto	l664
  3491   00310A                     l5656:
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  3495   00310A  EE20 F00B          	lfsr	2,11
  3496   00310E  51D7               	movf	f_open@dir& (0+255),w,b
  3497   003110  26D9               	addwf	fsr2l,f,c
  3498   003112  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  3499   003114  22DA               	addwfc	fsr2h,f,c
  3500   003116  50DF               	movf	indf2,w,c
  3501   003118  6FBE               	movwf	??_f_open& (0+255),b
  3502   00311A  0E11               	movlw	17
  3503   00311C  17BE               	andwf	??_f_open& (0+255),f,b
  3504   00311E  B4D8               	btfsc	status,2,c
  3505   003120  EF94  F018         	goto	u7831
  3506   003124  EF96  F018         	goto	u7830
  3507   003128                     u7831:
  3508   003128  EF9A  F018         	goto	l665
  3509   00312C                     u7830:
  3510   00312C                     
  3511                           ; BSR set to: 0
  3512                           ;ff.c: 2506:      res = FR_DENIED;
  3513   00312C  0E07               	movlw	7
  3514   00312E  6FD6               	movwf	f_open@res& (0+255),b
  3515                           
  3516                           ;ff.c: 2507:     } else {
  3517   003130  EFA3  F018         	goto	l664
  3518   003134                     l665:
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;ff.c: 2508:      if (mode & 0x04)
  3522   003134  A5BD               	btfss	f_open@mode& (0+255),2,b
  3523   003136  EF9F  F018         	goto	u7841
  3524   00313A  EFA1  F018         	goto	u7840
  3525   00313E                     u7841:
  3526   00313E  EFA3  F018         	goto	l664
  3527   003142                     u7840:
  3528   003142                     
  3529                           ; BSR set to: 0
  3530                           ;ff.c: 2509:       res = FR_EXIST;
  3531   003142  0E08               	movlw	8
  3532   003144  6FD6               	movwf	f_open@res& (0+255),b
  3533   003146                     l664:
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  3537   003146  51D6               	movf	f_open@res& (0+255),w,b
  3538   003148  A4D8               	btfss	status,2,c
  3539   00314A  EFA9  F018         	goto	u7851
  3540   00314E  EFAB  F018         	goto	u7850
  3541   003152                     u7851:
  3542   003152  EF94  F019         	goto	l671
  3543   003156                     u7850:
  3544   003156                     
  3545                           ; BSR set to: 0
  3546   003156  A7BD               	btfss	f_open@mode& (0+255),3,b
  3547   003158  EFB0  F018         	goto	u7861
  3548   00315C  EFB2  F018         	goto	u7860
  3549   003160                     u7861:
  3550   003160  EF94  F019         	goto	l671
  3551   003164                     u7860:
  3552   003164                     
  3553                           ; BSR set to: 0
  3554                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  3555   003164  EE20 F00E          	lfsr	2,14
  3556   003168  51D7               	movf	f_open@dir& (0+255),w,b
  3557   00316A  26D9               	addwf	fsr2l,f,c
  3558   00316C  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  3559   00316E  22DA               	addwfc	fsr2h,f,c
  3560   003170  0E00               	movlw	0
  3561   003172  6EDE               	movwf	postinc2,c
  3562   003174  0E00               	movlw	0
  3563   003176  6EDE               	movwf	postinc2,c
  3564   003178  0E21               	movlw	33
  3565   00317A  6EDE               	movwf	postinc2,c
  3566   00317C  0E46               	movlw	70
  3567   00317E  6EDD               	movwf	postdec2,c
  3568   003180                     
  3569                           ; BSR set to: 0
  3570                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  3571   003180  EE20 F016          	lfsr	2,22
  3572   003184  51D7               	movf	f_open@dir& (0+255),w,b
  3573   003186  26D9               	addwf	fsr2l,f,c
  3574   003188  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  3575   00318A  22DA               	addwfc	fsr2h,f,c
  3576   00318C  0E00               	movlw	0
  3577   00318E  6EDE               	movwf	postinc2,c
  3578   003190  0E00               	movlw	0
  3579   003192  6EDE               	movwf	postinc2,c
  3580   003194  0E21               	movlw	33
  3581   003196  6EDE               	movwf	postinc2,c
  3582   003198  0E46               	movlw	70
  3583   00319A  6EDD               	movwf	postdec2,c
  3584   00319C                     
  3585                           ; BSR set to: 0
  3586                           ;ff.c: 2516:     dir[11] = 0;
  3587   00319C  EE20 F00B          	lfsr	2,11
  3588   0031A0  51D7               	movf	f_open@dir& (0+255),w,b
  3589   0031A2  26D9               	addwf	fsr2l,f,c
  3590   0031A4  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  3591   0031A6  22DA               	addwfc	fsr2h,f,c
  3592   0031A8  6ADF               	clrf	indf2,c
  3593   0031AA                     
  3594                           ; BSR set to: 0
  3595                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  3596   0031AA  EE20 F01C          	lfsr	2,28
  3597   0031AE  51D7               	movf	f_open@dir& (0+255),w,b
  3598   0031B0  26D9               	addwf	fsr2l,f,c
  3599   0031B2  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  3600   0031B4  22DA               	addwfc	fsr2h,f,c
  3601   0031B6  6ADE               	clrf	postinc2,c
  3602   0031B8  6ADE               	clrf	postinc2,c
  3603   0031BA  6ADE               	clrf	postinc2,c
  3604   0031BC  6ADD               	clrf	postdec2,c
  3605   0031BE                     
  3606                           ; BSR set to: 0
  3607                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  3608   0031BE  C0D9  F001         	movff	f_open@dj,ld_clust@fs
  3609   0031C2  C0DA  F002         	movff	f_open@dj+1,ld_clust@fs+1
  3610   0031C6  C0D7  F003         	movff	f_open@dir,ld_clust@dir
  3611   0031CA  C0D8  F004         	movff	f_open@dir+1,ld_clust@dir+1
  3612   0031CE  ECF3  F02E         	call	_ld_clust	;wreg free
  3613   0031D2  C001  F0CE         	movff	?_ld_clust,f_open@cl
  3614   0031D6  C002  F0CF         	movff	?_ld_clust+1,f_open@cl+1
  3615   0031DA  C003  F0D0         	movff	?_ld_clust+2,f_open@cl+2
  3616   0031DE  C004  F0D1         	movff	?_ld_clust+3,f_open@cl+3
  3617   0031E2                     
  3618                           ;ff.c: 2519:     st_clust(dir, 0);
  3619   0031E2  C0D7  F001         	movff	f_open@dir,st_clust@dir
  3620   0031E6  C0D8  F002         	movff	f_open@dir+1,st_clust@dir+1
  3621   0031EA  0E00               	movlw	0
  3622   0031EC  6E03               	movwf	st_clust@cl^0,c
  3623   0031EE  0E00               	movlw	0
  3624   0031F0  6E04               	movwf	(st_clust@cl+1)^0,c
  3625   0031F2  0E00               	movlw	0
  3626   0031F4  6E05               	movwf	(st_clust@cl+2)^0,c
  3627   0031F6  0E00               	movlw	0
  3628   0031F8  6E06               	movwf	(st_clust@cl+3)^0,c
  3629   0031FA  EC93  F030         	call	_st_clust	;wreg free
  3630   0031FE                     
  3631                           ;ff.c: 2520:     dj.fs->wflag = 1;
  3632   0031FE  0100               	movlb	0	; () banked
  3633   003200  EE20 F004          	lfsr	2,4
  3634   003204  51D9               	movf	f_open@dj& (0+255),w,b
  3635   003206  26D9               	addwf	fsr2l,f,c
  3636   003208  51DA               	movf	(f_open@dj+1)& (0+255),w,b
  3637   00320A  22DA               	addwfc	fsr2h,f,c
  3638   00320C  0E01               	movlw	1
  3639   00320E  6EDF               	movwf	indf2,c
  3640   003210                     
  3641                           ; BSR set to: 0
  3642                           ;ff.c: 2521:     if (cl) {
  3643   003210  51CE               	movf	f_open@cl& (0+255),w,b
  3644   003212  11CF               	iorwf	(f_open@cl+1)& (0+255),w,b
  3645   003214  11D0               	iorwf	(f_open@cl+2)& (0+255),w,b
  3646   003216  11D1               	iorwf	(f_open@cl+3)& (0+255),w,b
  3647   003218  B4D8               	btfsc	status,2,c
  3648   00321A  EF11  F019         	goto	u7871
  3649   00321E  EF13  F019         	goto	u7870
  3650   003222                     u7871:
  3651   003222  EF94  F019         	goto	l671
  3652   003226                     u7870:
  3653   003226                     
  3654                           ; BSR set to: 0
  3655                           ;ff.c: 2522:      dw = dj.fs->winsect;
  3656   003226  EE20 F02A          	lfsr	2,42
  3657   00322A  51D9               	movf	f_open@dj& (0+255),w,b
  3658   00322C  26D9               	addwf	fsr2l,f,c
  3659   00322E  51DA               	movf	(f_open@dj+1)& (0+255),w,b
  3660   003230  22DA               	addwfc	fsr2h,f,c
  3661   003232  CFDE F0D2          	movff	postinc2,f_open@dw
  3662   003236  CFDE F0D3          	movff	postinc2,f_open@dw+1
  3663   00323A  CFDE F0D4          	movff	postinc2,f_open@dw+2
  3664   00323E  CFDE F0D5          	movff	postinc2,f_open@dw+3
  3665   003242                     
  3666                           ; BSR set to: 0
  3667                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  3668   003242  C0D9  F056         	movff	f_open@dj,remove_chain@fs
  3669   003246  C0DA  F057         	movff	f_open@dj+1,remove_chain@fs+1
  3670   00324A  C0CE  F058         	movff	f_open@cl,remove_chain@clst
  3671   00324E  C0CF  F059         	movff	f_open@cl+1,remove_chain@clst+1
  3672   003252  C0D0  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  3673   003256  C0D1  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  3674   00325A  EC59  F025         	call	_remove_chain	;wreg free
  3675   00325E  0100               	movlb	0	; () banked
  3676   003260  6FD6               	movwf	f_open@res& (0+255),b
  3677   003262                     
  3678                           ; BSR set to: 0
  3679                           ;ff.c: 2524:      if (res == FR_OK) {
  3680   003262  51D6               	movf	f_open@res& (0+255),w,b
  3681   003264  A4D8               	btfss	status,2,c
  3682   003266  EF37  F019         	goto	u7881
  3683   00326A  EF39  F019         	goto	u7880
  3684   00326E                     u7881:
  3685   00326E  EF94  F019         	goto	l671
  3686   003272                     u7880:
  3687   003272                     
  3688                           ; BSR set to: 0
  3689                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  3690   003272  0EFF               	movlw	255
  3691   003274  25CE               	addwf	f_open@cl& (0+255),w,b
  3692   003276  6FBE               	movwf	??_f_open& (0+255),b
  3693   003278  0EFF               	movlw	255
  3694   00327A  21CF               	addwfc	(f_open@cl+1)& (0+255),w,b
  3695   00327C  6FBF               	movwf	(??_f_open+1)& (0+255),b
  3696   00327E  0EFF               	movlw	255
  3697   003280  21D0               	addwfc	(f_open@cl+2)& (0+255),w,b
  3698   003282  6FC0               	movwf	(??_f_open+2)& (0+255),b
  3699   003284  0EFF               	movlw	255
  3700   003286  21D1               	addwfc	(f_open@cl+3)& (0+255),w,b
  3701   003288  6FC1               	movwf	(??_f_open+3)& (0+255),b
  3702   00328A  EE20 F00A          	lfsr	2,10
  3703   00328E  51D9               	movf	f_open@dj& (0+255),w,b
  3704   003290  26D9               	addwf	fsr2l,f,c
  3705   003292  51DA               	movf	(f_open@dj+1)& (0+255),w,b
  3706   003294  22DA               	addwfc	fsr2h,f,c
  3707   003296  C0BE  FFDE         	movff	??_f_open,postinc2
  3708   00329A  C0BF  FFDE         	movff	??_f_open+1,postinc2
  3709   00329E  C0C0  FFDE         	movff	??_f_open+2,postinc2
  3710   0032A2  C0C1  FFDE         	movff	??_f_open+3,postinc2
  3711   0032A6                     
  3712                           ; BSR set to: 0
  3713                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  3714   0032A6  C0D9  F030         	movff	f_open@dj,move_window@fs
  3715   0032AA  C0DA  F031         	movff	f_open@dj+1,move_window@fs+1
  3716   0032AE  C0D2  F032         	movff	f_open@dw,move_window@sector
  3717   0032B2  C0D3  F033         	movff	f_open@dw+1,move_window@sector+1
  3718   0032B6  C0D4  F034         	movff	f_open@dw+2,move_window@sector+2
  3719   0032BA  C0D5  F035         	movff	f_open@dw+3,move_window@sector+3
  3720   0032BE  EC3C  F02D         	call	_move_window	;wreg free
  3721   0032C2  0100               	movlb	0	; () banked
  3722   0032C4  6FD6               	movwf	f_open@res& (0+255),b
  3723   0032C6  EF94  F019         	goto	l671
  3724   0032CA                     l5692:
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;ff.c: 2532:    if (res == FR_OK) {
  3728   0032CA  51D6               	movf	f_open@res& (0+255),w,b
  3729   0032CC  A4D8               	btfss	status,2,c
  3730   0032CE  EF6B  F019         	goto	u7891
  3731   0032D2  EF6D  F019         	goto	u7890
  3732   0032D6                     u7891:
  3733   0032D6  EF94  F019         	goto	l671
  3734   0032DA                     u7890:
  3735   0032DA                     
  3736                           ; BSR set to: 0
  3737                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  3738   0032DA  EE20 F00B          	lfsr	2,11
  3739   0032DE  51D7               	movf	f_open@dir& (0+255),w,b
  3740   0032E0  26D9               	addwf	fsr2l,f,c
  3741   0032E2  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  3742   0032E4  22DA               	addwfc	fsr2h,f,c
  3743   0032E6  A8DF               	btfss	indf2,4,c
  3744   0032E8  EF78  F019         	goto	u7901
  3745   0032EC  EF7A  F019         	goto	u7900
  3746   0032F0                     u7901:
  3747   0032F0  EF7E  F019         	goto	l673
  3748   0032F4                     u7900:
  3749   0032F4                     
  3750                           ; BSR set to: 0
  3751                           ;ff.c: 2534:      res = FR_NO_FILE;
  3752   0032F4  0E04               	movlw	4
  3753   0032F6  6FD6               	movwf	f_open@res& (0+255),b
  3754                           
  3755                           ;ff.c: 2535:     } else {
  3756   0032F8  EF94  F019         	goto	l671
  3757   0032FC                     l673:
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  3761   0032FC  A3BD               	btfss	f_open@mode& (0+255),1,b
  3762   0032FE  EF83  F019         	goto	u7911
  3763   003302  EF85  F019         	goto	u7910
  3764   003306                     u7911:
  3765   003306  EF94  F019         	goto	l671
  3766   00330A                     u7910:
  3767   00330A                     
  3768                           ; BSR set to: 0
  3769   00330A  EE20 F00B          	lfsr	2,11
  3770   00330E  51D7               	movf	f_open@dir& (0+255),w,b
  3771   003310  26D9               	addwf	fsr2l,f,c
  3772   003312  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  3773   003314  22DA               	addwfc	fsr2h,f,c
  3774   003316  A0DF               	btfss	indf2,0,c
  3775   003318  EF90  F019         	goto	u7921
  3776   00331C  EF92  F019         	goto	u7920
  3777   003320                     u7921:
  3778   003320  EF94  F019         	goto	l671
  3779   003324                     u7920:
  3780   003324                     
  3781                           ; BSR set to: 0
  3782                           ;ff.c: 2537:       res = FR_DENIED;
  3783   003324  0E07               	movlw	7
  3784   003326  6FD6               	movwf	f_open@res& (0+255),b
  3785   003328                     l671:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;ff.c: 2541:   if (res == FR_OK) {
  3789   003328  51D6               	movf	f_open@res& (0+255),w,b
  3790   00332A  A4D8               	btfss	status,2,c
  3791   00332C  EF9A  F019         	goto	u7931
  3792   003330  EF9C  F019         	goto	u7930
  3793   003334                     u7931:
  3794   003334  EFC2  F019         	goto	l5710
  3795   003338                     u7930:
  3796   003338                     
  3797                           ; BSR set to: 0
  3798                           ;ff.c: 2542:    if (mode & 0x08)
  3799   003338  A7BD               	btfss	f_open@mode& (0+255),3,b
  3800   00333A  EFA1  F019         	goto	u7941
  3801   00333E  EFA3  F019         	goto	u7940
  3802   003342                     u7941:
  3803   003342  EFA4  F019         	goto	l5706
  3804   003346                     u7940:
  3805   003346                     
  3806                           ; BSR set to: 0
  3807                           ;ff.c: 2543:     mode |= 0x20;
  3808   003346  8BBD               	bsf	f_open@mode& (0+255),5,b
  3809   003348                     l5706:
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  3813   003348  EE20 F02A          	lfsr	2,42
  3814   00334C  51D9               	movf	f_open@dj& (0+255),w,b
  3815   00334E  26D9               	addwf	fsr2l,f,c
  3816   003350  51DA               	movf	(f_open@dj+1)& (0+255),w,b
  3817   003352  22DA               	addwfc	fsr2h,f,c
  3818   003354  EE10 F01A          	lfsr	1,26
  3819   003358  51BA               	movf	f_open@fp& (0+255),w,b
  3820   00335A  26E1               	addwf	fsr1l,f,c
  3821   00335C  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  3822   00335E  22E2               	addwfc	fsr1h,f,c
  3823   003360  CFDE FFE6          	movff	postinc2,postinc1
  3824   003364  CFDE FFE6          	movff	postinc2,postinc1
  3825   003368  CFDE FFE6          	movff	postinc2,postinc1
  3826   00336C  CFDE FFE6          	movff	postinc2,postinc1
  3827   003370                     
  3828                           ; BSR set to: 0
  3829                           ;ff.c: 2545:    fp->dir_ptr = dir;
  3830   003370  EE20 F01E          	lfsr	2,30
  3831   003374  51BA               	movf	f_open@fp& (0+255),w,b
  3832   003376  26D9               	addwf	fsr2l,f,c
  3833   003378  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  3834   00337A  22DA               	addwfc	fsr2h,f,c
  3835   00337C  C0D7  FFDE         	movff	f_open@dir,postinc2
  3836   003380  C0D8  FFDD         	movff	f_open@dir+1,postdec2
  3837   003384                     l5710:
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;ff.c: 2565:   if (res == FR_OK) {
  3841   003384  51D6               	movf	f_open@res& (0+255),w,b
  3842   003386  A4D8               	btfss	status,2,c
  3843   003388  EFC8  F019         	goto	u7951
  3844   00338C  EFCA  F019         	goto	u7950
  3845   003390                     u7951:
  3846   003390  EF36  F01A         	goto	l5726
  3847   003394                     u7950:
  3848   003394                     
  3849                           ; BSR set to: 0
  3850                           ;ff.c: 2566:    fp->flag = mode;
  3851   003394  EE20 F004          	lfsr	2,4
  3852   003398  51BA               	movf	f_open@fp& (0+255),w,b
  3853   00339A  26D9               	addwf	fsr2l,f,c
  3854   00339C  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  3855   00339E  22DA               	addwfc	fsr2h,f,c
  3856   0033A0  C0BD  FFDF         	movff	f_open@mode,indf2
  3857                           
  3858                           ;ff.c: 2567:    fp->err = 0;
  3859   0033A4  EE20 F005          	lfsr	2,5
  3860   0033A8  51BA               	movf	f_open@fp& (0+255),w,b
  3861   0033AA  26D9               	addwf	fsr2l,f,c
  3862   0033AC  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  3863   0033AE  22DA               	addwfc	fsr2h,f,c
  3864   0033B0  6ADF               	clrf	indf2,c
  3865   0033B2                     
  3866                           ; BSR set to: 0
  3867                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  3868   0033B2  C0D9  F001         	movff	f_open@dj,ld_clust@fs
  3869   0033B6  C0DA  F002         	movff	f_open@dj+1,ld_clust@fs+1
  3870   0033BA  C0D7  F003         	movff	f_open@dir,ld_clust@dir
  3871   0033BE  C0D8  F004         	movff	f_open@dir+1,ld_clust@dir+1
  3872   0033C2  ECF3  F02E         	call	_ld_clust	;wreg free
  3873   0033C6  0100               	movlb	0	; () banked
  3874   0033C8  EE20 F00E          	lfsr	2,14
  3875   0033CC  51BA               	movf	f_open@fp& (0+255),w,b
  3876   0033CE  26D9               	addwf	fsr2l,f,c
  3877   0033D0  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  3878   0033D2  22DA               	addwfc	fsr2h,f,c
  3879   0033D4  C001  FFDE         	movff	?_ld_clust,postinc2
  3880   0033D8  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3881   0033DC  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3882   0033E0  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3883   0033E4                     
  3884                           ; BSR set to: 0
  3885                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  3886   0033E4  EE20 F01C          	lfsr	2,28
  3887   0033E8  51D7               	movf	f_open@dir& (0+255),w,b
  3888   0033EA  26D9               	addwf	fsr2l,f,c
  3889   0033EC  51D8               	movf	(f_open@dir+1)& (0+255),w,b
  3890   0033EE  22DA               	addwfc	fsr2h,f,c
  3891   0033F0  EE10 F00A          	lfsr	1,10
  3892   0033F4  51BA               	movf	f_open@fp& (0+255),w,b
  3893   0033F6  26E1               	addwf	fsr1l,f,c
  3894   0033F8  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  3895   0033FA  22E2               	addwfc	fsr1h,f,c
  3896   0033FC  CFDE FFE6          	movff	postinc2,postinc1
  3897   003400  CFDE FFE6          	movff	postinc2,postinc1
  3898   003404  CFDE FFE6          	movff	postinc2,postinc1
  3899   003408  CFDE FFE6          	movff	postinc2,postinc1
  3900   00340C                     
  3901                           ; BSR set to: 0
  3902                           ;ff.c: 2570:    fp->fptr = 0;
  3903   00340C  EE20 F006          	lfsr	2,6
  3904   003410  51BA               	movf	f_open@fp& (0+255),w,b
  3905   003412  26D9               	addwf	fsr2l,f,c
  3906   003414  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  3907   003416  22DA               	addwfc	fsr2h,f,c
  3908   003418  6ADE               	clrf	postinc2,c
  3909   00341A  6ADE               	clrf	postinc2,c
  3910   00341C  6ADE               	clrf	postinc2,c
  3911   00341E  6ADD               	clrf	postdec2,c
  3912   003420                     
  3913                           ; BSR set to: 0
  3914                           ;ff.c: 2571:    fp->dsect = 0;
  3915   003420  EE20 F016          	lfsr	2,22
  3916   003424  51BA               	movf	f_open@fp& (0+255),w,b
  3917   003426  26D9               	addwf	fsr2l,f,c
  3918   003428  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  3919   00342A  22DA               	addwfc	fsr2h,f,c
  3920   00342C  6ADE               	clrf	postinc2,c
  3921   00342E  6ADE               	clrf	postinc2,c
  3922   003430  6ADE               	clrf	postinc2,c
  3923   003432  6ADD               	clrf	postdec2,c
  3924   003434                     
  3925                           ; BSR set to: 0
  3926                           ;ff.c: 2575:    fp->fs = dj.fs;
  3927   003434  C0BA  FFD9         	movff	f_open@fp,fsr2l
  3928   003438  C0BB  FFDA         	movff	f_open@fp+1,fsr2h
  3929   00343C  C0D9  FFDE         	movff	f_open@dj,postinc2
  3930   003440  C0DA  FFDD         	movff	f_open@dj+1,postdec2
  3931   003444                     
  3932                           ; BSR set to: 0
  3933                           ;ff.c: 2576:    fp->id = fp->fs->id;
  3934   003444  C0BA  FFD9         	movff	f_open@fp,fsr2l
  3935   003448  C0BB  FFDA         	movff	f_open@fp+1,fsr2h
  3936   00344C  EE10 F006          	lfsr	1,6
  3937   003450  50DE               	movf	postinc2,w,c
  3938   003452  26E1               	addwf	fsr1l,f,c
  3939   003454  50DD               	movf	postdec2,w,c
  3940   003456  22E2               	addwfc	fsr1h,f,c
  3941   003458  EE20 F002          	lfsr	2,2
  3942   00345C  51BA               	movf	f_open@fp& (0+255),w,b
  3943   00345E  26D9               	addwf	fsr2l,f,c
  3944   003460  51BB               	movf	(f_open@fp+1)& (0+255),w,b
  3945   003462  22DA               	addwfc	fsr2h,f,c
  3946   003464  CFE6 FFDE          	movff	postinc1,postinc2
  3947   003468  CFE5 FFDD          	movff	postdec1,postdec2
  3948   00346C                     l5726:
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;ff.c: 2580:  return res;
  3952   00346C  51D6               	movf	f_open@res& (0+255),w,b
  3953   00346E                     l657:
  3954                           
  3955                           ; BSR set to: 0
  3956   00346E  0012               	return		;funcret
  3957   003470                     __end_of_f_open:
  3958                           	callstack 0
  3959                           
  3960 ;; *************** function _remove_chain *****************
  3961 ;; Defined at:
  3962 ;;		line 937 in file "ff.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  fs              2   85[COMRAM] PTR struct .
  3965 ;;		 -> FatFs(558), NULL(0), 
  3966 ;;  clst            4   87[COMRAM] unsigned long 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  nxt             4   96[COMRAM] unsigned long 
  3969 ;;  res             1   95[COMRAM] enum E95
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      enum E95
  3972 ;; Registers used:
  3973 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3979 ;;      Params:         6       0       0       0       0       0       0
  3980 ;;      Locals:         5       0       0       0       0       0       0
  3981 ;;      Temps:          4       0       0       0       0       0       0
  3982 ;;      Totals:        15       0       0       0       0       0       0
  3983 ;;Total ram usage:       15 bytes
  3984 ;; Hardware stack levels used: 1
  3985 ;; Hardware stack levels required when called: 9
  3986 ;; This function calls:
  3987 ;;		_get_fat
  3988 ;;		_put_fat
  3989 ;; This function is called by:
  3990 ;;		_f_open
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text3
  3995   004AB2                     __ptext3:
  3996                           	callstack 0
  3997   004AB2                     _remove_chain:
  3998                           	callstack 20
  3999   004AB2                     
  4000                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  4001   004AB2  505B               	movf	(remove_chain@clst+3)^0,w,c
  4002   004AB4  105A               	iorwf	(remove_chain@clst+2)^0,w,c
  4003   004AB6  1059               	iorwf	(remove_chain@clst+1)^0,w,c
  4004   004AB8  E109               	bnz	u7040
  4005   004ABA  0E02               	movlw	2
  4006   004ABC  5C58               	subwf	remove_chain@clst^0,w,c
  4007   004ABE  A0D8               	btfss	status,0,c
  4008   004AC0  EF64  F025         	goto	u7041
  4009   004AC4  EF66  F025         	goto	u7040
  4010   004AC8                     u7041:
  4011   004AC8  EF7B  F025         	goto	l5182
  4012   004ACC                     u7040:
  4013   004ACC  EE20 F012          	lfsr	2,18
  4014   004AD0  5056               	movf	remove_chain@fs^0,w,c
  4015   004AD2  26D9               	addwf	fsr2l,f,c
  4016   004AD4  5057               	movf	(remove_chain@fs+1)^0,w,c
  4017   004AD6  22DA               	addwfc	fsr2h,f,c
  4018   004AD8  50DE               	movf	postinc2,w,c
  4019   004ADA  5C58               	subwf	remove_chain@clst^0,w,c
  4020   004ADC  50DE               	movf	postinc2,w,c
  4021   004ADE  5859               	subwfb	(remove_chain@clst+1)^0,w,c
  4022   004AE0  50DE               	movf	postinc2,w,c
  4023   004AE2  585A               	subwfb	(remove_chain@clst+2)^0,w,c
  4024   004AE4  50DE               	movf	postinc2,w,c
  4025   004AE6  585B               	subwfb	(remove_chain@clst+3)^0,w,c
  4026   004AE8  A0D8               	btfss	status,0,c
  4027   004AEA  EF79  F025         	goto	u7051
  4028   004AEE  EF7B  F025         	goto	u7050
  4029   004AF2                     u7051:
  4030   004AF2  EF7F  F025         	goto	l381
  4031   004AF6                     u7050:
  4032   004AF6                     l5182:
  4033                           
  4034                           ;ff.c: 949:   res = FR_INT_ERR;
  4035   004AF6  0E02               	movlw	2
  4036   004AF8  6E60               	movwf	remove_chain@res^0,c
  4037                           
  4038                           ;ff.c: 951:  } else {
  4039   004AFA  EF29  F026         	goto	l5210
  4040   004AFE                     l381:
  4041                           
  4042                           ;ff.c: 952:   res = FR_OK;
  4043   004AFE  6A60               	clrf	remove_chain@res^0,c
  4044                           
  4045                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  4046   004B00  EF14  F026         	goto	l385
  4047   004B04                     l5184:
  4048                           
  4049                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  4050   004B04  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  4051   004B08  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  4052   004B0C  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  4053   004B10  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  4054   004B14  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  4055   004B18  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  4056   004B1C  EC38  F01A         	call	_get_fat	;wreg free
  4057   004B20  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  4058   004B24  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  4059   004B28  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  4060   004B2C  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  4061   004B30                     
  4062                           ;ff.c: 955:    if (nxt == 0) break;
  4063   004B30  5061               	movf	remove_chain@nxt^0,w,c
  4064   004B32  1062               	iorwf	(remove_chain@nxt+1)^0,w,c
  4065   004B34  1063               	iorwf	(remove_chain@nxt+2)^0,w,c
  4066   004B36  1064               	iorwf	(remove_chain@nxt+3)^0,w,c
  4067   004B38  A4D8               	btfss	status,2,c
  4068   004B3A  EFA1  F025         	goto	u7061
  4069   004B3E  EFA3  F025         	goto	u7060
  4070   004B42                     u7061:
  4071   004B42  EFA5  F025         	goto	l5190
  4072   004B46                     u7060:
  4073   004B46  EF29  F026         	goto	l5210
  4074   004B4A                     l5190:
  4075                           
  4076                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  4077   004B4A  0461               	decf	remove_chain@nxt^0,w,c
  4078   004B4C  1062               	iorwf	(remove_chain@nxt+1)^0,w,c
  4079   004B4E  1063               	iorwf	(remove_chain@nxt+2)^0,w,c
  4080   004B50  1064               	iorwf	(remove_chain@nxt+3)^0,w,c
  4081   004B52  A4D8               	btfss	status,2,c
  4082   004B54  EFAE  F025         	goto	u7071
  4083   004B58  EFB0  F025         	goto	u7070
  4084   004B5C                     u7071:
  4085   004B5C  EFB2  F025         	goto	l5194
  4086   004B60                     u7070:
  4087   004B60  EF7B  F025         	goto	l5182
  4088   004B64                     l5194:
  4089                           
  4090                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  4091   004B64  2861               	incf	remove_chain@nxt^0,w,c
  4092   004B66  E10A               	bnz	u7081
  4093   004B68  2862               	incf	(remove_chain@nxt+1)^0,w,c
  4094   004B6A  E108               	bnz	u7081
  4095   004B6C  2863               	incf	(remove_chain@nxt+2)^0,w,c
  4096   004B6E  E106               	bnz	u7081
  4097   004B70  2864               	incf	(remove_chain@nxt+3)^0,w,c
  4098   004B72  A4D8               	btfss	status,2,c
  4099   004B74  EFBE  F025         	goto	u7081
  4100   004B78  EFC0  F025         	goto	u7080
  4101   004B7C                     u7081:
  4102   004B7C  EFC4  F025         	goto	l5198
  4103   004B80                     u7080:
  4104   004B80  0E01               	movlw	1
  4105   004B82  6E60               	movwf	remove_chain@res^0,c
  4106   004B84  EF29  F026         	goto	l5210
  4107   004B88                     l5198:
  4108                           
  4109                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  4110   004B88  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  4111   004B8C  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  4112   004B90  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  4113   004B94  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  4114   004B98  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  4115   004B9C  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  4116   004BA0  0E00               	movlw	0
  4117   004BA2  6E41               	movwf	put_fat@val^0,c
  4118   004BA4  0E00               	movlw	0
  4119   004BA6  6E42               	movwf	(put_fat@val+1)^0,c
  4120   004BA8  0E00               	movlw	0
  4121   004BAA  6E43               	movwf	(put_fat@val+2)^0,c
  4122   004BAC  0E00               	movlw	0
  4123   004BAE  6E44               	movwf	(put_fat@val+3)^0,c
  4124   004BB0  EC82  F013         	call	_put_fat	;wreg free
  4125   004BB4  6E60               	movwf	remove_chain@res^0,c
  4126   004BB6                     
  4127                           ;ff.c: 959:    if (res != FR_OK) break;
  4128   004BB6  5060               	movf	remove_chain@res^0,w,c
  4129   004BB8  B4D8               	btfsc	status,2,c
  4130   004BBA  EFE1  F025         	goto	u7091
  4131   004BBE  EFE3  F025         	goto	u7090
  4132   004BC2                     u7091:
  4133   004BC2  EFE5  F025         	goto	l5204
  4134   004BC6                     u7090:
  4135   004BC6  EF29  F026         	goto	l5210
  4136   004BCA                     l5204:
  4137                           
  4138                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  4139   004BCA  EE20 F00E          	lfsr	2,14
  4140   004BCE  5056               	movf	remove_chain@fs^0,w,c
  4141   004BD0  26D9               	addwf	fsr2l,f,c
  4142   004BD2  5057               	movf	(remove_chain@fs+1)^0,w,c
  4143   004BD4  22DA               	addwfc	fsr2h,f,c
  4144   004BD6  28DE               	incf	postinc2,w,c
  4145   004BD8  E10C               	bnz	u7100
  4146   004BDA  28DE               	incf	postinc2,w,c
  4147   004BDC  E10A               	bnz	u7100
  4148   004BDE  28DE               	incf	postinc2,w,c
  4149   004BE0  E108               	bnz	u7100
  4150   004BE2  28DE               	incf	postinc2,w,c
  4151   004BE4  B4D8               	btfsc	status,2,c
  4152   004BE6  EFF7  F025         	goto	u7101
  4153   004BEA  EFF9  F025         	goto	u7100
  4154   004BEE                     u7101:
  4155   004BEE  EF0C  F026         	goto	l5208
  4156   004BF2                     u7100:
  4157   004BF2                     
  4158                           ;ff.c: 961:     fs->free_clust++;
  4159   004BF2  EE20 F00E          	lfsr	2,14
  4160   004BF6  5056               	movf	remove_chain@fs^0,w,c
  4161   004BF8  26D9               	addwf	fsr2l,f,c
  4162   004BFA  5057               	movf	(remove_chain@fs+1)^0,w,c
  4163   004BFC  22DA               	addwfc	fsr2h,f,c
  4164   004BFE  2ADE               	incf	postinc2,f,c
  4165   004C00  0E00               	movlw	0
  4166   004C02  22DE               	addwfc	postinc2,f,c
  4167   004C04  22DE               	addwfc	postinc2,f,c
  4168   004C06  22DE               	addwfc	postinc2,f,c
  4169                           
  4170                           ;ff.c: 962:     fs->fsi_flag |= 1;
  4171   004C08  EE20 F005          	lfsr	2,5
  4172   004C0C  5056               	movf	remove_chain@fs^0,w,c
  4173   004C0E  26D9               	addwf	fsr2l,f,c
  4174   004C10  5057               	movf	(remove_chain@fs+1)^0,w,c
  4175   004C12  22DA               	addwfc	fsr2h,f,c
  4176   004C14  0E00               	movlw	0
  4177   004C16  80DB               	bsf	plusw2,0,c
  4178   004C18                     l5208:
  4179                           
  4180                           ;ff.c: 974:    clst = nxt;
  4181   004C18  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  4182   004C1C  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  4183   004C20  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  4184   004C24  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  4185   004C28                     l385:
  4186                           
  4187                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  4188   004C28  EE20 F012          	lfsr	2,18
  4189   004C2C  5056               	movf	remove_chain@fs^0,w,c
  4190   004C2E  26D9               	addwf	fsr2l,f,c
  4191   004C30  5057               	movf	(remove_chain@fs+1)^0,w,c
  4192   004C32  22DA               	addwfc	fsr2h,f,c
  4193   004C34  50DE               	movf	postinc2,w,c
  4194   004C36  5C58               	subwf	remove_chain@clst^0,w,c
  4195   004C38  50DE               	movf	postinc2,w,c
  4196   004C3A  5859               	subwfb	(remove_chain@clst+1)^0,w,c
  4197   004C3C  50DE               	movf	postinc2,w,c
  4198   004C3E  585A               	subwfb	(remove_chain@clst+2)^0,w,c
  4199   004C40  50DE               	movf	postinc2,w,c
  4200   004C42  585B               	subwfb	(remove_chain@clst+3)^0,w,c
  4201   004C44  A0D8               	btfss	status,0,c
  4202   004C46  EF27  F026         	goto	u7111
  4203   004C4A  EF29  F026         	goto	u7110
  4204   004C4E                     u7111:
  4205   004C4E  EF82  F025         	goto	l5184
  4206   004C52                     u7110:
  4207   004C52                     l5210:
  4208                           
  4209                           ;ff.c: 978:  return res;
  4210   004C52  5060               	movf	remove_chain@res^0,w,c
  4211   004C54  0012               	return		;funcret
  4212   004C56                     __end_of_remove_chain:
  4213                           	callstack 0
  4214                           
  4215 ;; *************** function _follow_path *****************
  4216 ;; Defined at:
  4217 ;;		line 2052 in file "ff.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  dp              1    5[BANK0 ] PTR struct .
  4220 ;;		 -> f_open@dj(21), 
  4221 ;;  path            1    6[BANK0 ] PTR const unsigned char 
  4222 ;;		 -> STR_4(10), STR_3(1), 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  dir             2    7[BANK0 ] PTR unsigned char 
  4225 ;;		 -> FatFs(558), NULL(0), 
  4226 ;;  res             1   10[BANK0 ] enum E95
  4227 ;;  ns              1    9[BANK0 ] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      enum E95
  4230 ;; Registers used:
  4231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4237 ;;      Params:         0       2       0       0       0       0       0
  4238 ;;      Locals:         0       4       0       0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0       0
  4240 ;;      Totals:         0       6       0       0       0       0       0
  4241 ;;Total ram usage:        6 bytes
  4242 ;; Hardware stack levels used: 1
  4243 ;; Hardware stack levels required when called: 12
  4244 ;; This function calls:
  4245 ;;		_create_name
  4246 ;;		_dir_find
  4247 ;;		_dir_sdi
  4248 ;;		_ld_clust
  4249 ;; This function is called by:
  4250 ;;		_f_open
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text4
  4255   004C56                     __ptext4:
  4256                           	callstack 0
  4257   004C56                     _follow_path:
  4258                           	callstack 17
  4259   004C56                     
  4260                           ;ff.c: 2053:  DIR* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESULT
      +                           res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  4261   004C56  C086  FFF6         	movff	follow_path@path,tblptrl
  4262   004C5A                     	if	1	;There is more than 1 active tblptr byte
  4263   004C5A  0E06               	movlw	high __smallconst
  4264   004C5C  6EF7               	movwf	tblptrh,c
  4265   004C5E                     	endif
  4266   004C5E                     	if	0	;tblptru may be non-zero
  4267   004C5E                     	endif
  4268   004C5E                     	if	0	;tblptru may be non-zero
  4269   004C5E                     	endif
  4270   004C5E  0008               	tblrd		*
  4271   004C60  50F5               	movf	tablat,w,c
  4272   004C62  0A2F               	xorlw	47
  4273   004C64  B4D8               	btfsc	status,2,c
  4274   004C66  EF37  F026         	goto	u7141
  4275   004C6A  EF39  F026         	goto	u7140
  4276   004C6E                     u7141:
  4277   004C6E  EF47  F026         	goto	l5236
  4278   004C72                     u7140:
  4279   004C72  C086  FFF6         	movff	follow_path@path,tblptrl
  4280   004C76                     	if	1	;There is more than 1 active tblptr byte
  4281   004C76  0E06               	movlw	high __smallconst
  4282   004C78  6EF7               	movwf	tblptrh,c
  4283   004C7A                     	endif
  4284   004C7A                     	if	0	;tblptru may be non-zero
  4285   004C7A                     	endif
  4286   004C7A                     	if	0	;tblptru may be non-zero
  4287   004C7A                     	endif
  4288   004C7A  0008               	tblrd		*
  4289   004C7C  50F5               	movf	tablat,w,c
  4290   004C7E  0A5C               	xorlw	92
  4291   004C80  A4D8               	btfss	status,2,c
  4292   004C82  EF45  F026         	goto	u7151
  4293   004C86  EF47  F026         	goto	u7150
  4294   004C8A                     u7151:
  4295   004C8A  EF49  F026         	goto	l5238
  4296   004C8E                     u7150:
  4297   004C8E                     l5236:
  4298                           
  4299                           ;ff.c: 2069:   path++;
  4300   004C8E  0100               	movlb	0	; () banked
  4301   004C90  2B86               	incf	follow_path@path& (0+255),f,b
  4302   004C92                     l5238:
  4303                           
  4304                           ;ff.c: 2070:  dp->sclust = 0;
  4305   004C92  0100               	movlb	0	; () banked
  4306   004C94  5185               	movf	follow_path@dp& (0+255),w,b
  4307   004C96  6ED9               	movwf	fsr2l,c
  4308   004C98  6ADA               	clrf	fsr2h,c
  4309   004C9A  0E06               	movlw	6
  4310   004C9C  26D9               	addwf	fsr2l,f,c
  4311   004C9E  6ADE               	clrf	postinc2,c
  4312   004CA0  6ADE               	clrf	postinc2,c
  4313   004CA2  6ADE               	clrf	postinc2,c
  4314   004CA4  6ADD               	clrf	postdec2,c
  4315   004CA6                     
  4316                           ; BSR set to: 0
  4317                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  4318   004CA6  C086  FFF6         	movff	follow_path@path,tblptrl
  4319   004CAA                     	if	1	;There is more than 1 active tblptr byte
  4320   004CAA  0E06               	movlw	high __smallconst
  4321   004CAC  6EF7               	movwf	tblptrh,c
  4322   004CAE                     	endif
  4323   004CAE                     	if	0	;tblptru may be non-zero
  4324   004CAE                     	endif
  4325   004CAE                     	if	0	;tblptru may be non-zero
  4326   004CAE                     	endif
  4327   004CAE  0E20               	movlw	32
  4328   004CB0  0008               	tblrd		*
  4329   004CB2  60F5               	cpfslt	tablat,c
  4330   004CB4  EF5E  F026         	goto	u7161
  4331   004CB8  EF60  F026         	goto	u7160
  4332   004CBC                     u7161:
  4333   004CBC  EF73  F026         	goto	l5246
  4334   004CC0                     u7160:
  4335   004CC0                     
  4336                           ; BSR set to: 0
  4337                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  4338   004CC0  C085  F055         	movff	follow_path@dp,dir_sdi@dp
  4339   004CC4  0E00               	movlw	0
  4340   004CC6  6E57               	movwf	(dir_sdi@idx+1)^0,c
  4341   004CC8  0E00               	movlw	0
  4342   004CCA  6E56               	movwf	dir_sdi@idx^0,c
  4343   004CCC  ECC6  F01F         	call	_dir_sdi	;wreg free
  4344   004CD0  0100               	movlb	0	; () banked
  4345   004CD2  6F8A               	movwf	follow_path@res& (0+255),b
  4346   004CD4                     
  4347                           ; BSR set to: 0
  4348                           ;ff.c: 2075:   dp->dir = 0;
  4349   004CD4  5185               	movf	follow_path@dp& (0+255),w,b
  4350   004CD6  6ED9               	movwf	fsr2l,c
  4351   004CD8  6ADA               	clrf	fsr2h,c
  4352   004CDA  0E12               	movlw	18
  4353   004CDC  26D9               	addwf	fsr2l,f,c
  4354   004CDE  6ADE               	clrf	postinc2,c
  4355   004CE0  6ADD               	clrf	postdec2,c
  4356                           
  4357                           ;ff.c: 2076:  } else {
  4358   004CE2  EFF1  F026         	goto	l5280
  4359   004CE6                     l5246:
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;ff.c: 2078:    res = create_name(dp, &path);
  4363   004CE6  C085  F009         	movff	follow_path@dp,create_name@dp
  4364   004CEA  0E86               	movlw	low follow_path@path
  4365   004CEC  6E0A               	movwf	create_name@path^0,c
  4366   004CEE  EC01  F01E         	call	_create_name	;wreg free
  4367   004CF2  0100               	movlb	0	; () banked
  4368   004CF4  6F8A               	movwf	follow_path@res& (0+255),b
  4369   004CF6                     
  4370                           ; BSR set to: 0
  4371                           ;ff.c: 2079:    if (res != FR_OK) break;
  4372   004CF6  518A               	movf	follow_path@res& (0+255),w,b
  4373   004CF8  B4D8               	btfsc	status,2,c
  4374   004CFA  EF81  F026         	goto	u7171
  4375   004CFE  EF83  F026         	goto	u7170
  4376   004D02                     u7171:
  4377   004D02  EF85  F026         	goto	l5252
  4378   004D06                     u7170:
  4379   004D06  EFF1  F026         	goto	l5280
  4380   004D0A                     l5252:
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;ff.c: 2080:    res = dir_find(dp);
  4384   004D0A  C085  F080         	movff	follow_path@dp,dir_find@dp
  4385   004D0E  EC97  F029         	call	_dir_find	;wreg free
  4386   004D12  0100               	movlb	0	; () banked
  4387   004D14  6F8A               	movwf	follow_path@res& (0+255),b
  4388   004D16                     
  4389                           ; BSR set to: 0
  4390                           ;ff.c: 2081:    ns = dp->fn[11];
  4391   004D16  5185               	movf	follow_path@dp& (0+255),w,b
  4392   004D18  6ED9               	movwf	fsr2l,c
  4393   004D1A  6ADA               	clrf	fsr2h,c
  4394   004D1C  0E14               	movlw	20
  4395   004D1E  26D9               	addwf	fsr2l,f,c
  4396   004D20  50DF               	movf	indf2,w,c
  4397   004D22  6ED9               	movwf	fsr2l,c
  4398   004D24  6ADA               	clrf	fsr2h,c
  4399   004D26  0E0B               	movlw	11
  4400   004D28  26D9               	addwf	fsr2l,f,c
  4401   004D2A  50DF               	movf	indf2,w,c
  4402   004D2C  6F89               	movwf	follow_path@ns& (0+255),b
  4403   004D2E                     
  4404                           ; BSR set to: 0
  4405                           ;ff.c: 2082:    if (res != FR_OK) {
  4406   004D2E  518A               	movf	follow_path@res& (0+255),w,b
  4407   004D30  B4D8               	btfsc	status,2,c
  4408   004D32  EF9D  F026         	goto	u7181
  4409   004D36  EF9F  F026         	goto	u7180
  4410   004D3A                     u7181:
  4411   004D3A  EFB3  F026         	goto	l552
  4412   004D3E                     u7180:
  4413   004D3E                     
  4414                           ; BSR set to: 0
  4415                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  4416   004D3E  0E04               	movlw	4
  4417   004D40  198A               	xorwf	follow_path@res& (0+255),w,b
  4418   004D42  A4D8               	btfss	status,2,c
  4419   004D44  EFA6  F026         	goto	u7191
  4420   004D48  EFA8  F026         	goto	u7190
  4421   004D4C                     u7191:
  4422   004D4C  EFF1  F026         	goto	l5280
  4423   004D50                     u7190:
  4424   004D50                     
  4425                           ; BSR set to: 0
  4426                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  4427   004D50  B589               	btfsc	follow_path@ns& (0+255),2,b
  4428   004D52  EFAD  F026         	goto	u7201
  4429   004D56  EFAF  F026         	goto	u7200
  4430   004D5A                     u7201:
  4431   004D5A  EFF1  F026         	goto	l5280
  4432   004D5E                     u7200:
  4433   004D5E                     l5270:
  4434                           
  4435                           ; BSR set to: 0
  4436   004D5E  0E05               	movlw	5
  4437   004D60  6F8A               	movwf	follow_path@res& (0+255),b
  4438   004D62  EFF1  F026         	goto	l5280
  4439   004D66                     l552:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;ff.c: 2094:    if (ns & 0x04) break;
  4443   004D66  A589               	btfss	follow_path@ns& (0+255),2,b
  4444   004D68  EFB8  F026         	goto	u7211
  4445   004D6C  EFBA  F026         	goto	u7210
  4446   004D70                     u7211:
  4447   004D70  EFBC  F026         	goto	l5274
  4448   004D74                     u7210:
  4449   004D74  EFF1  F026         	goto	l5280
  4450   004D78                     l5274:
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;ff.c: 2095:    dir = dp->dir;
  4454   004D78  5185               	movf	follow_path@dp& (0+255),w,b
  4455   004D7A  6ED9               	movwf	fsr2l,c
  4456   004D7C  6ADA               	clrf	fsr2h,c
  4457   004D7E  0E12               	movlw	18
  4458   004D80  26D9               	addwf	fsr2l,f,c
  4459   004D82  CFDE F087          	movff	postinc2,follow_path@dir
  4460   004D86  CFDD F088          	movff	postdec2,follow_path@dir+1
  4461                           
  4462                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  4463   004D8A  EE20 F00B          	lfsr	2,11
  4464   004D8E  5187               	movf	follow_path@dir& (0+255),w,b
  4465   004D90  26D9               	addwf	fsr2l,f,c
  4466   004D92  5188               	movf	(follow_path@dir+1)& (0+255),w,b
  4467   004D94  22DA               	addwfc	fsr2h,f,c
  4468   004D96  B8DF               	btfsc	indf2,4,c
  4469   004D98  EFD0  F026         	goto	u7221
  4470   004D9C  EFD2  F026         	goto	u7220
  4471   004DA0                     u7221:
  4472   004DA0  EFD4  F026         	goto	l5278
  4473   004DA4                     u7220:
  4474   004DA4  EFAF  F026         	goto	l5270
  4475   004DA8                     l5278:
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  4479   004DA8  5185               	movf	follow_path@dp& (0+255),w,b
  4480   004DAA  6ED9               	movwf	fsr2l,c
  4481   004DAC  6ADA               	clrf	fsr2h,c
  4482   004DAE  CFDE F001          	movff	postinc2,ld_clust@fs
  4483   004DB2  CFDD F002          	movff	postdec2,ld_clust@fs+1
  4484   004DB6  C087  F003         	movff	follow_path@dir,ld_clust@dir
  4485   004DBA  C088  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  4486   004DBE  ECF3  F02E         	call	_ld_clust	;wreg free
  4487   004DC2  0100               	movlb	0	; () banked
  4488   004DC4  5185               	movf	follow_path@dp& (0+255),w,b
  4489   004DC6  6ED9               	movwf	fsr2l,c
  4490   004DC8  6ADA               	clrf	fsr2h,c
  4491   004DCA  0E06               	movlw	6
  4492   004DCC  26D9               	addwf	fsr2l,f,c
  4493   004DCE  C001  FFDE         	movff	?_ld_clust,postinc2
  4494   004DD2  C002  FFDE         	movff	?_ld_clust+1,postinc2
  4495   004DD6  C003  FFDE         	movff	?_ld_clust+2,postinc2
  4496   004DDA  C004  FFDE         	movff	?_ld_clust+3,postinc2
  4497   004DDE  EF73  F026         	goto	l5246
  4498   004DE2                     l5280:
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;ff.c: 2103:  return res;
  4502   004DE2  518A               	movf	follow_path@res& (0+255),w,b
  4503   004DE4                     
  4504                           ; BSR set to: 0
  4505   004DE4  0012               	return		;funcret
  4506   004DE6                     __end_of_follow_path:
  4507                           	callstack 0
  4508                           
  4509 ;; *************** function _ld_clust *****************
  4510 ;; Defined at:
  4511 ;;		line 1235 in file "ff.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;  fs              2    0[COMRAM] PTR struct .
  4514 ;;		 -> FatFs(558), NULL(0), 
  4515 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  4516 ;;		 -> FatFs(558), NULL(0), 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  cl              4   10[COMRAM] unsigned long 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  4    0[COMRAM] unsigned long 
  4521 ;; Registers used:
  4522 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4528 ;;      Params:         4       0       0       0       0       0       0
  4529 ;;      Locals:         4       0       0       0       0       0       0
  4530 ;;      Temps:          6       0       0       0       0       0       0
  4531 ;;      Totals:        14       0       0       0       0       0       0
  4532 ;;Total ram usage:       14 bytes
  4533 ;; Hardware stack levels used: 1
  4534 ;; This function calls:
  4535 ;;		Nothing
  4536 ;; This function is called by:
  4537 ;;		_follow_path
  4538 ;;		_f_open
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text5
  4543   005DE6                     __ptext5:
  4544                           	callstack 0
  4545   005DE6                     _ld_clust:
  4546                           	callstack 29
  4547   005DE6                     
  4548                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  4549   005DE6  0E1A               	movlw	26
  4550   005DE8  2403               	addwf	ld_clust@dir^0,w,c
  4551   005DEA  6ED9               	movwf	fsr2l,c
  4552   005DEC  0E00               	movlw	0
  4553   005DEE  2004               	addwfc	(ld_clust@dir+1)^0,w,c
  4554   005DF0  6EDA               	movwf	fsr2h,c
  4555   005DF2  CFDE F005          	movff	postinc2,??_ld_clust
  4556   005DF6  CFDD F006          	movff	postdec2,??_ld_clust+1
  4557   005DFA  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  4558   005DFE  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  4559   005E02  6A0D               	clrf	(ld_clust@cl+2)^0,c
  4560   005E04  6A0E               	clrf	(ld_clust@cl+3)^0,c
  4561                           
  4562                           ;ff.c: 1243:  if (fs->fs_type == 3)
  4563   005E06  C001  FFD9         	movff	ld_clust@fs,fsr2l
  4564   005E0A  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  4565   005E0E  0E03               	movlw	3
  4566   005E10  18DE               	xorwf	postinc2,w,c
  4567   005E12  A4D8               	btfss	status,2,c
  4568   005E14  EF0E  F02F         	goto	u6481
  4569   005E18  EF10  F02F         	goto	u6480
  4570   005E1C                     u6481:
  4571   005E1C  EF2E  F02F         	goto	l4878
  4572   005E20                     u6480:
  4573   005E20                     
  4574                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  4575   005E20  0E14               	movlw	20
  4576   005E22  2403               	addwf	ld_clust@dir^0,w,c
  4577   005E24  6ED9               	movwf	fsr2l,c
  4578   005E26  0E00               	movlw	0
  4579   005E28  2004               	addwfc	(ld_clust@dir+1)^0,w,c
  4580   005E2A  6EDA               	movwf	fsr2h,c
  4581   005E2C  CFDE F005          	movff	postinc2,??_ld_clust
  4582   005E30  CFDD F006          	movff	postdec2,??_ld_clust+1
  4583   005E34  5005               	movf	??_ld_clust^0,w,c
  4584   005E36  6E07               	movwf	(??_ld_clust+2)^0,c
  4585   005E38  5006               	movf	(??_ld_clust+1)^0,w,c
  4586   005E3A  6E08               	movwf	(??_ld_clust+3)^0,c
  4587   005E3C  6A09               	clrf	(??_ld_clust+4)^0,c
  4588   005E3E  6A0A               	clrf	(??_ld_clust+5)^0,c
  4589   005E40  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  4590   005E44  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  4591   005E48  6A08               	clrf	(??_ld_clust+3)^0,c
  4592   005E4A  6A07               	clrf	(??_ld_clust+2)^0,c
  4593   005E4C  5007               	movf	(??_ld_clust+2)^0,w,c
  4594   005E4E  120B               	iorwf	ld_clust@cl^0,f,c
  4595   005E50  5008               	movf	(??_ld_clust+3)^0,w,c
  4596   005E52  120C               	iorwf	(ld_clust@cl+1)^0,f,c
  4597   005E54  5009               	movf	(??_ld_clust+4)^0,w,c
  4598   005E56  120D               	iorwf	(ld_clust@cl+2)^0,f,c
  4599   005E58  500A               	movf	(??_ld_clust+5)^0,w,c
  4600   005E5A  120E               	iorwf	(ld_clust@cl+3)^0,f,c
  4601   005E5C                     l4878:
  4602                           
  4603                           ;ff.c: 1246:  return cl;
  4604   005E5C  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  4605   005E60  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  4606   005E64  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  4607   005E68  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  4608   005E6C  0012               	return		;funcret
  4609   005E6E                     __end_of_ld_clust:
  4610                           	callstack 0
  4611                           
  4612 ;; *************** function _dir_find *****************
  4613 ;; Defined at:
  4614 ;;		line 1458 in file "ff.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;  dp              1    0[BANK0 ] PTR struct .
  4617 ;;		 -> f_open@dj(21), 
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;  dir             2    2[BANK0 ] PTR unsigned char 
  4620 ;;		 -> FatFs(558), NULL(0), 
  4621 ;;  res             1    4[BANK0 ] enum E95
  4622 ;;  c               1    1[BANK0 ] unsigned char 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      enum E95
  4625 ;; Registers used:
  4626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4632 ;;      Params:         0       1       0       0       0       0       0
  4633 ;;      Locals:         0       4       0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0
  4635 ;;      Totals:         0       5       0       0       0       0       0
  4636 ;;Total ram usage:        5 bytes
  4637 ;; Hardware stack levels used: 1
  4638 ;; Hardware stack levels required when called: 11
  4639 ;; This function calls:
  4640 ;;		_dir_next
  4641 ;;		_dir_sdi
  4642 ;;		_mem_cmp
  4643 ;;		_move_window
  4644 ;; This function is called by:
  4645 ;;		_follow_path
  4646 ;; This function uses a non-reentrant model
  4647 ;;
  4648                           
  4649                           	psect	text6
  4650   00532E                     __ptext6:
  4651                           	callstack 0
  4652   00532E                     _dir_find:
  4653                           	callstack 17
  4654   00532E                     
  4655                           ;ff.c: 1459:  DIR* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir;
      +                          ;ff.c: 1468:  res = dir_sdi(dp, 0);
  4656   00532E  C080  F055         	movff	dir_find@dp,dir_sdi@dp
  4657   005332  0E00               	movlw	0
  4658   005334  6E57               	movwf	(dir_sdi@idx+1)^0,c
  4659   005336  0E00               	movlw	0
  4660   005338  6E56               	movwf	dir_sdi@idx^0,c
  4661   00533A  ECC6  F01F         	call	_dir_sdi	;wreg free
  4662   00533E  0100               	movlb	0	; () banked
  4663   005340  6F84               	movwf	dir_find@res& (0+255),b
  4664   005342                     
  4665                           ; BSR set to: 0
  4666                           ;ff.c: 1469:  if (res != FR_OK) return res;
  4667   005342  5184               	movf	dir_find@res& (0+255),w,b
  4668   005344  B4D8               	btfsc	status,2,c
  4669   005346  EFA7  F029         	goto	u6491
  4670   00534A  EFA9  F029         	goto	u6490
  4671   00534E                     u6491:
  4672   00534E  EFAD  F029         	goto	l4892
  4673   005352                     u6490:
  4674   005352                     l4888:
  4675   005352  0100               	movlb	0	; () banked
  4676   005354  5184               	movf	dir_find@res& (0+255),w,b
  4677   005356  EF27  F02A         	goto	l486
  4678   00535A                     l4892:
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  4682   00535A  5180               	movf	dir_find@dp& (0+255),w,b
  4683   00535C  6ED9               	movwf	fsr2l,c
  4684   00535E  6ADA               	clrf	fsr2h,c
  4685   005360  CFDE F030          	movff	postinc2,move_window@fs
  4686   005364  CFDD F031          	movff	postdec2,move_window@fs+1
  4687   005368  5180               	movf	dir_find@dp& (0+255),w,b
  4688   00536A  6ED9               	movwf	fsr2l,c
  4689   00536C  6ADA               	clrf	fsr2h,c
  4690   00536E  0E0E               	movlw	14
  4691   005370  26D9               	addwf	fsr2l,f,c
  4692   005372  CFDE F032          	movff	postinc2,move_window@sector
  4693   005376  CFDE F033          	movff	postinc2,move_window@sector+1
  4694   00537A  CFDE F034          	movff	postinc2,move_window@sector+2
  4695   00537E  CFDE F035          	movff	postinc2,move_window@sector+3
  4696   005382  EC3C  F02D         	call	_move_window	;wreg free
  4697   005386  0100               	movlb	0	; () banked
  4698   005388  6F84               	movwf	dir_find@res& (0+255),b
  4699   00538A                     
  4700                           ; BSR set to: 0
  4701                           ;ff.c: 1476:   if (res != FR_OK) break;
  4702   00538A  5184               	movf	dir_find@res& (0+255),w,b
  4703   00538C  B4D8               	btfsc	status,2,c
  4704   00538E  EFCB  F029         	goto	u6501
  4705   005392  EFCD  F029         	goto	u6500
  4706   005396                     u6501:
  4707   005396  EFCF  F029         	goto	l4898
  4708   00539A                     u6500:
  4709   00539A  EFA9  F029         	goto	l4888
  4710   00539E                     l4898:
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;ff.c: 1477:   dir = dp->dir;
  4714   00539E  5180               	movf	dir_find@dp& (0+255),w,b
  4715   0053A0  6ED9               	movwf	fsr2l,c
  4716   0053A2  6ADA               	clrf	fsr2h,c
  4717   0053A4  0E12               	movlw	18
  4718   0053A6  26D9               	addwf	fsr2l,f,c
  4719   0053A8  CFDE F082          	movff	postinc2,dir_find@dir
  4720   0053AC  CFDD F083          	movff	postdec2,dir_find@dir+1
  4721   0053B0                     
  4722                           ; BSR set to: 0
  4723                           ;ff.c: 1478:   c = dir[0];
  4724   0053B0  C082  FFD9         	movff	dir_find@dir,fsr2l
  4725   0053B4  C083  FFDA         	movff	dir_find@dir+1,fsr2h
  4726   0053B8  50DF               	movf	indf2,w,c
  4727   0053BA  6F81               	movwf	dir_find@c& (0+255),b
  4728   0053BC                     
  4729                           ; BSR set to: 0
  4730                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  4731   0053BC  5181               	movf	dir_find@c& (0+255),w,b
  4732   0053BE  A4D8               	btfss	status,2,c
  4733   0053C0  EFE4  F029         	goto	u6511
  4734   0053C4  EFE6  F029         	goto	u6510
  4735   0053C8                     u6511:
  4736   0053C8  EFEA  F029         	goto	l4906
  4737   0053CC                     u6510:
  4738   0053CC                     
  4739                           ; BSR set to: 0
  4740   0053CC  0E04               	movlw	4
  4741   0053CE  6F84               	movwf	dir_find@res& (0+255),b
  4742   0053D0  EFA9  F029         	goto	l4888
  4743   0053D4                     l4906:
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  4747   0053D4  EE20 F00B          	lfsr	2,11
  4748   0053D8  5182               	movf	dir_find@dir& (0+255),w,b
  4749   0053DA  26D9               	addwf	fsr2l,f,c
  4750   0053DC  5183               	movf	(dir_find@dir+1)& (0+255),w,b
  4751   0053DE  22DA               	addwfc	fsr2h,f,c
  4752   0053E0  B6DF               	btfsc	indf2,3,c
  4753   0053E2  EFF5  F029         	goto	u6521
  4754   0053E6  EFF7  F029         	goto	u6520
  4755   0053EA                     u6521:
  4756   0053EA  EF13  F02A         	goto	l4912
  4757   0053EE                     u6520:
  4758   0053EE                     
  4759                           ; BSR set to: 0
  4760   0053EE  C082  F001         	movff	dir_find@dir,mem_cmp@dst
  4761   0053F2  C083  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  4762   0053F6  5180               	movf	dir_find@dp& (0+255),w,b
  4763   0053F8  6ED9               	movwf	fsr2l,c
  4764   0053FA  6ADA               	clrf	fsr2h,c
  4765   0053FC  0E14               	movlw	20
  4766   0053FE  26D9               	addwf	fsr2l,f,c
  4767   005400  50DF               	movf	indf2,w,c
  4768   005402  6E03               	movwf	mem_cmp@src^0,c
  4769   005404  0E00               	movlw	0
  4770   005406  6E05               	movwf	(mem_cmp@cnt+1)^0,c
  4771   005408  0E0B               	movlw	11
  4772   00540A  6E04               	movwf	mem_cmp@cnt^0,c
  4773   00540C  EC37  F02F         	call	_mem_cmp	;wreg free
  4774   005410  5001               	movf	?_mem_cmp^0,w,c
  4775   005412  1002               	iorwf	(?_mem_cmp+1)^0,w,c
  4776   005414  A4D8               	btfss	status,2,c
  4777   005416  EF0F  F02A         	goto	u6531
  4778   00541A  EF11  F02A         	goto	u6530
  4779   00541E                     u6531:
  4780   00541E  EF13  F02A         	goto	l4912
  4781   005422                     u6530:
  4782   005422  EFA9  F029         	goto	l4888
  4783   005426                     l4912:
  4784                           
  4785                           ;ff.c: 1505:   res = dir_next(dp, 0);
  4786   005426  C080  F06D         	movff	dir_find@dp,dir_next@dp
  4787   00542A  0E00               	movlw	0
  4788   00542C  6E6F               	movwf	(dir_next@stretch+1)^0,c
  4789   00542E  0E00               	movlw	0
  4790   005430  6E6E               	movwf	dir_next@stretch^0,c
  4791   005432  ECCA  F015         	call	_dir_next	;wreg free
  4792   005436  0100               	movlb	0	; () banked
  4793   005438  6F84               	movwf	dir_find@res& (0+255),b
  4794   00543A                     
  4795                           ; BSR set to: 0
  4796                           ;ff.c: 1506:  } while (res == FR_OK);
  4797   00543A  5184               	movf	dir_find@res& (0+255),w,b
  4798   00543C  B4D8               	btfsc	status,2,c
  4799   00543E  EF23  F02A         	goto	u6541
  4800   005442  EF25  F02A         	goto	u6540
  4801   005446                     u6541:
  4802   005446  EFAD  F029         	goto	l4892
  4803   00544A                     u6540:
  4804   00544A  EFA9  F029         	goto	l4888
  4805   00544E                     l486:
  4806                           
  4807                           ; BSR set to: 0
  4808   00544E  0012               	return		;funcret
  4809   005450                     __end_of_dir_find:
  4810                           	callstack 0
  4811                           
  4812 ;; *************** function _mem_cmp *****************
  4813 ;; Defined at:
  4814 ;;		line 533 in file "ff.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  dst             2    0[COMRAM] PTR const void 
  4817 ;;		 -> FatFs(558), NULL(0), 
  4818 ;;  src             1    2[COMRAM] PTR const void 
  4819 ;;		 -> f_open@sfn(12), 
  4820 ;;  cnt             2    3[COMRAM] unsigned short 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  r               2    9[COMRAM] int 
  4823 ;;  d               2    7[COMRAM] PTR const unsigned char 
  4824 ;;		 -> FatFs(558), NULL(0), 
  4825 ;;  s               1   11[COMRAM] PTR const unsigned char 
  4826 ;;		 -> f_open@sfn(12), 
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  2    0[COMRAM] int 
  4829 ;; Registers used:
  4830 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4836 ;;      Params:         5       0       0       0       0       0       0
  4837 ;;      Locals:         5       0       0       0       0       0       0
  4838 ;;      Temps:          2       0       0       0       0       0       0
  4839 ;;      Totals:        12       0       0       0       0       0       0
  4840 ;;Total ram usage:       12 bytes
  4841 ;; Hardware stack levels used: 1
  4842 ;; This function calls:
  4843 ;;		Nothing
  4844 ;; This function is called by:
  4845 ;;		_dir_find
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           	psect	text7
  4850   005E6E                     __ptext7:
  4851                           	callstack 0
  4852   005E6E                     _mem_cmp:
  4853                           	callstack 27
  4854   005E6E                     
  4855                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  4856   005E6E  C001  F008         	movff	mem_cmp@dst,mem_cmp@d
  4857   005E72  C002  F009         	movff	mem_cmp@dst+1,mem_cmp@d+1
  4858   005E76  C003  F00C         	movff	mem_cmp@src,mem_cmp@s
  4859   005E7A                     
  4860                           ;ff.c: 535:  int r = 0;
  4861   005E7A  0E00               	movlw	0
  4862   005E7C  6E0B               	movwf	(mem_cmp@r+1)^0,c
  4863   005E7E  0E00               	movlw	0
  4864   005E80  6E0A               	movwf	mem_cmp@r^0,c
  4865   005E82                     l4506:
  4866   005E82  0604               	decf	mem_cmp@cnt^0,f,c
  4867   005E84  A0D8               	btfss	status,0,c
  4868   005E86  0605               	decf	(mem_cmp@cnt+1)^0,f,c
  4869   005E88  2804               	incf	mem_cmp@cnt^0,w,c
  4870   005E8A  E108               	bnz	u5780
  4871   005E8C  2805               	incf	(mem_cmp@cnt+1)^0,w,c
  4872   005E8E  B4D8               	btfsc	status,2,c
  4873   005E90  EF4C  F02F         	goto	u5781
  4874   005E94  EF4E  F02F         	goto	u5780
  4875   005E98                     u5781:
  4876   005E98  EF6B  F02F         	goto	l298
  4877   005E9C                     u5780:
  4878   005E9C  C008  FFD9         	movff	mem_cmp@d,fsr2l
  4879   005EA0  C009  FFDA         	movff	mem_cmp@d+1,fsr2h
  4880   005EA4  4A08               	infsnz	mem_cmp@d^0,f,c
  4881   005EA6  2A09               	incf	(mem_cmp@d+1)^0,f,c
  4882   005EA8  50DF               	movf	indf2,w,c
  4883   005EAA  6E06               	movwf	??_mem_cmp^0,c
  4884   005EAC  2A0C               	incf	mem_cmp@s^0,f,c
  4885   005EAE  040C               	decf	mem_cmp@s^0,w,c
  4886   005EB0  6ED9               	movwf	fsr2l,c
  4887   005EB2  6ADA               	clrf	fsr2h,c
  4888   005EB4  50DF               	movf	indf2,w,c
  4889   005EB6  6E07               	movwf	(??_mem_cmp+1)^0,c
  4890   005EB8  5007               	movf	(??_mem_cmp+1)^0,w,c
  4891   005EBA  5C06               	subwf	??_mem_cmp^0,w,c
  4892   005EBC  6E0A               	movwf	mem_cmp@r^0,c
  4893   005EBE  6A0B               	clrf	(mem_cmp@r+1)^0,c
  4894   005EC0  A0D8               	btfss	status,0,c
  4895   005EC2  060B               	decf	(mem_cmp@r+1)^0,f,c
  4896   005EC4  500A               	movf	mem_cmp@r^0,w,c
  4897   005EC6  100B               	iorwf	(mem_cmp@r+1)^0,w,c
  4898   005EC8  B4D8               	btfsc	status,2,c
  4899   005ECA  EF69  F02F         	goto	u5791
  4900   005ECE  EF6B  F02F         	goto	u5790
  4901   005ED2                     u5791:
  4902   005ED2  EF41  F02F         	goto	l4506
  4903   005ED6                     u5790:
  4904   005ED6                     l298:
  4905                           
  4906                           ;ff.c: 538:  return r;
  4907   005ED6  C00A  F001         	movff	mem_cmp@r,?_mem_cmp
  4908   005EDA  C00B  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  4909   005EDE  0012               	return		;funcret
  4910   005EE0                     __end_of_mem_cmp:
  4911                           	callstack 0
  4912                           
  4913 ;; *************** function _create_name *****************
  4914 ;; Defined at:
  4915 ;;		line 1843 in file "ff.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  dp              1    8[COMRAM] PTR struct .
  4918 ;;		 -> f_open@dj(21), 
  4919 ;;  path            1    9[COMRAM] PTR PTR const unsigned c
  4920 ;;		 -> follow_path@path(1), 
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  i               2   21[COMRAM] unsigned short 
  4923 ;;  ni              2   17[COMRAM] unsigned short 
  4924 ;;  si              2   14[COMRAM] unsigned short 
  4925 ;;  c               1   24[COMRAM] unsigned char 
  4926 ;;  sfn             1   23[COMRAM] PTR unsigned char 
  4927 ;;		 -> f_open@sfn(12), 
  4928 ;;  p               1   20[COMRAM] PTR const unsigned char 
  4929 ;;		 -> STR_4(10), STR_3(1), 
  4930 ;;  d               1   19[COMRAM] unsigned char 
  4931 ;;  b               1   16[COMRAM] unsigned char 
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  1    wreg      enum E95
  4934 ;; Registers used:
  4935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4941 ;;      Params:         2       0       0       0       0       0       0
  4942 ;;      Locals:        13       0       0       0       0       0       0
  4943 ;;      Temps:          2       0       0       0       0       0       0
  4944 ;;      Totals:        17       0       0       0       0       0       0
  4945 ;;Total ram usage:       17 bytes
  4946 ;; Hardware stack levels used: 1
  4947 ;; Hardware stack levels required when called: 1
  4948 ;; This function calls:
  4949 ;;		_chk_chr
  4950 ;;		_mem_set
  4951 ;; This function is called by:
  4952 ;;		_follow_path
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	text8
  4957   003C02                     __ptext8:
  4958                           	callstack 0
  4959   003C02                     _create_name:
  4960                           	callstack 27
  4961   003C02                     
  4962                           ;ff.c: 1844:  DIR* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE b
      +                          , c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for 
      +                          (p = *path; *p == '/' || *p == '\\'; p++) ;
  4963   003C02  500A               	movf	create_name@path^0,w,c
  4964   003C04  6ED9               	movwf	fsr2l,c
  4965   003C06  6ADA               	clrf	fsr2h,c
  4966   003C08  50DF               	movf	indf2,w,c
  4967   003C0A  6E15               	movwf	create_name@p^0,c
  4968   003C0C  EF09  F01E         	goto	l4924
  4969   003C10                     l4922:
  4970   003C10  2A15               	incf	create_name@p^0,f,c
  4971   003C12                     l4924:
  4972   003C12  C015  FFF6         	movff	create_name@p,tblptrl
  4973   003C16                     	if	1	;There is more than 1 active tblptr byte
  4974   003C16  0E06               	movlw	high __smallconst
  4975   003C18  6EF7               	movwf	tblptrh,c
  4976   003C1A                     	endif
  4977   003C1A                     	if	0	;tblptru may be non-zero
  4978   003C1A                     	endif
  4979   003C1A                     	if	0	;tblptru may be non-zero
  4980   003C1A                     	endif
  4981   003C1A  0008               	tblrd		*
  4982   003C1C  50F5               	movf	tablat,w,c
  4983   003C1E  0A2F               	xorlw	47
  4984   003C20  B4D8               	btfsc	status,2,c
  4985   003C22  EF15  F01E         	goto	u6551
  4986   003C26  EF17  F01E         	goto	u6550
  4987   003C2A                     u6551:
  4988   003C2A  EF08  F01E         	goto	l4922
  4989   003C2E                     u6550:
  4990   003C2E  C015  FFF6         	movff	create_name@p,tblptrl
  4991   003C32                     	if	1	;There is more than 1 active tblptr byte
  4992   003C32  0E06               	movlw	high __smallconst
  4993   003C34  6EF7               	movwf	tblptrh,c
  4994   003C36                     	endif
  4995   003C36                     	if	0	;tblptru may be non-zero
  4996   003C36                     	endif
  4997   003C36                     	if	0	;tblptru may be non-zero
  4998   003C36                     	endif
  4999   003C36  0008               	tblrd		*
  5000   003C38  50F5               	movf	tablat,w,c
  5001   003C3A  0A5C               	xorlw	92
  5002   003C3C  B4D8               	btfsc	status,2,c
  5003   003C3E  EF23  F01E         	goto	u6561
  5004   003C42  EF25  F01E         	goto	u6560
  5005   003C46                     u6561:
  5006   003C46  EF08  F01E         	goto	l4922
  5007   003C4A                     u6560:
  5008   003C4A                     
  5009                           ;ff.c: 1975:  sfn = dp->fn;
  5010   003C4A  5009               	movf	create_name@dp^0,w,c
  5011   003C4C  6ED9               	movwf	fsr2l,c
  5012   003C4E  6ADA               	clrf	fsr2h,c
  5013   003C50  0E14               	movlw	20
  5014   003C52  26D9               	addwf	fsr2l,f,c
  5015   003C54  50DF               	movf	indf2,w,c
  5016   003C56  6E18               	movwf	create_name@sfn^0,c
  5017   003C58                     
  5018                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  5019   003C58  C018  F001         	movff	create_name@sfn,mem_set@dst
  5020   003C5C  6A02               	clrf	(mem_set@dst+1)^0,c
  5021   003C5E  0E00               	movlw	0
  5022   003C60  6E04               	movwf	(mem_set@val+1)^0,c
  5023   003C62  0E20               	movlw	32
  5024   003C64  6E03               	movwf	mem_set@val^0,c
  5025   003C66  0E00               	movlw	0
  5026   003C68  6E06               	movwf	(mem_set@cnt+1)^0,c
  5027   003C6A  0E0B               	movlw	11
  5028   003C6C  6E05               	movwf	mem_set@cnt^0,c
  5029   003C6E  EC77  F030         	call	_mem_set	;wreg free
  5030   003C72                     
  5031                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  5032   003C72  0E00               	movlw	0
  5033   003C74  6E11               	movwf	create_name@b^0,c
  5034   003C76  C011  F016         	movff	create_name@b,create_name@i
  5035   003C7A  6A17               	clrf	(create_name@i+1)^0,c
  5036   003C7C  C016  F00F         	movff	create_name@i,create_name@si
  5037   003C80  C017  F010         	movff	create_name@i+1,create_name@si+1
  5038   003C84  0E00               	movlw	0
  5039   003C86  6E13               	movwf	(create_name@ni+1)^0,c
  5040   003C88  0E08               	movlw	8
  5041   003C8A  6E12               	movwf	create_name@ni^0,c
  5042   003C8C                     l4936:
  5043                           
  5044                           ;ff.c: 1992:   c = (BYTE)p[si++];
  5045   003C8C  5015               	movf	create_name@p^0,w,c
  5046   003C8E  240F               	addwf	create_name@si^0,w,c
  5047   003C90  6E0B               	movwf	??_create_name^0,c
  5048   003C92  C00B  FFF6         	movff	??_create_name,tblptrl
  5049   003C96                     	if	1	;There is more than 1 active tblptr byte
  5050   003C96  0E06               	movlw	high __smallconst
  5051   003C98  6EF7               	movwf	tblptrh,c
  5052   003C9A                     	endif
  5053   003C9A                     	if	0	;tblptru may be non-zero
  5054   003C9A                     	endif
  5055   003C9A                     	if	0	;tblptru may be non-zero
  5056   003C9A                     	endif
  5057   003C9A  0008               	tblrd		*
  5058   003C9C  CFF5 F019          	movff	tablat,create_name@c
  5059   003CA0  4A0F               	infsnz	create_name@si^0,f,c
  5060   003CA2  2A10               	incf	(create_name@si+1)^0,f,c
  5061   003CA4                     
  5062                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  5063   003CA4  0E20               	movlw	32
  5064   003CA6  6419               	cpfsgt	create_name@c^0,c
  5065   003CA8  EF58  F01E         	goto	u6571
  5066   003CAC  EF5A  F01E         	goto	u6570
  5067   003CB0                     u6571:
  5068   003CB0  EF63  F01F         	goto	l5020
  5069   003CB4                     u6570:
  5070   003CB4  0E2F               	movlw	47
  5071   003CB6  1819               	xorwf	create_name@c^0,w,c
  5072   003CB8  B4D8               	btfsc	status,2,c
  5073   003CBA  EF61  F01E         	goto	u6581
  5074   003CBE  EF63  F01E         	goto	u6580
  5075   003CC2                     u6581:
  5076   003CC2  EF63  F01F         	goto	l5020
  5077   003CC6                     u6580:
  5078   003CC6  0E5C               	movlw	92
  5079   003CC8  1819               	xorwf	create_name@c^0,w,c
  5080   003CCA  A4D8               	btfss	status,2,c
  5081   003CCC  EF6A  F01E         	goto	u6591
  5082   003CD0  EF6C  F01E         	goto	u6590
  5083   003CD4                     u6591:
  5084   003CD4  EF6E  F01E         	goto	l4946
  5085   003CD8                     u6590:
  5086   003CD8  EF63  F01F         	goto	l5020
  5087   003CDC                     l4946:
  5088                           
  5089                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  5090   003CDC  0E2E               	movlw	46
  5091   003CDE  1819               	xorwf	create_name@c^0,w,c
  5092   003CE0  B4D8               	btfsc	status,2,c
  5093   003CE2  EF75  F01E         	goto	u6601
  5094   003CE6  EF77  F01E         	goto	u6600
  5095   003CEA                     u6601:
  5096   003CEA  EF82  F01E         	goto	l4950
  5097   003CEE                     u6600:
  5098   003CEE  5012               	movf	create_name@ni^0,w,c
  5099   003CF0  5C16               	subwf	create_name@i^0,w,c
  5100   003CF2  5013               	movf	(create_name@ni+1)^0,w,c
  5101   003CF4  5817               	subwfb	(create_name@i+1)^0,w,c
  5102   003CF6  A0D8               	btfss	status,0,c
  5103   003CF8  EF80  F01E         	goto	u6611
  5104   003CFC  EF82  F01E         	goto	u6610
  5105   003D00                     u6611:
  5106   003D00  EFA6  F01E         	goto	l4962
  5107   003D04                     u6610:
  5108   003D04                     l4950:
  5109                           
  5110                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  5111   003D04  0E08               	movlw	8
  5112   003D06  1812               	xorwf	create_name@ni^0,w,c
  5113   003D08  1013               	iorwf	(create_name@ni+1)^0,w,c
  5114   003D0A  A4D8               	btfss	status,2,c
  5115   003D0C  EF8A  F01E         	goto	u6621
  5116   003D10  EF8C  F01E         	goto	u6620
  5117   003D14                     u6621:
  5118   003D14  EF95  F01E         	goto	l4954
  5119   003D18                     u6620:
  5120   003D18  0E2E               	movlw	46
  5121   003D1A  1819               	xorwf	create_name@c^0,w,c
  5122   003D1C  B4D8               	btfsc	status,2,c
  5123   003D1E  EF93  F01E         	goto	u6631
  5124   003D22  EF95  F01E         	goto	u6630
  5125   003D26                     u6631:
  5126   003D26  EF98  F01E         	goto	l4958
  5127   003D2A                     u6630:
  5128   003D2A                     l4954:
  5129   003D2A  0E06               	movlw	6
  5130   003D2C  EFC5  F01F         	goto	l513
  5131   003D30                     l4958:
  5132                           
  5133                           ;ff.c: 1996:    i = 8; ni = 11;
  5134   003D30  0E00               	movlw	0
  5135   003D32  6E17               	movwf	(create_name@i+1)^0,c
  5136   003D34  0E08               	movlw	8
  5137   003D36  6E16               	movwf	create_name@i^0,c
  5138   003D38  0E00               	movlw	0
  5139   003D3A  6E13               	movwf	(create_name@ni+1)^0,c
  5140   003D3C  0E0B               	movlw	11
  5141   003D3E  6E12               	movwf	create_name@ni^0,c
  5142   003D40                     
  5143                           ;ff.c: 1997:    b <<= 2; continue;
  5144   003D40  90D8               	bcf	status,0,c
  5145   003D42  3611               	rlcf	create_name@b^0,f,c
  5146   003D44  90D8               	bcf	status,0,c
  5147   003D46  3611               	rlcf	create_name@b^0,f,c
  5148   003D48  EF46  F01E         	goto	l4936
  5149   003D4C                     l4962:
  5150                           
  5151                           ;ff.c: 1999:   if (c >= 0x80) {
  5152   003D4C  0E7F               	movlw	127
  5153   003D4E  6419               	cpfsgt	create_name@c^0,c
  5154   003D50  EFAC  F01E         	goto	u6641
  5155   003D54  EFAE  F01E         	goto	u6640
  5156   003D58                     u6641:
  5157   003D58  EFB0  F01E         	goto	l515
  5158   003D5C                     u6640:
  5159   003D5C                     
  5160                           ;ff.c: 2000:    b |= 3;
  5161   003D5C  0E03               	movlw	3
  5162   003D5E  1211               	iorwf	create_name@b^0,f,c
  5163   003D60                     l515:
  5164                           
  5165                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  5166   003D60  0E80               	movlw	128
  5167   003D62  6419               	cpfsgt	create_name@c^0,c
  5168   003D64  EFB6  F01E         	goto	u6651
  5169   003D68  EFB8  F01E         	goto	u6650
  5170   003D6C                     u6651:
  5171   003D6C  EFC0  F01E         	goto	l4968
  5172   003D70                     u6650:
  5173   003D70  0E9F               	movlw	159
  5174   003D72  6419               	cpfsgt	create_name@c^0,c
  5175   003D74  EFBE  F01E         	goto	u6661
  5176   003D78  EFC0  F01E         	goto	u6660
  5177   003D7C                     u6661:
  5178   003D7C  EFD0  F01E         	goto	l4972
  5179   003D80                     u6660:
  5180   003D80                     l4968:
  5181   003D80  0EDF               	movlw	223
  5182   003D82  6419               	cpfsgt	create_name@c^0,c
  5183   003D84  EFC6  F01E         	goto	u6671
  5184   003D88  EFC8  F01E         	goto	u6670
  5185   003D8C                     u6671:
  5186   003D8C  EF21  F01F         	goto	l4996
  5187   003D90                     u6670:
  5188   003D90  0EFD               	movlw	253
  5189   003D92  6019               	cpfslt	create_name@c^0,c
  5190   003D94  EFCE  F01E         	goto	u6681
  5191   003D98  EFD0  F01E         	goto	u6680
  5192   003D9C                     u6681:
  5193   003D9C  EF21  F01F         	goto	l4996
  5194   003DA0                     u6680:
  5195   003DA0                     l4972:
  5196                           
  5197                           ;ff.c: 2010:    d = (BYTE)p[si++];
  5198   003DA0  5015               	movf	create_name@p^0,w,c
  5199   003DA2  240F               	addwf	create_name@si^0,w,c
  5200   003DA4  6E0B               	movwf	??_create_name^0,c
  5201   003DA6  C00B  FFF6         	movff	??_create_name,tblptrl
  5202   003DAA                     	if	1	;There is more than 1 active tblptr byte
  5203   003DAA  0E06               	movlw	high __smallconst
  5204   003DAC  6EF7               	movwf	tblptrh,c
  5205   003DAE                     	endif
  5206   003DAE                     	if	0	;tblptru may be non-zero
  5207   003DAE                     	endif
  5208   003DAE                     	if	0	;tblptru may be non-zero
  5209   003DAE                     	endif
  5210   003DAE  0008               	tblrd		*
  5211   003DB0  CFF5 F014          	movff	tablat,create_name@d
  5212   003DB4  4A0F               	infsnz	create_name@si^0,f,c
  5213   003DB6  2A10               	incf	(create_name@si+1)^0,f,c
  5214   003DB8                     
  5215                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  5216   003DB8  0E3F               	movlw	63
  5217   003DBA  6414               	cpfsgt	create_name@d^0,c
  5218   003DBC  EFE2  F01E         	goto	u6691
  5219   003DC0  EFE4  F01E         	goto	u6690
  5220   003DC4                     u6691:
  5221   003DC4  EFEC  F01E         	goto	l4980
  5222   003DC8                     u6690:
  5223   003DC8  0E7E               	movlw	126
  5224   003DCA  6414               	cpfsgt	create_name@d^0,c
  5225   003DCC  EFEA  F01E         	goto	u6701
  5226   003DD0  EFEC  F01E         	goto	u6700
  5227   003DD4                     u6701:
  5228   003DD4  EFFC  F01E         	goto	l4984
  5229   003DD8                     u6700:
  5230   003DD8                     l4980:
  5231   003DD8  0E7F               	movlw	127
  5232   003DDA  6414               	cpfsgt	create_name@d^0,c
  5233   003DDC  EFF2  F01E         	goto	u6711
  5234   003DE0  EFF4  F01E         	goto	u6710
  5235   003DE4                     u6711:
  5236   003DE4  EF95  F01E         	goto	l4954
  5237   003DE8                     u6710:
  5238   003DE8  0EFD               	movlw	253
  5239   003DEA  6014               	cpfslt	create_name@d^0,c
  5240   003DEC  EFFA  F01E         	goto	u6721
  5241   003DF0  EFFC  F01E         	goto	u6720
  5242   003DF4                     u6721:
  5243   003DF4  EF95  F01E         	goto	l4954
  5244   003DF8                     u6720:
  5245   003DF8                     l4984:
  5246   003DF8  0EFF               	movlw	255
  5247   003DFA  2412               	addwf	create_name@ni^0,w,c
  5248   003DFC  6E0B               	movwf	??_create_name^0,c
  5249   003DFE  0EFF               	movlw	255
  5250   003E00  2013               	addwfc	(create_name@ni+1)^0,w,c
  5251   003E02  6E0C               	movwf	(??_create_name+1)^0,c
  5252   003E04  500B               	movf	??_create_name^0,w,c
  5253   003E06  5C16               	subwf	create_name@i^0,w,c
  5254   003E08  500C               	movf	(??_create_name+1)^0,w,c
  5255   003E0A  5817               	subwfb	(create_name@i+1)^0,w,c
  5256   003E0C  A0D8               	btfss	status,0,c
  5257   003E0E  EF0B  F01F         	goto	u6731
  5258   003E12  EF0D  F01F         	goto	u6730
  5259   003E16                     u6731:
  5260   003E16  EF0F  F01F         	goto	l4990
  5261   003E1A                     u6730:
  5262   003E1A  EF95  F01E         	goto	l4954
  5263   003E1E                     l4990:
  5264                           
  5265                           ;ff.c: 2013:    sfn[i++] = c;
  5266   003E1E  5018               	movf	create_name@sfn^0,w,c
  5267   003E20  2416               	addwf	create_name@i^0,w,c
  5268   003E22  6ED9               	movwf	fsr2l,c
  5269   003E24  6ADA               	clrf	fsr2h,c
  5270   003E26  C019  FFDF         	movff	create_name@c,indf2
  5271   003E2A  4A16               	infsnz	create_name@i^0,f,c
  5272   003E2C  2A17               	incf	(create_name@i+1)^0,f,c
  5273   003E2E                     
  5274                           ;ff.c: 2014:    sfn[i++] = d;
  5275   003E2E  5018               	movf	create_name@sfn^0,w,c
  5276   003E30  2416               	addwf	create_name@i^0,w,c
  5277   003E32  6ED9               	movwf	fsr2l,c
  5278   003E34  6ADA               	clrf	fsr2h,c
  5279   003E36  C014  FFDF         	movff	create_name@d,indf2
  5280   003E3A  4A16               	infsnz	create_name@i^0,f,c
  5281   003E3C  2A17               	incf	(create_name@i+1)^0,f,c
  5282                           
  5283                           ;ff.c: 2015:   } else {
  5284   003E3E  EF46  F01E         	goto	l4936
  5285   003E42                     l4996:
  5286                           
  5287                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  5288   003E42  0E1F               	movlw	low STR_1
  5289   003E44  6E01               	movwf	chk_chr@str^0,c
  5290   003E46  C019  F002         	movff	create_name@c,chk_chr@chr
  5291   003E4A  6A03               	clrf	(chk_chr@chr+1)^0,c
  5292   003E4C  ECD4  F02F         	call	_chk_chr	;wreg free
  5293   003E50  5001               	movf	?_chk_chr^0,w,c
  5294   003E52  1002               	iorwf	(?_chk_chr+1)^0,w,c
  5295   003E54  B4D8               	btfsc	status,2,c
  5296   003E56  EF2F  F01F         	goto	u6741
  5297   003E5A  EF31  F01F         	goto	u6740
  5298   003E5E                     u6741:
  5299   003E5E  EF33  F01F         	goto	l5002
  5300   003E62                     u6740:
  5301   003E62  EF95  F01E         	goto	l4954
  5302   003E66                     l5002:
  5303                           
  5304                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  5305   003E66  0E40               	movlw	64
  5306   003E68  6419               	cpfsgt	create_name@c^0,c
  5307   003E6A  EF39  F01F         	goto	u6751
  5308   003E6E  EF3B  F01F         	goto	u6750
  5309   003E72                     u6751:
  5310   003E72  EF46  F01F         	goto	l5008
  5311   003E76                     u6750:
  5312   003E76  0E5B               	movlw	91
  5313   003E78  6019               	cpfslt	create_name@c^0,c
  5314   003E7A  EF41  F01F         	goto	u6761
  5315   003E7E  EF43  F01F         	goto	u6760
  5316   003E82                     u6761:
  5317   003E82  EF46  F01F         	goto	l5008
  5318   003E86                     u6760:
  5319   003E86                     
  5320                           ;ff.c: 2019:     b |= 2;
  5321   003E86  8211               	bsf	create_name@b^0,1,c
  5322                           
  5323                           ;ff.c: 2020:    } else {
  5324   003E88  EF59  F01F         	goto	l5016
  5325   003E8C                     l5008:
  5326                           
  5327                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  5328   003E8C  0E60               	movlw	96
  5329   003E8E  6419               	cpfsgt	create_name@c^0,c
  5330   003E90  EF4C  F01F         	goto	u6771
  5331   003E94  EF4E  F01F         	goto	u6770
  5332   003E98                     u6771:
  5333   003E98  EF59  F01F         	goto	l5016
  5334   003E9C                     u6770:
  5335   003E9C  0E7B               	movlw	123
  5336   003E9E  6019               	cpfslt	create_name@c^0,c
  5337   003EA0  EF54  F01F         	goto	u6781
  5338   003EA4  EF56  F01F         	goto	u6780
  5339   003EA8                     u6781:
  5340   003EA8  EF59  F01F         	goto	l5016
  5341   003EAC                     u6780:
  5342   003EAC                     
  5343                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  5344   003EAC  8011               	bsf	create_name@b^0,0,c
  5345   003EAE  0E20               	movlw	32
  5346   003EB0  5E19               	subwf	create_name@c^0,f,c
  5347   003EB2                     l5016:
  5348                           
  5349                           ;ff.c: 2025:    sfn[i++] = c;
  5350   003EB2  5018               	movf	create_name@sfn^0,w,c
  5351   003EB4  2416               	addwf	create_name@i^0,w,c
  5352   003EB6  6ED9               	movwf	fsr2l,c
  5353   003EB8  6ADA               	clrf	fsr2h,c
  5354   003EBA  C019  FFDF         	movff	create_name@c,indf2
  5355   003EBE  4A16               	infsnz	create_name@i^0,f,c
  5356   003EC0  2A17               	incf	(create_name@i+1)^0,f,c
  5357   003EC2  EF46  F01E         	goto	l4936
  5358   003EC6                     l5020:
  5359                           
  5360                           ;ff.c: 2028:  *path = &p[si];
  5361   003EC6  500A               	movf	create_name@path^0,w,c
  5362   003EC8  6ED9               	movwf	fsr2l,c
  5363   003ECA  6ADA               	clrf	fsr2h,c
  5364   003ECC  5015               	movf	create_name@p^0,w,c
  5365   003ECE  240F               	addwf	create_name@si^0,w,c
  5366   003ED0  6EDF               	movwf	indf2,c
  5367   003ED2                     
  5368                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  5369   003ED2  0E20               	movlw	32
  5370   003ED4  6419               	cpfsgt	create_name@c^0,c
  5371   003ED6  EF6F  F01F         	goto	u6791
  5372   003EDA  EF71  F01F         	goto	u6790
  5373   003EDE                     u6791:
  5374   003EDE  EF77  F01F         	goto	l5026
  5375   003EE2                     u6790:
  5376   003EE2  0E00               	movlw	0
  5377   003EE4  6E0E               	movwf	(_create_name$838+1)^0,c
  5378   003EE6  0E00               	movlw	0
  5379   003EE8  6E0D               	movwf	_create_name$838^0,c
  5380   003EEA  EF7B  F01F         	goto	l5028
  5381   003EEE                     l5026:
  5382   003EEE  0E00               	movlw	0
  5383   003EF0  6E0E               	movwf	(_create_name$838+1)^0,c
  5384   003EF2  0E04               	movlw	4
  5385   003EF4  6E0D               	movwf	_create_name$838^0,c
  5386   003EF6                     l5028:
  5387   003EF6  C00D  F019         	movff	_create_name$838,create_name@c
  5388   003EFA                     
  5389                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  5390   003EFA  5016               	movf	create_name@i^0,w,c
  5391   003EFC  1017               	iorwf	(create_name@i+1)^0,w,c
  5392   003EFE  A4D8               	btfss	status,2,c
  5393   003F00  EF84  F01F         	goto	u6801
  5394   003F04  EF86  F01F         	goto	u6800
  5395   003F08                     u6801:
  5396   003F08  EF88  F01F         	goto	l5036
  5397   003F0C                     u6800:
  5398   003F0C  EF95  F01E         	goto	l4954
  5399   003F10                     l5036:
  5400                           
  5401                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  5402   003F10  5018               	movf	create_name@sfn^0,w,c
  5403   003F12  6ED9               	movwf	fsr2l,c
  5404   003F14  6ADA               	clrf	fsr2h,c
  5405   003F16  0EE5               	movlw	229
  5406   003F18  18DE               	xorwf	postinc2,w,c
  5407   003F1A  A4D8               	btfss	status,2,c
  5408   003F1C  EF92  F01F         	goto	u6811
  5409   003F20  EF94  F01F         	goto	u6810
  5410   003F24                     u6811:
  5411   003F24  EF99  F01F         	goto	l5040
  5412   003F28                     u6810:
  5413   003F28  5018               	movf	create_name@sfn^0,w,c
  5414   003F2A  6ED9               	movwf	fsr2l,c
  5415   003F2C  6ADA               	clrf	fsr2h,c
  5416   003F2E  0E05               	movlw	5
  5417   003F30  6EDF               	movwf	indf2,c
  5418   003F32                     l5040:
  5419                           
  5420                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  5421   003F32  0E08               	movlw	8
  5422   003F34  1812               	xorwf	create_name@ni^0,w,c
  5423   003F36  1013               	iorwf	(create_name@ni+1)^0,w,c
  5424   003F38  A4D8               	btfss	status,2,c
  5425   003F3A  EFA1  F01F         	goto	u6821
  5426   003F3E  EFA3  F01F         	goto	u6820
  5427   003F42                     u6821:
  5428   003F42  EFA7  F01F         	goto	l539
  5429   003F46                     u6820:
  5430   003F46  90D8               	bcf	status,0,c
  5431   003F48  3611               	rlcf	create_name@b^0,f,c
  5432   003F4A  90D8               	bcf	status,0,c
  5433   003F4C  3611               	rlcf	create_name@b^0,f,c
  5434   003F4E                     l539:
  5435                           
  5436                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  5437   003F4E  5011               	movf	create_name@b^0,w,c
  5438   003F50  0B03               	andlw	3
  5439   003F52  06E8               	decf	wreg,f,c
  5440   003F54  A4D8               	btfss	status,2,c
  5441   003F56  EFAF  F01F         	goto	u6831
  5442   003F5A  EFB1  F01F         	goto	u6830
  5443   003F5E                     u6831:
  5444   003F5E  EFB2  F01F         	goto	l5046
  5445   003F62                     u6830:
  5446   003F62  8819               	bsf	create_name@c^0,4,c
  5447   003F64                     l5046:
  5448                           
  5449                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  5450   003F64  5011               	movf	create_name@b^0,w,c
  5451   003F66  0B0C               	andlw	12
  5452   003F68  0A04               	xorlw	4
  5453   003F6A  A4D8               	btfss	status,2,c
  5454   003F6C  EFBA  F01F         	goto	u6841
  5455   003F70  EFBC  F01F         	goto	u6840
  5456   003F74                     u6841:
  5457   003F74  EFBD  F01F         	goto	l5050
  5458   003F78                     u6840:
  5459   003F78  8619               	bsf	create_name@c^0,3,c
  5460   003F7A                     l5050:
  5461                           
  5462                           ;ff.c: 2038:  sfn[11] = c;
  5463   003F7A  5018               	movf	create_name@sfn^0,w,c
  5464   003F7C  6ED9               	movwf	fsr2l,c
  5465   003F7E  6ADA               	clrf	fsr2h,c
  5466   003F80  0E0B               	movlw	11
  5467   003F82  26D9               	addwf	fsr2l,f,c
  5468   003F84  C019  FFDF         	movff	create_name@c,indf2
  5469   003F88                     
  5470                           ;ff.c: 2040:  return FR_OK;
  5471   003F88  0E00               	movlw	0
  5472   003F8A                     l513:
  5473   003F8A  0012               	return		;funcret
  5474   003F8C                     __end_of_create_name:
  5475                           	callstack 0
  5476                           
  5477 ;; *************** function _chk_chr *****************
  5478 ;; Defined at:
  5479 ;;		line 543 in file "ff.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;  str             1    0[COMRAM] PTR const unsigned char 
  5482 ;;		 -> STR_2(15), 
  5483 ;;  chr             2    1[COMRAM] int 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;		None
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  2    0[COMRAM] int 
  5488 ;; Registers used:
  5489 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5495 ;;      Params:         3       0       0       0       0       0       0
  5496 ;;      Locals:         0       0       0       0       0       0       0
  5497 ;;      Temps:          2       0       0       0       0       0       0
  5498 ;;      Totals:         5       0       0       0       0       0       0
  5499 ;;Total ram usage:        5 bytes
  5500 ;; Hardware stack levels used: 1
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_create_name
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text9
  5509   005FA8                     __ptext9:
  5510                           	callstack 0
  5511   005FA8                     _chk_chr:
  5512                           	callstack 27
  5513   005FA8                     
  5514                           ;ff.c: 544:  while (*str && *str != chr) str++;
  5515   005FA8  EFD7  F02F         	goto	l4514
  5516   005FAC                     l4512:
  5517   005FAC  2A01               	incf	chk_chr@str^0,f,c
  5518   005FAE                     l4514:
  5519   005FAE  C001  FFF6         	movff	chk_chr@str,tblptrl
  5520   005FB2                     	if	1	;There is more than 1 active tblptr byte
  5521   005FB2  0E06               	movlw	high __smallconst
  5522   005FB4  6EF7               	movwf	tblptrh,c
  5523   005FB6                     	endif
  5524   005FB6                     	if	0	;tblptru may be non-zero
  5525   005FB6                     	endif
  5526   005FB6                     	if	0	;tblptru may be non-zero
  5527   005FB6                     	endif
  5528   005FB6  0008               	tblrd		*
  5529   005FB8  50F5               	movf	tablat,w,c
  5530   005FBA  0900               	iorlw	0
  5531   005FBC  B4D8               	btfsc	status,2,c
  5532   005FBE  EFE3  F02F         	goto	u5801
  5533   005FC2  EFE5  F02F         	goto	u5800
  5534   005FC6                     u5801:
  5535   005FC6  EFF9  F02F         	goto	l4518
  5536   005FCA                     u5800:
  5537   005FCA  C001  FFF6         	movff	chk_chr@str,tblptrl
  5538   005FCE                     	if	1	;There is more than 1 active tblptr byte
  5539   005FCE  0E06               	movlw	high __smallconst
  5540   005FD0  6EF7               	movwf	tblptrh,c
  5541   005FD2                     	endif
  5542   005FD2                     	if	0	;tblptru may be non-zero
  5543   005FD2                     	endif
  5544   005FD2                     	if	0	;tblptru may be non-zero
  5545   005FD2                     	endif
  5546   005FD2  0008               	tblrd		*
  5547   005FD4  50F5               	movf	tablat,w,c
  5548   005FD6  6E04               	movwf	??_chk_chr^0,c
  5549   005FD8  6A05               	clrf	(??_chk_chr+1)^0,c
  5550   005FDA  5002               	movf	chk_chr@chr^0,w,c
  5551   005FDC  1804               	xorwf	??_chk_chr^0,w,c
  5552   005FDE  E107               	bnz	u5811
  5553   005FE0  5003               	movf	(chk_chr@chr+1)^0,w,c
  5554   005FE2  1805               	xorwf	(??_chk_chr+1)^0,w,c
  5555   005FE4  A4D8               	btfss	status,2,c
  5556   005FE6  EFF7  F02F         	goto	u5811
  5557   005FEA  EFF9  F02F         	goto	u5810
  5558   005FEE                     u5811:
  5559   005FEE  EFD6  F02F         	goto	l4512
  5560   005FF2                     u5810:
  5561   005FF2                     l4518:
  5562                           
  5563                           ;ff.c: 545:  return *str;
  5564   005FF2  C001  FFF6         	movff	chk_chr@str,tblptrl
  5565   005FF6                     	if	1	;There is more than 1 active tblptr byte
  5566   005FF6  0E06               	movlw	high __smallconst
  5567   005FF8  6EF7               	movwf	tblptrh,c
  5568   005FFA                     	endif
  5569   005FFA                     	if	0	;tblptru may be non-zero
  5570   005FFA                     	endif
  5571   005FFA                     	if	0	;tblptru may be non-zero
  5572   005FFA                     	endif
  5573   005FFA  0008               	tblrd		*
  5574   005FFC  50F5               	movf	tablat,w,c
  5575   005FFE  6E01               	movwf	?_chk_chr^0,c
  5576   006000  6A02               	clrf	(?_chk_chr+1)^0,c
  5577   006002  0012               	return		;funcret
  5578   006004                     __end_of_chk_chr:
  5579                           	callstack 0
  5580                           
  5581 ;; *************** function _dir_register *****************
  5582 ;; Defined at:
  5583 ;;		line 1578 in file "ff.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  dp              1    9[BANK0 ] PTR struct .
  5586 ;;		 -> f_open@dj(21), 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;  res             1   11[BANK0 ] enum E95
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  1    wreg      enum E95
  5591 ;; Registers used:
  5592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5598 ;;      Params:         0       1       0       0       0       0       0
  5599 ;;      Locals:         0       1       0       0       0       0       0
  5600 ;;      Temps:          0       1       0       0       0       0       0
  5601 ;;      Totals:         0       3       0       0       0       0       0
  5602 ;;Total ram usage:        3 bytes
  5603 ;; Hardware stack levels used: 1
  5604 ;; Hardware stack levels required when called: 12
  5605 ;; This function calls:
  5606 ;;		_dir_alloc
  5607 ;;		_mem_cpy
  5608 ;;		_mem_set
  5609 ;;		_move_window
  5610 ;; This function is called by:
  5611 ;;		_f_open
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           	psect	text10
  5616   005676                     __ptext10:
  5617                           	callstack 0
  5618   005676                     _dir_register:
  5619                           	callstack 17
  5620   005676                     
  5621                           ;ff.c: 1579:  DIR* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_all
      +                          oc(dp, 1);
  5622   005676  C089  F080         	movff	dir_register@dp,dir_alloc@dp
  5623   00567A  0E00               	movlw	0
  5624   00567C  0100               	movlb	0	; () banked
  5625   00567E  6F82               	movwf	(dir_alloc@nent+1)& (0+255),b
  5626   005680  0E01               	movlw	1
  5627   005682  6F81               	movwf	dir_alloc@nent& (0+255),b
  5628   005684  EC01  F029         	call	_dir_alloc	;wreg free
  5629   005688  0100               	movlb	0	; () banked
  5630   00568A  6F8B               	movwf	dir_register@res& (0+255),b
  5631   00568C                     
  5632                           ; BSR set to: 0
  5633                           ;ff.c: 1632:  if (res == FR_OK) {
  5634   00568C  518B               	movf	dir_register@res& (0+255),w,b
  5635   00568E  A4D8               	btfss	status,2,c
  5636   005690  EF4C  F02B         	goto	u7121
  5637   005694  EF4E  F02B         	goto	u7120
  5638   005698                     u7121:
  5639   005698  EFA7  F02B         	goto	l5228
  5640   00569C                     u7120:
  5641   00569C                     
  5642                           ; BSR set to: 0
  5643                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  5644   00569C  5189               	movf	dir_register@dp& (0+255),w,b
  5645   00569E  6ED9               	movwf	fsr2l,c
  5646   0056A0  6ADA               	clrf	fsr2h,c
  5647   0056A2  CFDE F030          	movff	postinc2,move_window@fs
  5648   0056A6  CFDD F031          	movff	postdec2,move_window@fs+1
  5649   0056AA  5189               	movf	dir_register@dp& (0+255),w,b
  5650   0056AC  6ED9               	movwf	fsr2l,c
  5651   0056AE  6ADA               	clrf	fsr2h,c
  5652   0056B0  0E0E               	movlw	14
  5653   0056B2  26D9               	addwf	fsr2l,f,c
  5654   0056B4  CFDE F032          	movff	postinc2,move_window@sector
  5655   0056B8  CFDE F033          	movff	postinc2,move_window@sector+1
  5656   0056BC  CFDE F034          	movff	postinc2,move_window@sector+2
  5657   0056C0  CFDE F035          	movff	postinc2,move_window@sector+3
  5658   0056C4  EC3C  F02D         	call	_move_window	;wreg free
  5659   0056C8  0100               	movlb	0	; () banked
  5660   0056CA  6F8B               	movwf	dir_register@res& (0+255),b
  5661   0056CC                     
  5662                           ; BSR set to: 0
  5663                           ;ff.c: 1634:   if (res == FR_OK) {
  5664   0056CC  518B               	movf	dir_register@res& (0+255),w,b
  5665   0056CE  A4D8               	btfss	status,2,c
  5666   0056D0  EF6C  F02B         	goto	u7131
  5667   0056D4  EF6E  F02B         	goto	u7130
  5668   0056D8                     u7131:
  5669   0056D8  EFA7  F02B         	goto	l5228
  5670   0056DC                     u7130:
  5671   0056DC                     
  5672                           ; BSR set to: 0
  5673                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  5674   0056DC  5189               	movf	dir_register@dp& (0+255),w,b
  5675   0056DE  6ED9               	movwf	fsr2l,c
  5676   0056E0  6ADA               	clrf	fsr2h,c
  5677   0056E2  0E12               	movlw	18
  5678   0056E4  26D9               	addwf	fsr2l,f,c
  5679   0056E6  CFDE F001          	movff	postinc2,mem_set@dst
  5680   0056EA  CFDD F002          	movff	postdec2,mem_set@dst+1
  5681   0056EE  0E00               	movlw	0
  5682   0056F0  6E04               	movwf	(mem_set@val+1)^0,c
  5683   0056F2  0E00               	movlw	0
  5684   0056F4  6E03               	movwf	mem_set@val^0,c
  5685   0056F6  0E00               	movlw	0
  5686   0056F8  6E06               	movwf	(mem_set@cnt+1)^0,c
  5687   0056FA  0E20               	movlw	32
  5688   0056FC  6E05               	movwf	mem_set@cnt^0,c
  5689   0056FE  EC77  F030         	call	_mem_set	;wreg free
  5690   005702                     
  5691                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  5692   005702  0100               	movlb	0	; () banked
  5693   005704  5189               	movf	dir_register@dp& (0+255),w,b
  5694   005706  6ED9               	movwf	fsr2l,c
  5695   005708  6ADA               	clrf	fsr2h,c
  5696   00570A  0E12               	movlw	18
  5697   00570C  26D9               	addwf	fsr2l,f,c
  5698   00570E  CFDE F001          	movff	postinc2,mem_cpy@dst
  5699   005712  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  5700   005716  5189               	movf	dir_register@dp& (0+255),w,b
  5701   005718  6ED9               	movwf	fsr2l,c
  5702   00571A  6ADA               	clrf	fsr2h,c
  5703   00571C  0E14               	movlw	20
  5704   00571E  26D9               	addwf	fsr2l,f,c
  5705   005720  50DF               	movf	indf2,w,c
  5706   005722  6F8A               	movwf	??_dir_register& (0+255),b
  5707   005724  C08A  F003         	movff	??_dir_register,mem_cpy@src
  5708   005728  6A04               	clrf	(mem_cpy@src+1)^0,c
  5709   00572A  0E00               	movlw	0
  5710   00572C  6E06               	movwf	(mem_cpy@cnt+1)^0,c
  5711   00572E  0E0B               	movlw	11
  5712   005730  6E05               	movwf	mem_cpy@cnt^0,c
  5713   005732  ECA9  F02B         	call	_mem_cpy	;wreg free
  5714   005736                     
  5715                           ;ff.c: 1640:    dp->fs->wflag = 1;
  5716   005736  0100               	movlb	0	; () banked
  5717   005738  5189               	movf	dir_register@dp& (0+255),w,b
  5718   00573A  6ED9               	movwf	fsr2l,c
  5719   00573C  6ADA               	clrf	fsr2h,c
  5720   00573E  EE10 F004          	lfsr	1,4
  5721   005742  50DE               	movf	postinc2,w,c
  5722   005744  26E1               	addwf	fsr1l,f,c
  5723   005746  50DD               	movf	postdec2,w,c
  5724   005748  22E2               	addwfc	fsr1h,f,c
  5725   00574A  0E01               	movlw	1
  5726   00574C  6EE7               	movwf	indf1,c
  5727   00574E                     l5228:
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;ff.c: 1644:  return res;
  5731   00574E  518B               	movf	dir_register@res& (0+255),w,b
  5732   005750                     
  5733                           ; BSR set to: 0
  5734   005750  0012               	return		;funcret
  5735   005752                     __end_of_dir_register:
  5736                           	callstack 0
  5737                           
  5738 ;; *************** function _mem_cpy *****************
  5739 ;; Defined at:
  5740 ;;		line 507 in file "ff.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  dst             2    0[COMRAM] PTR void 
  5743 ;;		 -> FatFs(558), FatFs$win(512), NULL(0), 
  5744 ;;  src             2    2[COMRAM] PTR const void 
  5745 ;;		 -> STR_6(15), STR_5(15), FatFs(558), f_open@sfn(12), 
  5746 ;;		 -> NULL(0), 
  5747 ;;  cnt             2    4[COMRAM] unsigned short 
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;  s               2   10[COMRAM] PTR const unsigned char 
  5750 ;;		 -> STR_6(15), STR_5(15), FatFs(558), f_open@sfn(12), 
  5751 ;;		 -> NULL(0), 
  5752 ;;  d               2    8[COMRAM] PTR unsigned char 
  5753 ;;		 -> FatFs(558), FatFs$win(512), NULL(0), 
  5754 ;; Return value:  Size  Location     Type
  5755 ;;                  1    wreg      void 
  5756 ;; Registers used:
  5757 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5758 ;; Tracked objects:
  5759 ;;		On entry : 0/0
  5760 ;;		On exit  : 0/0
  5761 ;;		Unchanged: 0/0
  5762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5763 ;;      Params:         6       0       0       0       0       0       0
  5764 ;;      Locals:         4       0       0       0       0       0       0
  5765 ;;      Temps:          2       0       0       0       0       0       0
  5766 ;;      Totals:        12       0       0       0       0       0       0
  5767 ;;Total ram usage:       12 bytes
  5768 ;; Hardware stack levels used: 1
  5769 ;; This function calls:
  5770 ;;		Nothing
  5771 ;; This function is called by:
  5772 ;;		_dir_register
  5773 ;;		_f_write
  5774 ;;		_f_read
  5775 ;; This function uses a non-reentrant model
  5776 ;;
  5777                           
  5778                           	psect	text11
  5779   005752                     __ptext11:
  5780                           	callstack 0
  5781   005752                     _mem_cpy:
  5782                           	callstack 29
  5783   005752                     
  5784                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  5785   005752  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  5786   005756  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  5787                           
  5788                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  5789   00575A  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  5790   00575E  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  5791                           
  5792                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  5793   005762  EFDE  F02B         	goto	l4800
  5794   005766                     l4792:
  5795                           
  5796                           ;ff.c: 513:   *(int*)d = *(int*)s;
  5797   005766  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  5798   00576A  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  5799   00576E  6AF8               	clrf	tblptru,c
  5800   005770  0E05               	movlw	(high __ramtop+-1)
  5801   005772  64F7               	cpfsgt	tblptrh,c
  5802   005774  D007               	bra	u6337
  5803   005776  0009               	tblrd		*+
  5804   005778  CFF5 F007          	movff	tablat,??_mem_cpy
  5805   00577C  0009               	tblrd		*+
  5806   00577E  CFF5 F008          	movff	tablat,??_mem_cpy+1
  5807   005782  D008               	bra	u6330
  5808   005784                     u6337:
  5809   005784  CFF6 FFE9          	movff	tblptrl,fsr0l
  5810   005788  CFF7 FFEA          	movff	tblptrh,fsr0h
  5811   00578C  CFEE F007          	movff	postinc0,??_mem_cpy
  5812   005790  CFEE F008          	movff	postinc0,??_mem_cpy+1
  5813   005794                     u6330:
  5814   005794  C009  FFD9         	movff	mem_cpy@d,fsr2l
  5815   005798  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  5816   00579C  C007  FFDE         	movff	??_mem_cpy,postinc2
  5817   0057A0  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  5818   0057A4                     
  5819                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  5820   0057A4  0E02               	movlw	2
  5821   0057A6  2609               	addwf	mem_cpy@d^0,f,c
  5822   0057A8  0E00               	movlw	0
  5823   0057AA  220A               	addwfc	(mem_cpy@d+1)^0,f,c
  5824   0057AC  0E02               	movlw	2
  5825   0057AE  260B               	addwf	mem_cpy@s^0,f,c
  5826   0057B0  0E00               	movlw	0
  5827   0057B2  220C               	addwfc	(mem_cpy@s+1)^0,f,c
  5828   0057B4                     
  5829                           ;ff.c: 515:   cnt -= sizeof (int);
  5830   0057B4  0E02               	movlw	2
  5831   0057B6  5E05               	subwf	mem_cpy@cnt^0,f,c
  5832   0057B8  0E00               	movlw	0
  5833   0057BA  5A06               	subwfb	(mem_cpy@cnt+1)^0,f,c
  5834   0057BC                     l4800:
  5835                           
  5836                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  5837   0057BC  5006               	movf	(mem_cpy@cnt+1)^0,w,c
  5838   0057BE  E107               	bnz	u6341
  5839   0057C0  0E02               	movlw	2
  5840   0057C2  5C05               	subwf	mem_cpy@cnt^0,w,c
  5841   0057C4  B0D8               	btfsc	status,0,c
  5842   0057C6  EFE7  F02B         	goto	u6341
  5843   0057CA  EFE9  F02B         	goto	u6340
  5844   0057CE                     u6341:
  5845   0057CE  EFB3  F02B         	goto	l4792
  5846   0057D2                     u6340:
  5847   0057D2  EF04  F02C         	goto	l4808
  5848   0057D6                     l4802:
  5849                           
  5850                           ;ff.c: 519:   *d++ = *s++;
  5851   0057D6  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  5852   0057DA  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  5853   0057DE  6AF8               	clrf	tblptru,c
  5854   0057E0  C009  FFD9         	movff	mem_cpy@d,fsr2l
  5855   0057E4  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  5856   0057E8  0E05               	movlw	(high __ramtop+-1)
  5857   0057EA  64F7               	cpfsgt	tblptrh,c
  5858   0057EC  D003               	bra	u6357
  5859   0057EE  0008               	tblrd		*
  5860   0057F0  50F5               	movf	tablat,w,c
  5861   0057F2  D005               	bra	u6350
  5862   0057F4                     u6357:
  5863   0057F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5864   0057F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5865   0057FC  50EF               	movf	indf0,w,c
  5866   0057FE                     u6350:
  5867   0057FE  6EDF               	movwf	indf2,c
  5868   005800  4A0B               	infsnz	mem_cpy@s^0,f,c
  5869   005802  2A0C               	incf	(mem_cpy@s+1)^0,f,c
  5870   005804  4A09               	infsnz	mem_cpy@d^0,f,c
  5871   005806  2A0A               	incf	(mem_cpy@d+1)^0,f,c
  5872   005808                     l4808:
  5873                           
  5874                           ;ff.c: 518:  while (cnt--)
  5875   005808  0605               	decf	mem_cpy@cnt^0,f,c
  5876   00580A  A0D8               	btfss	status,0,c
  5877   00580C  0606               	decf	(mem_cpy@cnt+1)^0,f,c
  5878   00580E  2805               	incf	mem_cpy@cnt^0,w,c
  5879   005810  E106               	bnz	u6361
  5880   005812  2806               	incf	(mem_cpy@cnt+1)^0,w,c
  5881   005814  A4D8               	btfss	status,2,c
  5882   005816  EF0F  F02C         	goto	u6361
  5883   00581A  EF11  F02C         	goto	u6360
  5884   00581E                     u6361:
  5885   00581E  EFEB  F02B         	goto	l4802
  5886   005822                     u6360:
  5887   005822  0012               	return		;funcret
  5888   005824                     __end_of_mem_cpy:
  5889                           	callstack 0
  5890                           
  5891 ;; *************** function _dir_alloc *****************
  5892 ;; Defined at:
  5893 ;;		line 1199 in file "ff.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;  dp              1    0[BANK0 ] PTR struct .
  5896 ;;		 -> f_open@dj(21), 
  5897 ;;  nent            2    1[BANK0 ] unsigned short 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  n               2    6[BANK0 ] unsigned short 
  5900 ;;  res             1    8[BANK0 ] enum E95
  5901 ;; Return value:  Size  Location     Type
  5902 ;;                  1    wreg      enum E95
  5903 ;; Registers used:
  5904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5910 ;;      Params:         0       3       0       0       0       0       0
  5911 ;;      Locals:         0       3       0       0       0       0       0
  5912 ;;      Temps:          0       3       0       0       0       0       0
  5913 ;;      Totals:         0       9       0       0       0       0       0
  5914 ;;Total ram usage:        9 bytes
  5915 ;; Hardware stack levels used: 1
  5916 ;; Hardware stack levels required when called: 11
  5917 ;; This function calls:
  5918 ;;		_dir_next
  5919 ;;		_dir_sdi
  5920 ;;		_move_window
  5921 ;; This function is called by:
  5922 ;;		_dir_register
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           	psect	text12
  5927   005202                     __ptext12:
  5928                           	callstack 0
  5929   005202                     _dir_alloc:
  5930                           	callstack 17
  5931   005202                     
  5932                           ;ff.c: 1200:  DIR* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;ff
      +                          .c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  5933   005202  C080  F055         	movff	dir_alloc@dp,dir_sdi@dp
  5934   005206  0E00               	movlw	0
  5935   005208  6E57               	movwf	(dir_sdi@idx+1)^0,c
  5936   00520A  0E00               	movlw	0
  5937   00520C  6E56               	movwf	dir_sdi@idx^0,c
  5938   00520E  ECC6  F01F         	call	_dir_sdi	;wreg free
  5939   005212  0100               	movlb	0	; () banked
  5940   005214  6F88               	movwf	dir_alloc@res& (0+255),b
  5941   005216                     
  5942                           ; BSR set to: 0
  5943                           ;ff.c: 1209:  if (res == FR_OK) {
  5944   005216  5188               	movf	dir_alloc@res& (0+255),w,b
  5945   005218  A4D8               	btfss	status,2,c
  5946   00521A  EF11  F029         	goto	u6411
  5947   00521E  EF13  F029         	goto	u6410
  5948   005222                     u6411:
  5949   005222  EF8A  F029         	goto	l4868
  5950   005226                     u6410:
  5951   005226                     
  5952                           ; BSR set to: 0
  5953                           ;ff.c: 1210:   n = 0;
  5954   005226  0E00               	movlw	0
  5955   005228  6F87               	movwf	(dir_alloc@n+1)& (0+255),b
  5956   00522A  0E00               	movlw	0
  5957   00522C  6F86               	movwf	dir_alloc@n& (0+255),b
  5958   00522E                     l4848:
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  5962   00522E  5180               	movf	dir_alloc@dp& (0+255),w,b
  5963   005230  6ED9               	movwf	fsr2l,c
  5964   005232  6ADA               	clrf	fsr2h,c
  5965   005234  CFDE F030          	movff	postinc2,move_window@fs
  5966   005238  CFDD F031          	movff	postdec2,move_window@fs+1
  5967   00523C  5180               	movf	dir_alloc@dp& (0+255),w,b
  5968   00523E  6ED9               	movwf	fsr2l,c
  5969   005240  6ADA               	clrf	fsr2h,c
  5970   005242  0E0E               	movlw	14
  5971   005244  26D9               	addwf	fsr2l,f,c
  5972   005246  CFDE F032          	movff	postinc2,move_window@sector
  5973   00524A  CFDE F033          	movff	postinc2,move_window@sector+1
  5974   00524E  CFDE F034          	movff	postinc2,move_window@sector+2
  5975   005252  CFDE F035          	movff	postinc2,move_window@sector+3
  5976   005256  EC3C  F02D         	call	_move_window	;wreg free
  5977   00525A  0100               	movlb	0	; () banked
  5978   00525C  6F88               	movwf	dir_alloc@res& (0+255),b
  5979   00525E                     
  5980                           ; BSR set to: 0
  5981                           ;ff.c: 1213:    if (res != FR_OK) break;
  5982   00525E  5188               	movf	dir_alloc@res& (0+255),w,b
  5983   005260  B4D8               	btfsc	status,2,c
  5984   005262  EF35  F029         	goto	u6421
  5985   005266  EF37  F029         	goto	u6420
  5986   00526A                     u6421:
  5987   00526A  EF39  F029         	goto	l4854
  5988   00526E                     u6420:
  5989   00526E  EF8A  F029         	goto	l4868
  5990   005272                     l4854:
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  5994   005272  5180               	movf	dir_alloc@dp& (0+255),w,b
  5995   005274  6ED9               	movwf	fsr2l,c
  5996   005276  6ADA               	clrf	fsr2h,c
  5997   005278  0E12               	movlw	18
  5998   00527A  26D9               	addwf	fsr2l,f,c
  5999   00527C  CFDE F083          	movff	postinc2,??_dir_alloc
  6000   005280  CFDD F084          	movff	postdec2,??_dir_alloc+1
  6001   005284  C083  FFD9         	movff	??_dir_alloc,fsr2l
  6002   005288  C084  FFDA         	movff	??_dir_alloc+1,fsr2h
  6003   00528C  0EE5               	movlw	229
  6004   00528E  18DE               	xorwf	postinc2,w,c
  6005   005290  B4D8               	btfsc	status,2,c
  6006   005292  EF4D  F029         	goto	u6431
  6007   005296  EF4F  F029         	goto	u6430
  6008   00529A                     u6431:
  6009   00529A  EF64  F029         	goto	l4858
  6010   00529E                     u6430:
  6011   00529E                     
  6012                           ; BSR set to: 0
  6013   00529E  5180               	movf	dir_alloc@dp& (0+255),w,b
  6014   0052A0  6ED9               	movwf	fsr2l,c
  6015   0052A2  6ADA               	clrf	fsr2h,c
  6016   0052A4  0E12               	movlw	18
  6017   0052A6  26D9               	addwf	fsr2l,f,c
  6018   0052A8  CFDE F083          	movff	postinc2,??_dir_alloc
  6019   0052AC  CFDD F084          	movff	postdec2,??_dir_alloc+1
  6020   0052B0  C083  FFD9         	movff	??_dir_alloc,fsr2l
  6021   0052B4  C084  FFDA         	movff	??_dir_alloc+1,fsr2h
  6022   0052B8  50DF               	movf	indf2,w,c
  6023   0052BA  A4D8               	btfss	status,2,c
  6024   0052BC  EF62  F029         	goto	u6441
  6025   0052C0  EF64  F029         	goto	u6440
  6026   0052C4                     u6441:
  6027   0052C4  EF74  F029         	goto	l4862
  6028   0052C8                     u6440:
  6029   0052C8                     l4858:
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;ff.c: 1215:     if (++n == nent) break;
  6033   0052C8  4B86               	infsnz	dir_alloc@n& (0+255),f,b
  6034   0052CA  2B87               	incf	(dir_alloc@n+1)& (0+255),f,b
  6035   0052CC  5181               	movf	dir_alloc@nent& (0+255),w,b
  6036   0052CE  1986               	xorwf	dir_alloc@n& (0+255),w,b
  6037   0052D0  E107               	bnz	u6451
  6038   0052D2  5182               	movf	(dir_alloc@nent+1)& (0+255),w,b
  6039   0052D4  1987               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  6040   0052D6  A4D8               	btfss	status,2,c
  6041   0052D8  EF70  F029         	goto	u6451
  6042   0052DC  EF72  F029         	goto	u6450
  6043   0052E0                     u6451:
  6044   0052E0  EF78  F029         	goto	l4864
  6045   0052E4                     u6450:
  6046   0052E4  EF8A  F029         	goto	l4868
  6047   0052E8                     l4862:
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;ff.c: 1217:     n = 0;
  6051   0052E8  0E00               	movlw	0
  6052   0052EA  6F87               	movwf	(dir_alloc@n+1)& (0+255),b
  6053   0052EC  0E00               	movlw	0
  6054   0052EE  6F86               	movwf	dir_alloc@n& (0+255),b
  6055   0052F0                     l4864:
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;ff.c: 1219:    res = dir_next(dp, 1);
  6059   0052F0  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  6060   0052F4  0E00               	movlw	0
  6061   0052F6  6E6F               	movwf	(dir_next@stretch+1)^0,c
  6062   0052F8  0E01               	movlw	1
  6063   0052FA  6E6E               	movwf	dir_next@stretch^0,c
  6064   0052FC  ECCA  F015         	call	_dir_next	;wreg free
  6065   005300  0100               	movlb	0	; () banked
  6066   005302  6F88               	movwf	dir_alloc@res& (0+255),b
  6067   005304                     
  6068                           ; BSR set to: 0
  6069                           ;ff.c: 1220:   } while (res == FR_OK);
  6070   005304  5188               	movf	dir_alloc@res& (0+255),w,b
  6071   005306  B4D8               	btfsc	status,2,c
  6072   005308  EF88  F029         	goto	u6461
  6073   00530C  EF8A  F029         	goto	u6460
  6074   005310                     u6461:
  6075   005310  EF17  F029         	goto	l4848
  6076   005314                     u6460:
  6077   005314                     l4868:
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  6081   005314  0E04               	movlw	4
  6082   005316  1988               	xorwf	dir_alloc@res& (0+255),w,b
  6083   005318  A4D8               	btfss	status,2,c
  6084   00531A  EF91  F029         	goto	u6471
  6085   00531E  EF93  F029         	goto	u6470
  6086   005322                     u6471:
  6087   005322  EF95  F029         	goto	l474
  6088   005326                     u6470:
  6089   005326                     
  6090                           ; BSR set to: 0
  6091   005326  0E07               	movlw	7
  6092   005328  6F88               	movwf	dir_alloc@res& (0+255),b
  6093   00532A                     l474:
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;ff.c: 1223:  return res;
  6097   00532A  5188               	movf	dir_alloc@res& (0+255),w,b
  6098   00532C                     
  6099                           ; BSR set to: 0
  6100   00532C  0012               	return		;funcret
  6101   00532E                     __end_of_dir_alloc:
  6102                           	callstack 0
  6103                           
  6104 ;; *************** function _dir_sdi *****************
  6105 ;; Defined at:
  6106 ;;		line 1080 in file "ff.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  dp              1   84[COMRAM] PTR struct .
  6109 ;;		 -> f_open@dj(21), 
  6110 ;;  idx             2   85[COMRAM] unsigned short 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  clst            4  100[COMRAM] unsigned long 
  6113 ;;  sect            4   96[COMRAM] unsigned long 
  6114 ;;  ic              2   94[COMRAM] unsigned short 
  6115 ;; Return value:  Size  Location     Type
  6116 ;;                  1    wreg      enum E95
  6117 ;; Registers used:
  6118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6119 ;; Tracked objects:
  6120 ;;		On entry : 0/0
  6121 ;;		On exit  : 0/0
  6122 ;;		Unchanged: 0/0
  6123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6124 ;;      Params:         3       0       0       0       0       0       0
  6125 ;;      Locals:        10       0       0       0       0       0       0
  6126 ;;      Temps:          7       0       0       0       0       0       0
  6127 ;;      Totals:        20       0       0       0       0       0       0
  6128 ;;Total ram usage:       20 bytes
  6129 ;; Hardware stack levels used: 1
  6130 ;; Hardware stack levels required when called: 9
  6131 ;; This function calls:
  6132 ;;		_clust2sect
  6133 ;;		_get_fat
  6134 ;; This function is called by:
  6135 ;;		_dir_alloc
  6136 ;;		_dir_find
  6137 ;;		_follow_path
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           	psect	text13
  6142   003F8C                     __ptext13:
  6143                           	callstack 0
  6144   003F8C                     _dir_sdi:
  6145                           	callstack 19
  6146   003F8C                     
  6147                           ;ff.c: 1081:  DIR* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sect
      +                          ;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  6148   003F8C  5055               	movf	dir_sdi@dp^0,w,c
  6149   003F8E  6ED9               	movwf	fsr2l,c
  6150   003F90  6ADA               	clrf	fsr2h,c
  6151   003F92  0E04               	movlw	4
  6152   003F94  26D9               	addwf	fsr2l,f,c
  6153   003F96  C056  FFDE         	movff	dir_sdi@idx,postinc2
  6154   003F9A  C057  FFDD         	movff	dir_sdi@idx+1,postdec2
  6155                           
  6156                           ;ff.c: 1090:  clst = dp->sclust;
  6157   003F9E  5055               	movf	dir_sdi@dp^0,w,c
  6158   003FA0  6ED9               	movwf	fsr2l,c
  6159   003FA2  6ADA               	clrf	fsr2h,c
  6160   003FA4  0E06               	movlw	6
  6161   003FA6  26D9               	addwf	fsr2l,f,c
  6162   003FA8  CFDE F065          	movff	postinc2,dir_sdi@clst
  6163   003FAC  CFDE F066          	movff	postinc2,dir_sdi@clst+1
  6164   003FB0  CFDE F067          	movff	postinc2,dir_sdi@clst+2
  6165   003FB4  CFDE F068          	movff	postinc2,dir_sdi@clst+3
  6166   003FB8                     
  6167                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  6168   003FB8  0465               	decf	dir_sdi@clst^0,w,c
  6169   003FBA  1066               	iorwf	(dir_sdi@clst+1)^0,w,c
  6170   003FBC  1067               	iorwf	(dir_sdi@clst+2)^0,w,c
  6171   003FBE  1068               	iorwf	(dir_sdi@clst+3)^0,w,c
  6172   003FC0  B4D8               	btfsc	status,2,c
  6173   003FC2  EFE5  F01F         	goto	u5821
  6174   003FC6  EFE7  F01F         	goto	u5820
  6175   003FCA                     u5821:
  6176   003FCA  EFFF  F01F         	goto	l4528
  6177   003FCE                     u5820:
  6178   003FCE  5055               	movf	dir_sdi@dp^0,w,c
  6179   003FD0  6ED9               	movwf	fsr2l,c
  6180   003FD2  6ADA               	clrf	fsr2h,c
  6181   003FD4  EE10 F012          	lfsr	1,18
  6182   003FD8  50DE               	movf	postinc2,w,c
  6183   003FDA  26E1               	addwf	fsr1l,f,c
  6184   003FDC  50DD               	movf	postdec2,w,c
  6185   003FDE  22E2               	addwfc	fsr1h,f,c
  6186   003FE0  50E6               	movf	postinc1,w,c
  6187   003FE2  5C65               	subwf	dir_sdi@clst^0,w,c
  6188   003FE4  50E6               	movf	postinc1,w,c
  6189   003FE6  5866               	subwfb	(dir_sdi@clst+1)^0,w,c
  6190   003FE8  50E6               	movf	postinc1,w,c
  6191   003FEA  5867               	subwfb	(dir_sdi@clst+2)^0,w,c
  6192   003FEC  50E6               	movf	postinc1,w,c
  6193   003FEE  5868               	subwfb	(dir_sdi@clst+3)^0,w,c
  6194   003FF0  A0D8               	btfss	status,0,c
  6195   003FF2  EFFD  F01F         	goto	u5831
  6196   003FF6  EFFF  F01F         	goto	u5830
  6197   003FFA                     u5831:
  6198   003FFA  EF02  F020         	goto	l4532
  6199   003FFE                     u5830:
  6200   003FFE                     l4528:
  6201                           
  6202                           ;ff.c: 1092:   return FR_INT_ERR;
  6203   003FFE  0E02               	movlw	2
  6204   004000  EF59  F021         	goto	l427
  6205   004004                     l4532:
  6206                           
  6207                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  6208   004004  5065               	movf	dir_sdi@clst^0,w,c
  6209   004006  1066               	iorwf	(dir_sdi@clst+1)^0,w,c
  6210   004008  1067               	iorwf	(dir_sdi@clst+2)^0,w,c
  6211   00400A  1068               	iorwf	(dir_sdi@clst+3)^0,w,c
  6212   00400C  A4D8               	btfss	status,2,c
  6213   00400E  EF0B  F020         	goto	u5841
  6214   004012  EF0D  F020         	goto	u5840
  6215   004016                     u5841:
  6216   004016  EF32  F020         	goto	l4538
  6217   00401A                     u5840:
  6218   00401A  5055               	movf	dir_sdi@dp^0,w,c
  6219   00401C  6ED9               	movwf	fsr2l,c
  6220   00401E  6ADA               	clrf	fsr2h,c
  6221   004020  CFDE F058          	movff	postinc2,??_dir_sdi
  6222   004024  CFDD F059          	movff	postdec2,??_dir_sdi+1
  6223   004028  C058  FFD9         	movff	??_dir_sdi,fsr2l
  6224   00402C  C059  FFDA         	movff	??_dir_sdi+1,fsr2h
  6225   004030  0E03               	movlw	3
  6226   004032  18DE               	xorwf	postinc2,w,c
  6227   004034  A4D8               	btfss	status,2,c
  6228   004036  EF1F  F020         	goto	u5851
  6229   00403A  EF21  F020         	goto	u5850
  6230   00403E                     u5851:
  6231   00403E  EF32  F020         	goto	l4538
  6232   004042                     u5850:
  6233   004042                     
  6234                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  6235   004042  5055               	movf	dir_sdi@dp^0,w,c
  6236   004044  6ED9               	movwf	fsr2l,c
  6237   004046  6ADA               	clrf	fsr2h,c
  6238   004048  EE10 F022          	lfsr	1,34
  6239   00404C  50DE               	movf	postinc2,w,c
  6240   00404E  26E1               	addwf	fsr1l,f,c
  6241   004050  50DD               	movf	postdec2,w,c
  6242   004052  22E2               	addwfc	fsr1h,f,c
  6243   004054  CFE6 F065          	movff	postinc1,dir_sdi@clst
  6244   004058  CFE6 F066          	movff	postinc1,dir_sdi@clst+1
  6245   00405C  CFE6 F067          	movff	postinc1,dir_sdi@clst+2
  6246   004060  CFE6 F068          	movff	postinc1,dir_sdi@clst+3
  6247   004064                     l4538:
  6248                           
  6249                           ;ff.c: 1096:  if (clst == 0) {
  6250   004064  5065               	movf	dir_sdi@clst^0,w,c
  6251   004066  1066               	iorwf	(dir_sdi@clst+1)^0,w,c
  6252   004068  1067               	iorwf	(dir_sdi@clst+2)^0,w,c
  6253   00406A  1068               	iorwf	(dir_sdi@clst+3)^0,w,c
  6254   00406C  A4D8               	btfss	status,2,c
  6255   00406E  EF3B  F020         	goto	u5861
  6256   004072  EF3D  F020         	goto	u5860
  6257   004076                     u5861:
  6258   004076  EF66  F020         	goto	l4548
  6259   00407A                     u5860:
  6260   00407A                     
  6261                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  6262   00407A  5055               	movf	dir_sdi@dp^0,w,c
  6263   00407C  6ED9               	movwf	fsr2l,c
  6264   00407E  6ADA               	clrf	fsr2h,c
  6265   004080  EE10 F008          	lfsr	1,8
  6266   004084  50DE               	movf	postinc2,w,c
  6267   004086  26E1               	addwf	fsr1l,f,c
  6268   004088  50DD               	movf	postdec2,w,c
  6269   00408A  22E2               	addwfc	fsr1h,f,c
  6270   00408C  50E6               	movf	postinc1,w,c
  6271   00408E  5C56               	subwf	dir_sdi@idx^0,w,c
  6272   004090  50E6               	movf	postinc1,w,c
  6273   004092  5857               	subwfb	(dir_sdi@idx+1)^0,w,c
  6274   004094  A0D8               	btfss	status,0,c
  6275   004096  EF4F  F020         	goto	u5871
  6276   00409A  EF51  F020         	goto	u5870
  6277   00409E                     u5871:
  6278   00409E  EF53  F020         	goto	l4546
  6279   0040A2                     u5870:
  6280   0040A2  EFFF  F01F         	goto	l4528
  6281   0040A6                     l4546:
  6282                           
  6283                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  6284   0040A6  5055               	movf	dir_sdi@dp^0,w,c
  6285   0040A8  6ED9               	movwf	fsr2l,c
  6286   0040AA  6ADA               	clrf	fsr2h,c
  6287   0040AC  EE10 F022          	lfsr	1,34
  6288   0040B0  50DE               	movf	postinc2,w,c
  6289   0040B2  26E1               	addwf	fsr1l,f,c
  6290   0040B4  50DD               	movf	postdec2,w,c
  6291   0040B6  22E2               	addwfc	fsr1h,f,c
  6292   0040B8  CFE6 F061          	movff	postinc1,dir_sdi@sect
  6293   0040BC  CFE6 F062          	movff	postinc1,dir_sdi@sect+1
  6294   0040C0  CFE6 F063          	movff	postinc1,dir_sdi@sect+2
  6295   0040C4  CFE6 F064          	movff	postinc1,dir_sdi@sect+3
  6296                           
  6297                           ;ff.c: 1100:  }
  6298   0040C8  EFF2  F020         	goto	l4570
  6299   0040CC                     l4548:
  6300                           
  6301                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  6302   0040CC  5055               	movf	dir_sdi@dp^0,w,c
  6303   0040CE  6ED9               	movwf	fsr2l,c
  6304   0040D0  6ADA               	clrf	fsr2h,c
  6305   0040D2  EE10 F002          	lfsr	1,2
  6306   0040D6  50DE               	movf	postinc2,w,c
  6307   0040D8  26E1               	addwf	fsr1l,f,c
  6308   0040DA  50DD               	movf	postdec2,w,c
  6309   0040DC  22E2               	addwfc	fsr1h,f,c
  6310   0040DE  50E7               	movf	indf1,w,c
  6311   0040E0  6E58               	movwf	??_dir_sdi^0,c
  6312   0040E2  5058               	movf	??_dir_sdi^0,w,c
  6313   0040E4  0D10               	mullw	16
  6314   0040E6  CFF3 F05F          	movff	prodl,dir_sdi@ic
  6315   0040EA  CFF4 F060          	movff	prodh,dir_sdi@ic+1
  6316                           
  6317                           ;ff.c: 1103:   while (idx >= ic) {
  6318   0040EE  EFCE  F020         	goto	l432
  6319   0040F2                     l4550:
  6320                           
  6321                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  6322   0040F2  5055               	movf	dir_sdi@dp^0,w,c
  6323   0040F4  6ED9               	movwf	fsr2l,c
  6324   0040F6  6ADA               	clrf	fsr2h,c
  6325   0040F8  CFDE F03B          	movff	postinc2,get_fat@fs
  6326   0040FC  CFDD F03C          	movff	postdec2,get_fat@fs+1
  6327   004100  C065  F03D         	movff	dir_sdi@clst,get_fat@clst
  6328   004104  C066  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  6329   004108  C067  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  6330   00410C  C068  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  6331   004110  EC38  F01A         	call	_get_fat	;wreg free
  6332   004114  C03B  F065         	movff	?_get_fat,dir_sdi@clst
  6333   004118  C03C  F066         	movff	?_get_fat+1,dir_sdi@clst+1
  6334   00411C  C03D  F067         	movff	?_get_fat+2,dir_sdi@clst+2
  6335   004120  C03E  F068         	movff	?_get_fat+3,dir_sdi@clst+3
  6336   004124                     
  6337                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6338   004124  2865               	incf	dir_sdi@clst^0,w,c
  6339   004126  E10A               	bnz	u5881
  6340   004128  2866               	incf	(dir_sdi@clst+1)^0,w,c
  6341   00412A  E108               	bnz	u5881
  6342   00412C  2867               	incf	(dir_sdi@clst+2)^0,w,c
  6343   00412E  E106               	bnz	u5881
  6344   004130  2868               	incf	(dir_sdi@clst+3)^0,w,c
  6345   004132  A4D8               	btfss	status,2,c
  6346   004134  EF9E  F020         	goto	u5881
  6347   004138  EFA0  F020         	goto	u5880
  6348   00413C                     u5881:
  6349   00413C  EFA3  F020         	goto	l4558
  6350   004140                     u5880:
  6351   004140  0E01               	movlw	1
  6352   004142  EF59  F021         	goto	l427
  6353   004146                     l4558:
  6354                           
  6355                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  6356   004146  5068               	movf	(dir_sdi@clst+3)^0,w,c
  6357   004148  1067               	iorwf	(dir_sdi@clst+2)^0,w,c
  6358   00414A  1066               	iorwf	(dir_sdi@clst+1)^0,w,c
  6359   00414C  E109               	bnz	u5890
  6360   00414E  0E02               	movlw	2
  6361   004150  5C65               	subwf	dir_sdi@clst^0,w,c
  6362   004152  A0D8               	btfss	status,0,c
  6363   004154  EFAE  F020         	goto	u5891
  6364   004158  EFB0  F020         	goto	u5890
  6365   00415C                     u5891:
  6366   00415C  EFFF  F01F         	goto	l4528
  6367   004160                     u5890:
  6368   004160  5055               	movf	dir_sdi@dp^0,w,c
  6369   004162  6ED9               	movwf	fsr2l,c
  6370   004164  6ADA               	clrf	fsr2h,c
  6371   004166  EE10 F012          	lfsr	1,18
  6372   00416A  50DE               	movf	postinc2,w,c
  6373   00416C  26E1               	addwf	fsr1l,f,c
  6374   00416E  50DD               	movf	postdec2,w,c
  6375   004170  22E2               	addwfc	fsr1h,f,c
  6376   004172  50E6               	movf	postinc1,w,c
  6377   004174  5C65               	subwf	dir_sdi@clst^0,w,c
  6378   004176  50E6               	movf	postinc1,w,c
  6379   004178  5866               	subwfb	(dir_sdi@clst+1)^0,w,c
  6380   00417A  50E6               	movf	postinc1,w,c
  6381   00417C  5867               	subwfb	(dir_sdi@clst+2)^0,w,c
  6382   00417E  50E6               	movf	postinc1,w,c
  6383   004180  5868               	subwfb	(dir_sdi@clst+3)^0,w,c
  6384   004182  A0D8               	btfss	status,0,c
  6385   004184  EFC6  F020         	goto	u5901
  6386   004188  EFC8  F020         	goto	u5900
  6387   00418C                     u5901:
  6388   00418C  EFCA  F020         	goto	l4566
  6389   004190                     u5900:
  6390   004190  EFFF  F01F         	goto	l4528
  6391   004194                     l4566:
  6392                           
  6393                           ;ff.c: 1108:    idx -= ic;
  6394   004194  505F               	movf	dir_sdi@ic^0,w,c
  6395   004196  5E56               	subwf	dir_sdi@idx^0,f,c
  6396   004198  5060               	movf	(dir_sdi@ic+1)^0,w,c
  6397   00419A  5A57               	subwfb	(dir_sdi@idx+1)^0,f,c
  6398   00419C                     l432:
  6399                           
  6400                           ;ff.c: 1103:   while (idx >= ic) {
  6401   00419C  505F               	movf	dir_sdi@ic^0,w,c
  6402   00419E  5C56               	subwf	dir_sdi@idx^0,w,c
  6403   0041A0  5060               	movf	(dir_sdi@ic+1)^0,w,c
  6404   0041A2  5857               	subwfb	(dir_sdi@idx+1)^0,w,c
  6405   0041A4  B0D8               	btfsc	status,0,c
  6406   0041A6  EFD7  F020         	goto	u5911
  6407   0041AA  EFD9  F020         	goto	u5910
  6408   0041AE                     u5911:
  6409   0041AE  EF79  F020         	goto	l4550
  6410   0041B2                     u5910:
  6411   0041B2                     
  6412                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  6413   0041B2  5055               	movf	dir_sdi@dp^0,w,c
  6414   0041B4  6ED9               	movwf	fsr2l,c
  6415   0041B6  6ADA               	clrf	fsr2h,c
  6416   0041B8  CFDE F00D          	movff	postinc2,clust2sect@fs
  6417   0041BC  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6418   0041C0  C065  F00F         	movff	dir_sdi@clst,clust2sect@clst
  6419   0041C4  C066  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  6420   0041C8  C067  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  6421   0041CC  C068  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  6422   0041D0  ECD9  F02C         	call	_clust2sect	;wreg free
  6423   0041D4  C00D  F061         	movff	?_clust2sect,dir_sdi@sect
  6424   0041D8  C00E  F062         	movff	?_clust2sect+1,dir_sdi@sect+1
  6425   0041DC  C00F  F063         	movff	?_clust2sect+2,dir_sdi@sect+2
  6426   0041E0  C010  F064         	movff	?_clust2sect+3,dir_sdi@sect+3
  6427   0041E4                     l4570:
  6428                           
  6429                           ;ff.c: 1112:  dp->clust = clst;
  6430   0041E4  5055               	movf	dir_sdi@dp^0,w,c
  6431   0041E6  6ED9               	movwf	fsr2l,c
  6432   0041E8  6ADA               	clrf	fsr2h,c
  6433   0041EA  0E0A               	movlw	10
  6434   0041EC  26D9               	addwf	fsr2l,f,c
  6435   0041EE  C065  FFDE         	movff	dir_sdi@clst,postinc2
  6436   0041F2  C066  FFDE         	movff	dir_sdi@clst+1,postinc2
  6437   0041F6  C067  FFDE         	movff	dir_sdi@clst+2,postinc2
  6438   0041FA  C068  FFDE         	movff	dir_sdi@clst+3,postinc2
  6439   0041FE                     
  6440                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  6441   0041FE  5061               	movf	dir_sdi@sect^0,w,c
  6442   004200  1062               	iorwf	(dir_sdi@sect+1)^0,w,c
  6443   004202  1063               	iorwf	(dir_sdi@sect+2)^0,w,c
  6444   004204  1064               	iorwf	(dir_sdi@sect+3)^0,w,c
  6445   004206  A4D8               	btfss	status,2,c
  6446   004208  EF08  F021         	goto	u5921
  6447   00420C  EF0A  F021         	goto	u5920
  6448   004210                     u5921:
  6449   004210  EF0C  F021         	goto	l4578
  6450   004214                     u5920:
  6451   004214  EFFF  F01F         	goto	l4528
  6452   004218                     l4578:
  6453                           
  6454                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  6455   004218  C056  F058         	movff	dir_sdi@idx,??_dir_sdi
  6456   00421C  C057  F059         	movff	dir_sdi@idx+1,??_dir_sdi+1
  6457   004220  0E04               	movlw	4
  6458   004222  6E5A               	movwf	(??_dir_sdi+2)^0,c
  6459   004224                     u5935:
  6460   004224  90D8               	bcf	status,0,c
  6461   004226  3259               	rrcf	(??_dir_sdi+1)^0,f,c
  6462   004228  3258               	rrcf	??_dir_sdi^0,f,c
  6463   00422A  2E5A               	decfsz	(??_dir_sdi+2)^0,f,c
  6464   00422C  EF12  F021         	goto	u5935
  6465   004230  5058               	movf	??_dir_sdi^0,w,c
  6466   004232  2461               	addwf	dir_sdi@sect^0,w,c
  6467   004234  6E5B               	movwf	(??_dir_sdi+3)^0,c
  6468   004236  5059               	movf	(??_dir_sdi+1)^0,w,c
  6469   004238  2062               	addwfc	(dir_sdi@sect+1)^0,w,c
  6470   00423A  6E5C               	movwf	(??_dir_sdi+4)^0,c
  6471   00423C  0E00               	movlw	0
  6472   00423E  2063               	addwfc	(dir_sdi@sect+2)^0,w,c
  6473   004240  6E5D               	movwf	(??_dir_sdi+5)^0,c
  6474   004242  0E00               	movlw	0
  6475   004244  2064               	addwfc	(dir_sdi@sect+3)^0,w,c
  6476   004246  6E5E               	movwf	(??_dir_sdi+6)^0,c
  6477   004248  5055               	movf	dir_sdi@dp^0,w,c
  6478   00424A  6ED9               	movwf	fsr2l,c
  6479   00424C  6ADA               	clrf	fsr2h,c
  6480   00424E  0E0E               	movlw	14
  6481   004250  26D9               	addwf	fsr2l,f,c
  6482   004252  C05B  FFDE         	movff	??_dir_sdi+3,postinc2
  6483   004256  C05C  FFDE         	movff	??_dir_sdi+4,postinc2
  6484   00425A  C05D  FFDE         	movff	??_dir_sdi+5,postinc2
  6485   00425E  C05E  FFDE         	movff	??_dir_sdi+6,postinc2
  6486                           
  6487                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  6488   004262  0E0F               	movlw	15
  6489   004264  1456               	andwf	dir_sdi@idx^0,w,c
  6490   004266  6E58               	movwf	??_dir_sdi^0,c
  6491   004268  0E00               	movlw	0
  6492   00426A  1457               	andwf	(dir_sdi@idx+1)^0,w,c
  6493   00426C  6E59               	movwf	(??_dir_sdi+1)^0,c
  6494   00426E  0E05               	movlw	5
  6495   004270                     u5945:
  6496   004270  90D8               	bcf	status,0,c
  6497   004272  3658               	rlcf	??_dir_sdi^0,f,c
  6498   004274  3659               	rlcf	(??_dir_sdi+1)^0,f,c
  6499   004276  2EE8               	decfsz	wreg,f,c
  6500   004278  EF38  F021         	goto	u5945
  6501   00427C  5055               	movf	dir_sdi@dp^0,w,c
  6502   00427E  6ED9               	movwf	fsr2l,c
  6503   004280  6ADA               	clrf	fsr2h,c
  6504   004282  CFDE F05A          	movff	postinc2,??_dir_sdi+2
  6505   004286  CFDD F05B          	movff	postdec2,??_dir_sdi+3
  6506   00428A  5058               	movf	??_dir_sdi^0,w,c
  6507   00428C  245A               	addwf	(??_dir_sdi+2)^0,w,c
  6508   00428E  6E5C               	movwf	(??_dir_sdi+4)^0,c
  6509   004290  5059               	movf	(??_dir_sdi+1)^0,w,c
  6510   004292  205B               	addwfc	(??_dir_sdi+3)^0,w,c
  6511   004294  6E5D               	movwf	(??_dir_sdi+5)^0,c
  6512   004296  0E2E               	movlw	46
  6513   004298  265C               	addwf	(??_dir_sdi+4)^0,f,c
  6514   00429A  0E00               	movlw	0
  6515   00429C  225D               	addwfc	(??_dir_sdi+5)^0,f,c
  6516   00429E  5055               	movf	dir_sdi@dp^0,w,c
  6517   0042A0  6ED9               	movwf	fsr2l,c
  6518   0042A2  6ADA               	clrf	fsr2h,c
  6519   0042A4  0E12               	movlw	18
  6520   0042A6  26D9               	addwf	fsr2l,f,c
  6521   0042A8  C05C  FFDE         	movff	??_dir_sdi+4,postinc2
  6522   0042AC  C05D  FFDD         	movff	??_dir_sdi+5,postdec2
  6523   0042B0                     
  6524                           ;ff.c: 1117:  return FR_OK;
  6525   0042B0  0E00               	movlw	0
  6526   0042B2                     l427:
  6527   0042B2  0012               	return		;funcret
  6528   0042B4                     __end_of_dir_sdi:
  6529                           	callstack 0
  6530                           
  6531 ;; *************** function _dir_next *****************
  6532 ;; Defined at:
  6533 ;;		line 1128 in file "ff.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  dp              1  108[COMRAM] PTR struct .
  6536 ;;		 -> f_open@dj(21), 
  6537 ;;  stretch         2  109[COMRAM] int 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;  clst            4  123[COMRAM] unsigned long 
  6540 ;;  i               2  121[COMRAM] unsigned short 
  6541 ;;  c               2  119[COMRAM] unsigned short 
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  1    wreg      enum E95
  6544 ;; Registers used:
  6545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6551 ;;      Params:         3       0       0       0       0       0       0
  6552 ;;      Locals:         8       0       0       0       0       0       0
  6553 ;;      Temps:          8       0       0       0       0       0       0
  6554 ;;      Totals:        19       0       0       0       0       0       0
  6555 ;;Total ram usage:       19 bytes
  6556 ;; Hardware stack levels used: 1
  6557 ;; Hardware stack levels required when called: 10
  6558 ;; This function calls:
  6559 ;;		_clust2sect
  6560 ;;		_create_chain
  6561 ;;		_get_fat
  6562 ;;		_mem_set
  6563 ;;		_sync_window
  6564 ;; This function is called by:
  6565 ;;		_dir_alloc
  6566 ;;		_dir_find
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           	psect	text14
  6571   002B94                     __ptext14:
  6572                           	callstack 0
  6573   002B94                     _dir_next:
  6574                           	callstack 17
  6575   002B94                     
  6576                           ;ff.c: 1129:  DIR* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;f
      +                          f.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  6577   002B94  506D               	movf	dir_next@dp^0,w,c
  6578   002B96  6ED9               	movwf	fsr2l,c
  6579   002B98  6ADA               	clrf	fsr2h,c
  6580   002B9A  0E04               	movlw	4
  6581   002B9C  26D9               	addwf	fsr2l,f,c
  6582   002B9E  CFDE F070          	movff	postinc2,??_dir_next
  6583   002BA2  CFDD F071          	movff	postdec2,??_dir_next+1
  6584   002BA6  0E01               	movlw	1
  6585   002BA8  2470               	addwf	??_dir_next^0,w,c
  6586   002BAA  6E7A               	movwf	dir_next@i^0,c
  6587   002BAC  0E00               	movlw	0
  6588   002BAE  2071               	addwfc	(??_dir_next+1)^0,w,c
  6589   002BB0  6E7B               	movwf	(dir_next@i+1)^0,c
  6590   002BB2                     
  6591                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  6592   002BB2  507A               	movf	dir_next@i^0,w,c
  6593   002BB4  107B               	iorwf	(dir_next@i+1)^0,w,c
  6594   002BB6  B4D8               	btfsc	status,2,c
  6595   002BB8  EFE0  F015         	goto	u5951
  6596   002BBC  EFE2  F015         	goto	u5950
  6597   002BC0                     u5951:
  6598   002BC0  EFF2  F015         	goto	l4590
  6599   002BC4                     u5950:
  6600   002BC4  506D               	movf	dir_next@dp^0,w,c
  6601   002BC6  6ED9               	movwf	fsr2l,c
  6602   002BC8  6ADA               	clrf	fsr2h,c
  6603   002BCA  0E0E               	movlw	14
  6604   002BCC  26D9               	addwf	fsr2l,f,c
  6605   002BCE  50DE               	movf	postinc2,w,c
  6606   002BD0  10DE               	iorwf	postinc2,w,c
  6607   002BD2  10DE               	iorwf	postinc2,w,c
  6608   002BD4  10DE               	iorwf	postinc2,w,c
  6609   002BD6  A4D8               	btfss	status,2,c
  6610   002BD8  EFF0  F015         	goto	u5961
  6611   002BDC  EFF2  F015         	goto	u5960
  6612   002BE0                     u5961:
  6613   002BE0  EFF5  F015         	goto	l4594
  6614   002BE4                     u5960:
  6615   002BE4                     l4590:
  6616                           
  6617                           ;ff.c: 1142:   return FR_NO_FILE;
  6618   002BE4  0E04               	movlw	4
  6619   002BE6  EF0E  F018         	goto	l445
  6620   002BEA                     l4594:
  6621                           
  6622                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  6623   002BEA  0E0F               	movlw	15
  6624   002BEC  147A               	andwf	dir_next@i^0,w,c
  6625   002BEE  6E70               	movwf	??_dir_next^0,c
  6626   002BF0  0E00               	movlw	0
  6627   002BF2  147B               	andwf	(dir_next@i+1)^0,w,c
  6628   002BF4  6E71               	movwf	(??_dir_next+1)^0,c
  6629   002BF6  5070               	movf	??_dir_next^0,w,c
  6630   002BF8  1071               	iorwf	(??_dir_next+1)^0,w,c
  6631   002BFA  A4D8               	btfss	status,2,c
  6632   002BFC  EF02  F016         	goto	u5971
  6633   002C00  EF04  F016         	goto	u5970
  6634   002C04                     u5971:
  6635   002C04  EFDD  F017         	goto	l4680
  6636   002C08                     u5970:
  6637   002C08                     
  6638                           ;ff.c: 1145:   dp->sect++;
  6639   002C08  506D               	movf	dir_next@dp^0,w,c
  6640   002C0A  6ED9               	movwf	fsr2l,c
  6641   002C0C  6ADA               	clrf	fsr2h,c
  6642   002C0E  0E0E               	movlw	14
  6643   002C10  26D9               	addwf	fsr2l,f,c
  6644   002C12  2ADE               	incf	postinc2,f,c
  6645   002C14  0E00               	movlw	0
  6646   002C16  22DE               	addwfc	postinc2,f,c
  6647   002C18  22DE               	addwfc	postinc2,f,c
  6648   002C1A  22DE               	addwfc	postinc2,f,c
  6649                           
  6650                           ;ff.c: 1147:   if (!dp->clust) {
  6651   002C1C  506D               	movf	dir_next@dp^0,w,c
  6652   002C1E  6ED9               	movwf	fsr2l,c
  6653   002C20  6ADA               	clrf	fsr2h,c
  6654   002C22  0E0A               	movlw	10
  6655   002C24  26D9               	addwf	fsr2l,f,c
  6656   002C26  50DE               	movf	postinc2,w,c
  6657   002C28  10DE               	iorwf	postinc2,w,c
  6658   002C2A  10DE               	iorwf	postinc2,w,c
  6659   002C2C  10DE               	iorwf	postinc2,w,c
  6660   002C2E  A4D8               	btfss	status,2,c
  6661   002C30  EF1C  F016         	goto	u5981
  6662   002C34  EF1E  F016         	goto	u5980
  6663   002C38                     u5981:
  6664   002C38  EF34  F016         	goto	l4604
  6665   002C3C                     u5980:
  6666   002C3C                     
  6667                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  6668   002C3C  506D               	movf	dir_next@dp^0,w,c
  6669   002C3E  6ED9               	movwf	fsr2l,c
  6670   002C40  6ADA               	clrf	fsr2h,c
  6671   002C42  EE10 F008          	lfsr	1,8
  6672   002C46  50DE               	movf	postinc2,w,c
  6673   002C48  26E1               	addwf	fsr1l,f,c
  6674   002C4A  50DD               	movf	postdec2,w,c
  6675   002C4C  22E2               	addwfc	fsr1h,f,c
  6676   002C4E  50E6               	movf	postinc1,w,c
  6677   002C50  5C7A               	subwf	dir_next@i^0,w,c
  6678   002C52  50E6               	movf	postinc1,w,c
  6679   002C54  587B               	subwfb	(dir_next@i+1)^0,w,c
  6680   002C56  A0D8               	btfss	status,0,c
  6681   002C58  EF30  F016         	goto	u5991
  6682   002C5C  EF32  F016         	goto	u5990
  6683   002C60                     u5991:
  6684   002C60  EFDD  F017         	goto	l4680
  6685   002C64                     u5990:
  6686   002C64  EFF2  F015         	goto	l4590
  6687   002C68                     l4604:
  6688                           
  6689                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  6690   002C68  C07A  F070         	movff	dir_next@i,??_dir_next
  6691   002C6C  C07B  F071         	movff	dir_next@i+1,??_dir_next+1
  6692   002C70  0E04               	movlw	4
  6693   002C72  6E72               	movwf	(??_dir_next+2)^0,c
  6694   002C74                     u6005:
  6695   002C74  90D8               	bcf	status,0,c
  6696   002C76  3271               	rrcf	(??_dir_next+1)^0,f,c
  6697   002C78  3270               	rrcf	??_dir_next^0,f,c
  6698   002C7A  2E72               	decfsz	(??_dir_next+2)^0,f,c
  6699   002C7C  EF3A  F016         	goto	u6005
  6700   002C80  506D               	movf	dir_next@dp^0,w,c
  6701   002C82  6ED9               	movwf	fsr2l,c
  6702   002C84  6ADA               	clrf	fsr2h,c
  6703   002C86  EE10 F002          	lfsr	1,2
  6704   002C8A  50DE               	movf	postinc2,w,c
  6705   002C8C  26E1               	addwf	fsr1l,f,c
  6706   002C8E  50DD               	movf	postdec2,w,c
  6707   002C90  22E2               	addwfc	fsr1h,f,c
  6708   002C92  50E7               	movf	indf1,w,c
  6709   002C94  6E73               	movwf	(??_dir_next+3)^0,c
  6710   002C96  0EFF               	movlw	255
  6711   002C98  2473               	addwf	(??_dir_next+3)^0,w,c
  6712   002C9A  6E74               	movwf	(??_dir_next+4)^0,c
  6713   002C9C  6A75               	clrf	(??_dir_next+5)^0,c
  6714   002C9E  0EFF               	movlw	255
  6715   002CA0  2275               	addwfc	(??_dir_next+5)^0,f,c
  6716   002CA2  5070               	movf	??_dir_next^0,w,c
  6717   002CA4  1474               	andwf	(??_dir_next+4)^0,w,c
  6718   002CA6  6E76               	movwf	(??_dir_next+6)^0,c
  6719   002CA8  5071               	movf	(??_dir_next+1)^0,w,c
  6720   002CAA  1475               	andwf	(??_dir_next+5)^0,w,c
  6721   002CAC  6E77               	movwf	(??_dir_next+7)^0,c
  6722   002CAE  5076               	movf	(??_dir_next+6)^0,w,c
  6723   002CB0  1077               	iorwf	(??_dir_next+7)^0,w,c
  6724   002CB2  A4D8               	btfss	status,2,c
  6725   002CB4  EF5E  F016         	goto	u6011
  6726   002CB8  EF60  F016         	goto	u6010
  6727   002CBC                     u6011:
  6728   002CBC  EFDD  F017         	goto	l4680
  6729   002CC0                     u6010:
  6730   002CC0                     
  6731                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  6732   002CC0  506D               	movf	dir_next@dp^0,w,c
  6733   002CC2  6ED9               	movwf	fsr2l,c
  6734   002CC4  6ADA               	clrf	fsr2h,c
  6735   002CC6  CFDE F03B          	movff	postinc2,get_fat@fs
  6736   002CCA  CFDD F03C          	movff	postdec2,get_fat@fs+1
  6737   002CCE  506D               	movf	dir_next@dp^0,w,c
  6738   002CD0  6ED9               	movwf	fsr2l,c
  6739   002CD2  6ADA               	clrf	fsr2h,c
  6740   002CD4  0E0A               	movlw	10
  6741   002CD6  26D9               	addwf	fsr2l,f,c
  6742   002CD8  CFDE F03D          	movff	postinc2,get_fat@clst
  6743   002CDC  CFDE F03E          	movff	postinc2,get_fat@clst+1
  6744   002CE0  CFDE F03F          	movff	postinc2,get_fat@clst+2
  6745   002CE4  CFDE F040          	movff	postinc2,get_fat@clst+3
  6746   002CE8  EC38  F01A         	call	_get_fat	;wreg free
  6747   002CEC  C03B  F07C         	movff	?_get_fat,dir_next@clst
  6748   002CF0  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  6749   002CF4  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  6750   002CF8  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  6751   002CFC                     
  6752                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  6753   002CFC  507F               	movf	(dir_next@clst+3)^0,w,c
  6754   002CFE  107E               	iorwf	(dir_next@clst+2)^0,w,c
  6755   002D00  107D               	iorwf	(dir_next@clst+1)^0,w,c
  6756   002D02  E107               	bnz	u6021
  6757   002D04  0E02               	movlw	2
  6758   002D06  5C7C               	subwf	dir_next@clst^0,w,c
  6759   002D08  B0D8               	btfsc	status,0,c
  6760   002D0A  EF89  F016         	goto	u6021
  6761   002D0E  EF8B  F016         	goto	u6020
  6762   002D12                     u6021:
  6763   002D12  EF8E  F016         	goto	l4614
  6764   002D16                     u6020:
  6765   002D16                     l4610:
  6766   002D16  0E02               	movlw	2
  6767   002D18  EF0E  F018         	goto	l445
  6768   002D1C                     l4614:
  6769                           
  6770                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6771   002D1C  287C               	incf	dir_next@clst^0,w,c
  6772   002D1E  E10A               	bnz	u6031
  6773   002D20  287D               	incf	(dir_next@clst+1)^0,w,c
  6774   002D22  E108               	bnz	u6031
  6775   002D24  287E               	incf	(dir_next@clst+2)^0,w,c
  6776   002D26  E106               	bnz	u6031
  6777   002D28  287F               	incf	(dir_next@clst+3)^0,w,c
  6778   002D2A  A4D8               	btfss	status,2,c
  6779   002D2C  EF9A  F016         	goto	u6031
  6780   002D30  EF9C  F016         	goto	u6030
  6781   002D34                     u6031:
  6782   002D34  EF9F  F016         	goto	l4620
  6783   002D38                     u6030:
  6784   002D38                     l4616:
  6785   002D38  0E01               	movlw	1
  6786   002D3A  EF0E  F018         	goto	l445
  6787   002D3E                     l4620:
  6788                           
  6789                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  6790   002D3E  506D               	movf	dir_next@dp^0,w,c
  6791   002D40  6ED9               	movwf	fsr2l,c
  6792   002D42  6ADA               	clrf	fsr2h,c
  6793   002D44  EE10 F012          	lfsr	1,18
  6794   002D48  50DE               	movf	postinc2,w,c
  6795   002D4A  26E1               	addwf	fsr1l,f,c
  6796   002D4C  50DD               	movf	postdec2,w,c
  6797   002D4E  22E2               	addwfc	fsr1h,f,c
  6798   002D50  50E6               	movf	postinc1,w,c
  6799   002D52  5C7C               	subwf	dir_next@clst^0,w,c
  6800   002D54  50E6               	movf	postinc1,w,c
  6801   002D56  587D               	subwfb	(dir_next@clst+1)^0,w,c
  6802   002D58  50E6               	movf	postinc1,w,c
  6803   002D5A  587E               	subwfb	(dir_next@clst+2)^0,w,c
  6804   002D5C  50E6               	movf	postinc1,w,c
  6805   002D5E  587F               	subwfb	(dir_next@clst+3)^0,w,c
  6806   002D60  A0D8               	btfss	status,0,c
  6807   002D62  EFB5  F016         	goto	u6041
  6808   002D66  EFB7  F016         	goto	u6040
  6809   002D6A                     u6041:
  6810   002D6A  EFB2  F017         	goto	l4676
  6811   002D6E                     u6040:
  6812   002D6E                     
  6813                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  6814   002D6E  506E               	movf	dir_next@stretch^0,w,c
  6815   002D70  106F               	iorwf	(dir_next@stretch+1)^0,w,c
  6816   002D72  A4D8               	btfss	status,2,c
  6817   002D74  EFBE  F016         	goto	u6051
  6818   002D78  EFC0  F016         	goto	u6050
  6819   002D7C                     u6051:
  6820   002D7C  EFC2  F016         	goto	l4628
  6821   002D80                     u6050:
  6822   002D80  EFF2  F015         	goto	l4590
  6823   002D84                     l4628:
  6824                           
  6825                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  6826   002D84  506D               	movf	dir_next@dp^0,w,c
  6827   002D86  6ED9               	movwf	fsr2l,c
  6828   002D88  6ADA               	clrf	fsr2h,c
  6829   002D8A  CFDE F056          	movff	postinc2,create_chain@fs
  6830   002D8E  CFDD F057          	movff	postdec2,create_chain@fs+1
  6831   002D92  506D               	movf	dir_next@dp^0,w,c
  6832   002D94  6ED9               	movwf	fsr2l,c
  6833   002D96  6ADA               	clrf	fsr2h,c
  6834   002D98  0E0A               	movlw	10
  6835   002D9A  26D9               	addwf	fsr2l,f,c
  6836   002D9C  CFDE F058          	movff	postinc2,create_chain@clst
  6837   002DA0  CFDE F059          	movff	postinc2,create_chain@clst+1
  6838   002DA4  CFDE F05A          	movff	postinc2,create_chain@clst+2
  6839   002DA8  CFDE F05B          	movff	postinc2,create_chain@clst+3
  6840   002DAC  EC27  F01C         	call	_create_chain	;wreg free
  6841   002DB0  C056  F07C         	movff	?_create_chain,dir_next@clst
  6842   002DB4  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  6843   002DB8  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  6844   002DBC  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  6845   002DC0                     
  6846                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  6847   002DC0  507C               	movf	dir_next@clst^0,w,c
  6848   002DC2  107D               	iorwf	(dir_next@clst+1)^0,w,c
  6849   002DC4  107E               	iorwf	(dir_next@clst+2)^0,w,c
  6850   002DC6  107F               	iorwf	(dir_next@clst+3)^0,w,c
  6851   002DC8  A4D8               	btfss	status,2,c
  6852   002DCA  EFE9  F016         	goto	u6061
  6853   002DCE  EFEB  F016         	goto	u6060
  6854   002DD2                     u6061:
  6855   002DD2  EFEE  F016         	goto	l4636
  6856   002DD6                     u6060:
  6857   002DD6  0E07               	movlw	7
  6858   002DD8  EF0E  F018         	goto	l445
  6859   002DDC                     l4636:
  6860                           
  6861                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  6862   002DDC  047C               	decf	dir_next@clst^0,w,c
  6863   002DDE  107D               	iorwf	(dir_next@clst+1)^0,w,c
  6864   002DE0  107E               	iorwf	(dir_next@clst+2)^0,w,c
  6865   002DE2  107F               	iorwf	(dir_next@clst+3)^0,w,c
  6866   002DE4  A4D8               	btfss	status,2,c
  6867   002DE6  EFF7  F016         	goto	u6071
  6868   002DEA  EFF9  F016         	goto	u6070
  6869   002DEE                     u6071:
  6870   002DEE  EFFB  F016         	goto	l4642
  6871   002DF2                     u6070:
  6872   002DF2  EF8B  F016         	goto	l4610
  6873   002DF6                     l4642:
  6874                           
  6875                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6876   002DF6  287C               	incf	dir_next@clst^0,w,c
  6877   002DF8  E10A               	bnz	u6081
  6878   002DFA  287D               	incf	(dir_next@clst+1)^0,w,c
  6879   002DFC  E108               	bnz	u6081
  6880   002DFE  287E               	incf	(dir_next@clst+2)^0,w,c
  6881   002E00  E106               	bnz	u6081
  6882   002E02  287F               	incf	(dir_next@clst+3)^0,w,c
  6883   002E04  A4D8               	btfss	status,2,c
  6884   002E06  EF07  F017         	goto	u6081
  6885   002E0A  EF09  F017         	goto	u6080
  6886   002E0E                     u6081:
  6887   002E0E  EF0B  F017         	goto	l4648
  6888   002E12                     u6080:
  6889   002E12  EF9C  F016         	goto	l4616
  6890   002E16                     l4648:
  6891                           
  6892                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  6893   002E16  506D               	movf	dir_next@dp^0,w,c
  6894   002E18  6ED9               	movwf	fsr2l,c
  6895   002E1A  6ADA               	clrf	fsr2h,c
  6896   002E1C  CFDE F01B          	movff	postinc2,sync_window@fs
  6897   002E20  CFDD F01C          	movff	postdec2,sync_window@fs+1
  6898   002E24  ECF3  F026         	call	_sync_window	;wreg free
  6899   002E28  0900               	iorlw	0
  6900   002E2A  B4D8               	btfsc	status,2,c
  6901   002E2C  EF1A  F017         	goto	u6091
  6902   002E30  EF1C  F017         	goto	u6090
  6903   002E34                     u6091:
  6904   002E34  EF1E  F017         	goto	l4654
  6905   002E38                     u6090:
  6906   002E38  EF9C  F016         	goto	l4616
  6907   002E3C                     l4654:
  6908                           
  6909                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  6910   002E3C  506D               	movf	dir_next@dp^0,w,c
  6911   002E3E  6ED9               	movwf	fsr2l,c
  6912   002E40  6ADA               	clrf	fsr2h,c
  6913   002E42  CFDE F070          	movff	postinc2,??_dir_next
  6914   002E46  CFDD F071          	movff	postdec2,??_dir_next+1
  6915   002E4A  0E2E               	movlw	46
  6916   002E4C  2470               	addwf	??_dir_next^0,w,c
  6917   002E4E  6E01               	movwf	mem_set@dst^0,c
  6918   002E50  0E00               	movlw	0
  6919   002E52  2071               	addwfc	(??_dir_next+1)^0,w,c
  6920   002E54  6E02               	movwf	(mem_set@dst+1)^0,c
  6921   002E56  0E00               	movlw	0
  6922   002E58  6E04               	movwf	(mem_set@val+1)^0,c
  6923   002E5A  0E00               	movlw	0
  6924   002E5C  6E03               	movwf	mem_set@val^0,c
  6925   002E5E  0E02               	movlw	2
  6926   002E60  6E06               	movwf	(mem_set@cnt+1)^0,c
  6927   002E62  0E00               	movlw	0
  6928   002E64  6E05               	movwf	mem_set@cnt^0,c
  6929   002E66  EC77  F030         	call	_mem_set	;wreg free
  6930   002E6A                     
  6931                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  6932   002E6A  506D               	movf	dir_next@dp^0,w,c
  6933   002E6C  6ED9               	movwf	fsr2l,c
  6934   002E6E  6ADA               	clrf	fsr2h,c
  6935   002E70  CFDE F00D          	movff	postinc2,clust2sect@fs
  6936   002E74  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6937   002E78  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  6938   002E7C  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  6939   002E80  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  6940   002E84  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  6941   002E88  ECD9  F02C         	call	_clust2sect	;wreg free
  6942   002E8C  506D               	movf	dir_next@dp^0,w,c
  6943   002E8E  6ED9               	movwf	fsr2l,c
  6944   002E90  6ADA               	clrf	fsr2h,c
  6945   002E92  EE10 F02A          	lfsr	1,42
  6946   002E96  50DE               	movf	postinc2,w,c
  6947   002E98  26E1               	addwf	fsr1l,f,c
  6948   002E9A  50DD               	movf	postdec2,w,c
  6949   002E9C  22E2               	addwfc	fsr1h,f,c
  6950   002E9E  C00D  FFE6         	movff	?_clust2sect,postinc1
  6951   002EA2  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  6952   002EA6  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  6953   002EAA  C010  FFE6         	movff	?_clust2sect+3,postinc1
  6954   002EAE                     
  6955                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  6956   002EAE  0E00               	movlw	0
  6957   002EB0  6E79               	movwf	(dir_next@c+1)^0,c
  6958   002EB2  0E00               	movlw	0
  6959   002EB4  6E78               	movwf	dir_next@c^0,c
  6960   002EB6  EF8B  F017         	goto	l4672
  6961   002EBA                     l4660:
  6962                           
  6963                           ;ff.c: 1168:       dp->fs->wflag = 1;
  6964   002EBA  506D               	movf	dir_next@dp^0,w,c
  6965   002EBC  6ED9               	movwf	fsr2l,c
  6966   002EBE  6ADA               	clrf	fsr2h,c
  6967   002EC0  EE10 F004          	lfsr	1,4
  6968   002EC4  50DE               	movf	postinc2,w,c
  6969   002EC6  26E1               	addwf	fsr1l,f,c
  6970   002EC8  50DD               	movf	postdec2,w,c
  6971   002ECA  22E2               	addwfc	fsr1h,f,c
  6972   002ECC  0E01               	movlw	1
  6973   002ECE  6EE7               	movwf	indf1,c
  6974   002ED0                     
  6975                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  6976   002ED0  506D               	movf	dir_next@dp^0,w,c
  6977   002ED2  6ED9               	movwf	fsr2l,c
  6978   002ED4  6ADA               	clrf	fsr2h,c
  6979   002ED6  CFDE F01B          	movff	postinc2,sync_window@fs
  6980   002EDA  CFDD F01C          	movff	postdec2,sync_window@fs+1
  6981   002EDE  ECF3  F026         	call	_sync_window	;wreg free
  6982   002EE2  0900               	iorlw	0
  6983   002EE4  B4D8               	btfsc	status,2,c
  6984   002EE6  EF77  F017         	goto	u6101
  6985   002EEA  EF79  F017         	goto	u6100
  6986   002EEE                     u6101:
  6987   002EEE  EF7B  F017         	goto	l4668
  6988   002EF2                     u6100:
  6989   002EF2  EF9C  F016         	goto	l4616
  6990   002EF6                     l4668:
  6991                           
  6992                           ;ff.c: 1170:       dp->fs->winsect++;
  6993   002EF6  506D               	movf	dir_next@dp^0,w,c
  6994   002EF8  6ED9               	movwf	fsr2l,c
  6995   002EFA  6ADA               	clrf	fsr2h,c
  6996   002EFC  EE10 F02A          	lfsr	1,42
  6997   002F00  50DE               	movf	postinc2,w,c
  6998   002F02  26E1               	addwf	fsr1l,f,c
  6999   002F04  50DD               	movf	postdec2,w,c
  7000   002F06  22E2               	addwfc	fsr1h,f,c
  7001   002F08  2AE6               	incf	postinc1,f,c
  7002   002F0A  0E00               	movlw	0
  7003   002F0C  22E6               	addwfc	postinc1,f,c
  7004   002F0E  22E6               	addwfc	postinc1,f,c
  7005   002F10  22E6               	addwfc	postinc1,f,c
  7006   002F12                     
  7007                           ;ff.c: 1171:      }
  7008   002F12  4A78               	infsnz	dir_next@c^0,f,c
  7009   002F14  2A79               	incf	(dir_next@c+1)^0,f,c
  7010   002F16                     l4672:
  7011   002F16  506D               	movf	dir_next@dp^0,w,c
  7012   002F18  6ED9               	movwf	fsr2l,c
  7013   002F1A  6ADA               	clrf	fsr2h,c
  7014   002F1C  EE10 F002          	lfsr	1,2
  7015   002F20  50DE               	movf	postinc2,w,c
  7016   002F22  26E1               	addwf	fsr1l,f,c
  7017   002F24  50DD               	movf	postdec2,w,c
  7018   002F26  22E2               	addwfc	fsr1h,f,c
  7019   002F28  50E7               	movf	indf1,w,c
  7020   002F2A  6E70               	movwf	??_dir_next^0,c
  7021   002F2C  6A71               	clrf	(??_dir_next+1)^0,c
  7022   002F2E  5070               	movf	??_dir_next^0,w,c
  7023   002F30  5C78               	subwf	dir_next@c^0,w,c
  7024   002F32  5071               	movf	(??_dir_next+1)^0,w,c
  7025   002F34  5879               	subwfb	(dir_next@c+1)^0,w,c
  7026   002F36  A0D8               	btfss	status,0,c
  7027   002F38  EFA0  F017         	goto	u6111
  7028   002F3C  EFA2  F017         	goto	u6110
  7029   002F40                     u6111:
  7030   002F40  EF5D  F017         	goto	l4660
  7031   002F44                     u6110:
  7032   002F44                     
  7033                           ;ff.c: 1172:      dp->fs->winsect -= c;
  7034   002F44  506D               	movf	dir_next@dp^0,w,c
  7035   002F46  6ED9               	movwf	fsr2l,c
  7036   002F48  6ADA               	clrf	fsr2h,c
  7037   002F4A  EE10 F02A          	lfsr	1,42
  7038   002F4E  50DE               	movf	postinc2,w,c
  7039   002F50  26E1               	addwf	fsr1l,f,c
  7040   002F52  50DD               	movf	postdec2,w,c
  7041   002F54  22E2               	addwfc	fsr1h,f,c
  7042   002F56  5078               	movf	dir_next@c^0,w,c
  7043   002F58  5EE6               	subwf	postinc1,f,c
  7044   002F5A  5079               	movf	(dir_next@c+1)^0,w,c
  7045   002F5C  5AE6               	subwfb	postinc1,f,c
  7046   002F5E  0E00               	movlw	0
  7047   002F60  5AE6               	subwfb	postinc1,f,c
  7048   002F62  5AE6               	subwfb	postinc1,f,c
  7049   002F64                     l4676:
  7050                           
  7051                           ;ff.c: 1178:     dp->clust = clst;
  7052   002F64  506D               	movf	dir_next@dp^0,w,c
  7053   002F66  6ED9               	movwf	fsr2l,c
  7054   002F68  6ADA               	clrf	fsr2h,c
  7055   002F6A  0E0A               	movlw	10
  7056   002F6C  26D9               	addwf	fsr2l,f,c
  7057   002F6E  C07C  FFDE         	movff	dir_next@clst,postinc2
  7058   002F72  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  7059   002F76  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  7060   002F7A  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  7061   002F7E                     
  7062                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  7063   002F7E  506D               	movf	dir_next@dp^0,w,c
  7064   002F80  6ED9               	movwf	fsr2l,c
  7065   002F82  6ADA               	clrf	fsr2h,c
  7066   002F84  CFDE F00D          	movff	postinc2,clust2sect@fs
  7067   002F88  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  7068   002F8C  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  7069   002F90  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  7070   002F94  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  7071   002F98  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  7072   002F9C  ECD9  F02C         	call	_clust2sect	;wreg free
  7073   002FA0  506D               	movf	dir_next@dp^0,w,c
  7074   002FA2  6ED9               	movwf	fsr2l,c
  7075   002FA4  6ADA               	clrf	fsr2h,c
  7076   002FA6  0E0E               	movlw	14
  7077   002FA8  26D9               	addwf	fsr2l,f,c
  7078   002FAA  C00D  FFDE         	movff	?_clust2sect,postinc2
  7079   002FAE  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  7080   002FB2  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  7081   002FB6  C010  FFDE         	movff	?_clust2sect+3,postinc2
  7082   002FBA                     l4680:
  7083                           
  7084                           ;ff.c: 1184:  dp->index = (WORD)i;
  7085   002FBA  506D               	movf	dir_next@dp^0,w,c
  7086   002FBC  6ED9               	movwf	fsr2l,c
  7087   002FBE  6ADA               	clrf	fsr2h,c
  7088   002FC0  0E04               	movlw	4
  7089   002FC2  26D9               	addwf	fsr2l,f,c
  7090   002FC4  C07A  FFDE         	movff	dir_next@i,postinc2
  7091   002FC8  C07B  FFDD         	movff	dir_next@i+1,postdec2
  7092   002FCC                     
  7093                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  7094   002FCC  0E0F               	movlw	15
  7095   002FCE  147A               	andwf	dir_next@i^0,w,c
  7096   002FD0  6E70               	movwf	??_dir_next^0,c
  7097   002FD2  0E00               	movlw	0
  7098   002FD4  147B               	andwf	(dir_next@i+1)^0,w,c
  7099   002FD6  6E71               	movwf	(??_dir_next+1)^0,c
  7100   002FD8  0E05               	movlw	5
  7101   002FDA                     u6125:
  7102   002FDA  90D8               	bcf	status,0,c
  7103   002FDC  3670               	rlcf	??_dir_next^0,f,c
  7104   002FDE  3671               	rlcf	(??_dir_next+1)^0,f,c
  7105   002FE0  2EE8               	decfsz	wreg,f,c
  7106   002FE2  EFED  F017         	goto	u6125
  7107   002FE6  506D               	movf	dir_next@dp^0,w,c
  7108   002FE8  6ED9               	movwf	fsr2l,c
  7109   002FEA  6ADA               	clrf	fsr2h,c
  7110   002FEC  CFDE F072          	movff	postinc2,??_dir_next+2
  7111   002FF0  CFDD F073          	movff	postdec2,??_dir_next+3
  7112   002FF4  5070               	movf	??_dir_next^0,w,c
  7113   002FF6  2472               	addwf	(??_dir_next+2)^0,w,c
  7114   002FF8  6E74               	movwf	(??_dir_next+4)^0,c
  7115   002FFA  5071               	movf	(??_dir_next+1)^0,w,c
  7116   002FFC  2073               	addwfc	(??_dir_next+3)^0,w,c
  7117   002FFE  6E75               	movwf	(??_dir_next+5)^0,c
  7118   003000  0E2E               	movlw	46
  7119   003002  2674               	addwf	(??_dir_next+4)^0,f,c
  7120   003004  0E00               	movlw	0
  7121   003006  2275               	addwfc	(??_dir_next+5)^0,f,c
  7122   003008  506D               	movf	dir_next@dp^0,w,c
  7123   00300A  6ED9               	movwf	fsr2l,c
  7124   00300C  6ADA               	clrf	fsr2h,c
  7125   00300E  0E12               	movlw	18
  7126   003010  26D9               	addwf	fsr2l,f,c
  7127   003012  C074  FFDE         	movff	??_dir_next+4,postinc2
  7128   003016  C075  FFDD         	movff	??_dir_next+5,postdec2
  7129   00301A                     
  7130                           ;ff.c: 1187:  return FR_OK;
  7131   00301A  0E00               	movlw	0
  7132   00301C                     l445:
  7133   00301C  0012               	return		;funcret
  7134   00301E                     __end_of_dir_next:
  7135                           	callstack 0
  7136                           
  7137 ;; *************** function _f_mount *****************
  7138 ;; Defined at:
  7139 ;;		line 2402 in file "ff.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  fs              2   79[COMRAM] PTR struct .
  7142 ;;		 -> FatFs(558), NULL(0), 
  7143 ;;  path            1   81[COMRAM] PTR const unsigned char 
  7144 ;;		 -> STR_4(10), STR_3(1), 
  7145 ;;  opt             1   82[COMRAM] unsigned char 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  vol             2   87[COMRAM] int 
  7148 ;;  cfs             2   84[COMRAM] PTR struct .
  7149 ;;		 -> FatFs(558), NULL(0), 
  7150 ;;  rp              1   86[COMRAM] PTR const unsigned char 
  7151 ;;		 -> STR_4(10), STR_3(1), 
  7152 ;;  res             1   83[COMRAM] enum E95
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      enum E95
  7155 ;; Registers used:
  7156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7162 ;;      Params:         4       0       0       0       0       0       0
  7163 ;;      Locals:         6       0       0       0       0       0       0
  7164 ;;      Temps:          0       0       0       0       0       0       0
  7165 ;;      Totals:        10       0       0       0       0       0       0
  7166 ;;Total ram usage:       10 bytes
  7167 ;; Hardware stack levels used: 1
  7168 ;; Hardware stack levels required when called: 10
  7169 ;; This function calls:
  7170 ;;		_find_volume
  7171 ;;		_get_ldnumber
  7172 ;; This function is called by:
  7173 ;;		_main
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177                           	psect	text15
  7178   0058EC                     __ptext15:
  7179                           	callstack 0
  7180   0058EC                     _f_mount:
  7181                           	callstack 20
  7182   0058EC                     
  7183                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  7184   0058EC  C052  F057         	movff	f_mount@path,f_mount@rp
  7185   0058F0                     
  7186                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  7187   0058F0  0E57               	movlw	low f_mount@rp
  7188   0058F2  6E01               	movwf	get_ldnumber@path^0,c
  7189   0058F4  ECB6  F02A         	call	_get_ldnumber	;wreg free
  7190   0058F8  C001  F058         	movff	?_get_ldnumber,f_mount@vol
  7191   0058FC  C002  F059         	movff	?_get_ldnumber+1,f_mount@vol+1
  7192   005900                     
  7193                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  7194   005900  BE59               	btfsc	(f_mount@vol+1)^0,7,c
  7195   005902  EF87  F02C         	goto	u7710
  7196   005906  EF85  F02C         	goto	u7711
  7197   00590A                     u7711:
  7198   00590A  EF8A  F02C         	goto	l5590
  7199   00590E                     u7710:
  7200   00590E  0E0B               	movlw	11
  7201   005910  EFD8  F02C         	goto	l648
  7202   005914                     l5590:
  7203                           
  7204                           ;ff.c: 2416:  cfs = FatFs[vol];
  7205   005914  5058               	movf	f_mount@vol^0,w,c
  7206   005916  0D02               	mullw	2
  7207   005918  50F3               	movf	243,w,c
  7208   00591A  0FFA               	addlw	low _FatFs@ff$F447
  7209   00591C  6ED9               	movwf	fsr2l,c
  7210   00591E  6ADA               	clrf	fsr2h,c
  7211   005920  CFDE F055          	movff	postinc2,f_mount@cfs
  7212   005924  CFDD F056          	movff	postdec2,f_mount@cfs+1
  7213   005928                     
  7214                           ;ff.c: 2418:  if (cfs) {
  7215   005928  5055               	movf	f_mount@cfs^0,w,c
  7216   00592A  1056               	iorwf	(f_mount@cfs+1)^0,w,c
  7217   00592C  B4D8               	btfsc	status,2,c
  7218   00592E  EF9B  F02C         	goto	u7721
  7219   005932  EF9D  F02C         	goto	u7720
  7220   005936                     u7721:
  7221   005936  EFA2  F02C         	goto	l5596
  7222   00593A                     u7720:
  7223   00593A                     
  7224                           ;ff.c: 2425:   cfs->fs_type = 0;
  7225   00593A  C055  FFD9         	movff	f_mount@cfs,fsr2l
  7226   00593E  C056  FFDA         	movff	f_mount@cfs+1,fsr2h
  7227   005942  6ADF               	clrf	indf2,c
  7228   005944                     l5596:
  7229                           
  7230                           ;ff.c: 2428:  if (fs) {
  7231   005944  5050               	movf	f_mount@fs^0,w,c
  7232   005946  1051               	iorwf	(f_mount@fs+1)^0,w,c
  7233   005948  B4D8               	btfsc	status,2,c
  7234   00594A  EFA9  F02C         	goto	u7731
  7235   00594E  EFAB  F02C         	goto	u7730
  7236   005952                     u7731:
  7237   005952  EFB0  F02C         	goto	l5600
  7238   005956                     u7730:
  7239   005956                     
  7240                           ;ff.c: 2429:   fs->fs_type = 0;
  7241   005956  C050  FFD9         	movff	f_mount@fs,fsr2l
  7242   00595A  C051  FFDA         	movff	f_mount@fs+1,fsr2h
  7243   00595E  6ADF               	clrf	indf2,c
  7244   005960                     l5600:
  7245                           
  7246                           ;ff.c: 2434:  FatFs[vol] = fs;
  7247   005960  5058               	movf	f_mount@vol^0,w,c
  7248   005962  0D02               	mullw	2
  7249   005964  50F3               	movf	243,w,c
  7250   005966  0FFA               	addlw	low _FatFs@ff$F447
  7251   005968  6ED9               	movwf	fsr2l,c
  7252   00596A  6ADA               	clrf	fsr2h,c
  7253   00596C  C050  FFDE         	movff	f_mount@fs,postinc2
  7254   005970  C051  FFDD         	movff	f_mount@fs+1,postdec2
  7255   005974                     
  7256                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  7257   005974  5050               	movf	f_mount@fs^0,w,c
  7258   005976  1051               	iorwf	(f_mount@fs+1)^0,w,c
  7259   005978  B4D8               	btfsc	status,2,c
  7260   00597A  EFC1  F02C         	goto	u7741
  7261   00597E  EFC3  F02C         	goto	u7740
  7262   005982                     u7741:
  7263   005982  EFCB  F02C         	goto	l5606
  7264   005986                     u7740:
  7265   005986  0453               	decf	f_mount@opt^0,w,c
  7266   005988  B4D8               	btfsc	status,2,c
  7267   00598A  EFC9  F02C         	goto	u7751
  7268   00598E  EFCB  F02C         	goto	u7750
  7269   005992                     u7751:
  7270   005992  EFCE  F02C         	goto	l5610
  7271   005996                     u7750:
  7272   005996                     l5606:
  7273   005996  0E00               	movlw	0
  7274   005998  EFD8  F02C         	goto	l648
  7275   00599C                     l5610:
  7276                           
  7277                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  7278   00599C  0E50               	movlw	low f_mount@fs
  7279   00599E  6E45               	movwf	find_volume@rfs^0,c
  7280   0059A0  0E52               	movlw	low f_mount@path
  7281   0059A2  6E46               	movwf	find_volume@path^0,c
  7282   0059A4  0E00               	movlw	0
  7283   0059A6  6E47               	movwf	find_volume@wmode^0,c
  7284   0059A8  EC1D  F003         	call	_find_volume	;wreg free
  7285   0059AC  6E54               	movwf	f_mount@res^0,c
  7286   0059AE                     
  7287                           ;ff.c: 2439:  return res;
  7288   0059AE  5054               	movf	f_mount@res^0,w,c
  7289   0059B0                     l648:
  7290   0059B0  0012               	return		;funcret
  7291   0059B2                     __end_of_f_mount:
  7292                           	callstack 0
  7293                           
  7294 ;; *************** function _find_volume *****************
  7295 ;; Defined at:
  7296 ;;		line 2203 in file "ff.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  rfs             1   68[COMRAM] PTR PTR struct .
  7299 ;;		 -> f_open@dj(21), f_mount@fs(2), 
  7300 ;;  path            1   69[COMRAM] PTR PTR const unsigned c
  7301 ;;		 -> f_open@path(1), f_mount@path(1), 
  7302 ;;  wmode           1   70[COMRAM] unsigned char 
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;  br             16    0[BANK0 ] unsigned long [4]
  7305 ;;  bsect           4   49[BANK0 ] unsigned long 
  7306 ;;  fasize          4   45[BANK0 ] unsigned long 
  7307 ;;  nclst           4   40[BANK0 ] unsigned long 
  7308 ;;  tsect           4   36[BANK0 ] unsigned long 
  7309 ;;  sysect          4   28[BANK0 ] unsigned long 
  7310 ;;  szbfat          4   22[BANK0 ] unsigned long 
  7311 ;;  fs              2   56[BANK0 ] PTR struct .
  7312 ;;		 -> FatFs(558), NULL(0), 
  7313 ;;  i               2   53[BANK0 ] unsigned short 
  7314 ;;  nrsv            2   34[BANK0 ] unsigned short 
  7315 ;;  vol             2   32[BANK0 ] int 
  7316 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  7317 ;;		 -> FatFs(558), FatFs$win(512), NULL(0), 
  7318 ;;  fmt             1   55[BANK0 ] unsigned char 
  7319 ;;  stat            1   44[BANK0 ] unsigned char 
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      enum E95
  7322 ;; Registers used:
  7323 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7329 ;;      Params:         3       0       0       0       0       0       0
  7330 ;;      Locals:         0      58       0       0       0       0       0
  7331 ;;      Temps:          8       0       0       0       0       0       0
  7332 ;;      Totals:        11      58       0       0       0       0       0
  7333 ;;Total ram usage:       69 bytes
  7334 ;; Hardware stack levels used: 1
  7335 ;; Hardware stack levels required when called: 9
  7336 ;; This function calls:
  7337 ;;		___lldiv
  7338 ;;		___lmul
  7339 ;;		_check_fs
  7340 ;;		_disk_initialize
  7341 ;;		_disk_status
  7342 ;;		_get_ldnumber
  7343 ;;		_move_window
  7344 ;; This function is called by:
  7345 ;;		_f_mount
  7346 ;;		_f_open
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           	psect	text16
  7351   00063A                     __ptext16:
  7352                           	callstack 0
  7353   00063A                     _find_volume:
  7354                           	callstack 20
  7355   00063A                     
  7356                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  7357   00063A  5045               	movf	find_volume@rfs^0,w,c
  7358   00063C  6ED9               	movwf	fsr2l,c
  7359   00063E  6ADA               	clrf	fsr2h,c
  7360   000640  6ADE               	clrf	postinc2,c
  7361   000642  6ADD               	clrf	postdec2,c
  7362   000644                     
  7363                           ;ff.c: 2220:  vol = get_ldnumber(path);
  7364   000644  C046  F001         	movff	find_volume@path,get_ldnumber@path
  7365   000648  ECB6  F02A         	call	_get_ldnumber	;wreg free
  7366   00064C  C001  F0A0         	movff	?_get_ldnumber,find_volume@vol
  7367   000650  C002  F0A1         	movff	?_get_ldnumber+1,find_volume@vol+1
  7368   000654                     
  7369                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  7370   000654  0100               	movlb	0	; () banked
  7371   000656  BFA1               	btfsc	(find_volume@vol+1)& (0+255),7,b
  7372   000658  EF32  F003         	goto	u7230
  7373   00065C  EF30  F003         	goto	u7231
  7374   000660                     u7231:
  7375   000660  EF35  F003         	goto	l5294
  7376   000664                     u7230:
  7377   000664                     
  7378                           ; BSR set to: 0
  7379   000664  0E0B               	movlw	11
  7380   000666  EFCE  F008         	goto	l588
  7381   00066A                     l5294:
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;ff.c: 2224:  fs = FatFs[vol];
  7385   00066A  51A0               	movf	find_volume@vol& (0+255),w,b
  7386   00066C  0D02               	mullw	2
  7387   00066E  50F3               	movf	243,w,c
  7388   000670  0FFA               	addlw	low _FatFs@ff$F447
  7389   000672  6ED9               	movwf	fsr2l,c
  7390   000674  6ADA               	clrf	fsr2h,c
  7391   000676  CFDE F0B8          	movff	postinc2,find_volume@fs
  7392   00067A  CFDD F0B9          	movff	postdec2,find_volume@fs+1
  7393   00067E                     
  7394                           ; BSR set to: 0
  7395                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  7396   00067E  51B8               	movf	find_volume@fs& (0+255),w,b
  7397   000680  11B9               	iorwf	(find_volume@fs+1)& (0+255),w,b
  7398   000682  A4D8               	btfss	status,2,c
  7399   000684  EF46  F003         	goto	u7241
  7400   000688  EF48  F003         	goto	u7240
  7401   00068C                     u7241:
  7402   00068C  EF4B  F003         	goto	l5302
  7403   000690                     u7240:
  7404   000690                     
  7405                           ; BSR set to: 0
  7406   000690  0E0C               	movlw	12
  7407   000692  EFCE  F008         	goto	l588
  7408   000696                     l5302:
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;ff.c: 2228:  *rfs = fs;
  7412   000696  5045               	movf	find_volume@rfs^0,w,c
  7413   000698  6ED9               	movwf	fsr2l,c
  7414   00069A  6ADA               	clrf	fsr2h,c
  7415   00069C  C0B8  FFDE         	movff	find_volume@fs,postinc2
  7416   0006A0  C0B9  FFDD         	movff	find_volume@fs+1,postdec2
  7417                           
  7418                           ;ff.c: 2230:  if (fs->fs_type) {
  7419   0006A4  C0B8  FFD9         	movff	find_volume@fs,fsr2l
  7420   0006A8  C0B9  FFDA         	movff	find_volume@fs+1,fsr2h
  7421   0006AC  50DF               	movf	indf2,w,c
  7422   0006AE  B4D8               	btfsc	status,2,c
  7423   0006B0  EF5C  F003         	goto	u7251
  7424   0006B4  EF5E  F003         	goto	u7250
  7425   0006B8                     u7251:
  7426   0006B8  EF85  F003         	goto	l5320
  7427   0006BC                     u7250:
  7428   0006BC                     
  7429                           ; BSR set to: 0
  7430                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  7431   0006BC  EE20 F001          	lfsr	2,1
  7432   0006C0  51B8               	movf	find_volume@fs& (0+255),w,b
  7433   0006C2  26D9               	addwf	fsr2l,f,c
  7434   0006C4  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7435   0006C6  22DA               	addwfc	fsr2h,f,c
  7436   0006C8  50DF               	movf	indf2,w,c
  7437   0006CA  ECCF  F030         	call	_disk_status
  7438   0006CE  0100               	movlb	0	; () banked
  7439   0006D0  6FAC               	movwf	find_volume@stat& (0+255),b
  7440   0006D2                     
  7441                           ; BSR set to: 0
  7442                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  7443   0006D2  B1AC               	btfsc	find_volume@stat& (0+255),0,b
  7444   0006D4  EF6E  F003         	goto	u7261
  7445   0006D8  EF70  F003         	goto	u7260
  7446   0006DC                     u7261:
  7447   0006DC  EF85  F003         	goto	l5320
  7448   0006E0                     u7260:
  7449   0006E0                     
  7450                           ; BSR set to: 0
  7451   0006E0  5047               	movf	find_volume@wmode^0,w,c
  7452   0006E2  B4D8               	btfsc	status,2,c
  7453   0006E4  EF76  F003         	goto	u7271
  7454   0006E8  EF78  F003         	goto	u7270
  7455   0006EC                     u7271:
  7456   0006EC  EF82  F003         	goto	l5316
  7457   0006F0                     u7270:
  7458   0006F0                     
  7459                           ; BSR set to: 0
  7460   0006F0  A5AC               	btfss	find_volume@stat& (0+255),2,b
  7461   0006F2  EF7D  F003         	goto	u7281
  7462   0006F6  EF7F  F003         	goto	u7280
  7463   0006FA                     u7281:
  7464   0006FA  EF82  F003         	goto	l5316
  7465   0006FE                     u7280:
  7466   0006FE                     l5312:
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  7470   0006FE  0E0A               	movlw	10
  7471   000700  EFCE  F008         	goto	l588
  7472   000704                     l5316:
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;ff.c: 2235:    return FR_OK;
  7476   000704  0E00               	movlw	0
  7477   000706  EFCE  F008         	goto	l588
  7478   00070A                     l5320:
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;ff.c: 2242:  fs->fs_type = 0;
  7482   00070A  C0B8  FFD9         	movff	find_volume@fs,fsr2l
  7483   00070E  C0B9  FFDA         	movff	find_volume@fs+1,fsr2h
  7484   000712  6ADF               	clrf	indf2,c
  7485   000714                     
  7486                           ; BSR set to: 0
  7487                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  7488   000714  EE20 F001          	lfsr	2,1
  7489   000718  51B8               	movf	find_volume@fs& (0+255),w,b
  7490   00071A  26D9               	addwf	fsr2l,f,c
  7491   00071C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7492   00071E  22DA               	addwfc	fsr2h,f,c
  7493   000720  C0A0  FFDF         	movff	find_volume@vol,indf2
  7494   000724                     
  7495                           ; BSR set to: 0
  7496                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  7497   000724  EE20 F001          	lfsr	2,1
  7498   000728  51B8               	movf	find_volume@fs& (0+255),w,b
  7499   00072A  26D9               	addwf	fsr2l,f,c
  7500   00072C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7501   00072E  22DA               	addwfc	fsr2h,f,c
  7502   000730  50DF               	movf	indf2,w,c
  7503   000732  EC5A  F021         	call	_disk_initialize
  7504   000736  0100               	movlb	0	; () banked
  7505   000738  6FAC               	movwf	find_volume@stat& (0+255),b
  7506   00073A                     
  7507                           ; BSR set to: 0
  7508                           ;ff.c: 2245:  if (stat & 0x01)
  7509   00073A  A1AC               	btfss	find_volume@stat& (0+255),0,b
  7510   00073C  EFA2  F003         	goto	u7291
  7511   000740  EFA4  F003         	goto	u7290
  7512   000744                     u7291:
  7513   000744  EFA7  F003         	goto	l5332
  7514   000748                     u7290:
  7515   000748                     
  7516                           ; BSR set to: 0
  7517                           ;ff.c: 2246:   return FR_NOT_READY;
  7518   000748  0E03               	movlw	3
  7519   00074A  EFCE  F008         	goto	l588
  7520   00074E                     l5332:
  7521                           
  7522                           ; BSR set to: 0
  7523   00074E  5047               	movf	find_volume@wmode^0,w,c
  7524   000750  B4D8               	btfsc	status,2,c
  7525   000752  EFAD  F003         	goto	u7301
  7526   000756  EFAF  F003         	goto	u7300
  7527   00075A                     u7301:
  7528   00075A  EFB8  F003         	goto	l5340
  7529   00075E                     u7300:
  7530   00075E                     
  7531                           ; BSR set to: 0
  7532   00075E  A5AC               	btfss	find_volume@stat& (0+255),2,b
  7533   000760  EFB4  F003         	goto	u7311
  7534   000764  EFB6  F003         	goto	u7310
  7535   000768                     u7311:
  7536   000768  EFB8  F003         	goto	l5340
  7537   00076C                     u7310:
  7538   00076C  EF7F  F003         	goto	l5312
  7539   000770                     l5340:
  7540                           
  7541                           ; BSR set to: 0
  7542                           ;ff.c: 2254:  bsect = 0;
  7543   000770  0E00               	movlw	0
  7544   000772  6FB1               	movwf	find_volume@bsect& (0+255),b
  7545   000774  0E00               	movlw	0
  7546   000776  6FB2               	movwf	(find_volume@bsect+1)& (0+255),b
  7547   000778  0E00               	movlw	0
  7548   00077A  6FB3               	movwf	(find_volume@bsect+2)& (0+255),b
  7549   00077C  0E00               	movlw	0
  7550   00077E  6FB4               	movwf	(find_volume@bsect+3)& (0+255),b
  7551   000780                     
  7552                           ; BSR set to: 0
  7553                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  7554   000780  C0B8  F03B         	movff	find_volume@fs,check_fs@fs
  7555   000784  C0B9  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7556   000788  0E00               	movlw	0
  7557   00078A  6E3D               	movwf	check_fs@sect^0,c
  7558   00078C  0E00               	movlw	0
  7559   00078E  6E3E               	movwf	(check_fs@sect+1)^0,c
  7560   000790  0E00               	movlw	0
  7561   000792  6E3F               	movwf	(check_fs@sect+2)^0,c
  7562   000794  0E00               	movlw	0
  7563   000796  6E40               	movwf	(check_fs@sect+3)^0,c
  7564   000798  EC28  F02A         	call	_check_fs	;wreg free
  7565   00079C  0100               	movlb	0	; () banked
  7566   00079E  6FB7               	movwf	find_volume@fmt& (0+255),b
  7567   0007A0                     
  7568                           ; BSR set to: 0
  7569                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  7570   0007A0  05B7               	decf	find_volume@fmt& (0+255),w,b
  7571   0007A2  B4D8               	btfsc	status,2,c
  7572   0007A4  EFD6  F003         	goto	u7321
  7573   0007A8  EFD8  F003         	goto	u7320
  7574   0007AC                     u7321:
  7575   0007AC  EFDA  F003         	goto	l5350
  7576   0007B0                     u7320:
  7577   0007B0  EF95  F004         	goto	l5390
  7578   0007B4                     l5350:
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  7582   0007B4  0E00               	movlw	0
  7583   0007B6  6FB6               	movwf	(find_volume@i+1)& (0+255),b
  7584   0007B8  0E00               	movlw	0
  7585   0007BA  6FB5               	movwf	find_volume@i& (0+255),b
  7586   0007BC                     l5352:
  7587                           
  7588                           ; BSR set to: 0
  7589   0007BC  51B6               	movf	(find_volume@i+1)& (0+255),w,b
  7590   0007BE  E109               	bnz	u7330
  7591   0007C0  0E04               	movlw	4
  7592   0007C2  5DB5               	subwf	find_volume@i& (0+255),w,b
  7593   0007C4  A0D8               	btfss	status,0,c
  7594   0007C6  EFE7  F003         	goto	u7331
  7595   0007CA  EFE9  F003         	goto	u7330
  7596   0007CE                     u7331:
  7597   0007CE  EFEB  F003         	goto	l5356
  7598   0007D2                     u7330:
  7599   0007D2  EF3C  F004         	goto	l5370
  7600   0007D6                     l5356:
  7601                           
  7602                           ; BSR set to: 0
  7603                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  7604   0007D6  C0B5  F048         	movff	find_volume@i,??_find_volume
  7605   0007DA  C0B6  F049         	movff	find_volume@i+1,??_find_volume+1
  7606   0007DE  3A48               	swapf	??_find_volume^0,f,c
  7607   0007E0  3A49               	swapf	(??_find_volume+1)^0,f,c
  7608   0007E2  0EF0               	movlw	240
  7609   0007E4  1649               	andwf	(??_find_volume+1)^0,f,c
  7610   0007E6  5048               	movf	??_find_volume^0,w,c
  7611   0007E8  0B0F               	andlw	15
  7612   0007EA  1249               	iorwf	(??_find_volume+1)^0,f,c
  7613   0007EC  0EF0               	movlw	240
  7614   0007EE  1648               	andwf	??_find_volume^0,f,c
  7615   0007F0  5048               	movf	??_find_volume^0,w,c
  7616   0007F2  25B8               	addwf	find_volume@fs& (0+255),w,b
  7617   0007F4  6E4A               	movwf	(??_find_volume+2)^0,c
  7618   0007F6  5049               	movf	(??_find_volume+1)^0,w,c
  7619   0007F8  21B9               	addwfc	(find_volume@fs+1)& (0+255),w,b
  7620   0007FA  6E4B               	movwf	(??_find_volume+3)^0,c
  7621   0007FC  0EEC               	movlw	236
  7622   0007FE  244A               	addwf	(??_find_volume+2)^0,w,c
  7623   000800  6F9A               	movwf	find_volume@pt& (0+255),b
  7624   000802  0E01               	movlw	1
  7625   000804  204B               	addwfc	(??_find_volume+3)^0,w,c
  7626   000806  6F9B               	movwf	(find_volume@pt+1)& (0+255),b
  7627   000808                     
  7628                           ; BSR set to: 0
  7629                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  7630   000808  EE20 F004          	lfsr	2,4
  7631   00080C  519A               	movf	find_volume@pt& (0+255),w,b
  7632   00080E  26D9               	addwf	fsr2l,f,c
  7633   000810  519B               	movf	(find_volume@pt+1)& (0+255),w,b
  7634   000812  22DA               	addwfc	fsr2h,f,c
  7635   000814  50DF               	movf	indf2,w,c
  7636   000816  A4D8               	btfss	status,2,c
  7637   000818  EF10  F004         	goto	u7341
  7638   00081C  EF12  F004         	goto	u7340
  7639   000820                     u7341:
  7640   000820  EF1C  F004         	goto	l5362
  7641   000824                     u7340:
  7642   000824                     
  7643                           ; BSR set to: 0
  7644   000824  0E00               	movlw	0
  7645   000826  6F90               	movwf	_find_volume$942& (0+255),b
  7646   000828  0E00               	movlw	0
  7647   00082A  6F91               	movwf	(_find_volume$942+1)& (0+255),b
  7648   00082C  0E00               	movlw	0
  7649   00082E  6F92               	movwf	(_find_volume$942+2)& (0+255),b
  7650   000830  0E00               	movlw	0
  7651   000832  6F93               	movwf	(_find_volume$942+3)& (0+255),b
  7652   000834  EF2A  F004         	goto	l5364
  7653   000838                     l5362:
  7654                           
  7655                           ; BSR set to: 0
  7656   000838  EE20 F008          	lfsr	2,8
  7657   00083C  519A               	movf	find_volume@pt& (0+255),w,b
  7658   00083E  26D9               	addwf	fsr2l,f,c
  7659   000840  519B               	movf	(find_volume@pt+1)& (0+255),w,b
  7660   000842  22DA               	addwfc	fsr2h,f,c
  7661   000844  CFDE F090          	movff	postinc2,_find_volume$942
  7662   000848  CFDE F091          	movff	postinc2,_find_volume$942+1
  7663   00084C  CFDE F092          	movff	postinc2,_find_volume$942+2
  7664   000850  CFDE F093          	movff	postinc2,_find_volume$942+3
  7665   000854                     l5364:
  7666                           
  7667                           ; BSR set to: 0
  7668   000854  51B5               	movf	find_volume@i& (0+255),w,b
  7669   000856  0D04               	mullw	4
  7670   000858  50F3               	movf	243,w,c
  7671   00085A  0F80               	addlw	low find_volume@br
  7672   00085C  6ED9               	movwf	fsr2l,c
  7673   00085E  6ADA               	clrf	fsr2h,c
  7674   000860  C090  FFDE         	movff	_find_volume$942,postinc2
  7675   000864  C091  FFDE         	movff	_find_volume$942+1,postinc2
  7676   000868  C092  FFDE         	movff	_find_volume$942+2,postinc2
  7677   00086C  C093  FFDE         	movff	_find_volume$942+3,postinc2
  7678   000870                     
  7679                           ; BSR set to: 0
  7680                           ;ff.c: 2260:   }
  7681   000870  4BB5               	infsnz	find_volume@i& (0+255),f,b
  7682   000872  2BB6               	incf	(find_volume@i+1)& (0+255),f,b
  7683   000874  EFDE  F003         	goto	l5352
  7684   000878                     l5370:
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;ff.c: 2261:   i = 0;
  7688   000878  0E00               	movlw	0
  7689   00087A  6FB6               	movwf	(find_volume@i+1)& (0+255),b
  7690   00087C  0E00               	movlw	0
  7691   00087E  6FB5               	movwf	find_volume@i& (0+255),b
  7692   000880                     
  7693                           ; BSR set to: 0
  7694                           ;ff.c: 2262:   if (i) i--;
  7695   000880  51B5               	movf	find_volume@i& (0+255),w,b
  7696   000882  11B6               	iorwf	(find_volume@i+1)& (0+255),w,b
  7697   000884  B4D8               	btfsc	status,2,c
  7698   000886  EF47  F004         	goto	u7351
  7699   00088A  EF49  F004         	goto	u7350
  7700   00088E                     u7351:
  7701   00088E  EF4C  F004         	goto	l5376
  7702   000892                     u7350:
  7703   000892                     
  7704                           ; BSR set to: 0
  7705   000892  07B5               	decf	find_volume@i& (0+255),f,b
  7706   000894  A0D8               	btfss	status,0,c
  7707   000896  07B6               	decf	(find_volume@i+1)& (0+255),f,b
  7708   000898                     l5376:
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;ff.c: 2264:    bsect = br[i];
  7712   000898  51B5               	movf	find_volume@i& (0+255),w,b
  7713   00089A  0D04               	mullw	4
  7714   00089C  50F3               	movf	243,w,c
  7715   00089E  0F80               	addlw	low find_volume@br
  7716   0008A0  6ED9               	movwf	fsr2l,c
  7717   0008A2  6ADA               	clrf	fsr2h,c
  7718   0008A4  CFDE F0B1          	movff	postinc2,find_volume@bsect
  7719   0008A8  CFDE F0B2          	movff	postinc2,find_volume@bsect+1
  7720   0008AC  CFDE F0B3          	movff	postinc2,find_volume@bsect+2
  7721   0008B0  CFDE F0B4          	movff	postinc2,find_volume@bsect+3
  7722   0008B4                     
  7723                           ; BSR set to: 0
  7724                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  7725   0008B4  51B1               	movf	find_volume@bsect& (0+255),w,b
  7726   0008B6  11B2               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  7727   0008B8  11B3               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  7728   0008BA  11B4               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  7729   0008BC  A4D8               	btfss	status,2,c
  7730   0008BE  EF63  F004         	goto	u7361
  7731   0008C2  EF65  F004         	goto	u7360
  7732   0008C6                     u7361:
  7733   0008C6  EF6B  F004         	goto	l5382
  7734   0008CA                     u7360:
  7735   0008CA                     
  7736                           ; BSR set to: 0
  7737   0008CA  0E00               	movlw	0
  7738   0008CC  6F95               	movwf	(_find_volume$943+1)& (0+255),b
  7739   0008CE  0E02               	movlw	2
  7740   0008D0  6F94               	movwf	_find_volume$943& (0+255),b
  7741   0008D2  EF7E  F004         	goto	l5384
  7742   0008D6                     l5382:
  7743                           
  7744                           ; BSR set to: 0
  7745   0008D6  C0B8  F03B         	movff	find_volume@fs,check_fs@fs
  7746   0008DA  C0B9  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7747   0008DE  C0B1  F03D         	movff	find_volume@bsect,check_fs@sect
  7748   0008E2  C0B2  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  7749   0008E6  C0B3  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  7750   0008EA  C0B4  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  7751   0008EE  EC28  F02A         	call	_check_fs	;wreg free
  7752   0008F2  6E48               	movwf	??_find_volume^0,c
  7753   0008F4  5048               	movf	??_find_volume^0,w,c
  7754   0008F6  0100               	movlb	0	; () banked
  7755   0008F8  6F94               	movwf	_find_volume$943& (0+255),b
  7756   0008FA  6B95               	clrf	(_find_volume$943+1)& (0+255),b
  7757   0008FC                     l5384:
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  7761   0008FC  C094  F0B7         	movff	_find_volume$943,find_volume@fmt
  7762   000900                     
  7763                           ; BSR set to: 0
  7764   000900  51B7               	movf	find_volume@fmt& (0+255),w,b
  7765   000902  B4D8               	btfsc	status,2,c
  7766   000904  EF86  F004         	goto	u7371
  7767   000908  EF88  F004         	goto	u7370
  7768   00090C                     u7371:
  7769   00090C  EF95  F004         	goto	l5390
  7770   000910                     u7370:
  7771   000910                     
  7772                           ; BSR set to: 0
  7773   000910  4BB5               	infsnz	find_volume@i& (0+255),f,b
  7774   000912  2BB6               	incf	(find_volume@i+1)& (0+255),f,b
  7775   000914  51B6               	movf	(find_volume@i+1)& (0+255),w,b
  7776   000916  E109               	bnz	u7380
  7777   000918  0E04               	movlw	4
  7778   00091A  5DB5               	subwf	find_volume@i& (0+255),w,b
  7779   00091C  A0D8               	btfss	status,0,c
  7780   00091E  EF93  F004         	goto	u7381
  7781   000922  EF95  F004         	goto	u7380
  7782   000926                     u7381:
  7783   000926  EF4C  F004         	goto	l5376
  7784   00092A                     u7380:
  7785   00092A                     l5390:
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  7789   00092A  0E03               	movlw	3
  7790   00092C  19B7               	xorwf	find_volume@fmt& (0+255),w,b
  7791   00092E  A4D8               	btfss	status,2,c
  7792   000930  EF9C  F004         	goto	u7391
  7793   000934  EF9E  F004         	goto	u7390
  7794   000938                     u7391:
  7795   000938  EFA1  F004         	goto	l5396
  7796   00093C                     u7390:
  7797   00093C                     
  7798                           ; BSR set to: 0
  7799   00093C  0E01               	movlw	1
  7800   00093E  EFCE  F008         	goto	l588
  7801   000942                     l5396:
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  7805   000942  51B7               	movf	find_volume@fmt& (0+255),w,b
  7806   000944  B4D8               	btfsc	status,2,c
  7807   000946  EFA7  F004         	goto	u7401
  7808   00094A  EFA9  F004         	goto	u7400
  7809   00094E                     u7401:
  7810   00094E  EFAC  F004         	goto	l5402
  7811   000952                     u7400:
  7812   000952                     l5398:
  7813                           
  7814                           ; BSR set to: 0
  7815   000952  0E0D               	movlw	13
  7816   000954  EFCE  F008         	goto	l588
  7817   000958                     l5402:
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  7821   000958  EE20 F039          	lfsr	2,57
  7822   00095C  51B8               	movf	find_volume@fs& (0+255),w,b
  7823   00095E  26D9               	addwf	fsr2l,f,c
  7824   000960  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7825   000962  22DA               	addwfc	fsr2h,f,c
  7826   000964  50DE               	movf	postinc2,w,c
  7827   000966  E109               	bnz	u7410
  7828   000968  0E02               	movlw	2
  7829   00096A  18DE               	xorwf	postinc2,w,c
  7830   00096C  B4D8               	btfsc	status,2,c
  7831   00096E  EFBB  F004         	goto	u7411
  7832   000972  EFBD  F004         	goto	u7410
  7833   000976                     u7411:
  7834   000976  EFBF  F004         	goto	l5408
  7835   00097A                     u7410:
  7836   00097A  EFA9  F004         	goto	l5398
  7837   00097E                     l5408:
  7838                           
  7839                           ; BSR set to: 0
  7840                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  7841   00097E  EE20 F044          	lfsr	2,68
  7842   000982  51B8               	movf	find_volume@fs& (0+255),w,b
  7843   000984  26D9               	addwf	fsr2l,f,c
  7844   000986  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7845   000988  22DA               	addwfc	fsr2h,f,c
  7846   00098A  CFDE F048          	movff	postinc2,??_find_volume
  7847   00098E  CFDD F049          	movff	postdec2,??_find_volume+1
  7848   000992  C048  F0AD         	movff	??_find_volume,find_volume@fasize
  7849   000996  C049  F0AE         	movff	??_find_volume+1,find_volume@fasize+1
  7850   00099A  6BAF               	clrf	(find_volume@fasize+2)& (0+255),b
  7851   00099C  6BB0               	clrf	(find_volume@fasize+3)& (0+255),b
  7852   00099E                     
  7853                           ; BSR set to: 0
  7854                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  7855   00099E  51AD               	movf	find_volume@fasize& (0+255),w,b
  7856   0009A0  11AE               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  7857   0009A2  11AF               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  7858   0009A4  11B0               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  7859   0009A6  A4D8               	btfss	status,2,c
  7860   0009A8  EFD8  F004         	goto	u7421
  7861   0009AC  EFDA  F004         	goto	u7420
  7862   0009B0                     u7421:
  7863   0009B0  EFE8  F004         	goto	l616
  7864   0009B4                     u7420:
  7865   0009B4                     
  7866                           ; BSR set to: 0
  7867   0009B4  EE20 F052          	lfsr	2,82
  7868   0009B8  51B8               	movf	find_volume@fs& (0+255),w,b
  7869   0009BA  26D9               	addwf	fsr2l,f,c
  7870   0009BC  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7871   0009BE  22DA               	addwfc	fsr2h,f,c
  7872   0009C0  CFDE F0AD          	movff	postinc2,find_volume@fasize
  7873   0009C4  CFDE F0AE          	movff	postinc2,find_volume@fasize+1
  7874   0009C8  CFDE F0AF          	movff	postinc2,find_volume@fasize+2
  7875   0009CC  CFDE F0B0          	movff	postinc2,find_volume@fasize+3
  7876   0009D0                     l616:
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;ff.c: 2278:  fs->fsize = fasize;
  7880   0009D0  EE20 F016          	lfsr	2,22
  7881   0009D4  51B8               	movf	find_volume@fs& (0+255),w,b
  7882   0009D6  26D9               	addwf	fsr2l,f,c
  7883   0009D8  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7884   0009DA  22DA               	addwfc	fsr2h,f,c
  7885   0009DC  C0AD  FFDE         	movff	find_volume@fasize,postinc2
  7886   0009E0  C0AE  FFDE         	movff	find_volume@fasize+1,postinc2
  7887   0009E4  C0AF  FFDE         	movff	find_volume@fasize+2,postinc2
  7888   0009E8  C0B0  FFDE         	movff	find_volume@fasize+3,postinc2
  7889   0009EC                     
  7890                           ; BSR set to: 0
  7891                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  7892   0009EC  EE20 F03E          	lfsr	2,62
  7893   0009F0  51B8               	movf	find_volume@fs& (0+255),w,b
  7894   0009F2  26D9               	addwf	fsr2l,f,c
  7895   0009F4  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7896   0009F6  22DA               	addwfc	fsr2h,f,c
  7897   0009F8  EE10 F003          	lfsr	1,3
  7898   0009FC  51B8               	movf	find_volume@fs& (0+255),w,b
  7899   0009FE  26E1               	addwf	fsr1l,f,c
  7900   000A00  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7901   000A02  22E2               	addwfc	fsr1h,f,c
  7902   000A04  CFDF FFE7          	movff	indf2,indf1
  7903   000A08                     
  7904                           ; BSR set to: 0
  7905                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  7906   000A08  EE20 F003          	lfsr	2,3
  7907   000A0C  51B8               	movf	find_volume@fs& (0+255),w,b
  7908   000A0E  26D9               	addwf	fsr2l,f,c
  7909   000A10  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7910   000A12  22DA               	addwfc	fsr2h,f,c
  7911   000A14  04DE               	decf	postinc2,w,c
  7912   000A16  B4D8               	btfsc	status,2,c
  7913   000A18  EF10  F005         	goto	u7431
  7914   000A1C  EF12  F005         	goto	u7430
  7915   000A20                     u7431:
  7916   000A20  EF23  F005         	goto	l5424
  7917   000A24                     u7430:
  7918   000A24                     
  7919                           ; BSR set to: 0
  7920   000A24  EE20 F003          	lfsr	2,3
  7921   000A28  51B8               	movf	find_volume@fs& (0+255),w,b
  7922   000A2A  26D9               	addwf	fsr2l,f,c
  7923   000A2C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7924   000A2E  22DA               	addwfc	fsr2h,f,c
  7925   000A30  0E02               	movlw	2
  7926   000A32  18DE               	xorwf	postinc2,w,c
  7927   000A34  B4D8               	btfsc	status,2,c
  7928   000A36  EF1F  F005         	goto	u7441
  7929   000A3A  EF21  F005         	goto	u7440
  7930   000A3E                     u7441:
  7931   000A3E  EF23  F005         	goto	l5424
  7932   000A42                     u7440:
  7933   000A42  EFA9  F004         	goto	l5398
  7934   000A46                     l5424:
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;ff.c: 2283:  fasize *= fs->n_fats;
  7938   000A46  C0AD  F001         	movff	find_volume@fasize,___lmul@multiplier
  7939   000A4A  C0AE  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  7940   000A4E  C0AF  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  7941   000A52  C0B0  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  7942   000A56  EE20 F003          	lfsr	2,3
  7943   000A5A  51B8               	movf	find_volume@fs& (0+255),w,b
  7944   000A5C  26D9               	addwf	fsr2l,f,c
  7945   000A5E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7946   000A60  22DA               	addwfc	fsr2h,f,c
  7947   000A62  50DF               	movf	indf2,w,c
  7948   000A64  6E48               	movwf	??_find_volume^0,c
  7949   000A66  5048               	movf	??_find_volume^0,w,c
  7950   000A68  6E05               	movwf	___lmul@multiplicand^0,c
  7951   000A6A  6A06               	clrf	(___lmul@multiplicand+1)^0,c
  7952   000A6C  6A07               	clrf	(___lmul@multiplicand+2)^0,c
  7953   000A6E  6A08               	clrf	(___lmul@multiplicand+3)^0,c
  7954   000A70  EC70  F02F         	call	___lmul	;wreg free
  7955   000A74  C001  F0AD         	movff	?___lmul,find_volume@fasize
  7956   000A78  C002  F0AE         	movff	?___lmul+1,find_volume@fasize+1
  7957   000A7C  C003  F0AF         	movff	?___lmul+2,find_volume@fasize+2
  7958   000A80  C004  F0B0         	movff	?___lmul+3,find_volume@fasize+3
  7959   000A84                     
  7960                           ;ff.c: 2285:  fs->csize = fs->win[13];
  7961   000A84  0100               	movlb	0	; () banked
  7962   000A86  EE20 F03B          	lfsr	2,59
  7963   000A8A  51B8               	movf	find_volume@fs& (0+255),w,b
  7964   000A8C  26D9               	addwf	fsr2l,f,c
  7965   000A8E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7966   000A90  22DA               	addwfc	fsr2h,f,c
  7967   000A92  EE10 F002          	lfsr	1,2
  7968   000A96  51B8               	movf	find_volume@fs& (0+255),w,b
  7969   000A98  26E1               	addwf	fsr1l,f,c
  7970   000A9A  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7971   000A9C  22E2               	addwfc	fsr1h,f,c
  7972   000A9E  CFDF FFE7          	movff	indf2,indf1
  7973   000AA2                     
  7974                           ; BSR set to: 0
  7975                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  7976   000AA2  EE20 F002          	lfsr	2,2
  7977   000AA6  51B8               	movf	find_volume@fs& (0+255),w,b
  7978   000AA8  26D9               	addwf	fsr2l,f,c
  7979   000AAA  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7980   000AAC  22DA               	addwfc	fsr2h,f,c
  7981   000AAE  50DF               	movf	indf2,w,c
  7982   000AB0  B4D8               	btfsc	status,2,c
  7983   000AB2  EF5D  F005         	goto	u7451
  7984   000AB6  EF5F  F005         	goto	u7450
  7985   000ABA                     u7451:
  7986   000ABA  EFA9  F004         	goto	l5398
  7987   000ABE                     u7450:
  7988   000ABE                     
  7989                           ; BSR set to: 0
  7990   000ABE  EE20 F002          	lfsr	2,2
  7991   000AC2  51B8               	movf	find_volume@fs& (0+255),w,b
  7992   000AC4  26D9               	addwf	fsr2l,f,c
  7993   000AC6  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  7994   000AC8  22DA               	addwfc	fsr2h,f,c
  7995   000ACA  50DF               	movf	indf2,w,c
  7996   000ACC  6E48               	movwf	??_find_volume^0,c
  7997   000ACE  0EFF               	movlw	255
  7998   000AD0  2448               	addwf	??_find_volume^0,w,c
  7999   000AD2  6E49               	movwf	(??_find_volume+1)^0,c
  8000   000AD4  6A4A               	clrf	(??_find_volume+2)^0,c
  8001   000AD6  0EFF               	movlw	255
  8002   000AD8  224A               	addwfc	(??_find_volume+2)^0,f,c
  8003   000ADA  EE20 F002          	lfsr	2,2
  8004   000ADE  51B8               	movf	find_volume@fs& (0+255),w,b
  8005   000AE0  26D9               	addwf	fsr2l,f,c
  8006   000AE2  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8007   000AE4  22DA               	addwfc	fsr2h,f,c
  8008   000AE6  50DF               	movf	indf2,w,c
  8009   000AE8  6E4B               	movwf	(??_find_volume+3)^0,c
  8010   000AEA  504B               	movf	(??_find_volume+3)^0,w,c
  8011   000AEC  1649               	andwf	(??_find_volume+1)^0,f,c
  8012   000AEE  0E00               	movlw	0
  8013   000AF0  164A               	andwf	(??_find_volume+2)^0,f,c
  8014   000AF2  5049               	movf	(??_find_volume+1)^0,w,c
  8015   000AF4  104A               	iorwf	(??_find_volume+2)^0,w,c
  8016   000AF6  B4D8               	btfsc	status,2,c
  8017   000AF8  EF80  F005         	goto	u7461
  8018   000AFC  EF82  F005         	goto	u7460
  8019   000B00                     u7461:
  8020   000B00  EF84  F005         	goto	l5436
  8021   000B04                     u7460:
  8022   000B04  EFA9  F004         	goto	l5398
  8023   000B08                     l5436:
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  8027   000B08  EE20 F03F          	lfsr	2,63
  8028   000B0C  51B8               	movf	find_volume@fs& (0+255),w,b
  8029   000B0E  26D9               	addwf	fsr2l,f,c
  8030   000B10  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8031   000B12  22DA               	addwfc	fsr2h,f,c
  8032   000B14  EE10 F008          	lfsr	1,8
  8033   000B18  51B8               	movf	find_volume@fs& (0+255),w,b
  8034   000B1A  26E1               	addwf	fsr1l,f,c
  8035   000B1C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8036   000B1E  22E2               	addwfc	fsr1h,f,c
  8037   000B20  CFDE FFE6          	movff	postinc2,postinc1
  8038   000B24  CFDD FFE5          	movff	postdec2,postdec1
  8039   000B28                     
  8040                           ; BSR set to: 0
  8041                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  8042   000B28  EE20 F008          	lfsr	2,8
  8043   000B2C  51B8               	movf	find_volume@fs& (0+255),w,b
  8044   000B2E  26D9               	addwf	fsr2l,f,c
  8045   000B30  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8046   000B32  22DA               	addwfc	fsr2h,f,c
  8047   000B34  CFDE F048          	movff	postinc2,??_find_volume
  8048   000B38  CFDD F049          	movff	postdec2,??_find_volume+1
  8049   000B3C  0E0F               	movlw	15
  8050   000B3E  1648               	andwf	??_find_volume^0,f,c
  8051   000B40  0E00               	movlw	0
  8052   000B42  1649               	andwf	(??_find_volume+1)^0,f,c
  8053   000B44  5048               	movf	??_find_volume^0,w,c
  8054   000B46  1049               	iorwf	(??_find_volume+1)^0,w,c
  8055   000B48  B4D8               	btfsc	status,2,c
  8056   000B4A  EFA9  F005         	goto	u7471
  8057   000B4E  EFAB  F005         	goto	u7470
  8058   000B52                     u7471:
  8059   000B52  EFAD  F005         	goto	l5444
  8060   000B56                     u7470:
  8061   000B56  EFA9  F004         	goto	l5398
  8062   000B5A                     l5444:
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  8066   000B5A  EE20 F041          	lfsr	2,65
  8067   000B5E  51B8               	movf	find_volume@fs& (0+255),w,b
  8068   000B60  26D9               	addwf	fsr2l,f,c
  8069   000B62  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8070   000B64  22DA               	addwfc	fsr2h,f,c
  8071   000B66  CFDE F048          	movff	postinc2,??_find_volume
  8072   000B6A  CFDD F049          	movff	postdec2,??_find_volume+1
  8073   000B6E  C048  F0A4         	movff	??_find_volume,find_volume@tsect
  8074   000B72  C049  F0A5         	movff	??_find_volume+1,find_volume@tsect+1
  8075   000B76  6BA6               	clrf	(find_volume@tsect+2)& (0+255),b
  8076   000B78  6BA7               	clrf	(find_volume@tsect+3)& (0+255),b
  8077   000B7A                     
  8078                           ; BSR set to: 0
  8079                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  8080   000B7A  51A4               	movf	find_volume@tsect& (0+255),w,b
  8081   000B7C  11A5               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  8082   000B7E  11A6               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  8083   000B80  11A7               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  8084   000B82  A4D8               	btfss	status,2,c
  8085   000B84  EFC6  F005         	goto	u7481
  8086   000B88  EFC8  F005         	goto	u7480
  8087   000B8C                     u7481:
  8088   000B8C  EFD6  F005         	goto	l622
  8089   000B90                     u7480:
  8090   000B90                     
  8091                           ; BSR set to: 0
  8092   000B90  EE20 F04E          	lfsr	2,78
  8093   000B94  51B8               	movf	find_volume@fs& (0+255),w,b
  8094   000B96  26D9               	addwf	fsr2l,f,c
  8095   000B98  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8096   000B9A  22DA               	addwfc	fsr2h,f,c
  8097   000B9C  CFDE F0A4          	movff	postinc2,find_volume@tsect
  8098   000BA0  CFDE F0A5          	movff	postinc2,find_volume@tsect+1
  8099   000BA4  CFDE F0A6          	movff	postinc2,find_volume@tsect+2
  8100   000BA8  CFDE F0A7          	movff	postinc2,find_volume@tsect+3
  8101   000BAC                     l622:
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  8105   000BAC  EE20 F03C          	lfsr	2,60
  8106   000BB0  51B8               	movf	find_volume@fs& (0+255),w,b
  8107   000BB2  26D9               	addwf	fsr2l,f,c
  8108   000BB4  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8109   000BB6  22DA               	addwfc	fsr2h,f,c
  8110   000BB8  CFDE F0A2          	movff	postinc2,find_volume@nrsv
  8111   000BBC  CFDD F0A3          	movff	postdec2,find_volume@nrsv+1
  8112   000BC0                     
  8113                           ; BSR set to: 0
  8114                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  8115   000BC0  51A2               	movf	find_volume@nrsv& (0+255),w,b
  8116   000BC2  11A3               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  8117   000BC4  A4D8               	btfss	status,2,c
  8118   000BC6  EFE7  F005         	goto	u7491
  8119   000BCA  EFE9  F005         	goto	u7490
  8120   000BCE                     u7491:
  8121   000BCE  EFEB  F005         	goto	l5456
  8122   000BD2                     u7490:
  8123   000BD2  EFA9  F004         	goto	l5398
  8124   000BD6                     l5456:
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  8128   000BD6  EE20 F008          	lfsr	2,8
  8129   000BDA  51B8               	movf	find_volume@fs& (0+255),w,b
  8130   000BDC  26D9               	addwf	fsr2l,f,c
  8131   000BDE  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8132   000BE0  22DA               	addwfc	fsr2h,f,c
  8133   000BE2  CFDE F048          	movff	postinc2,??_find_volume
  8134   000BE6  CFDD F049          	movff	postdec2,??_find_volume+1
  8135   000BEA  0E04               	movlw	4
  8136   000BEC  6E4A               	movwf	(??_find_volume+2)^0,c
  8137   000BEE                     u7505:
  8138   000BEE  90D8               	bcf	status,0,c
  8139   000BF0  3249               	rrcf	(??_find_volume+1)^0,f,c
  8140   000BF2  3248               	rrcf	??_find_volume^0,f,c
  8141   000BF4  2E4A               	decfsz	(??_find_volume+2)^0,f,c
  8142   000BF6  EFF7  F005         	goto	u7505
  8143   000BFA  51A2               	movf	find_volume@nrsv& (0+255),w,b
  8144   000BFC  2448               	addwf	??_find_volume^0,w,c
  8145   000BFE  6E4B               	movwf	(??_find_volume+3)^0,c
  8146   000C00  51A3               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8147   000C02  2049               	addwfc	(??_find_volume+1)^0,w,c
  8148   000C04  6E4C               	movwf	(??_find_volume+4)^0,c
  8149   000C06  6A4D               	clrf	(??_find_volume+5)^0,c
  8150   000C08  B0D8               	btfsc	status,0,c
  8151   000C0A  2A4D               	incf	(??_find_volume+5)^0,f,c
  8152   000C0C  6A4E               	clrf	(??_find_volume+6)^0,c
  8153   000C0E  51AD               	movf	find_volume@fasize& (0+255),w,b
  8154   000C10  244B               	addwf	(??_find_volume+3)^0,w,c
  8155   000C12  6F9C               	movwf	find_volume@sysect& (0+255),b
  8156   000C14  51AE               	movf	(find_volume@fasize+1)& (0+255),w,b
  8157   000C16  204C               	addwfc	(??_find_volume+4)^0,w,c
  8158   000C18  6F9D               	movwf	(find_volume@sysect+1)& (0+255),b
  8159   000C1A  51AF               	movf	(find_volume@fasize+2)& (0+255),w,b
  8160   000C1C  204D               	addwfc	(??_find_volume+5)^0,w,c
  8161   000C1E  6F9E               	movwf	(find_volume@sysect+2)& (0+255),b
  8162   000C20  51B0               	movf	(find_volume@fasize+3)& (0+255),w,b
  8163   000C22  204E               	addwfc	(??_find_volume+6)^0,w,c
  8164   000C24  6F9F               	movwf	(find_volume@sysect+3)& (0+255),b
  8165   000C26                     
  8166                           ; BSR set to: 0
  8167                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  8168   000C26  519C               	movf	find_volume@sysect& (0+255),w,b
  8169   000C28  5DA4               	subwf	find_volume@tsect& (0+255),w,b
  8170   000C2A  519D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8171   000C2C  59A5               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8172   000C2E  519E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8173   000C30  59A6               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8174   000C32  519F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8175   000C34  59A7               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8176   000C36  B0D8               	btfsc	status,0,c
  8177   000C38  EF20  F006         	goto	u7511
  8178   000C3C  EF22  F006         	goto	u7510
  8179   000C40                     u7511:
  8180   000C40  EF24  F006         	goto	l5464
  8181   000C44                     u7510:
  8182   000C44  EFA9  F004         	goto	l5398
  8183   000C48                     l5464:
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  8187   000C48  519C               	movf	find_volume@sysect& (0+255),w,b
  8188   000C4A  5DA4               	subwf	find_volume@tsect& (0+255),w,b
  8189   000C4C  6E01               	movwf	___lldiv@dividend^0,c
  8190   000C4E  519D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8191   000C50  59A5               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8192   000C52  6E02               	movwf	(___lldiv@dividend+1)^0,c
  8193   000C54  519E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8194   000C56  59A6               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8195   000C58  6E03               	movwf	(___lldiv@dividend+2)^0,c
  8196   000C5A  519F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8197   000C5C  59A7               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8198   000C5E  6E04               	movwf	(___lldiv@dividend+3)^0,c
  8199   000C60  EE20 F002          	lfsr	2,2
  8200   000C64  51B8               	movf	find_volume@fs& (0+255),w,b
  8201   000C66  26D9               	addwf	fsr2l,f,c
  8202   000C68  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8203   000C6A  22DA               	addwfc	fsr2h,f,c
  8204   000C6C  50DF               	movf	indf2,w,c
  8205   000C6E  6E48               	movwf	??_find_volume^0,c
  8206   000C70  5048               	movf	??_find_volume^0,w,c
  8207   000C72  6E05               	movwf	___lldiv@divisor^0,c
  8208   000C74  6A06               	clrf	(___lldiv@divisor+1)^0,c
  8209   000C76  6A07               	clrf	(___lldiv@divisor+2)^0,c
  8210   000C78  6A08               	clrf	(___lldiv@divisor+3)^0,c
  8211   000C7A  EC53  F02E         	call	___lldiv	;wreg free
  8212   000C7E  C001  F0A8         	movff	?___lldiv,find_volume@nclst
  8213   000C82  C002  F0A9         	movff	?___lldiv+1,find_volume@nclst+1
  8214   000C86  C003  F0AA         	movff	?___lldiv+2,find_volume@nclst+2
  8215   000C8A  C004  F0AB         	movff	?___lldiv+3,find_volume@nclst+3
  8216   000C8E                     
  8217                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  8218   000C8E  0100               	movlb	0	; () banked
  8219   000C90  51A8               	movf	find_volume@nclst& (0+255),w,b
  8220   000C92  11A9               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  8221   000C94  11AA               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8222   000C96  11AB               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  8223   000C98  A4D8               	btfss	status,2,c
  8224   000C9A  EF51  F006         	goto	u7521
  8225   000C9E  EF53  F006         	goto	u7520
  8226   000CA2                     u7521:
  8227   000CA2  EF55  F006         	goto	l5472
  8228   000CA6                     u7520:
  8229   000CA6  EFA9  F004         	goto	l5398
  8230   000CAA                     l5472:
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;ff.c: 2304:  fmt = 1;
  8234   000CAA  0E01               	movlw	1
  8235   000CAC  6FB7               	movwf	find_volume@fmt& (0+255),b
  8236   000CAE                     
  8237                           ; BSR set to: 0
  8238                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  8239   000CAE  51AB               	movf	(find_volume@nclst+3)& (0+255),w,b
  8240   000CB0  11AA               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8241   000CB2  E10B               	bnz	u7530
  8242   000CB4  0EF6               	movlw	246
  8243   000CB6  5DA8               	subwf	find_volume@nclst& (0+255),w,b
  8244   000CB8  0E0F               	movlw	15
  8245   000CBA  59A9               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8246   000CBC  A0D8               	btfss	status,0,c
  8247   000CBE  EF63  F006         	goto	u7531
  8248   000CC2  EF65  F006         	goto	u7530
  8249   000CC6                     u7531:
  8250   000CC6  EF67  F006         	goto	l5478
  8251   000CCA                     u7530:
  8252   000CCA                     
  8253                           ; BSR set to: 0
  8254   000CCA  0E02               	movlw	2
  8255   000CCC  6FB7               	movwf	find_volume@fmt& (0+255),b
  8256   000CCE                     l5478:
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  8260   000CCE  51AB               	movf	(find_volume@nclst+3)& (0+255),w,b
  8261   000CD0  11AA               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8262   000CD2  E10B               	bnz	u7540
  8263   000CD4  0EF6               	movlw	246
  8264   000CD6  5DA8               	subwf	find_volume@nclst& (0+255),w,b
  8265   000CD8  0EFF               	movlw	255
  8266   000CDA  59A9               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8267   000CDC  A0D8               	btfss	status,0,c
  8268   000CDE  EF73  F006         	goto	u7541
  8269   000CE2  EF75  F006         	goto	u7540
  8270   000CE6                     u7541:
  8271   000CE6  EF77  F006         	goto	l5482
  8272   000CEA                     u7540:
  8273   000CEA                     
  8274                           ; BSR set to: 0
  8275   000CEA  0E03               	movlw	3
  8276   000CEC  6FB7               	movwf	find_volume@fmt& (0+255),b
  8277   000CEE                     l5482:
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  8281   000CEE  0E02               	movlw	2
  8282   000CF0  25A8               	addwf	find_volume@nclst& (0+255),w,b
  8283   000CF2  6E48               	movwf	??_find_volume^0,c
  8284   000CF4  0E00               	movlw	0
  8285   000CF6  21A9               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  8286   000CF8  6E49               	movwf	(??_find_volume+1)^0,c
  8287   000CFA  0E00               	movlw	0
  8288   000CFC  21AA               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  8289   000CFE  6E4A               	movwf	(??_find_volume+2)^0,c
  8290   000D00  0E00               	movlw	0
  8291   000D02  21AB               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  8292   000D04  6E4B               	movwf	(??_find_volume+3)^0,c
  8293   000D06  EE20 F012          	lfsr	2,18
  8294   000D0A  51B8               	movf	find_volume@fs& (0+255),w,b
  8295   000D0C  26D9               	addwf	fsr2l,f,c
  8296   000D0E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8297   000D10  22DA               	addwfc	fsr2h,f,c
  8298   000D12  C048  FFDE         	movff	??_find_volume,postinc2
  8299   000D16  C049  FFDE         	movff	??_find_volume+1,postinc2
  8300   000D1A  C04A  FFDE         	movff	??_find_volume+2,postinc2
  8301   000D1E  C04B  FFDE         	movff	??_find_volume+3,postinc2
  8302   000D22                     
  8303                           ; BSR set to: 0
  8304                           ;ff.c: 2310:  fs->volbase = bsect;
  8305   000D22  EE20 F01A          	lfsr	2,26
  8306   000D26  51B8               	movf	find_volume@fs& (0+255),w,b
  8307   000D28  26D9               	addwf	fsr2l,f,c
  8308   000D2A  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8309   000D2C  22DA               	addwfc	fsr2h,f,c
  8310   000D2E  C0B1  FFDE         	movff	find_volume@bsect,postinc2
  8311   000D32  C0B2  FFDE         	movff	find_volume@bsect+1,postinc2
  8312   000D36  C0B3  FFDE         	movff	find_volume@bsect+2,postinc2
  8313   000D3A  C0B4  FFDE         	movff	find_volume@bsect+3,postinc2
  8314   000D3E                     
  8315                           ; BSR set to: 0
  8316                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  8317   000D3E  51A2               	movf	find_volume@nrsv& (0+255),w,b
  8318   000D40  25B1               	addwf	find_volume@bsect& (0+255),w,b
  8319   000D42  6E48               	movwf	??_find_volume^0,c
  8320   000D44  51A3               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8321   000D46  21B2               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8322   000D48  6E49               	movwf	(??_find_volume+1)^0,c
  8323   000D4A  0E00               	movlw	0
  8324   000D4C  21B3               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8325   000D4E  6E4A               	movwf	(??_find_volume+2)^0,c
  8326   000D50  0E00               	movlw	0
  8327   000D52  21B4               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8328   000D54  6E4B               	movwf	(??_find_volume+3)^0,c
  8329   000D56  EE20 F01E          	lfsr	2,30
  8330   000D5A  51B8               	movf	find_volume@fs& (0+255),w,b
  8331   000D5C  26D9               	addwf	fsr2l,f,c
  8332   000D5E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8333   000D60  22DA               	addwfc	fsr2h,f,c
  8334   000D62  C048  FFDE         	movff	??_find_volume,postinc2
  8335   000D66  C049  FFDE         	movff	??_find_volume+1,postinc2
  8336   000D6A  C04A  FFDE         	movff	??_find_volume+2,postinc2
  8337   000D6E  C04B  FFDE         	movff	??_find_volume+3,postinc2
  8338   000D72                     
  8339                           ; BSR set to: 0
  8340                           ;ff.c: 2312:  fs->database = bsect + sysect;
  8341   000D72  519C               	movf	find_volume@sysect& (0+255),w,b
  8342   000D74  25B1               	addwf	find_volume@bsect& (0+255),w,b
  8343   000D76  6E48               	movwf	??_find_volume^0,c
  8344   000D78  519D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8345   000D7A  21B2               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8346   000D7C  6E49               	movwf	(??_find_volume+1)^0,c
  8347   000D7E  519E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8348   000D80  21B3               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8349   000D82  6E4A               	movwf	(??_find_volume+2)^0,c
  8350   000D84  519F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8351   000D86  21B4               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8352   000D88  6E4B               	movwf	(??_find_volume+3)^0,c
  8353   000D8A  EE20 F026          	lfsr	2,38
  8354   000D8E  51B8               	movf	find_volume@fs& (0+255),w,b
  8355   000D90  26D9               	addwf	fsr2l,f,c
  8356   000D92  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8357   000D94  22DA               	addwfc	fsr2h,f,c
  8358   000D96  C048  FFDE         	movff	??_find_volume,postinc2
  8359   000D9A  C049  FFDE         	movff	??_find_volume+1,postinc2
  8360   000D9E  C04A  FFDE         	movff	??_find_volume+2,postinc2
  8361   000DA2  C04B  FFDE         	movff	??_find_volume+3,postinc2
  8362   000DA6                     
  8363                           ; BSR set to: 0
  8364                           ;ff.c: 2313:  if (fmt == 3) {
  8365   000DA6  0E03               	movlw	3
  8366   000DA8  19B7               	xorwf	find_volume@fmt& (0+255),w,b
  8367   000DAA  A4D8               	btfss	status,2,c
  8368   000DAC  EFDA  F006         	goto	u7551
  8369   000DB0  EFDC  F006         	goto	u7550
  8370   000DB4                     u7551:
  8371   000DB4  EF22  F007         	goto	l5502
  8372   000DB8                     u7550:
  8373   000DB8                     
  8374                           ; BSR set to: 0
  8375                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  8376   000DB8  EE20 F008          	lfsr	2,8
  8377   000DBC  51B8               	movf	find_volume@fs& (0+255),w,b
  8378   000DBE  26D9               	addwf	fsr2l,f,c
  8379   000DC0  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8380   000DC2  22DA               	addwfc	fsr2h,f,c
  8381   000DC4  50DE               	movf	postinc2,w,c
  8382   000DC6  10DE               	iorwf	postinc2,w,c
  8383   000DC8  B4D8               	btfsc	status,2,c
  8384   000DCA  EFE9  F006         	goto	u7561
  8385   000DCE  EFEB  F006         	goto	u7560
  8386   000DD2                     u7561:
  8387   000DD2  EFED  F006         	goto	l5498
  8388   000DD6                     u7560:
  8389   000DD6  EFA9  F004         	goto	l5398
  8390   000DDA                     l5498:
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  8394   000DDA  EE20 F05A          	lfsr	2,90
  8395   000DDE  51B8               	movf	find_volume@fs& (0+255),w,b
  8396   000DE0  26D9               	addwf	fsr2l,f,c
  8397   000DE2  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8398   000DE4  22DA               	addwfc	fsr2h,f,c
  8399   000DE6  EE10 F022          	lfsr	1,34
  8400   000DEA  51B8               	movf	find_volume@fs& (0+255),w,b
  8401   000DEC  26E1               	addwf	fsr1l,f,c
  8402   000DEE  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8403   000DF0  22E2               	addwfc	fsr1h,f,c
  8404   000DF2  CFDE FFE6          	movff	postinc2,postinc1
  8405   000DF6  CFDE FFE6          	movff	postinc2,postinc1
  8406   000DFA  CFDE FFE6          	movff	postinc2,postinc1
  8407   000DFE  CFDE FFE6          	movff	postinc2,postinc1
  8408   000E02                     
  8409                           ; BSR set to: 0
  8410                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  8411   000E02  EE20 F012          	lfsr	2,18
  8412   000E06  51B8               	movf	find_volume@fs& (0+255),w,b
  8413   000E08  26D9               	addwf	fsr2l,f,c
  8414   000E0A  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8415   000E0C  22DA               	addwfc	fsr2h,f,c
  8416   000E0E  CFDE F048          	movff	postinc2,??_find_volume
  8417   000E12  CFDE F049          	movff	postinc2,??_find_volume+1
  8418   000E16  CFDE F04A          	movff	postinc2,??_find_volume+2
  8419   000E1A  CFDE F04B          	movff	postinc2,??_find_volume+3
  8420   000E1E  0E02               	movlw	2
  8421   000E20                     u7575:
  8422   000E20  90D8               	bcf	status,0,c
  8423   000E22  3648               	rlcf	??_find_volume^0,f,c
  8424   000E24  3649               	rlcf	(??_find_volume+1)^0,f,c
  8425   000E26  364A               	rlcf	(??_find_volume+2)^0,f,c
  8426   000E28  364B               	rlcf	(??_find_volume+3)^0,f,c
  8427   000E2A  2EE8               	decfsz	wreg,f,c
  8428   000E2C  EF10  F007         	goto	u7575
  8429   000E30  C048  F096         	movff	??_find_volume,find_volume@szbfat
  8430   000E34  C049  F097         	movff	??_find_volume+1,find_volume@szbfat+1
  8431   000E38  C04A  F098         	movff	??_find_volume+2,find_volume@szbfat+2
  8432   000E3C  C04B  F099         	movff	??_find_volume+3,find_volume@szbfat+3
  8433                           
  8434                           ;ff.c: 2317:  } else {
  8435   000E40  EFC1  F007         	goto	l630
  8436   000E44                     l5502:
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  8440   000E44  EE20 F008          	lfsr	2,8
  8441   000E48  51B8               	movf	find_volume@fs& (0+255),w,b
  8442   000E4A  26D9               	addwf	fsr2l,f,c
  8443   000E4C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8444   000E4E  22DA               	addwfc	fsr2h,f,c
  8445   000E50  50DE               	movf	postinc2,w,c
  8446   000E52  10DE               	iorwf	postinc2,w,c
  8447   000E54  A4D8               	btfss	status,2,c
  8448   000E56  EF2F  F007         	goto	u7581
  8449   000E5A  EF31  F007         	goto	u7580
  8450   000E5E                     u7581:
  8451   000E5E  EF33  F007         	goto	l5508
  8452   000E62                     u7580:
  8453   000E62  EFA9  F004         	goto	l5398
  8454   000E66                     l5508:
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  8458   000E66  EE20 F01E          	lfsr	2,30
  8459   000E6A  51B8               	movf	find_volume@fs& (0+255),w,b
  8460   000E6C  26D9               	addwf	fsr2l,f,c
  8461   000E6E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8462   000E70  22DA               	addwfc	fsr2h,f,c
  8463   000E72  CFDE F048          	movff	postinc2,??_find_volume
  8464   000E76  CFDE F049          	movff	postinc2,??_find_volume+1
  8465   000E7A  CFDE F04A          	movff	postinc2,??_find_volume+2
  8466   000E7E  CFDE F04B          	movff	postinc2,??_find_volume+3
  8467   000E82  51AD               	movf	find_volume@fasize& (0+255),w,b
  8468   000E84  2448               	addwf	??_find_volume^0,w,c
  8469   000E86  6E4C               	movwf	(??_find_volume+4)^0,c
  8470   000E88  51AE               	movf	(find_volume@fasize+1)& (0+255),w,b
  8471   000E8A  2049               	addwfc	(??_find_volume+1)^0,w,c
  8472   000E8C  6E4D               	movwf	(??_find_volume+5)^0,c
  8473   000E8E  51AF               	movf	(find_volume@fasize+2)& (0+255),w,b
  8474   000E90  204A               	addwfc	(??_find_volume+2)^0,w,c
  8475   000E92  6E4E               	movwf	(??_find_volume+6)^0,c
  8476   000E94  51B0               	movf	(find_volume@fasize+3)& (0+255),w,b
  8477   000E96  204B               	addwfc	(??_find_volume+3)^0,w,c
  8478   000E98  6E4F               	movwf	(??_find_volume+7)^0,c
  8479   000E9A  EE20 F022          	lfsr	2,34
  8480   000E9E  51B8               	movf	find_volume@fs& (0+255),w,b
  8481   000EA0  26D9               	addwf	fsr2l,f,c
  8482   000EA2  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8483   000EA4  22DA               	addwfc	fsr2h,f,c
  8484   000EA6  C04C  FFDE         	movff	??_find_volume+4,postinc2
  8485   000EAA  C04D  FFDE         	movff	??_find_volume+5,postinc2
  8486   000EAE  C04E  FFDE         	movff	??_find_volume+6,postinc2
  8487   000EB2  C04F  FFDE         	movff	??_find_volume+7,postinc2
  8488   000EB6                     
  8489                           ; BSR set to: 0
  8490                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  8491   000EB6  0E02               	movlw	2
  8492   000EB8  19B7               	xorwf	find_volume@fmt& (0+255),w,b
  8493   000EBA  B4D8               	btfsc	status,2,c
  8494   000EBC  EF62  F007         	goto	u7591
  8495   000EC0  EF64  F007         	goto	u7590
  8496   000EC4                     u7591:
  8497   000EC4  EFAA  F007         	goto	l5514
  8498   000EC8                     u7590:
  8499   000EC8                     
  8500                           ; BSR set to: 0
  8501   000EC8  EE20 F012          	lfsr	2,18
  8502   000ECC  51B8               	movf	find_volume@fs& (0+255),w,b
  8503   000ECE  26D9               	addwf	fsr2l,f,c
  8504   000ED0  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8505   000ED2  22DA               	addwfc	fsr2h,f,c
  8506   000ED4  CFDE F048          	movff	postinc2,??_find_volume
  8507   000ED8  CFDE F049          	movff	postinc2,??_find_volume+1
  8508   000EDC  CFDE F04A          	movff	postinc2,??_find_volume+2
  8509   000EE0  CFDE F04B          	movff	postinc2,??_find_volume+3
  8510   000EE4  0E01               	movlw	1
  8511   000EE6  1448               	andwf	??_find_volume^0,w,c
  8512   000EE8  6E4C               	movwf	(??_find_volume+4)^0,c
  8513   000EEA  0E00               	movlw	0
  8514   000EEC  1449               	andwf	(??_find_volume+1)^0,w,c
  8515   000EEE  6E4D               	movwf	(??_find_volume+5)^0,c
  8516   000EF0  0E00               	movlw	0
  8517   000EF2  144A               	andwf	(??_find_volume+2)^0,w,c
  8518   000EF4  6E4E               	movwf	(??_find_volume+6)^0,c
  8519   000EF6  0E00               	movlw	0
  8520   000EF8  144B               	andwf	(??_find_volume+3)^0,w,c
  8521   000EFA  6E4F               	movwf	(??_find_volume+7)^0,c
  8522   000EFC  EE20 F012          	lfsr	2,18
  8523   000F00  51B8               	movf	find_volume@fs& (0+255),w,b
  8524   000F02  26D9               	addwf	fsr2l,f,c
  8525   000F04  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8526   000F06  22DA               	addwfc	fsr2h,f,c
  8527   000F08  CFDE F001          	movff	postinc2,___lmul@multiplier
  8528   000F0C  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  8529   000F10  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  8530   000F14  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  8531   000F18  0E03               	movlw	3
  8532   000F1A  6E05               	movwf	___lmul@multiplicand^0,c
  8533   000F1C  0E00               	movlw	0
  8534   000F1E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8535   000F20  0E00               	movlw	0
  8536   000F22  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8537   000F24  0E00               	movlw	0
  8538   000F26  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8539   000F28  EC70  F02F         	call	___lmul	;wreg free
  8540   000F2C  90D8               	bcf	status,0,c
  8541   000F2E  3204               	rrcf	(?___lmul+3)^0,f,c
  8542   000F30  3203               	rrcf	(?___lmul+2)^0,f,c
  8543   000F32  3202               	rrcf	(?___lmul+1)^0,f,c
  8544   000F34  3201               	rrcf	?___lmul^0,f,c
  8545   000F36  504C               	movf	(??_find_volume+4)^0,w,c
  8546   000F38  2401               	addwf	?___lmul^0,w,c
  8547   000F3A  0100               	movlb	0	; () banked
  8548   000F3C  6F96               	movwf	find_volume@szbfat& (0+255),b
  8549   000F3E  504D               	movf	(??_find_volume+5)^0,w,c
  8550   000F40  2002               	addwfc	(?___lmul+1)^0,w,c
  8551   000F42  6F97               	movwf	(find_volume@szbfat+1)& (0+255),b
  8552   000F44  504E               	movf	(??_find_volume+6)^0,w,c
  8553   000F46  2003               	addwfc	(?___lmul+2)^0,w,c
  8554   000F48  6F98               	movwf	(find_volume@szbfat+2)& (0+255),b
  8555   000F4A  504F               	movf	(??_find_volume+7)^0,w,c
  8556   000F4C  2004               	addwfc	(?___lmul+3)^0,w,c
  8557   000F4E  6F99               	movwf	(find_volume@szbfat+3)& (0+255),b
  8558   000F50  EFC1  F007         	goto	l630
  8559   000F54                     l5514:
  8560                           
  8561                           ; BSR set to: 0
  8562   000F54  EE20 F012          	lfsr	2,18
  8563   000F58  51B8               	movf	find_volume@fs& (0+255),w,b
  8564   000F5A  26D9               	addwf	fsr2l,f,c
  8565   000F5C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8566   000F5E  22DA               	addwfc	fsr2h,f,c
  8567   000F60  CFDE F048          	movff	postinc2,??_find_volume
  8568   000F64  CFDE F049          	movff	postinc2,??_find_volume+1
  8569   000F68  CFDE F04A          	movff	postinc2,??_find_volume+2
  8570   000F6C  CFDE F04B          	movff	postinc2,??_find_volume+3
  8571   000F70  90D8               	bcf	status,0,c
  8572   000F72  3448               	rlcf	??_find_volume^0,w,c
  8573   000F74  6F96               	movwf	find_volume@szbfat& (0+255),b
  8574   000F76  3449               	rlcf	(??_find_volume+1)^0,w,c
  8575   000F78  6F97               	movwf	(find_volume@szbfat+1)& (0+255),b
  8576   000F7A  344A               	rlcf	(??_find_volume+2)^0,w,c
  8577   000F7C  6F98               	movwf	(find_volume@szbfat+2)& (0+255),b
  8578   000F7E  344B               	rlcf	(??_find_volume+3)^0,w,c
  8579   000F80  6F99               	movwf	(find_volume@szbfat+3)& (0+255),b
  8580   000F82                     l630:
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  8584   000F82  0EFF               	movlw	255
  8585   000F84  2596               	addwf	find_volume@szbfat& (0+255),w,b
  8586   000F86  6E48               	movwf	??_find_volume^0,c
  8587   000F88  0E01               	movlw	1
  8588   000F8A  2197               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  8589   000F8C  6E49               	movwf	(??_find_volume+1)^0,c
  8590   000F8E  0E00               	movlw	0
  8591   000F90  2198               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  8592   000F92  6E4A               	movwf	(??_find_volume+2)^0,c
  8593   000F94  0E00               	movlw	0
  8594   000F96  2199               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  8595   000F98  6E4B               	movwf	(??_find_volume+3)^0,c
  8596   000F9A  0E0A               	movlw	10
  8597   000F9C  EFD5  F007         	goto	u7600
  8598   000FA0                     u7605:
  8599   000FA0  90D8               	bcf	status,0,c
  8600   000FA2  324B               	rrcf	(??_find_volume+3)^0,f,c
  8601   000FA4  324A               	rrcf	(??_find_volume+2)^0,f,c
  8602   000FA6  3249               	rrcf	(??_find_volume+1)^0,f,c
  8603   000FA8  3248               	rrcf	??_find_volume^0,f,c
  8604   000FAA                     u7600:
  8605   000FAA  2EE8               	decfsz	wreg,f,c
  8606   000FAC  EFD0  F007         	goto	u7605
  8607   000FB0  EE20 F016          	lfsr	2,22
  8608   000FB4  51B8               	movf	find_volume@fs& (0+255),w,b
  8609   000FB6  26D9               	addwf	fsr2l,f,c
  8610   000FB8  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8611   000FBA  22DA               	addwfc	fsr2h,f,c
  8612   000FBC  5048               	movf	??_find_volume^0,w,c
  8613   000FBE  5CDE               	subwf	postinc2,w,c
  8614   000FC0  5049               	movf	(??_find_volume+1)^0,w,c
  8615   000FC2  58DE               	subwfb	postinc2,w,c
  8616   000FC4  504A               	movf	(??_find_volume+2)^0,w,c
  8617   000FC6  58DE               	subwfb	postinc2,w,c
  8618   000FC8  504B               	movf	(??_find_volume+3)^0,w,c
  8619   000FCA  58DE               	subwfb	postinc2,w,c
  8620   000FCC  B0D8               	btfsc	status,0,c
  8621   000FCE  EFEB  F007         	goto	u7611
  8622   000FD2  EFED  F007         	goto	u7610
  8623   000FD6                     u7611:
  8624   000FD6  EFEF  F007         	goto	l5520
  8625   000FDA                     u7610:
  8626   000FDA  EFA9  F004         	goto	l5398
  8627   000FDE                     l5520:
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  8631   000FDE  EE20 F00E          	lfsr	2,14
  8632   000FE2  51B8               	movf	find_volume@fs& (0+255),w,b
  8633   000FE4  26D9               	addwf	fsr2l,f,c
  8634   000FE6  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8635   000FE8  22DA               	addwfc	fsr2h,f,c
  8636   000FEA  0EFF               	movlw	255
  8637   000FEC  6EDE               	movwf	postinc2,c
  8638   000FEE  0EFF               	movlw	255
  8639   000FF0  6EDE               	movwf	postinc2,c
  8640   000FF2  0EFF               	movlw	255
  8641   000FF4  6EDE               	movwf	postinc2,c
  8642   000FF6  0EFF               	movlw	255
  8643   000FF8  6EDD               	movwf	postdec2,c
  8644   000FFA  52DD               	movf	postdec2,f,c
  8645   000FFC  52DD               	movf	postdec2,f,c
  8646   000FFE  EE10 F00A          	lfsr	1,10
  8647   001002  51B8               	movf	find_volume@fs& (0+255),w,b
  8648   001004  26E1               	addwf	fsr1l,f,c
  8649   001006  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8650   001008  22E2               	addwfc	fsr1h,f,c
  8651   00100A  CFDE FFE6          	movff	postinc2,postinc1
  8652   00100E  CFDE FFE6          	movff	postinc2,postinc1
  8653   001012  CFDE FFE6          	movff	postinc2,postinc1
  8654   001016  CFDE FFE6          	movff	postinc2,postinc1
  8655   00101A                     
  8656                           ; BSR set to: 0
  8657                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  8658   00101A  EE20 F005          	lfsr	2,5
  8659   00101E  51B8               	movf	find_volume@fs& (0+255),w,b
  8660   001020  26D9               	addwf	fsr2l,f,c
  8661   001022  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8662   001024  22DA               	addwfc	fsr2h,f,c
  8663   001026  0E80               	movlw	128
  8664   001028  6EDF               	movwf	indf2,c
  8665   00102A                     
  8666                           ; BSR set to: 0
  8667                           ;ff.c: 2333:  if (fmt == 3
  8668   00102A  0E03               	movlw	3
  8669   00102C  19B7               	xorwf	find_volume@fmt& (0+255),w,b
  8670   00102E  A4D8               	btfss	status,2,c
  8671   001030  EF1C  F008         	goto	u7621
  8672   001034  EF1E  F008         	goto	u7620
  8673   001038                     u7621:
  8674   001038  EFB9  F008         	goto	l5538
  8675   00103C                     u7620:
  8676   00103C                     
  8677                           ; BSR set to: 0
  8678   00103C  EE20 F05E          	lfsr	2,94
  8679   001040  51B8               	movf	find_volume@fs& (0+255),w,b
  8680   001042  26D9               	addwf	fsr2l,f,c
  8681   001044  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8682   001046  22DA               	addwfc	fsr2h,f,c
  8683   001048  04DE               	decf	postinc2,w,c
  8684   00104A  10DE               	iorwf	postinc2,w,c
  8685   00104C  A4D8               	btfss	status,2,c
  8686   00104E  EF2B  F008         	goto	u7631
  8687   001052  EF2D  F008         	goto	u7630
  8688   001056                     u7631:
  8689   001056  EFB9  F008         	goto	l5538
  8690   00105A                     u7630:
  8691   00105A                     
  8692                           ; BSR set to: 0
  8693   00105A  C0B8  F030         	movff	find_volume@fs,move_window@fs
  8694   00105E  C0B9  F031         	movff	find_volume@fs+1,move_window@fs+1
  8695   001062  0E01               	movlw	1
  8696   001064  25B1               	addwf	find_volume@bsect& (0+255),w,b
  8697   001066  6E32               	movwf	move_window@sector^0,c
  8698   001068  0E00               	movlw	0
  8699   00106A  21B2               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8700   00106C  6E33               	movwf	(move_window@sector+1)^0,c
  8701   00106E  0E00               	movlw	0
  8702   001070  21B3               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8703   001072  6E34               	movwf	(move_window@sector+2)^0,c
  8704   001074  0E00               	movlw	0
  8705   001076  21B4               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8706   001078  6E35               	movwf	(move_window@sector+3)^0,c
  8707   00107A  EC3C  F02D         	call	_move_window	;wreg free
  8708   00107E  0900               	iorlw	0
  8709   001080  A4D8               	btfss	status,2,c
  8710   001082  EF45  F008         	goto	u7641
  8711   001086  EF47  F008         	goto	u7640
  8712   00108A                     u7641:
  8713   00108A  EFB9  F008         	goto	l5538
  8714   00108E                     u7640:
  8715   00108E                     
  8716                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  8717   00108E  0100               	movlb	0	; () banked
  8718   001090  EE20 F005          	lfsr	2,5
  8719   001094  51B8               	movf	find_volume@fs& (0+255),w,b
  8720   001096  26D9               	addwf	fsr2l,f,c
  8721   001098  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8722   00109A  22DA               	addwfc	fsr2h,f,c
  8723   00109C  6ADF               	clrf	indf2,c
  8724                           
  8725                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  8726   00109E  EE22 F02C          	lfsr	2,556
  8727   0010A2  51B8               	movf	find_volume@fs& (0+255),w,b
  8728   0010A4  26D9               	addwf	fsr2l,f,c
  8729   0010A6  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8730   0010A8  22DA               	addwfc	fsr2h,f,c
  8731   0010AA  0E55               	movlw	85
  8732   0010AC  18DE               	xorwf	postinc2,w,c
  8733   0010AE  E107               	bnz	u7651
  8734   0010B0  0EAA               	movlw	170
  8735   0010B2  18DE               	xorwf	postinc2,w,c
  8736   0010B4  A4D8               	btfss	status,2,c
  8737   0010B6  EF5F  F008         	goto	u7651
  8738   0010BA  EF61  F008         	goto	u7650
  8739   0010BE                     u7651:
  8740   0010BE  EFB9  F008         	goto	l5538
  8741   0010C2                     u7650:
  8742   0010C2                     
  8743                           ; BSR set to: 0
  8744   0010C2  EE20 F02E          	lfsr	2,46
  8745   0010C6  51B8               	movf	find_volume@fs& (0+255),w,b
  8746   0010C8  26D9               	addwf	fsr2l,f,c
  8747   0010CA  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8748   0010CC  22DA               	addwfc	fsr2h,f,c
  8749   0010CE  0E52               	movlw	82
  8750   0010D0  18DE               	xorwf	postinc2,w,c
  8751   0010D2  E10D               	bnz	u7661
  8752   0010D4  0E52               	movlw	82
  8753   0010D6  18DE               	xorwf	postinc2,w,c
  8754   0010D8  E10A               	bnz	u7661
  8755   0010DA  0E61               	movlw	97
  8756   0010DC  18DE               	xorwf	postinc2,w,c
  8757   0010DE  E107               	bnz	u7661
  8758   0010E0  0E41               	movlw	65
  8759   0010E2  18DE               	xorwf	postinc2,w,c
  8760   0010E4  A4D8               	btfss	status,2,c
  8761   0010E6  EF77  F008         	goto	u7661
  8762   0010EA  EF79  F008         	goto	u7660
  8763   0010EE                     u7661:
  8764   0010EE  EFB9  F008         	goto	l5538
  8765   0010F2                     u7660:
  8766   0010F2                     
  8767                           ; BSR set to: 0
  8768   0010F2  EE22 F012          	lfsr	2,530
  8769   0010F6  51B8               	movf	find_volume@fs& (0+255),w,b
  8770   0010F8  26D9               	addwf	fsr2l,f,c
  8771   0010FA  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8772   0010FC  22DA               	addwfc	fsr2h,f,c
  8773   0010FE  0E72               	movlw	114
  8774   001100  18DE               	xorwf	postinc2,w,c
  8775   001102  E10D               	bnz	u7671
  8776   001104  0E72               	movlw	114
  8777   001106  18DE               	xorwf	postinc2,w,c
  8778   001108  E10A               	bnz	u7671
  8779   00110A  0E41               	movlw	65
  8780   00110C  18DE               	xorwf	postinc2,w,c
  8781   00110E  E107               	bnz	u7671
  8782   001110  0E61               	movlw	97
  8783   001112  18DE               	xorwf	postinc2,w,c
  8784   001114  A4D8               	btfss	status,2,c
  8785   001116  EF8F  F008         	goto	u7671
  8786   00111A  EF91  F008         	goto	u7670
  8787   00111E                     u7671:
  8788   00111E  EFB9  F008         	goto	l5538
  8789   001122                     u7670:
  8790   001122                     
  8791                           ; BSR set to: 0
  8792                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  8793   001122  EE22 F016          	lfsr	2,534
  8794   001126  51B8               	movf	find_volume@fs& (0+255),w,b
  8795   001128  26D9               	addwf	fsr2l,f,c
  8796   00112A  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8797   00112C  22DA               	addwfc	fsr2h,f,c
  8798   00112E  EE10 F00E          	lfsr	1,14
  8799   001132  51B8               	movf	find_volume@fs& (0+255),w,b
  8800   001134  26E1               	addwf	fsr1l,f,c
  8801   001136  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8802   001138  22E2               	addwfc	fsr1h,f,c
  8803   00113A  CFDE FFE6          	movff	postinc2,postinc1
  8804   00113E  CFDE FFE6          	movff	postinc2,postinc1
  8805   001142  CFDE FFE6          	movff	postinc2,postinc1
  8806   001146  CFDE FFE6          	movff	postinc2,postinc1
  8807                           
  8808                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  8809   00114A  EE22 F01A          	lfsr	2,538
  8810   00114E  51B8               	movf	find_volume@fs& (0+255),w,b
  8811   001150  26D9               	addwf	fsr2l,f,c
  8812   001152  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8813   001154  22DA               	addwfc	fsr2h,f,c
  8814   001156  EE10 F00A          	lfsr	1,10
  8815   00115A  51B8               	movf	find_volume@fs& (0+255),w,b
  8816   00115C  26E1               	addwf	fsr1l,f,c
  8817   00115E  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8818   001160  22E2               	addwfc	fsr1h,f,c
  8819   001162  CFDE FFE6          	movff	postinc2,postinc1
  8820   001166  CFDE FFE6          	movff	postinc2,postinc1
  8821   00116A  CFDE FFE6          	movff	postinc2,postinc1
  8822   00116E  CFDE FFE6          	movff	postinc2,postinc1
  8823   001172                     l5538:
  8824                           
  8825                           ;ff.c: 2352:  fs->fs_type = fmt;
  8826   001172  C0B8  FFD9         	movff	find_volume@fs,fsr2l
  8827   001176  C0B9  FFDA         	movff	find_volume@fs+1,fsr2h
  8828   00117A  C0B7  FFDF         	movff	find_volume@fmt,indf2
  8829   00117E                     
  8830                           ;ff.c: 2353:  fs->id = ++Fsid;
  8831   00117E  0100               	movlb	0	; () banked
  8832   001180  4BF8               	infsnz	_Fsid& (0+255),f,b
  8833   001182  2BF9               	incf	(_Fsid+1)& (0+255),f,b
  8834   001184  EE20 F006          	lfsr	2,6
  8835   001188  51B8               	movf	find_volume@fs& (0+255),w,b
  8836   00118A  26D9               	addwf	fsr2l,f,c
  8837   00118C  51B9               	movf	(find_volume@fs+1)& (0+255),w,b
  8838   00118E  22DA               	addwfc	fsr2h,f,c
  8839   001190  C0F8  FFDE         	movff	_Fsid,postinc2
  8840   001194  C0F9  FFDD         	movff	_Fsid+1,postdec2
  8841   001198  EF82  F003         	goto	l5316
  8842   00119C                     l588:
  8843                           
  8844                           ; BSR set to: 0
  8845   00119C  0012               	return		;funcret
  8846   00119E                     __end_of_find_volume:
  8847                           	callstack 0
  8848                           
  8849 ;; *************** function _get_ldnumber *****************
  8850 ;; Defined at:
  8851 ;;		line 2114 in file "ff.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;  path            1    0[COMRAM] PTR PTR const unsigned c
  8854 ;;		 -> f_open@path(1), f_mount@path(1), f_mount@rp(1), 
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;  i               2    6[COMRAM] unsigned short 
  8857 ;;  vol             2    3[COMRAM] int 
  8858 ;;  tt              1    8[COMRAM] PTR const unsigned char 
  8859 ;;		 -> STR_4(10), STR_3(1), 
  8860 ;;  tp              1    5[COMRAM] PTR const unsigned char 
  8861 ;;		 -> STR_4(10), STR_3(1), 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  2    0[COMRAM] int 
  8864 ;; Registers used:
  8865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8871 ;;      Params:         2       0       0       0       0       0       0
  8872 ;;      Locals:         6       0       0       0       0       0       0
  8873 ;;      Temps:          1       0       0       0       0       0       0
  8874 ;;      Totals:         9       0       0       0       0       0       0
  8875 ;;Total ram usage:        9 bytes
  8876 ;; Hardware stack levels used: 1
  8877 ;; This function calls:
  8878 ;;		Nothing
  8879 ;; This function is called by:
  8880 ;;		_find_volume
  8881 ;;		_f_mount
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           	psect	text17
  8886   00556C                     __ptext17:
  8887                           	callstack 0
  8888   00556C                     _get_ldnumber:
  8889                           	callstack 28
  8890   00556C                     
  8891                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  8892   00556C  6804               	setf	get_ldnumber@vol^0,c
  8893   00556E  6805               	setf	(get_ldnumber@vol+1)^0,c
  8894   005570                     
  8895                           ;ff.c: 2129:  if (*path) {
  8896   005570  5001               	movf	get_ldnumber@path^0,w,c
  8897   005572  6ED9               	movwf	fsr2l,c
  8898   005574  6ADA               	clrf	fsr2h,c
  8899   005576  50DF               	movf	indf2,w,c
  8900   005578  B4D8               	btfsc	status,2,c
  8901   00557A  EFC1  F02A         	goto	u6851
  8902   00557E  EFC3  F02A         	goto	u6850
  8903   005582                     u6851:
  8904   005582  EF2E  F02B         	goto	l5090
  8905   005586                     u6850:
  8906   005586                     
  8907                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  8908   005586  5001               	movf	get_ldnumber@path^0,w,c
  8909   005588  6ED9               	movwf	fsr2l,c
  8910   00558A  6ADA               	clrf	fsr2h,c
  8911   00558C  50DF               	movf	indf2,w,c
  8912   00558E  6E09               	movwf	get_ldnumber@tt^0,c
  8913   005590  EFCB  F02A         	goto	l5064
  8914   005594                     l5062:
  8915   005594  2A09               	incf	get_ldnumber@tt^0,f,c
  8916   005596                     l5064:
  8917   005596  C009  FFF6         	movff	get_ldnumber@tt,tblptrl
  8918   00559A                     	if	1	;There is more than 1 active tblptr byte
  8919   00559A  0E06               	movlw	high __smallconst
  8920   00559C  6EF7               	movwf	tblptrh,c
  8921   00559E                     	endif
  8922   00559E                     	if	0	;tblptru may be non-zero
  8923   00559E                     	endif
  8924   00559E                     	if	0	;tblptru may be non-zero
  8925   00559E                     	endif
  8926   00559E  0E20               	movlw	32
  8927   0055A0  0008               	tblrd		*
  8928   0055A2  64F5               	cpfsgt	tablat,c
  8929   0055A4  EFD6  F02A         	goto	u6861
  8930   0055A8  EFD8  F02A         	goto	u6860
  8931   0055AC                     u6861:
  8932   0055AC  EFE6  F02A         	goto	l5072
  8933   0055B0                     u6860:
  8934   0055B0  C009  FFF6         	movff	get_ldnumber@tt,tblptrl
  8935   0055B4                     	if	1	;There is more than 1 active tblptr byte
  8936   0055B4  0E06               	movlw	high __smallconst
  8937   0055B6  6EF7               	movwf	tblptrh,c
  8938   0055B8                     	endif
  8939   0055B8                     	if	0	;tblptru may be non-zero
  8940   0055B8                     	endif
  8941   0055B8                     	if	0	;tblptru may be non-zero
  8942   0055B8                     	endif
  8943   0055B8  0008               	tblrd		*
  8944   0055BA  50F5               	movf	tablat,w,c
  8945   0055BC  0A3A               	xorlw	58
  8946   0055BE  A4D8               	btfss	status,2,c
  8947   0055C0  EFE4  F02A         	goto	u6871
  8948   0055C4  EFE6  F02A         	goto	u6870
  8949   0055C8                     u6871:
  8950   0055C8  EFCA  F02A         	goto	l5062
  8951   0055CC                     u6870:
  8952   0055CC                     l5072:
  8953                           
  8954                           ;ff.c: 2131:   if (*tt == ':') {
  8955   0055CC  C009  FFF6         	movff	get_ldnumber@tt,tblptrl
  8956   0055D0                     	if	1	;There is more than 1 active tblptr byte
  8957   0055D0  0E06               	movlw	high __smallconst
  8958   0055D2  6EF7               	movwf	tblptrh,c
  8959   0055D4                     	endif
  8960   0055D4                     	if	0	;tblptru may be non-zero
  8961   0055D4                     	endif
  8962   0055D4                     	if	0	;tblptru may be non-zero
  8963   0055D4                     	endif
  8964   0055D4  0008               	tblrd		*
  8965   0055D6  50F5               	movf	tablat,w,c
  8966   0055D8  0A3A               	xorlw	58
  8967   0055DA  A4D8               	btfss	status,2,c
  8968   0055DC  EFF2  F02A         	goto	u6881
  8969   0055E0  EFF4  F02A         	goto	u6880
  8970   0055E4                     u6881:
  8971   0055E4  EF34  F02B         	goto	l5094
  8972   0055E8                     u6880:
  8973   0055E8                     
  8974                           ;ff.c: 2132:    tp = *path;
  8975   0055E8  5001               	movf	get_ldnumber@path^0,w,c
  8976   0055EA  6ED9               	movwf	fsr2l,c
  8977   0055EC  6ADA               	clrf	fsr2h,c
  8978   0055EE  50DF               	movf	indf2,w,c
  8979   0055F0  6E06               	movwf	get_ldnumber@tp^0,c
  8980   0055F2                     
  8981                           ;ff.c: 2133:    i = *tp++ - '0';
  8982   0055F2  C006  FFF6         	movff	get_ldnumber@tp,tblptrl
  8983   0055F6                     	if	1	;There is more than 1 active tblptr byte
  8984   0055F6  0E06               	movlw	high __smallconst
  8985   0055F8  6EF7               	movwf	tblptrh,c
  8986   0055FA                     	endif
  8987   0055FA                     	if	0	;tblptru may be non-zero
  8988   0055FA                     	endif
  8989   0055FA                     	if	0	;tblptru may be non-zero
  8990   0055FA                     	endif
  8991   0055FA  0008               	tblrd		*
  8992   0055FC  CFF5 F003          	movff	tablat,??_get_ldnumber
  8993   005600  0ED0               	movlw	208
  8994   005602  2403               	addwf	??_get_ldnumber^0,w,c
  8995   005604  6E07               	movwf	get_ldnumber@i^0,c
  8996   005606  6A08               	clrf	(get_ldnumber@i+1)^0,c
  8997   005608  0EFF               	movlw	255
  8998   00560A  2208               	addwfc	(get_ldnumber@i+1)^0,f,c
  8999   00560C  2A06               	incf	get_ldnumber@tp^0,f,c
  9000   00560E                     
  9001                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  9002   00560E  5008               	movf	(get_ldnumber@i+1)^0,w,c
  9003   005610  E107               	bnz	u6891
  9004   005612  0E0A               	movlw	10
  9005   005614  5C07               	subwf	get_ldnumber@i^0,w,c
  9006   005616  B0D8               	btfsc	status,0,c
  9007   005618  EF10  F02B         	goto	u6891
  9008   00561C  EF12  F02B         	goto	u6890
  9009   005620                     u6891:
  9010   005620  EF2E  F02B         	goto	l5090
  9011   005624                     u6890:
  9012   005624  5009               	movf	get_ldnumber@tt^0,w,c
  9013   005626  1806               	xorwf	get_ldnumber@tp^0,w,c
  9014   005628  A4D8               	btfss	status,2,c
  9015   00562A  EF19  F02B         	goto	u6901
  9016   00562E  EF1B  F02B         	goto	u6900
  9017   005632                     u6901:
  9018   005632  EF2E  F02B         	goto	l5090
  9019   005636                     u6900:
  9020   005636                     
  9021                           ;ff.c: 2135:     if (i < 1) {
  9022   005636  5007               	movf	get_ldnumber@i^0,w,c
  9023   005638  1008               	iorwf	(get_ldnumber@i+1)^0,w,c
  9024   00563A  A4D8               	btfss	status,2,c
  9025   00563C  EF22  F02B         	goto	u6911
  9026   005640  EF24  F02B         	goto	u6910
  9027   005644                     u6911:
  9028   005644  EF2E  F02B         	goto	l5090
  9029   005648                     u6910:
  9030   005648                     
  9031                           ;ff.c: 2136:      vol = (int)i;
  9032   005648  C007  F004         	movff	get_ldnumber@i,get_ldnumber@vol
  9033   00564C  C008  F005         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  9034   005650                     
  9035                           ;ff.c: 2137:      *path = ++tt;
  9036   005650  2A09               	incf	get_ldnumber@tt^0,f,c
  9037   005652  5001               	movf	get_ldnumber@path^0,w,c
  9038   005654  6ED9               	movwf	fsr2l,c
  9039   005656  6ADA               	clrf	fsr2h,c
  9040   005658  C009  FFDF         	movff	get_ldnumber@tt,indf2
  9041   00565C                     l5090:
  9042                           
  9043                           ;ff.c: 2156:    return vol;
  9044   00565C  C004  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  9045   005660  C005  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  9046   005664  EF3A  F02B         	goto	l577
  9047   005668                     l5094:
  9048                           
  9049                           ;ff.c: 2161:   vol = 0;
  9050   005668  0E00               	movlw	0
  9051   00566A  6E05               	movwf	(get_ldnumber@vol+1)^0,c
  9052   00566C  0E00               	movlw	0
  9053   00566E  6E04               	movwf	get_ldnumber@vol^0,c
  9054   005670  EF2E  F02B         	goto	l5090
  9055   005674                     l577:
  9056   005674  0012               	return		;funcret
  9057   005676                     __end_of_get_ldnumber:
  9058                           	callstack 0
  9059                           
  9060 ;; *************** function _disk_initialize *****************
  9061 ;; Defined at:
  9062 ;;		line 306 in file "diskio.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;  pdrv            1    wreg     unsigned char 
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;  pdrv            1   17[COMRAM] unsigned char 
  9067 ;;  ocr             4   18[COMRAM] unsigned char [4]
  9068 ;;  tmr             2   26[COMRAM] unsigned short 
  9069 ;;  n               1   28[COMRAM] unsigned char 
  9070 ;;  ty              1   25[COMRAM] unsigned char 
  9071 ;;  cmd             1   24[COMRAM] unsigned char 
  9072 ;; Return value:  Size  Location     Type
  9073 ;;                  1    wreg      unsigned char 
  9074 ;; Registers used:
  9075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9076 ;; Tracked objects:
  9077 ;;		On entry : 0/0
  9078 ;;		On exit  : 0/0
  9079 ;;		Unchanged: 0/0
  9080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9081 ;;      Params:         0       0       0       0       0       0       0
  9082 ;;      Locals:        12       0       0       0       0       0       0
  9083 ;;      Temps:          1       0       0       0       0       0       0
  9084 ;;      Totals:        13       0       0       0       0       0       0
  9085 ;;Total ram usage:       13 bytes
  9086 ;; Hardware stack levels used: 1
  9087 ;; Hardware stack levels required when called: 5
  9088 ;; This function calls:
  9089 ;;		_SPI_Exchange8bit
  9090 ;;		_SPI_Initialize
  9091 ;;		_SPI_Open
  9092 ;;		_deselect
  9093 ;;		_send_cmd
  9094 ;; This function is called by:
  9095 ;;		_find_volume
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           	psect	text18
  9100   0042B4                     __ptext18:
  9101                           	callstack 0
  9102   0042B4                     _disk_initialize:
  9103                           	callstack 23
  9104                           
  9105                           ;incstack = 0
  9106                           ;disk_initialize@pdrv stored from wreg
  9107   0042B4  6E12               	movwf	disk_initialize@pdrv^0,c
  9108   0042B6                     
  9109                           ;diskio.c: 307:  BYTE pdrv;diskio.c: 309: {;diskio.c: 310:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 311:  UINT tmr;;diskio.c: 314:  if (pdrv) return 0x01;
  9110   0042B6  5012               	movf	disk_initialize@pdrv^0,w,c
  9111   0042B8  B4D8               	btfsc	status,2,c
  9112   0042BA  EF61  F021         	goto	u6131
  9113   0042BE  EF63  F021         	goto	u6130
  9114   0042C2                     u6131:
  9115   0042C2  EF66  F021         	goto	l153
  9116   0042C6                     u6130:
  9117   0042C6  0E01               	movlw	1
  9118   0042C8  EFBA  F022         	goto	l154
  9119   0042CC                     l153:
  9120                           
  9121                           ;diskio.c: 316:  if (Stat & 0x02) return Stat;
  9122   0042CC  0100               	movlb	0	; () banked
  9123   0042CE  A3FD               	btfss	_Stat& (0+255),1,b
  9124   0042D0  EF6C  F021         	goto	u6141
  9125   0042D4  EF6E  F021         	goto	u6140
  9126   0042D8                     u6141:
  9127   0042D8  EF72  F021         	goto	l4698
  9128   0042DC                     u6140:
  9129   0042DC                     l4694:
  9130   0042DC  0100               	movlb	0	; () banked
  9131   0042DE  51FD               	movf	_Stat& (0+255),w,b
  9132   0042E0  EFBA  F022         	goto	l154
  9133   0042E4                     l4698:
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;diskio.c: 318:  SPI_Initialize();
  9137   0042E4  EC02  F031         	call	_SPI_Initialize	;wreg free
  9138   0042E8                     
  9139                           ;diskio.c: 319:  for (n = 10; n; n--) SPI_Exchange8bit(0xFF);
  9140   0042E8  0E0A               	movlw	10
  9141   0042EA  6E1D               	movwf	disk_initialize@n^0,c
  9142   0042EC  EF7C  F021         	goto	l4706
  9143   0042F0                     l4702:
  9144   0042F0  0EFF               	movlw	255
  9145   0042F2  ECED  F030         	call	_SPI_Exchange8bit
  9146   0042F6  061D               	decf	disk_initialize@n^0,f,c
  9147   0042F8                     l4706:
  9148   0042F8  501D               	movf	disk_initialize@n^0,w,c
  9149   0042FA  A4D8               	btfss	status,2,c
  9150   0042FC  EF82  F021         	goto	u6151
  9151   004300  EF84  F021         	goto	u6150
  9152   004304                     u6151:
  9153   004304  EF78  F021         	goto	l4702
  9154   004308                     u6150:
  9155   004308                     
  9156                           ;diskio.c: 321:  ty = 0;
  9157   004308  6A1A               	clrf	disk_initialize@ty^0,c
  9158   00430A                     
  9159                           ;diskio.c: 322:  if (send_cmd((0), 0) == 1) {
  9160   00430A  0E00               	movlw	0
  9161   00430C  6E0B               	movwf	send_cmd@arg^0,c
  9162   00430E  0E00               	movlw	0
  9163   004310  6E0C               	movwf	(send_cmd@arg+1)^0,c
  9164   004312  0E00               	movlw	0
  9165   004314  6E0D               	movwf	(send_cmd@arg+2)^0,c
  9166   004316  0E00               	movlw	0
  9167   004318  6E0E               	movwf	(send_cmd@arg+3)^0,c
  9168   00431A  0E00               	movlw	0
  9169   00431C  EC02  F030         	call	_send_cmd
  9170   004320  06E8               	decf	wreg,f,c
  9171   004322  A4D8               	btfss	status,2,c
  9172   004324  EF96  F021         	goto	u6161
  9173   004328  EF98  F021         	goto	u6160
  9174   00432C                     u6161:
  9175   00432C  EFA8  F022         	goto	l159
  9176   004330                     u6160:
  9177   004330                     
  9178                           ;diskio.c: 323:   if (send_cmd((8), 0x1AA) == 1) {
  9179   004330  0EAA               	movlw	170
  9180   004332  6E0B               	movwf	send_cmd@arg^0,c
  9181   004334  0E01               	movlw	1
  9182   004336  6E0C               	movwf	(send_cmd@arg+1)^0,c
  9183   004338  0E00               	movlw	0
  9184   00433A  6E0D               	movwf	(send_cmd@arg+2)^0,c
  9185   00433C  0E00               	movlw	0
  9186   00433E  6E0E               	movwf	(send_cmd@arg+3)^0,c
  9187   004340  0E08               	movlw	8
  9188   004342  EC02  F030         	call	_send_cmd
  9189   004346  06E8               	decf	wreg,f,c
  9190   004348  A4D8               	btfss	status,2,c
  9191   00434A  EFA9  F021         	goto	u6171
  9192   00434E  EFAB  F021         	goto	u6170
  9193   004352                     u6171:
  9194   004352  EF3F  F022         	goto	l4760
  9195   004356                     u6170:
  9196   004356                     
  9197                           ;diskio.c: 324:    for (n = 0; n < 4; n++) ocr[n] = SPI_Exchange8bit(0xFF);
  9198   004356  6A1D               	clrf	disk_initialize@n^0,c
  9199   004358                     l4718:
  9200   004358  501D               	movf	disk_initialize@n^0,w,c
  9201   00435A  0F13               	addlw	low disk_initialize@ocr
  9202   00435C  6ED9               	movwf	fsr2l,c
  9203   00435E  6ADA               	clrf	fsr2h,c
  9204   004360  0EFF               	movlw	255
  9205   004362  ECED  F030         	call	_SPI_Exchange8bit
  9206   004366  6EDF               	movwf	indf2,c
  9207   004368  2A1D               	incf	disk_initialize@n^0,f,c
  9208   00436A  0E03               	movlw	3
  9209   00436C  641D               	cpfsgt	disk_initialize@n^0,c
  9210   00436E  EFBB  F021         	goto	u6181
  9211   004372  EFBD  F021         	goto	u6180
  9212   004376                     u6181:
  9213   004376  EFAC  F021         	goto	l4718
  9214   00437A                     u6180:
  9215   00437A                     
  9216                           ;diskio.c: 325:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  9217   00437A  0415               	decf	(disk_initialize@ocr+2)^0,w,c
  9218   00437C  A4D8               	btfss	status,2,c
  9219   00437E  EFC3  F021         	goto	u6191
  9220   004382  EFC5  F021         	goto	u6190
  9221   004386                     u6191:
  9222   004386  EFA8  F022         	goto	l159
  9223   00438A                     u6190:
  9224   00438A  0EAA               	movlw	170
  9225   00438C  1816               	xorwf	(disk_initialize@ocr+3)^0,w,c
  9226   00438E  A4D8               	btfss	status,2,c
  9227   004390  EFCC  F021         	goto	u6201
  9228   004394  EFCE  F021         	goto	u6200
  9229   004398                     u6201:
  9230   004398  EFA8  F022         	goto	l159
  9231   00439C                     u6200:
  9232   00439C                     
  9233                           ;diskio.c: 326:     for (tmr = 1000; tmr; tmr--) {
  9234   00439C  0E03               	movlw	3
  9235   00439E  6E1C               	movwf	(disk_initialize@tmr+1)^0,c
  9236   0043A0  0EE8               	movlw	232
  9237   0043A2  6E1B               	movwf	disk_initialize@tmr^0,c
  9238   0043A4  EFF3  F021         	goto	l164
  9239   0043A8                     l4730:
  9240                           
  9241                           ;diskio.c: 327:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  9242   0043A8  0E00               	movlw	0
  9243   0043AA  6E0B               	movwf	send_cmd@arg^0,c
  9244   0043AC  0E00               	movlw	0
  9245   0043AE  6E0C               	movwf	(send_cmd@arg+1)^0,c
  9246   0043B0  0E00               	movlw	0
  9247   0043B2  6E0D               	movwf	(send_cmd@arg+2)^0,c
  9248   0043B4  0E40               	movlw	64
  9249   0043B6  6E0E               	movwf	(send_cmd@arg+3)^0,c
  9250   0043B8  0EA9               	movlw	169
  9251   0043BA  EC02  F030         	call	_send_cmd
  9252   0043BE  0900               	iorlw	0
  9253   0043C0  A4D8               	btfss	status,2,c
  9254   0043C2  EFE5  F021         	goto	u6211
  9255   0043C6  EFE7  F021         	goto	u6210
  9256   0043CA                     u6211:
  9257   0043CA  EFE9  F021         	goto	l4734
  9258   0043CE                     u6210:
  9259   0043CE  EFFC  F021         	goto	l4738
  9260   0043D2                     l4734:
  9261                           
  9262                           ;diskio.c: 328:      _delay((unsigned long)((1)*(8000000UL/4000.0)));
  9263   0043D2  0E03               	movlw	3
  9264   0043D4  6E11               	movwf	??_disk_initialize^0,c
  9265   0043D6  0E98               	movlw	152
  9266   0043D8                     u8887:
  9267   0043D8  2EE8               	decfsz	wreg,f,c
  9268   0043DA  D7FE               	bra	u8887
  9269   0043DC  2E11               	decfsz	??_disk_initialize^0,f,c
  9270   0043DE  D7FC               	bra	u8887
  9271   0043E0                     
  9272                           ;diskio.c: 329:     }
  9273   0043E0  061B               	decf	disk_initialize@tmr^0,f,c
  9274   0043E2  A0D8               	btfss	status,0,c
  9275   0043E4  061C               	decf	(disk_initialize@tmr+1)^0,f,c
  9276   0043E6                     l164:
  9277   0043E6  501B               	movf	disk_initialize@tmr^0,w,c
  9278   0043E8  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
  9279   0043EA  A4D8               	btfss	status,2,c
  9280   0043EC  EFFA  F021         	goto	u6221
  9281   0043F0  EFFC  F021         	goto	u6220
  9282   0043F4                     u6221:
  9283   0043F4  EFD4  F021         	goto	l4730
  9284   0043F8                     u6220:
  9285   0043F8                     l4738:
  9286                           
  9287                           ;diskio.c: 330:     if (tmr && send_cmd((58), 0) == 0) {
  9288   0043F8  501B               	movf	disk_initialize@tmr^0,w,c
  9289   0043FA  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
  9290   0043FC  B4D8               	btfsc	status,2,c
  9291   0043FE  EF03  F022         	goto	u6231
  9292   004402  EF05  F022         	goto	u6230
  9293   004406                     u6231:
  9294   004406  EFA8  F022         	goto	l159
  9295   00440A                     u6230:
  9296   00440A  0E00               	movlw	0
  9297   00440C  6E0B               	movwf	send_cmd@arg^0,c
  9298   00440E  0E00               	movlw	0
  9299   004410  6E0C               	movwf	(send_cmd@arg+1)^0,c
  9300   004412  0E00               	movlw	0
  9301   004414  6E0D               	movwf	(send_cmd@arg+2)^0,c
  9302   004416  0E00               	movlw	0
  9303   004418  6E0E               	movwf	(send_cmd@arg+3)^0,c
  9304   00441A  0E3A               	movlw	58
  9305   00441C  EC02  F030         	call	_send_cmd
  9306   004420  0900               	iorlw	0
  9307   004422  A4D8               	btfss	status,2,c
  9308   004424  EF16  F022         	goto	u6241
  9309   004428  EF18  F022         	goto	u6240
  9310   00442C                     u6241:
  9311   00442C  EFA8  F022         	goto	l159
  9312   004430                     u6240:
  9313   004430                     
  9314                           ;diskio.c: 331:      for (n = 0; n < 4; n++) ocr[n] = SPI_Exchange8bit(0xFF);
  9315   004430  6A1D               	clrf	disk_initialize@n^0,c
  9316   004432                     l4748:
  9317   004432  501D               	movf	disk_initialize@n^0,w,c
  9318   004434  0F13               	addlw	low disk_initialize@ocr
  9319   004436  6ED9               	movwf	fsr2l,c
  9320   004438  6ADA               	clrf	fsr2h,c
  9321   00443A  0EFF               	movlw	255
  9322   00443C  ECED  F030         	call	_SPI_Exchange8bit
  9323   004440  6EDF               	movwf	indf2,c
  9324   004442  2A1D               	incf	disk_initialize@n^0,f,c
  9325   004444  0E03               	movlw	3
  9326   004446  641D               	cpfsgt	disk_initialize@n^0,c
  9327   004448  EF28  F022         	goto	u6251
  9328   00444C  EF2A  F022         	goto	u6250
  9329   004450                     u6251:
  9330   004450  EF19  F022         	goto	l4748
  9331   004454                     u6250:
  9332   004454                     
  9333                           ;diskio.c: 332:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  9334   004454  BC13               	btfsc	disk_initialize@ocr^0,6,c
  9335   004456  EF2F  F022         	goto	u6261
  9336   00445A  EF31  F022         	goto	u6260
  9337   00445E                     u6261:
  9338   00445E  EF37  F022         	goto	l4756
  9339   004462                     u6260:
  9340   004462  0E00               	movlw	0
  9341   004464  6E18               	movwf	(_disk_initialize$348+1)^0,c
  9342   004466  0E04               	movlw	4
  9343   004468  6E17               	movwf	_disk_initialize$348^0,c
  9344   00446A  EF3B  F022         	goto	l4758
  9345   00446E                     l4756:
  9346   00446E  0E00               	movlw	0
  9347   004470  6E18               	movwf	(_disk_initialize$348+1)^0,c
  9348   004472  0E0C               	movlw	12
  9349   004474  6E17               	movwf	_disk_initialize$348^0,c
  9350   004476                     l4758:
  9351   004476  C017  F01A         	movff	_disk_initialize$348,disk_initialize@ty
  9352   00447A  EFA8  F022         	goto	l159
  9353   00447E                     l4760:
  9354                           
  9355                           ;diskio.c: 336:    if (send_cmd((0x80+41), 0) <= 1) {
  9356   00447E  0E00               	movlw	0
  9357   004480  6E0B               	movwf	send_cmd@arg^0,c
  9358   004482  0E00               	movlw	0
  9359   004484  6E0C               	movwf	(send_cmd@arg+1)^0,c
  9360   004486  0E00               	movlw	0
  9361   004488  6E0D               	movwf	(send_cmd@arg+2)^0,c
  9362   00448A  0E00               	movlw	0
  9363   00448C  6E0E               	movwf	(send_cmd@arg+3)^0,c
  9364   00448E  0EA9               	movlw	169
  9365   004490  EC02  F030         	call	_send_cmd
  9366   004494  6E11               	movwf	??_disk_initialize^0,c
  9367   004496  0E02               	movlw	2
  9368   004498  6011               	cpfslt	??_disk_initialize^0,c
  9369   00449A  EF51  F022         	goto	u6271
  9370   00449E  EF53  F022         	goto	u6270
  9371   0044A2                     u6271:
  9372   0044A2  EF59  F022         	goto	l4764
  9373   0044A6                     u6270:
  9374   0044A6                     
  9375                           ;diskio.c: 337:     ty = 0x02; cmd = (0x80+41);
  9376   0044A6  0E02               	movlw	2
  9377   0044A8  6E1A               	movwf	disk_initialize@ty^0,c
  9378   0044AA  0EA9               	movlw	169
  9379   0044AC  6E19               	movwf	disk_initialize@cmd^0,c
  9380                           
  9381                           ;diskio.c: 338:    } else {
  9382   0044AE  EF5D  F022         	goto	l177
  9383   0044B2                     l4764:
  9384                           
  9385                           ;diskio.c: 339:     ty = 0x01; cmd = (1);
  9386   0044B2  0E01               	movlw	1
  9387   0044B4  6E1A               	movwf	disk_initialize@ty^0,c
  9388   0044B6  0E01               	movlw	1
  9389   0044B8  6E19               	movwf	disk_initialize@cmd^0,c
  9390   0044BA                     l177:
  9391                           
  9392                           ;diskio.c: 341:    for (tmr = 1000; tmr; tmr--) {
  9393   0044BA  0E03               	movlw	3
  9394   0044BC  6E1C               	movwf	(disk_initialize@tmr+1)^0,c
  9395   0044BE  0EE8               	movlw	232
  9396   0044C0  6E1B               	movwf	disk_initialize@tmr^0,c
  9397   0044C2  EF82  F022         	goto	l178
  9398   0044C6                     l4766:
  9399                           
  9400                           ;diskio.c: 342:     if (send_cmd(cmd, 0) == 0) break;
  9401   0044C6  0E00               	movlw	0
  9402   0044C8  6E0B               	movwf	send_cmd@arg^0,c
  9403   0044CA  0E00               	movlw	0
  9404   0044CC  6E0C               	movwf	(send_cmd@arg+1)^0,c
  9405   0044CE  0E00               	movlw	0
  9406   0044D0  6E0D               	movwf	(send_cmd@arg+2)^0,c
  9407   0044D2  0E00               	movlw	0
  9408   0044D4  6E0E               	movwf	(send_cmd@arg+3)^0,c
  9409   0044D6  5019               	movf	disk_initialize@cmd^0,w,c
  9410   0044D8  EC02  F030         	call	_send_cmd
  9411   0044DC  0900               	iorlw	0
  9412   0044DE  A4D8               	btfss	status,2,c
  9413   0044E0  EF74  F022         	goto	u6281
  9414   0044E4  EF76  F022         	goto	u6280
  9415   0044E8                     u6281:
  9416   0044E8  EF78  F022         	goto	l4770
  9417   0044EC                     u6280:
  9418   0044EC  EF8B  F022         	goto	l4774
  9419   0044F0                     l4770:
  9420                           
  9421                           ;diskio.c: 343:     _delay((unsigned long)((1)*(8000000UL/4000.0)));
  9422   0044F0  0E03               	movlw	3
  9423   0044F2  6E11               	movwf	??_disk_initialize^0,c
  9424   0044F4  0E98               	movlw	152
  9425   0044F6                     u8897:
  9426   0044F6  2EE8               	decfsz	wreg,f,c
  9427   0044F8  D7FE               	bra	u8897
  9428   0044FA  2E11               	decfsz	??_disk_initialize^0,f,c
  9429   0044FC  D7FC               	bra	u8897
  9430   0044FE                     
  9431                           ;diskio.c: 344:    }
  9432   0044FE  061B               	decf	disk_initialize@tmr^0,f,c
  9433   004500  A0D8               	btfss	status,0,c
  9434   004502  061C               	decf	(disk_initialize@tmr+1)^0,f,c
  9435   004504                     l178:
  9436   004504  501B               	movf	disk_initialize@tmr^0,w,c
  9437   004506  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
  9438   004508  A4D8               	btfss	status,2,c
  9439   00450A  EF89  F022         	goto	u6291
  9440   00450E  EF8B  F022         	goto	u6290
  9441   004512                     u6291:
  9442   004512  EF63  F022         	goto	l4766
  9443   004516                     u6290:
  9444   004516                     l4774:
  9445                           
  9446                           ;diskio.c: 345:    if (!tmr || send_cmd((16), 512) != 0)
  9447   004516  501B               	movf	disk_initialize@tmr^0,w,c
  9448   004518  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
  9449   00451A  B4D8               	btfsc	status,2,c
  9450   00451C  EF92  F022         	goto	u6301
  9451   004520  EF94  F022         	goto	u6300
  9452   004524                     u6301:
  9453   004524  EFA7  F022         	goto	l184
  9454   004528                     u6300:
  9455   004528  0E00               	movlw	0
  9456   00452A  6E0B               	movwf	send_cmd@arg^0,c
  9457   00452C  0E02               	movlw	2
  9458   00452E  6E0C               	movwf	(send_cmd@arg+1)^0,c
  9459   004530  0E00               	movlw	0
  9460   004532  6E0D               	movwf	(send_cmd@arg+2)^0,c
  9461   004534  0E00               	movlw	0
  9462   004536  6E0E               	movwf	(send_cmd@arg+3)^0,c
  9463   004538  0E10               	movlw	16
  9464   00453A  EC02  F030         	call	_send_cmd
  9465   00453E  0900               	iorlw	0
  9466   004540  B4D8               	btfsc	status,2,c
  9467   004542  EFA5  F022         	goto	u6311
  9468   004546  EFA7  F022         	goto	u6310
  9469   00454A                     u6311:
  9470   00454A  EFA8  F022         	goto	l159
  9471   00454E                     u6310:
  9472   00454E                     l184:
  9473                           
  9474                           ;diskio.c: 346:     ty = 0;
  9475   00454E  6A1A               	clrf	disk_initialize@ty^0,c
  9476   004550                     l159:
  9477                           
  9478                           ;diskio.c: 349:  CardType = ty;
  9479   004550  C01A  F0FC         	movff	disk_initialize@ty,_CardType
  9480   004554                     
  9481                           ;diskio.c: 350:  deselect();
  9482   004554  EC10  F031         	call	_deselect	;wreg free
  9483   004558                     
  9484                           ;diskio.c: 352:  if (ty) {
  9485   004558  501A               	movf	disk_initialize@ty^0,w,c
  9486   00455A  B4D8               	btfsc	status,2,c
  9487   00455C  EFB2  F022         	goto	u6321
  9488   004560  EFB4  F022         	goto	u6320
  9489   004564                     u6321:
  9490   004564  EF6E  F021         	goto	l4694
  9491   004568                     u6320:
  9492   004568                     
  9493                           ;diskio.c: 353:   Stat &= ~0x01;
  9494   004568  0100               	movlb	0	; () banked
  9495   00456A  91FD               	bcf	_Stat& (0+255),0,b
  9496   00456C                     
  9497                           ; BSR set to: 0
  9498                           ;diskio.c: 354:   SPI_Open();
  9499   00456C  ECFA  F030         	call	_SPI_Open	;wreg free
  9500   004570  EF6E  F021         	goto	l4694
  9501   004574                     l154:
  9502   004574  0012               	return		;funcret
  9503   004576                     __end_of_disk_initialize:
  9504                           	callstack 0
  9505                           
  9506 ;; *************** function _SPI_Open *****************
  9507 ;; Defined at:
  9508 ;;		line 72 in file "mcc_generated_files/spi.c"
  9509 ;; Parameters:    Size  Location     Type
  9510 ;;		None
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;		None
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  1    wreg      void 
  9515 ;; Registers used:
  9516 ;;		wreg, status,2
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9522 ;;      Params:         0       0       0       0       0       0       0
  9523 ;;      Locals:         0       0       0       0       0       0       0
  9524 ;;      Temps:          0       0       0       0       0       0       0
  9525 ;;      Totals:         0       0       0       0       0       0       0
  9526 ;;Total ram usage:        0 bytes
  9527 ;; Hardware stack levels used: 1
  9528 ;; This function calls:
  9529 ;;		Nothing
  9530 ;; This function is called by:
  9531 ;;		_disk_initialize
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           	psect	text19
  9536   0061F4                     __ptext19:
  9537                           	callstack 0
  9538   0061F4                     _SPI_Open:
  9539                           	callstack 27
  9540   0061F4                     
  9541                           ;mcc_generated_files/spi.c: 73:     SSPSTAT = 0x40;
  9542   0061F4  0E40               	movlw	64
  9543   0061F6  6EC7               	movwf	199,c	;volatile
  9544                           
  9545                           ;mcc_generated_files/spi.c: 74:     SSPCON1 = 0x20;
  9546   0061F8  0E20               	movlw	32
  9547   0061FA  6EC6               	movwf	198,c	;volatile
  9548   0061FC                     
  9549                           ;mcc_generated_files/spi.c: 75:     SSPCON1bits.SSPOV = 0;
  9550   0061FC  9CC6               	bcf	198,6,c	;volatile
  9551   0061FE                     
  9552                           ;mcc_generated_files/spi.c: 76:     SSPCON1bits.WCOL = 0;
  9553   0061FE  9EC6               	bcf	198,7,c	;volatile
  9554   006200                     
  9555                           ;mcc_generated_files/spi.c: 77:     SSPADD = 0x00;
  9556   006200  6AC8               	clrf	200,c	;volatile
  9557   006202  0012               	return		;funcret
  9558   006204                     __end_of_SPI_Open:
  9559                           	callstack 0
  9560                           
  9561 ;; *************** function _SPI_Initialize *****************
  9562 ;; Defined at:
  9563 ;;		line 64 in file "mcc_generated_files/spi.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;		None
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;		None
  9568 ;; Return value:  Size  Location     Type
  9569 ;;                  1    wreg      void 
  9570 ;; Registers used:
  9571 ;;		wreg, status,2
  9572 ;; Tracked objects:
  9573 ;;		On entry : 0/0
  9574 ;;		On exit  : 0/0
  9575 ;;		Unchanged: 0/0
  9576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9577 ;;      Params:         0       0       0       0       0       0       0
  9578 ;;      Locals:         0       0       0       0       0       0       0
  9579 ;;      Temps:          0       0       0       0       0       0       0
  9580 ;;      Totals:         0       0       0       0       0       0       0
  9581 ;;Total ram usage:        0 bytes
  9582 ;; Hardware stack levels used: 1
  9583 ;; This function calls:
  9584 ;;		Nothing
  9585 ;; This function is called by:
  9586 ;;		_disk_initialize
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           	psect	text20
  9591   006204                     __ptext20:
  9592                           	callstack 0
  9593   006204                     _SPI_Initialize:
  9594                           	callstack 27
  9595   006204                     
  9596                           ;mcc_generated_files/spi.c: 65:     SSPSTAT = 0x40;
  9597   006204  0E40               	movlw	64
  9598   006206  6EC7               	movwf	199,c	;volatile
  9599                           
  9600                           ;mcc_generated_files/spi.c: 66:     SSPCON1 = 0x22;
  9601   006208  0E22               	movlw	34
  9602   00620A  6EC6               	movwf	198,c	;volatile
  9603   00620C                     
  9604                           ;mcc_generated_files/spi.c: 67:     SSPCON1bits.SSPOV = 0;
  9605   00620C  9CC6               	bcf	198,6,c	;volatile
  9606   00620E                     
  9607                           ;mcc_generated_files/spi.c: 68:     SSPCON1bits.WCOL = 0;
  9608   00620E  9EC6               	bcf	198,7,c	;volatile
  9609   006210                     
  9610                           ;mcc_generated_files/spi.c: 69:     SSPADD = 0x00;
  9611   006210  6AC8               	clrf	200,c	;volatile
  9612   006212  0012               	return		;funcret
  9613   006214                     __end_of_SPI_Initialize:
  9614                           	callstack 0
  9615                           
  9616 ;; *************** function _check_fs *****************
  9617 ;; Defined at:
  9618 ;;		line 2175 in file "ff.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;  fs              2   58[COMRAM] PTR struct .
  9621 ;;		 -> FatFs(558), NULL(0), 
  9622 ;;  sect            4   60[COMRAM] unsigned long 
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;		None
  9625 ;; Return value:  Size  Location     Type
  9626 ;;                  1    wreg      unsigned char 
  9627 ;; Registers used:
  9628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9634 ;;      Params:         6       0       0       0       0       0       0
  9635 ;;      Locals:         0       0       0       0       0       0       0
  9636 ;;      Temps:          4       0       0       0       0       0       0
  9637 ;;      Totals:        10       0       0       0       0       0       0
  9638 ;;Total ram usage:       10 bytes
  9639 ;; Hardware stack levels used: 1
  9640 ;; Hardware stack levels required when called: 8
  9641 ;; This function calls:
  9642 ;;		_move_window
  9643 ;; This function is called by:
  9644 ;;		_find_volume
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           	psect	text21
  9649   005450                     __ptext21:
  9650                           	callstack 0
  9651   005450                     _check_fs:
  9652                           	callstack 20
  9653   005450                     
  9654                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  9655   005450  EE20 F004          	lfsr	2,4
  9656   005454  503B               	movf	check_fs@fs^0,w,c
  9657   005456  26D9               	addwf	fsr2l,f,c
  9658   005458  503C               	movf	(check_fs@fs+1)^0,w,c
  9659   00545A  22DA               	addwfc	fsr2h,f,c
  9660   00545C  6ADF               	clrf	indf2,c
  9661   00545E  EE20 F02A          	lfsr	2,42
  9662   005462  503B               	movf	check_fs@fs^0,w,c
  9663   005464  26D9               	addwf	fsr2l,f,c
  9664   005466  503C               	movf	(check_fs@fs+1)^0,w,c
  9665   005468  22DA               	addwfc	fsr2h,f,c
  9666   00546A  0EFF               	movlw	255
  9667   00546C  6EDE               	movwf	postinc2,c
  9668   00546E  0EFF               	movlw	255
  9669   005470  6EDE               	movwf	postinc2,c
  9670   005472  0EFF               	movlw	255
  9671   005474  6EDE               	movwf	postinc2,c
  9672   005476  0EFF               	movlw	255
  9673   005478  6EDD               	movwf	postdec2,c
  9674   00547A                     
  9675                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  9676   00547A  C03B  F030         	movff	check_fs@fs,move_window@fs
  9677   00547E  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  9678   005482  C03D  F032         	movff	check_fs@sect,move_window@sector
  9679   005486  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  9680   00548A  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  9681   00548E  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  9682   005492  EC3C  F02D         	call	_move_window	;wreg free
  9683   005496  0900               	iorlw	0
  9684   005498  B4D8               	btfsc	status,2,c
  9685   00549A  EF51  F02A         	goto	u6921
  9686   00549E  EF53  F02A         	goto	u6920
  9687   0054A2                     u6921:
  9688   0054A2  EF56  F02A         	goto	l5108
  9689   0054A6                     u6920:
  9690   0054A6                     
  9691                           ;ff.c: 2182:   return 3;
  9692   0054A6  0E03               	movlw	3
  9693   0054A8  EFB5  F02A         	goto	l581
  9694   0054AC                     l5108:
  9695                           
  9696                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  9697   0054AC  EE22 F02C          	lfsr	2,556
  9698   0054B0  503B               	movf	check_fs@fs^0,w,c
  9699   0054B2  26D9               	addwf	fsr2l,f,c
  9700   0054B4  503C               	movf	(check_fs@fs+1)^0,w,c
  9701   0054B6  22DA               	addwfc	fsr2h,f,c
  9702   0054B8  0E55               	movlw	85
  9703   0054BA  18DE               	xorwf	postinc2,w,c
  9704   0054BC  E109               	bnz	u6930
  9705   0054BE  0EAA               	movlw	170
  9706   0054C0  18DE               	xorwf	postinc2,w,c
  9707   0054C2  B4D8               	btfsc	status,2,c
  9708   0054C4  EF66  F02A         	goto	u6931
  9709   0054C8  EF68  F02A         	goto	u6930
  9710   0054CC                     u6931:
  9711   0054CC  EF6B  F02A         	goto	l5114
  9712   0054D0                     u6930:
  9713   0054D0                     
  9714                           ;ff.c: 2185:   return 2;
  9715   0054D0  0E02               	movlw	2
  9716   0054D2  EFB5  F02A         	goto	l581
  9717   0054D6                     l5114:
  9718                           
  9719                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  9720   0054D6  EE20 F064          	lfsr	2,100
  9721   0054DA  503B               	movf	check_fs@fs^0,w,c
  9722   0054DC  26D9               	addwf	fsr2l,f,c
  9723   0054DE  503C               	movf	(check_fs@fs+1)^0,w,c
  9724   0054E0  22DA               	addwfc	fsr2h,f,c
  9725   0054E2  0EFF               	movlw	255
  9726   0054E4  14DE               	andwf	postinc2,w,c
  9727   0054E6  6E41               	movwf	??_check_fs^0,c
  9728   0054E8  0EFF               	movlw	255
  9729   0054EA  14DE               	andwf	postinc2,w,c
  9730   0054EC  6E42               	movwf	(??_check_fs+1)^0,c
  9731   0054EE  0EFF               	movlw	255
  9732   0054F0  14DE               	andwf	postinc2,w,c
  9733   0054F2  6E43               	movwf	(??_check_fs+2)^0,c
  9734   0054F4  0E00               	movlw	0
  9735   0054F6  14DE               	andwf	postinc2,w,c
  9736   0054F8  6E44               	movwf	(??_check_fs+3)^0,c
  9737   0054FA  0E46               	movlw	70
  9738   0054FC  1841               	xorwf	??_check_fs^0,w,c
  9739   0054FE  E10B               	bnz	u6941
  9740   005500  0E41               	movlw	65
  9741   005502  1842               	xorwf	(??_check_fs+1)^0,w,c
  9742   005504  E108               	bnz	u6941
  9743   005506  0E54               	movlw	84
  9744   005508  1843               	xorwf	(??_check_fs+2)^0,w,c
  9745   00550A  1044               	iorwf	(??_check_fs+3)^0,w,c
  9746   00550C  A4D8               	btfss	status,2,c
  9747   00550E  EF8B  F02A         	goto	u6941
  9748   005512  EF8D  F02A         	goto	u6940
  9749   005516                     u6941:
  9750   005516  EF90  F02A         	goto	l5120
  9751   00551A                     u6940:
  9752   00551A                     l5116:
  9753                           
  9754                           ;ff.c: 2188:   return 0;
  9755   00551A  0E00               	movlw	0
  9756   00551C  EFB5  F02A         	goto	l581
  9757   005520                     l5120:
  9758                           
  9759                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  9760   005520  EE20 F080          	lfsr	2,128
  9761   005524  503B               	movf	check_fs@fs^0,w,c
  9762   005526  26D9               	addwf	fsr2l,f,c
  9763   005528  503C               	movf	(check_fs@fs+1)^0,w,c
  9764   00552A  22DA               	addwfc	fsr2h,f,c
  9765   00552C  0EFF               	movlw	255
  9766   00552E  14DE               	andwf	postinc2,w,c
  9767   005530  6E41               	movwf	??_check_fs^0,c
  9768   005532  0EFF               	movlw	255
  9769   005534  14DE               	andwf	postinc2,w,c
  9770   005536  6E42               	movwf	(??_check_fs+1)^0,c
  9771   005538  0EFF               	movlw	255
  9772   00553A  14DE               	andwf	postinc2,w,c
  9773   00553C  6E43               	movwf	(??_check_fs+2)^0,c
  9774   00553E  0E00               	movlw	0
  9775   005540  14DE               	andwf	postinc2,w,c
  9776   005542  6E44               	movwf	(??_check_fs+3)^0,c
  9777   005544  0E46               	movlw	70
  9778   005546  1841               	xorwf	??_check_fs^0,w,c
  9779   005548  E10B               	bnz	u6951
  9780   00554A  0E41               	movlw	65
  9781   00554C  1842               	xorwf	(??_check_fs+1)^0,w,c
  9782   00554E  E108               	bnz	u6951
  9783   005550  0E54               	movlw	84
  9784   005552  1843               	xorwf	(??_check_fs+2)^0,w,c
  9785   005554  1044               	iorwf	(??_check_fs+3)^0,w,c
  9786   005556  A4D8               	btfss	status,2,c
  9787   005558  EFB0  F02A         	goto	u6951
  9788   00555C  EFB2  F02A         	goto	u6950
  9789   005560                     u6951:
  9790   005560  EFB4  F02A         	goto	l5126
  9791   005564                     u6950:
  9792   005564  EF8D  F02A         	goto	l5116
  9793   005568                     l5126:
  9794                           
  9795                           ;ff.c: 2192:  return 1;
  9796   005568  0E01               	movlw	1
  9797   00556A                     l581:
  9798   00556A  0012               	return		;funcret
  9799   00556C                     __end_of_check_fs:
  9800                           	callstack 0
  9801                           
  9802 ;; *************** function _f_lseek *****************
  9803 ;; Defined at:
  9804 ;;		line 3033 in file "ff.c"
  9805 ;; Parameters:    Size  Location     Type
  9806 ;;  fp              2  108[COMRAM] PTR struct .
  9807 ;;		 -> Fil(32), 
  9808 ;;  ofs             4  110[COMRAM] unsigned long 
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;  clst            4   29[BANK0 ] unsigned long 
  9811 ;;  bcs             4   25[BANK0 ] unsigned long 
  9812 ;;  nsect           4   21[BANK0 ] unsigned long 
  9813 ;;  ifptr           4   17[BANK0 ] unsigned long 
  9814 ;;  res             1   16[BANK0 ] enum E95
  9815 ;; Return value:  Size  Location     Type
  9816 ;;                  1    wreg      enum E95
  9817 ;; Registers used:
  9818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9824 ;;      Params:         6       0       0       0       0       0       0
  9825 ;;      Locals:         0      17       0       0       0       0       0
  9826 ;;      Temps:          0      16       0       0       0       0       0
  9827 ;;      Totals:         6      33       0       0       0       0       0
  9828 ;;Total ram usage:       39 bytes
  9829 ;; Hardware stack levels used: 1
  9830 ;; Hardware stack levels required when called: 10
  9831 ;; This function calls:
  9832 ;;		___lldiv
  9833 ;;		_clust2sect
  9834 ;;		_create_chain
  9835 ;;		_get_fat
  9836 ;;		_validate
  9837 ;; This function is called by:
  9838 ;;		_main
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           	psect	text22
  9843   0019EC                     __ptext22:
  9844                           	callstack 0
  9845   0019EC                     _f_lseek:
  9846                           	callstack 20
  9847   0019EC                     
  9848                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  9849   0019EC  C06D  F002         	movff	f_lseek@fp,validate@obj
  9850   0019F0  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  9851   0019F4  EC12  F02C         	call	_validate	;wreg free
  9852   0019F8  0100               	movlb	0	; () banked
  9853   0019FA  6F90               	movwf	f_lseek@res& (0+255),b
  9854   0019FC                     
  9855                           ; BSR set to: 0
  9856                           ;ff.c: 3046:  if (res != FR_OK) return res;
  9857   0019FC  5190               	movf	f_lseek@res& (0+255),w,b
  9858   0019FE  B4D8               	btfsc	status,2,c
  9859   001A00  EF04  F00D         	goto	u8261
  9860   001A04  EF06  F00D         	goto	u8260
  9861   001A08                     u8261:
  9862   001A08  EF08  F00D         	goto	l5888
  9863   001A0C                     u8260:
  9864   001A0C  EF88  F010         	goto	l748
  9865   001A10                     l5888:
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;ff.c: 3047:  if (fp->err)
  9869   001A10  EE20 F005          	lfsr	2,5
  9870   001A14  506D               	movf	f_lseek@fp^0,w,c
  9871   001A16  26D9               	addwf	fsr2l,f,c
  9872   001A18  506E               	movf	(f_lseek@fp+1)^0,w,c
  9873   001A1A  22DA               	addwfc	fsr2h,f,c
  9874   001A1C  50DF               	movf	indf2,w,c
  9875   001A1E  B4D8               	btfsc	status,2,c
  9876   001A20  EF14  F00D         	goto	u8271
  9877   001A24  EF16  F00D         	goto	u8270
  9878   001A28                     u8271:
  9879   001A28  EF18  F00D         	goto	l5892
  9880   001A2C                     u8270:
  9881   001A2C  EF88  F010         	goto	l748
  9882   001A30                     l5892:
  9883                           
  9884                           ; BSR set to: 0
  9885                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  9886   001A30  EE20 F00A          	lfsr	2,10
  9887   001A34  506D               	movf	f_lseek@fp^0,w,c
  9888   001A36  26D9               	addwf	fsr2l,f,c
  9889   001A38  506E               	movf	(f_lseek@fp+1)^0,w,c
  9890   001A3A  22DA               	addwfc	fsr2h,f,c
  9891   001A3C  506F               	movf	f_lseek@ofs^0,w,c
  9892   001A3E  5CDE               	subwf	postinc2,w,c
  9893   001A40  5070               	movf	(f_lseek@ofs+1)^0,w,c
  9894   001A42  58DE               	subwfb	postinc2,w,c
  9895   001A44  5071               	movf	(f_lseek@ofs+2)^0,w,c
  9896   001A46  58DE               	subwfb	postinc2,w,c
  9897   001A48  5072               	movf	(f_lseek@ofs+3)^0,w,c
  9898   001A4A  58DE               	subwfb	postinc2,w,c
  9899   001A4C  B0D8               	btfsc	status,0,c
  9900   001A4E  EF2B  F00D         	goto	u8281
  9901   001A52  EF2D  F00D         	goto	u8280
  9902   001A56                     u8281:
  9903   001A56  EF48  F00D         	goto	l750
  9904   001A5A                     u8280:
  9905   001A5A                     
  9906                           ; BSR set to: 0
  9907   001A5A  EE20 F004          	lfsr	2,4
  9908   001A5E  506D               	movf	f_lseek@fp^0,w,c
  9909   001A60  26D9               	addwf	fsr2l,f,c
  9910   001A62  506E               	movf	(f_lseek@fp+1)^0,w,c
  9911   001A64  22DA               	addwfc	fsr2h,f,c
  9912   001A66  B2DF               	btfsc	indf2,1,c
  9913   001A68  EF38  F00D         	goto	u8291
  9914   001A6C  EF3A  F00D         	goto	u8290
  9915   001A70                     u8291:
  9916   001A70  EF48  F00D         	goto	l750
  9917   001A74                     u8290:
  9918   001A74                     
  9919                           ; BSR set to: 0
  9920                           ;ff.c: 3111:    ) ofs = fp->fsize;
  9921   001A74  EE20 F00A          	lfsr	2,10
  9922   001A78  506D               	movf	f_lseek@fp^0,w,c
  9923   001A7A  26D9               	addwf	fsr2l,f,c
  9924   001A7C  506E               	movf	(f_lseek@fp+1)^0,w,c
  9925   001A7E  22DA               	addwfc	fsr2h,f,c
  9926   001A80  CFDE F06F          	movff	postinc2,f_lseek@ofs
  9927   001A84  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  9928   001A88  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  9929   001A8C  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  9930   001A90                     l750:
  9931                           
  9932                           ; BSR set to: 0
  9933                           ;ff.c: 3113:   ifptr = fp->fptr;
  9934   001A90  EE20 F006          	lfsr	2,6
  9935   001A94  506D               	movf	f_lseek@fp^0,w,c
  9936   001A96  26D9               	addwf	fsr2l,f,c
  9937   001A98  506E               	movf	(f_lseek@fp+1)^0,w,c
  9938   001A9A  22DA               	addwfc	fsr2h,f,c
  9939   001A9C  CFDE F091          	movff	postinc2,f_lseek@ifptr
  9940   001AA0  CFDE F092          	movff	postinc2,f_lseek@ifptr+1
  9941   001AA4  CFDE F093          	movff	postinc2,f_lseek@ifptr+2
  9942   001AA8  CFDE F094          	movff	postinc2,f_lseek@ifptr+3
  9943                           
  9944                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  9945   001AAC  0E00               	movlw	0
  9946   001AAE  6F95               	movwf	f_lseek@nsect& (0+255),b
  9947   001AB0  0E00               	movlw	0
  9948   001AB2  6F96               	movwf	(f_lseek@nsect+1)& (0+255),b
  9949   001AB4  0E00               	movlw	0
  9950   001AB6  6F97               	movwf	(f_lseek@nsect+2)& (0+255),b
  9951   001AB8  0E00               	movlw	0
  9952   001ABA  6F98               	movwf	(f_lseek@nsect+3)& (0+255),b
  9953   001ABC  EE20 F006          	lfsr	2,6
  9954   001AC0  506D               	movf	f_lseek@fp^0,w,c
  9955   001AC2  26D9               	addwf	fsr2l,f,c
  9956   001AC4  506E               	movf	(f_lseek@fp+1)^0,w,c
  9957   001AC6  22DA               	addwfc	fsr2h,f,c
  9958   001AC8  C095  FFDE         	movff	f_lseek@nsect,postinc2
  9959   001ACC  C096  FFDE         	movff	f_lseek@nsect+1,postinc2
  9960   001AD0  C097  FFDE         	movff	f_lseek@nsect+2,postinc2
  9961   001AD4  C098  FFDE         	movff	f_lseek@nsect+3,postinc2
  9962   001AD8                     
  9963                           ; BSR set to: 0
  9964                           ;ff.c: 3115:   if (ofs) {
  9965   001AD8  506F               	movf	f_lseek@ofs^0,w,c
  9966   001ADA  1070               	iorwf	(f_lseek@ofs+1)^0,w,c
  9967   001ADC  1071               	iorwf	(f_lseek@ofs+2)^0,w,c
  9968   001ADE  1072               	iorwf	(f_lseek@ofs+3)^0,w,c
  9969   001AE0  B4D8               	btfsc	status,2,c
  9970   001AE2  EF75  F00D         	goto	u8301
  9971   001AE6  EF77  F00D         	goto	u8300
  9972   001AEA                     u8301:
  9973   001AEA  EF0E  F010         	goto	l5976
  9974   001AEE                     u8300:
  9975   001AEE                     
  9976                           ; BSR set to: 0
  9977                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  9978   001AEE  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  9979   001AF2  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  9980   001AF6  EE10 F002          	lfsr	1,2
  9981   001AFA  50DE               	movf	postinc2,w,c
  9982   001AFC  26E1               	addwf	fsr1l,f,c
  9983   001AFE  50DD               	movf	postdec2,w,c
  9984   001B00  22E2               	addwfc	fsr1h,f,c
  9985   001B02  50E7               	movf	indf1,w,c
  9986   001B04  6F80               	movwf	??_f_lseek& (0+255),b
  9987   001B06  C080  F081         	movff	??_f_lseek,??_f_lseek+1
  9988   001B0A  6B82               	clrf	(??_f_lseek+2)& (0+255),b
  9989   001B0C  6B83               	clrf	(??_f_lseek+3)& (0+255),b
  9990   001B0E  6B84               	clrf	(??_f_lseek+4)& (0+255),b
  9991   001B10  0E09               	movlw	9
  9992   001B12                     u8315:
  9993   001B12  90D8               	bcf	status,0,c
  9994   001B14  3781               	rlcf	(??_f_lseek+1)& (0+255),f,b
  9995   001B16  3782               	rlcf	(??_f_lseek+2)& (0+255),f,b
  9996   001B18  3783               	rlcf	(??_f_lseek+3)& (0+255),f,b
  9997   001B1A  3784               	rlcf	(??_f_lseek+4)& (0+255),f,b
  9998   001B1C  2EE8               	decfsz	wreg,f,c
  9999   001B1E  EF89  F00D         	goto	u8315
 10000   001B22  C081  F099         	movff	??_f_lseek+1,f_lseek@bcs
 10001   001B26  C082  F09A         	movff	??_f_lseek+2,f_lseek@bcs+1
 10002   001B2A  C083  F09B         	movff	??_f_lseek+3,f_lseek@bcs+2
 10003   001B2E  C084  F09C         	movff	??_f_lseek+4,f_lseek@bcs+3
 10004   001B32                     
 10005                           ; BSR set to: 0
 10006                           ;ff.c: 3117:    if (ifptr > 0 &&
 10007   001B32  5191               	movf	f_lseek@ifptr& (0+255),w,b
 10008   001B34  1192               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 10009   001B36  1193               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 10010   001B38  1194               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 10011   001B3A  B4D8               	btfsc	status,2,c
 10012   001B3C  EFA2  F00D         	goto	u8321
 10013   001B40  EFA4  F00D         	goto	u8320
 10014   001B44                     u8321:
 10015   001B44  EF41  F00E         	goto	l5908
 10016   001B48                     u8320:
 10017   001B48                     
 10018                           ; BSR set to: 0
 10019   001B48  0EFF               	movlw	255
 10020   001B4A  246F               	addwf	f_lseek@ofs^0,w,c
 10021   001B4C  6E01               	movwf	___lldiv@dividend^0,c
 10022   001B4E  0EFF               	movlw	255
 10023   001B50  2070               	addwfc	(f_lseek@ofs+1)^0,w,c
 10024   001B52  6E02               	movwf	(___lldiv@dividend+1)^0,c
 10025   001B54  0EFF               	movlw	255
 10026   001B56  2071               	addwfc	(f_lseek@ofs+2)^0,w,c
 10027   001B58  6E03               	movwf	(___lldiv@dividend+2)^0,c
 10028   001B5A  0EFF               	movlw	255
 10029   001B5C  2072               	addwfc	(f_lseek@ofs+3)^0,w,c
 10030   001B5E  6E04               	movwf	(___lldiv@dividend+3)^0,c
 10031   001B60  C099  F005         	movff	f_lseek@bcs,___lldiv@divisor
 10032   001B64  C09A  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 10033   001B68  C09B  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 10034   001B6C  C09C  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 10035   001B70  EC53  F02E         	call	___lldiv	;wreg free
 10036   001B74  C001  F080         	movff	?___lldiv,??_f_lseek
 10037   001B78  C002  F081         	movff	?___lldiv+1,??_f_lseek+1
 10038   001B7C  C003  F082         	movff	?___lldiv+2,??_f_lseek+2
 10039   001B80  C004  F083         	movff	?___lldiv+3,??_f_lseek+3
 10040   001B84  0EFF               	movlw	255
 10041   001B86  0100               	movlb	0	; () banked
 10042   001B88  2591               	addwf	f_lseek@ifptr& (0+255),w,b
 10043   001B8A  6E01               	movwf	___lldiv@dividend^0,c
 10044   001B8C  0EFF               	movlw	255
 10045   001B8E  2192               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 10046   001B90  6E02               	movwf	(___lldiv@dividend+1)^0,c
 10047   001B92  0EFF               	movlw	255
 10048   001B94  2193               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 10049   001B96  6E03               	movwf	(___lldiv@dividend+2)^0,c
 10050   001B98  0EFF               	movlw	255
 10051   001B9A  2194               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 10052   001B9C  6E04               	movwf	(___lldiv@dividend+3)^0,c
 10053   001B9E  C099  F005         	movff	f_lseek@bcs,___lldiv@divisor
 10054   001BA2  C09A  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 10055   001BA6  C09B  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 10056   001BAA  C09C  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 10057   001BAE  EC53  F02E         	call	___lldiv	;wreg free
 10058   001BB2  5001               	movf	?___lldiv^0,w,c
 10059   001BB4  0100               	movlb	0	; () banked
 10060   001BB6  5D80               	subwf	??_f_lseek& (0+255),w,b
 10061   001BB8  5002               	movf	(?___lldiv+1)^0,w,c
 10062   001BBA  5981               	subwfb	(??_f_lseek+1)& (0+255),w,b
 10063   001BBC  5003               	movf	(?___lldiv+2)^0,w,c
 10064   001BBE  5982               	subwfb	(??_f_lseek+2)& (0+255),w,b
 10065   001BC0  5004               	movf	(?___lldiv+3)^0,w,c
 10066   001BC2  5983               	subwfb	(??_f_lseek+3)& (0+255),w,b
 10067   001BC4  A0D8               	btfss	status,0,c
 10068   001BC6  EFE7  F00D         	goto	u8331
 10069   001BCA  EFE9  F00D         	goto	u8330
 10070   001BCE                     u8331:
 10071   001BCE  EF41  F00E         	goto	l5908
 10072   001BD2                     u8330:
 10073   001BD2                     
 10074                           ; BSR set to: 0
 10075                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
 10076   001BD2  0EFF               	movlw	255
 10077   001BD4  2599               	addwf	f_lseek@bcs& (0+255),w,b
 10078   001BD6  6F80               	movwf	??_f_lseek& (0+255),b
 10079   001BD8  0EFF               	movlw	255
 10080   001BDA  219A               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
 10081   001BDC  6F81               	movwf	(??_f_lseek+1)& (0+255),b
 10082   001BDE  0EFF               	movlw	255
 10083   001BE0  219B               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
 10084   001BE2  6F82               	movwf	(??_f_lseek+2)& (0+255),b
 10085   001BE4  0EFF               	movlw	255
 10086   001BE6  219C               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
 10087   001BE8  6F83               	movwf	(??_f_lseek+3)& (0+255),b
 10088   001BEA  1D80               	comf	??_f_lseek& (0+255),w,b
 10089   001BEC  6F84               	movwf	(??_f_lseek+4)& (0+255),b
 10090   001BEE  1D81               	comf	(??_f_lseek+1)& (0+255),w,b
 10091   001BF0  6F85               	movwf	(??_f_lseek+5)& (0+255),b
 10092   001BF2  1D82               	comf	(??_f_lseek+2)& (0+255),w,b
 10093   001BF4  6F86               	movwf	(??_f_lseek+6)& (0+255),b
 10094   001BF6  1D83               	comf	(??_f_lseek+3)& (0+255),w,b
 10095   001BF8  6F87               	movwf	(??_f_lseek+7)& (0+255),b
 10096   001BFA  0EFF               	movlw	255
 10097   001BFC  2591               	addwf	f_lseek@ifptr& (0+255),w,b
 10098   001BFE  6F88               	movwf	(??_f_lseek+8)& (0+255),b
 10099   001C00  0EFF               	movlw	255
 10100   001C02  2192               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 10101   001C04  6F89               	movwf	(??_f_lseek+9)& (0+255),b
 10102   001C06  0EFF               	movlw	255
 10103   001C08  2193               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 10104   001C0A  6F8A               	movwf	(??_f_lseek+10)& (0+255),b
 10105   001C0C  0EFF               	movlw	255
 10106   001C0E  2194               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 10107   001C10  6F8B               	movwf	(??_f_lseek+11)& (0+255),b
 10108   001C12  5184               	movf	(??_f_lseek+4)& (0+255),w,b
 10109   001C14  1588               	andwf	(??_f_lseek+8)& (0+255),w,b
 10110   001C16  6F8C               	movwf	(??_f_lseek+12)& (0+255),b
 10111   001C18  5185               	movf	(??_f_lseek+5)& (0+255),w,b
 10112   001C1A  1589               	andwf	(??_f_lseek+9)& (0+255),w,b
 10113   001C1C  6F8D               	movwf	(??_f_lseek+13)& (0+255),b
 10114   001C1E  5186               	movf	(??_f_lseek+6)& (0+255),w,b
 10115   001C20  158A               	andwf	(??_f_lseek+10)& (0+255),w,b
 10116   001C22  6F8E               	movwf	(??_f_lseek+14)& (0+255),b
 10117   001C24  5187               	movf	(??_f_lseek+7)& (0+255),w,b
 10118   001C26  158B               	andwf	(??_f_lseek+11)& (0+255),w,b
 10119   001C28  6F8F               	movwf	(??_f_lseek+15)& (0+255),b
 10120   001C2A  EE20 F006          	lfsr	2,6
 10121   001C2E  506D               	movf	f_lseek@fp^0,w,c
 10122   001C30  26D9               	addwf	fsr2l,f,c
 10123   001C32  506E               	movf	(f_lseek@fp+1)^0,w,c
 10124   001C34  22DA               	addwfc	fsr2h,f,c
 10125   001C36  C08C  FFDE         	movff	??_f_lseek+12,postinc2
 10126   001C3A  C08D  FFDE         	movff	??_f_lseek+13,postinc2
 10127   001C3E  C08E  FFDE         	movff	??_f_lseek+14,postinc2
 10128   001C42  C08F  FFDE         	movff	??_f_lseek+15,postinc2
 10129                           
 10130                           ;ff.c: 3120:     ofs -= fp->fptr;
 10131   001C46  EE20 F006          	lfsr	2,6
 10132   001C4A  506D               	movf	f_lseek@fp^0,w,c
 10133   001C4C  26D9               	addwf	fsr2l,f,c
 10134   001C4E  506E               	movf	(f_lseek@fp+1)^0,w,c
 10135   001C50  22DA               	addwfc	fsr2h,f,c
 10136   001C52  50DE               	movf	postinc2,w,c
 10137   001C54  5E6F               	subwf	f_lseek@ofs^0,f,c
 10138   001C56  50DE               	movf	postinc2,w,c
 10139   001C58  5A70               	subwfb	(f_lseek@ofs+1)^0,f,c
 10140   001C5A  50DE               	movf	postinc2,w,c
 10141   001C5C  5A71               	subwfb	(f_lseek@ofs+2)^0,f,c
 10142   001C5E  50DD               	movf	postdec2,w,c
 10143   001C60  5A72               	subwfb	(f_lseek@ofs+3)^0,f,c
 10144                           
 10145                           ;ff.c: 3121:     clst = fp->clust;
 10146   001C62  EE20 F012          	lfsr	2,18
 10147   001C66  506D               	movf	f_lseek@fp^0,w,c
 10148   001C68  26D9               	addwf	fsr2l,f,c
 10149   001C6A  506E               	movf	(f_lseek@fp+1)^0,w,c
 10150   001C6C  22DA               	addwfc	fsr2h,f,c
 10151   001C6E  CFDE F09D          	movff	postinc2,f_lseek@clst
 10152   001C72  CFDE F09E          	movff	postinc2,f_lseek@clst+1
 10153   001C76  CFDE F09F          	movff	postinc2,f_lseek@clst+2
 10154   001C7A  CFDE F0A0          	movff	postinc2,f_lseek@clst+3
 10155                           
 10156                           ;ff.c: 3122:    } else {
 10157   001C7E  EFBE  F00E         	goto	l5928
 10158   001C82                     l5908:
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;ff.c: 3123:     clst = fp->sclust;
 10162   001C82  EE20 F00E          	lfsr	2,14
 10163   001C86  506D               	movf	f_lseek@fp^0,w,c
 10164   001C88  26D9               	addwf	fsr2l,f,c
 10165   001C8A  506E               	movf	(f_lseek@fp+1)^0,w,c
 10166   001C8C  22DA               	addwfc	fsr2h,f,c
 10167   001C8E  CFDE F09D          	movff	postinc2,f_lseek@clst
 10168   001C92  CFDE F09E          	movff	postinc2,f_lseek@clst+1
 10169   001C96  CFDE F09F          	movff	postinc2,f_lseek@clst+2
 10170   001C9A  CFDE F0A0          	movff	postinc2,f_lseek@clst+3
 10171   001C9E                     
 10172                           ; BSR set to: 0
 10173                           ;ff.c: 3125:     if (clst == 0) {
 10174   001C9E  519D               	movf	f_lseek@clst& (0+255),w,b
 10175   001CA0  119E               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10176   001CA2  119F               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10177   001CA4  11A0               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10178   001CA6  A4D8               	btfss	status,2,c
 10179   001CA8  EF58  F00E         	goto	u8341
 10180   001CAC  EF5A  F00E         	goto	u8340
 10181   001CB0                     u8341:
 10182   001CB0  EFB0  F00E         	goto	l754
 10183   001CB4                     u8340:
 10184   001CB4                     
 10185                           ; BSR set to: 0
 10186                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
 10187   001CB4  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10188   001CB8  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10189   001CBC  CFDE F056          	movff	postinc2,create_chain@fs
 10190   001CC0  CFDD F057          	movff	postdec2,create_chain@fs+1
 10191   001CC4  0E00               	movlw	0
 10192   001CC6  6E58               	movwf	create_chain@clst^0,c
 10193   001CC8  0E00               	movlw	0
 10194   001CCA  6E59               	movwf	(create_chain@clst+1)^0,c
 10195   001CCC  0E00               	movlw	0
 10196   001CCE  6E5A               	movwf	(create_chain@clst+2)^0,c
 10197   001CD0  0E00               	movlw	0
 10198   001CD2  6E5B               	movwf	(create_chain@clst+3)^0,c
 10199   001CD4  EC27  F01C         	call	_create_chain	;wreg free
 10200   001CD8  C056  F09D         	movff	?_create_chain,f_lseek@clst
 10201   001CDC  C057  F09E         	movff	?_create_chain+1,f_lseek@clst+1
 10202   001CE0  C058  F09F         	movff	?_create_chain+2,f_lseek@clst+2
 10203   001CE4  C059  F0A0         	movff	?_create_chain+3,f_lseek@clst+3
 10204   001CE8                     
 10205                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10206   001CE8  0100               	movlb	0	; () banked
 10207   001CEA  059D               	decf	f_lseek@clst& (0+255),w,b
 10208   001CEC  119E               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10209   001CEE  119F               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10210   001CF0  11A0               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10211   001CF2  A4D8               	btfss	status,2,c
 10212   001CF4  EF7E  F00E         	goto	u8351
 10213   001CF8  EF80  F00E         	goto	u8350
 10214   001CFC                     u8351:
 10215   001CFC  EF8A  F00E         	goto	l5920
 10216   001D00                     u8350:
 10217   001D00                     
 10218                           ; BSR set to: 0
 10219   001D00  EE20 F005          	lfsr	2,5
 10220   001D04  506D               	movf	f_lseek@fp^0,w,c
 10221   001D06  26D9               	addwf	fsr2l,f,c
 10222   001D08  506E               	movf	(f_lseek@fp+1)^0,w,c
 10223   001D0A  22DA               	addwfc	fsr2h,f,c
 10224   001D0C  0E02               	movlw	2
 10225   001D0E  6EDF               	movwf	indf2,c
 10226   001D10  EF88  F010         	goto	l748
 10227   001D14                     l5920:
 10228                           
 10229                           ; BSR set to: 0
 10230                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
 10231   001D14  299D               	incf	f_lseek@clst& (0+255),w,b
 10232   001D16  E10A               	bnz	u8361
 10233   001D18  299E               	incf	(f_lseek@clst+1)& (0+255),w,b
 10234   001D1A  E108               	bnz	u8361
 10235   001D1C  299F               	incf	(f_lseek@clst+2)& (0+255),w,b
 10236   001D1E  E106               	bnz	u8361
 10237   001D20  29A0               	incf	(f_lseek@clst+3)& (0+255),w,b
 10238   001D22  A4D8               	btfss	status,2,c
 10239   001D24  EF96  F00E         	goto	u8361
 10240   001D28  EF98  F00E         	goto	u8360
 10241   001D2C                     u8361:
 10242   001D2C  EFA2  F00E         	goto	l5926
 10243   001D30                     u8360:
 10244   001D30                     
 10245                           ; BSR set to: 0
 10246   001D30  EE20 F005          	lfsr	2,5
 10247   001D34  506D               	movf	f_lseek@fp^0,w,c
 10248   001D36  26D9               	addwf	fsr2l,f,c
 10249   001D38  506E               	movf	(f_lseek@fp+1)^0,w,c
 10250   001D3A  22DA               	addwfc	fsr2h,f,c
 10251   001D3C  0E01               	movlw	1
 10252   001D3E  6EDF               	movwf	indf2,c
 10253   001D40  EF88  F010         	goto	l748
 10254   001D44                     l5926:
 10255                           
 10256                           ; BSR set to: 0
 10257                           ;ff.c: 3129:      fp->sclust = clst;
 10258   001D44  EE20 F00E          	lfsr	2,14
 10259   001D48  506D               	movf	f_lseek@fp^0,w,c
 10260   001D4A  26D9               	addwf	fsr2l,f,c
 10261   001D4C  506E               	movf	(f_lseek@fp+1)^0,w,c
 10262   001D4E  22DA               	addwfc	fsr2h,f,c
 10263   001D50  C09D  FFDE         	movff	f_lseek@clst,postinc2
 10264   001D54  C09E  FFDE         	movff	f_lseek@clst+1,postinc2
 10265   001D58  C09F  FFDE         	movff	f_lseek@clst+2,postinc2
 10266   001D5C  C0A0  FFDE         	movff	f_lseek@clst+3,postinc2
 10267   001D60                     l754:
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;ff.c: 3132:     fp->clust = clst;
 10271   001D60  EE20 F012          	lfsr	2,18
 10272   001D64  506D               	movf	f_lseek@fp^0,w,c
 10273   001D66  26D9               	addwf	fsr2l,f,c
 10274   001D68  506E               	movf	(f_lseek@fp+1)^0,w,c
 10275   001D6A  22DA               	addwfc	fsr2h,f,c
 10276   001D6C  C09D  FFDE         	movff	f_lseek@clst,postinc2
 10277   001D70  C09E  FFDE         	movff	f_lseek@clst+1,postinc2
 10278   001D74  C09F  FFDE         	movff	f_lseek@clst+2,postinc2
 10279   001D78  C0A0  FFDE         	movff	f_lseek@clst+3,postinc2
 10280   001D7C                     l5928:
 10281                           
 10282                           ; BSR set to: 0
 10283                           ;ff.c: 3134:    if (clst != 0) {
 10284   001D7C  519D               	movf	f_lseek@clst& (0+255),w,b
 10285   001D7E  119E               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10286   001D80  119F               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10287   001D82  11A0               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10288   001D84  B4D8               	btfsc	status,2,c
 10289   001D86  EFC7  F00E         	goto	u8371
 10290   001D8A  EFC9  F00E         	goto	u8370
 10291   001D8E                     u8371:
 10292   001D8E  EF0E  F010         	goto	l5976
 10293   001D92                     u8370:
 10294   001D92  EF8F  F00F         	goto	l5960
 10295   001D96                     l5932:
 10296                           
 10297                           ; BSR set to: 0
 10298                           ;ff.c: 3137:      if (fp->flag & 0x02) {
 10299   001D96  EE20 F004          	lfsr	2,4
 10300   001D9A  506D               	movf	f_lseek@fp^0,w,c
 10301   001D9C  26D9               	addwf	fsr2l,f,c
 10302   001D9E  506E               	movf	(f_lseek@fp+1)^0,w,c
 10303   001DA0  22DA               	addwfc	fsr2h,f,c
 10304   001DA2  A2DF               	btfss	indf2,1,c
 10305   001DA4  EFD6  F00E         	goto	u8381
 10306   001DA8  EFD8  F00E         	goto	u8380
 10307   001DAC                     u8381:
 10308   001DAC  EF08  F00F         	goto	l5940
 10309   001DB0                     u8380:
 10310   001DB0                     
 10311                           ; BSR set to: 0
 10312                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
 10313   001DB0  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10314   001DB4  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10315   001DB8  CFDE F056          	movff	postinc2,create_chain@fs
 10316   001DBC  CFDD F057          	movff	postdec2,create_chain@fs+1
 10317   001DC0  C09D  F058         	movff	f_lseek@clst,create_chain@clst
 10318   001DC4  C09E  F059         	movff	f_lseek@clst+1,create_chain@clst+1
 10319   001DC8  C09F  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
 10320   001DCC  C0A0  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
 10321   001DD0  EC27  F01C         	call	_create_chain	;wreg free
 10322   001DD4  C056  F09D         	movff	?_create_chain,f_lseek@clst
 10323   001DD8  C057  F09E         	movff	?_create_chain+1,f_lseek@clst+1
 10324   001DDC  C058  F09F         	movff	?_create_chain+2,f_lseek@clst+2
 10325   001DE0  C059  F0A0         	movff	?_create_chain+3,f_lseek@clst+3
 10326   001DE4                     
 10327                           ;ff.c: 3139:       if (clst == 0) {
 10328   001DE4  0100               	movlb	0	; () banked
 10329   001DE6  519D               	movf	f_lseek@clst& (0+255),w,b
 10330   001DE8  119E               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10331   001DEA  119F               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10332   001DEC  11A0               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10333   001DEE  A4D8               	btfss	status,2,c
 10334   001DF0  EFFC  F00E         	goto	u8391
 10335   001DF4  EFFE  F00E         	goto	u8390
 10336   001DF8                     u8391:
 10337   001DF8  EF22  F00F         	goto	l5942
 10338   001DFC                     u8390:
 10339   001DFC                     
 10340                           ; BSR set to: 0
 10341                           ;ff.c: 3140:        ofs = bcs; break;
 10342   001DFC  C099  F06F         	movff	f_lseek@bcs,f_lseek@ofs
 10343   001E00  C09A  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
 10344   001E04  C09B  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
 10345   001E08  C09C  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
 10346   001E0C  EF9E  F00F         	goto	l5962
 10347   001E10                     l5940:
 10348                           
 10349                           ; BSR set to: 0
 10350                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
 10351   001E10  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10352   001E14  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10353   001E18  CFDE F03B          	movff	postinc2,get_fat@fs
 10354   001E1C  CFDD F03C          	movff	postdec2,get_fat@fs+1
 10355   001E20  C09D  F03D         	movff	f_lseek@clst,get_fat@clst
 10356   001E24  C09E  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
 10357   001E28  C09F  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
 10358   001E2C  C0A0  F040         	movff	f_lseek@clst+3,get_fat@clst+3
 10359   001E30  EC38  F01A         	call	_get_fat	;wreg free
 10360   001E34  C03B  F09D         	movff	?_get_fat,f_lseek@clst
 10361   001E38  C03C  F09E         	movff	?_get_fat+1,f_lseek@clst+1
 10362   001E3C  C03D  F09F         	movff	?_get_fat+2,f_lseek@clst+2
 10363   001E40  C03E  F0A0         	movff	?_get_fat+3,f_lseek@clst+3
 10364   001E44                     l5942:
 10365                           
 10366                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
 10367   001E44  0100               	movlb	0	; () banked
 10368   001E46  299D               	incf	f_lseek@clst& (0+255),w,b
 10369   001E48  E10A               	bnz	u8401
 10370   001E4A  299E               	incf	(f_lseek@clst+1)& (0+255),w,b
 10371   001E4C  E108               	bnz	u8401
 10372   001E4E  299F               	incf	(f_lseek@clst+2)& (0+255),w,b
 10373   001E50  E106               	bnz	u8401
 10374   001E52  29A0               	incf	(f_lseek@clst+3)& (0+255),w,b
 10375   001E54  A4D8               	btfss	status,2,c
 10376   001E56  EF2F  F00F         	goto	u8401
 10377   001E5A  EF31  F00F         	goto	u8400
 10378   001E5E                     u8401:
 10379   001E5E  EF3B  F00F         	goto	l5948
 10380   001E62                     u8400:
 10381   001E62                     
 10382                           ; BSR set to: 0
 10383   001E62  EE20 F005          	lfsr	2,5
 10384   001E66  506D               	movf	f_lseek@fp^0,w,c
 10385   001E68  26D9               	addwf	fsr2l,f,c
 10386   001E6A  506E               	movf	(f_lseek@fp+1)^0,w,c
 10387   001E6C  22DA               	addwfc	fsr2h,f,c
 10388   001E6E  0E01               	movlw	1
 10389   001E70  6EDF               	movwf	indf2,c
 10390   001E72  EF88  F010         	goto	l748
 10391   001E76                     l5948:
 10392                           
 10393                           ; BSR set to: 0
 10394                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
 10395   001E76  51A0               	movf	(f_lseek@clst+3)& (0+255),w,b
 10396   001E78  119F               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10397   001E7A  119E               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10398   001E7C  E109               	bnz	u8410
 10399   001E7E  0E02               	movlw	2
 10400   001E80  5D9D               	subwf	f_lseek@clst& (0+255),w,b
 10401   001E82  A0D8               	btfss	status,0,c
 10402   001E84  EF46  F00F         	goto	u8411
 10403   001E88  EF48  F00F         	goto	u8410
 10404   001E8C                     u8411:
 10405   001E8C  EF61  F00F         	goto	l5952
 10406   001E90                     u8410:
 10407   001E90                     
 10408                           ; BSR set to: 0
 10409   001E90  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10410   001E94  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10411   001E98  EE10 F012          	lfsr	1,18
 10412   001E9C  50DE               	movf	postinc2,w,c
 10413   001E9E  26E1               	addwf	fsr1l,f,c
 10414   001EA0  50DD               	movf	postdec2,w,c
 10415   001EA2  22E2               	addwfc	fsr1h,f,c
 10416   001EA4  50E6               	movf	postinc1,w,c
 10417   001EA6  5D9D               	subwf	f_lseek@clst& (0+255),w,b
 10418   001EA8  50E6               	movf	postinc1,w,c
 10419   001EAA  599E               	subwfb	(f_lseek@clst+1)& (0+255),w,b
 10420   001EAC  50E6               	movf	postinc1,w,c
 10421   001EAE  599F               	subwfb	(f_lseek@clst+2)& (0+255),w,b
 10422   001EB0  50E6               	movf	postinc1,w,c
 10423   001EB2  59A0               	subwfb	(f_lseek@clst+3)& (0+255),w,b
 10424   001EB4  A0D8               	btfss	status,0,c
 10425   001EB6  EF5F  F00F         	goto	u8421
 10426   001EBA  EF61  F00F         	goto	u8420
 10427   001EBE                     u8421:
 10428   001EBE  EF6B  F00F         	goto	l5956
 10429   001EC2                     u8420:
 10430   001EC2                     l5952:
 10431                           
 10432                           ; BSR set to: 0
 10433   001EC2  EE20 F005          	lfsr	2,5
 10434   001EC6  506D               	movf	f_lseek@fp^0,w,c
 10435   001EC8  26D9               	addwf	fsr2l,f,c
 10436   001ECA  506E               	movf	(f_lseek@fp+1)^0,w,c
 10437   001ECC  22DA               	addwfc	fsr2h,f,c
 10438   001ECE  0E02               	movlw	2
 10439   001ED0  6EDF               	movwf	indf2,c
 10440   001ED2  EF88  F010         	goto	l748
 10441   001ED6                     l5956:
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;ff.c: 3147:      fp->clust = clst;
 10445   001ED6  EE20 F012          	lfsr	2,18
 10446   001EDA  506D               	movf	f_lseek@fp^0,w,c
 10447   001EDC  26D9               	addwf	fsr2l,f,c
 10448   001EDE  506E               	movf	(f_lseek@fp+1)^0,w,c
 10449   001EE0  22DA               	addwfc	fsr2h,f,c
 10450   001EE2  C09D  FFDE         	movff	f_lseek@clst,postinc2
 10451   001EE6  C09E  FFDE         	movff	f_lseek@clst+1,postinc2
 10452   001EEA  C09F  FFDE         	movff	f_lseek@clst+2,postinc2
 10453   001EEE  C0A0  FFDE         	movff	f_lseek@clst+3,postinc2
 10454                           
 10455                           ;ff.c: 3148:      fp->fptr += bcs;
 10456   001EF2  EE20 F006          	lfsr	2,6
 10457   001EF6  506D               	movf	f_lseek@fp^0,w,c
 10458   001EF8  26D9               	addwf	fsr2l,f,c
 10459   001EFA  506E               	movf	(f_lseek@fp+1)^0,w,c
 10460   001EFC  22DA               	addwfc	fsr2h,f,c
 10461   001EFE  5199               	movf	f_lseek@bcs& (0+255),w,b
 10462   001F00  26DE               	addwf	postinc2,f,c
 10463   001F02  519A               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10464   001F04  22DE               	addwfc	postinc2,f,c
 10465   001F06  519B               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10466   001F08  22DE               	addwfc	postinc2,f,c
 10467   001F0A  519C               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10468   001F0C  22DE               	addwfc	postinc2,f,c
 10469   001F0E                     
 10470                           ; BSR set to: 0
 10471                           ;ff.c: 3149:      ofs -= bcs;
 10472   001F0E  5199               	movf	f_lseek@bcs& (0+255),w,b
 10473   001F10  5E6F               	subwf	f_lseek@ofs^0,f,c
 10474   001F12  519A               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10475   001F14  5A70               	subwfb	(f_lseek@ofs+1)^0,f,c
 10476   001F16  519B               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10477   001F18  5A71               	subwfb	(f_lseek@ofs+2)^0,f,c
 10478   001F1A  519C               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10479   001F1C  5A72               	subwfb	(f_lseek@ofs+3)^0,f,c
 10480   001F1E                     l5960:
 10481                           
 10482                           ; BSR set to: 0
 10483                           ;ff.c: 3135:     while (ofs > bcs) {
 10484   001F1E  506F               	movf	f_lseek@ofs^0,w,c
 10485   001F20  5D99               	subwf	f_lseek@bcs& (0+255),w,b
 10486   001F22  5070               	movf	(f_lseek@ofs+1)^0,w,c
 10487   001F24  599A               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
 10488   001F26  5071               	movf	(f_lseek@ofs+2)^0,w,c
 10489   001F28  599B               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
 10490   001F2A  5072               	movf	(f_lseek@ofs+3)^0,w,c
 10491   001F2C  599C               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
 10492   001F2E  A0D8               	btfss	status,0,c
 10493   001F30  EF9C  F00F         	goto	u8431
 10494   001F34  EF9E  F00F         	goto	u8430
 10495   001F38                     u8431:
 10496   001F38  EFCB  F00E         	goto	l5932
 10497   001F3C                     u8430:
 10498   001F3C                     l5962:
 10499                           
 10500                           ; BSR set to: 0
 10501                           ;ff.c: 3151:     fp->fptr += ofs;
 10502   001F3C  EE20 F006          	lfsr	2,6
 10503   001F40  506D               	movf	f_lseek@fp^0,w,c
 10504   001F42  26D9               	addwf	fsr2l,f,c
 10505   001F44  506E               	movf	(f_lseek@fp+1)^0,w,c
 10506   001F46  22DA               	addwfc	fsr2h,f,c
 10507   001F48  506F               	movf	f_lseek@ofs^0,w,c
 10508   001F4A  26DE               	addwf	postinc2,f,c
 10509   001F4C  5070               	movf	(f_lseek@ofs+1)^0,w,c
 10510   001F4E  22DE               	addwfc	postinc2,f,c
 10511   001F50  5071               	movf	(f_lseek@ofs+2)^0,w,c
 10512   001F52  22DE               	addwfc	postinc2,f,c
 10513   001F54  5072               	movf	(f_lseek@ofs+3)^0,w,c
 10514   001F56  22DE               	addwfc	postinc2,f,c
 10515   001F58                     
 10516                           ; BSR set to: 0
 10517                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
 10518   001F58  0EFF               	movlw	255
 10519   001F5A  146F               	andwf	f_lseek@ofs^0,w,c
 10520   001F5C  6F80               	movwf	??_f_lseek& (0+255),b
 10521   001F5E  0E01               	movlw	1
 10522   001F60  1470               	andwf	(f_lseek@ofs+1)^0,w,c
 10523   001F62  6F81               	movwf	(??_f_lseek+1)& (0+255),b
 10524   001F64  0E00               	movlw	0
 10525   001F66  1471               	andwf	(f_lseek@ofs+2)^0,w,c
 10526   001F68  6F82               	movwf	(??_f_lseek+2)& (0+255),b
 10527   001F6A  0E00               	movlw	0
 10528   001F6C  1472               	andwf	(f_lseek@ofs+3)^0,w,c
 10529   001F6E  6F83               	movwf	(??_f_lseek+3)& (0+255),b
 10530   001F70  5180               	movf	??_f_lseek& (0+255),w,b
 10531   001F72  1181               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10532   001F74  1182               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10533   001F76  1183               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10534   001F78  B4D8               	btfsc	status,2,c
 10535   001F7A  EFC1  F00F         	goto	u8441
 10536   001F7E  EFC3  F00F         	goto	u8440
 10537   001F82                     u8441:
 10538   001F82  EF0E  F010         	goto	l5976
 10539   001F86                     u8440:
 10540   001F86                     
 10541                           ; BSR set to: 0
 10542                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
 10543   001F86  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10544   001F8A  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10545   001F8E  CFDE F00D          	movff	postinc2,clust2sect@fs
 10546   001F92  CFDD F00E          	movff	postdec2,clust2sect@fs+1
 10547   001F96  C09D  F00F         	movff	f_lseek@clst,clust2sect@clst
 10548   001F9A  C09E  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
 10549   001F9E  C09F  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
 10550   001FA2  C0A0  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
 10551   001FA6  ECD9  F02C         	call	_clust2sect	;wreg free
 10552   001FAA  C00D  F095         	movff	?_clust2sect,f_lseek@nsect
 10553   001FAE  C00E  F096         	movff	?_clust2sect+1,f_lseek@nsect+1
 10554   001FB2  C00F  F097         	movff	?_clust2sect+2,f_lseek@nsect+2
 10555   001FB6  C010  F098         	movff	?_clust2sect+3,f_lseek@nsect+3
 10556   001FBA                     
 10557                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10558   001FBA  0100               	movlb	0	; () banked
 10559   001FBC  5195               	movf	f_lseek@nsect& (0+255),w,b
 10560   001FBE  1196               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
 10561   001FC0  1197               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
 10562   001FC2  1198               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
 10563   001FC4  A4D8               	btfss	status,2,c
 10564   001FC6  EFE7  F00F         	goto	u8451
 10565   001FCA  EFE9  F00F         	goto	u8450
 10566   001FCE                     u8451:
 10567   001FCE  EFF3  F00F         	goto	l5974
 10568   001FD2                     u8450:
 10569   001FD2                     
 10570                           ; BSR set to: 0
 10571   001FD2  EE20 F005          	lfsr	2,5
 10572   001FD6  506D               	movf	f_lseek@fp^0,w,c
 10573   001FD8  26D9               	addwf	fsr2l,f,c
 10574   001FDA  506E               	movf	(f_lseek@fp+1)^0,w,c
 10575   001FDC  22DA               	addwfc	fsr2h,f,c
 10576   001FDE  0E02               	movlw	2
 10577   001FE0  6EDF               	movwf	indf2,c
 10578   001FE2  EF88  F010         	goto	l748
 10579   001FE6                     l5974:
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
 10583   001FE6  C06F  F080         	movff	f_lseek@ofs,??_f_lseek
 10584   001FEA  C070  F081         	movff	f_lseek@ofs+1,??_f_lseek+1
 10585   001FEE  C071  F082         	movff	f_lseek@ofs+2,??_f_lseek+2
 10586   001FF2  C072  F083         	movff	f_lseek@ofs+3,??_f_lseek+3
 10587   001FF6  0E0A               	movlw	10
 10588   001FF8  EF03  F010         	goto	u8460
 10589   001FFC                     u8465:
 10590   001FFC  90D8               	bcf	status,0,c
 10591   001FFE  3383               	rrcf	(??_f_lseek+3)& (0+255),f,b
 10592   002000  3382               	rrcf	(??_f_lseek+2)& (0+255),f,b
 10593   002002  3381               	rrcf	(??_f_lseek+1)& (0+255),f,b
 10594   002004  3380               	rrcf	??_f_lseek& (0+255),f,b
 10595   002006                     u8460:
 10596   002006  2EE8               	decfsz	wreg,f,c
 10597   002008  EFFE  F00F         	goto	u8465
 10598   00200C  5180               	movf	??_f_lseek& (0+255),w,b
 10599   00200E  2795               	addwf	f_lseek@nsect& (0+255),f,b
 10600   002010  5181               	movf	(??_f_lseek+1)& (0+255),w,b
 10601   002012  2396               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
 10602   002014  5182               	movf	(??_f_lseek+2)& (0+255),w,b
 10603   002016  2397               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
 10604   002018  5183               	movf	(??_f_lseek+3)& (0+255),w,b
 10605   00201A  2398               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
 10606   00201C                     l5976:
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
 10610   00201C  EE20 F006          	lfsr	2,6
 10611   002020  506D               	movf	f_lseek@fp^0,w,c
 10612   002022  26D9               	addwf	fsr2l,f,c
 10613   002024  506E               	movf	(f_lseek@fp+1)^0,w,c
 10614   002026  22DA               	addwfc	fsr2h,f,c
 10615   002028  0EFF               	movlw	255
 10616   00202A  14DE               	andwf	postinc2,w,c
 10617   00202C  6F80               	movwf	??_f_lseek& (0+255),b
 10618   00202E  0E01               	movlw	1
 10619   002030  14DE               	andwf	postinc2,w,c
 10620   002032  6F81               	movwf	(??_f_lseek+1)& (0+255),b
 10621   002034  0E00               	movlw	0
 10622   002036  14DE               	andwf	postinc2,w,c
 10623   002038  6F82               	movwf	(??_f_lseek+2)& (0+255),b
 10624   00203A  0E00               	movlw	0
 10625   00203C  14DE               	andwf	postinc2,w,c
 10626   00203E  6F83               	movwf	(??_f_lseek+3)& (0+255),b
 10627   002040  5180               	movf	??_f_lseek& (0+255),w,b
 10628   002042  1181               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10629   002044  1182               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10630   002046  1183               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10631   002048  B4D8               	btfsc	status,2,c
 10632   00204A  EF29  F010         	goto	u8471
 10633   00204E  EF2B  F010         	goto	u8470
 10634   002052                     u8471:
 10635   002052  EF51  F010         	goto	l5982
 10636   002056                     u8470:
 10637   002056                     
 10638                           ; BSR set to: 0
 10639   002056  EE20 F016          	lfsr	2,22
 10640   00205A  506D               	movf	f_lseek@fp^0,w,c
 10641   00205C  26D9               	addwf	fsr2l,f,c
 10642   00205E  506E               	movf	(f_lseek@fp+1)^0,w,c
 10643   002060  22DA               	addwfc	fsr2h,f,c
 10644   002062  5195               	movf	f_lseek@nsect& (0+255),w,b
 10645   002064  18DE               	xorwf	postinc2,w,c
 10646   002066  E10F               	bnz	u8480
 10647   002068  5196               	movf	(f_lseek@nsect+1)& (0+255),w,b
 10648   00206A  18DE               	xorwf	postinc2,w,c
 10649   00206C  E10C               	bnz	u8480
 10650   00206E  5197               	movf	(f_lseek@nsect+2)& (0+255),w,b
 10651   002070  18DE               	xorwf	postinc2,w,c
 10652   002072  E109               	bnz	u8480
 10653   002074  5198               	movf	(f_lseek@nsect+3)& (0+255),w,b
 10654   002076  18DE               	xorwf	postinc2,w,c
 10655   002078  B4D8               	btfsc	status,2,c
 10656   00207A  EF41  F010         	goto	u8481
 10657   00207E  EF43  F010         	goto	u8480
 10658   002082                     u8481:
 10659   002082  EF51  F010         	goto	l5982
 10660   002086                     u8480:
 10661   002086                     
 10662                           ; BSR set to: 0
 10663                           ;ff.c: 3171:    fp->dsect = nsect;
 10664   002086  EE20 F016          	lfsr	2,22
 10665   00208A  506D               	movf	f_lseek@fp^0,w,c
 10666   00208C  26D9               	addwf	fsr2l,f,c
 10667   00208E  506E               	movf	(f_lseek@fp+1)^0,w,c
 10668   002090  22DA               	addwfc	fsr2h,f,c
 10669   002092  C095  FFDE         	movff	f_lseek@nsect,postinc2
 10670   002096  C096  FFDE         	movff	f_lseek@nsect+1,postinc2
 10671   00209A  C097  FFDE         	movff	f_lseek@nsect+2,postinc2
 10672   00209E  C098  FFDE         	movff	f_lseek@nsect+3,postinc2
 10673   0020A2                     l5982:
 10674                           
 10675                           ; BSR set to: 0
 10676                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
 10677   0020A2  EE20 F006          	lfsr	2,6
 10678   0020A6  506D               	movf	f_lseek@fp^0,w,c
 10679   0020A8  26D9               	addwf	fsr2l,f,c
 10680   0020AA  506E               	movf	(f_lseek@fp+1)^0,w,c
 10681   0020AC  22DA               	addwfc	fsr2h,f,c
 10682   0020AE  EE10 F00A          	lfsr	1,10
 10683   0020B2  506D               	movf	f_lseek@fp^0,w,c
 10684   0020B4  26E1               	addwf	fsr1l,f,c
 10685   0020B6  506E               	movf	(f_lseek@fp+1)^0,w,c
 10686   0020B8  22E2               	addwfc	fsr1h,f,c
 10687   0020BA  50DE               	movf	postinc2,w,c
 10688   0020BC  5CE6               	subwf	postinc1,w,c
 10689   0020BE  50DE               	movf	postinc2,w,c
 10690   0020C0  58E6               	subwfb	postinc1,w,c
 10691   0020C2  50DE               	movf	postinc2,w,c
 10692   0020C4  58E6               	subwfb	postinc1,w,c
 10693   0020C6  50DE               	movf	postinc2,w,c
 10694   0020C8  58E6               	subwfb	postinc1,w,c
 10695   0020CA  B0D8               	btfsc	status,0,c
 10696   0020CC  EF6A  F010         	goto	u8491
 10697   0020D0  EF6C  F010         	goto	u8490
 10698   0020D4                     u8491:
 10699   0020D4  EF88  F010         	goto	l748
 10700   0020D8                     u8490:
 10701   0020D8                     
 10702                           ; BSR set to: 0
 10703                           ;ff.c: 3175:    fp->fsize = fp->fptr;
 10704   0020D8  EE20 F006          	lfsr	2,6
 10705   0020DC  506D               	movf	f_lseek@fp^0,w,c
 10706   0020DE  26D9               	addwf	fsr2l,f,c
 10707   0020E0  506E               	movf	(f_lseek@fp+1)^0,w,c
 10708   0020E2  22DA               	addwfc	fsr2h,f,c
 10709   0020E4  EE10 F00A          	lfsr	1,10
 10710   0020E8  506D               	movf	f_lseek@fp^0,w,c
 10711   0020EA  26E1               	addwf	fsr1l,f,c
 10712   0020EC  506E               	movf	(f_lseek@fp+1)^0,w,c
 10713   0020EE  22E2               	addwfc	fsr1h,f,c
 10714   0020F0  CFDE FFE6          	movff	postinc2,postinc1
 10715   0020F4  CFDE FFE6          	movff	postinc2,postinc1
 10716   0020F8  CFDE FFE6          	movff	postinc2,postinc1
 10717   0020FC  CFDE FFE6          	movff	postinc2,postinc1
 10718   002100                     
 10719                           ; BSR set to: 0
 10720                           ;ff.c: 3176:    fp->flag |= 0x20;
 10721   002100  EE20 F004          	lfsr	2,4
 10722   002104  506D               	movf	f_lseek@fp^0,w,c
 10723   002106  26D9               	addwf	fsr2l,f,c
 10724   002108  506E               	movf	(f_lseek@fp+1)^0,w,c
 10725   00210A  22DA               	addwfc	fsr2h,f,c
 10726   00210C  0E00               	movlw	0
 10727   00210E  8ADB               	bsf	plusw2,5,c
 10728   002110                     l748:
 10729                           
 10730                           ; BSR set to: 0
 10731   002110  0012               	return		;funcret
 10732   002112                     __end_of_f_lseek:
 10733                           	callstack 0
 10734                           
 10735 ;; *************** function _create_chain *****************
 10736 ;; Defined at:
 10737 ;;		line 990 in file "ff.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;  fs              2   85[COMRAM] PTR struct .
 10740 ;;		 -> FatFs(558), NULL(0), 
 10741 ;;  clst            4   87[COMRAM] unsigned long 
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;  cs              4  104[COMRAM] unsigned long 
 10744 ;;  ncl             4  100[COMRAM] unsigned long 
 10745 ;;  scl             4   96[COMRAM] unsigned long 
 10746 ;;  res             1   95[COMRAM] enum E95
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  4   85[COMRAM] unsigned long 
 10749 ;; Registers used:
 10750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10756 ;;      Params:         6       0       0       0       0       0       0
 10757 ;;      Locals:        13       0       0       0       0       0       0
 10758 ;;      Temps:          4       0       0       0       0       0       0
 10759 ;;      Totals:        23       0       0       0       0       0       0
 10760 ;;Total ram usage:       23 bytes
 10761 ;; Hardware stack levels used: 1
 10762 ;; Hardware stack levels required when called: 9
 10763 ;; This function calls:
 10764 ;;		_get_fat
 10765 ;;		_put_fat
 10766 ;; This function is called by:
 10767 ;;		_dir_next
 10768 ;;		_f_write
 10769 ;;		_f_lseek
 10770 ;; This function uses a non-reentrant model
 10771 ;;
 10772                           
 10773                           	psect	text23
 10774   00384E                     __ptext23:
 10775                           	callstack 0
 10776   00384E                     _create_chain:
 10777                           	callstack 20
 10778   00384E                     
 10779                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
 10780   00384E  5058               	movf	create_chain@clst^0,w,c
 10781   003850  1059               	iorwf	(create_chain@clst+1)^0,w,c
 10782   003852  105A               	iorwf	(create_chain@clst+2)^0,w,c
 10783   003854  105B               	iorwf	(create_chain@clst+3)^0,w,c
 10784   003856  A4D8               	btfss	status,2,c
 10785   003858  EF30  F01C         	goto	u5291
 10786   00385C  EF32  F01C         	goto	u5290
 10787   003860                     u5291:
 10788   003860  EF6A  F01C         	goto	l4300
 10789   003864                     u5290:
 10790   003864                     
 10791                           ;ff.c: 1000:   scl = fs->last_clust;
 10792   003864  EE20 F00A          	lfsr	2,10
 10793   003868  5056               	movf	create_chain@fs^0,w,c
 10794   00386A  26D9               	addwf	fsr2l,f,c
 10795   00386C  5057               	movf	(create_chain@fs+1)^0,w,c
 10796   00386E  22DA               	addwfc	fsr2h,f,c
 10797   003870  CFDE F061          	movff	postinc2,create_chain@scl
 10798   003874  CFDE F062          	movff	postinc2,create_chain@scl+1
 10799   003878  CFDE F063          	movff	postinc2,create_chain@scl+2
 10800   00387C  CFDE F064          	movff	postinc2,create_chain@scl+3
 10801   003880                     
 10802                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
 10803   003880  5061               	movf	create_chain@scl^0,w,c
 10804   003882  1062               	iorwf	(create_chain@scl+1)^0,w,c
 10805   003884  1063               	iorwf	(create_chain@scl+2)^0,w,c
 10806   003886  1064               	iorwf	(create_chain@scl+3)^0,w,c
 10807   003888  B4D8               	btfsc	status,2,c
 10808   00388A  EF49  F01C         	goto	u5301
 10809   00388E  EF4B  F01C         	goto	u5300
 10810   003892                     u5301:
 10811   003892  EF60  F01C         	goto	l4298
 10812   003896                     u5300:
 10813   003896  EE20 F012          	lfsr	2,18
 10814   00389A  5056               	movf	create_chain@fs^0,w,c
 10815   00389C  26D9               	addwf	fsr2l,f,c
 10816   00389E  5057               	movf	(create_chain@fs+1)^0,w,c
 10817   0038A0  22DA               	addwfc	fsr2h,f,c
 10818   0038A2  50DE               	movf	postinc2,w,c
 10819   0038A4  5C61               	subwf	create_chain@scl^0,w,c
 10820   0038A6  50DE               	movf	postinc2,w,c
 10821   0038A8  5862               	subwfb	(create_chain@scl+1)^0,w,c
 10822   0038AA  50DE               	movf	postinc2,w,c
 10823   0038AC  5863               	subwfb	(create_chain@scl+2)^0,w,c
 10824   0038AE  50DE               	movf	postinc2,w,c
 10825   0038B0  5864               	subwfb	(create_chain@scl+3)^0,w,c
 10826   0038B2  A0D8               	btfss	status,0,c
 10827   0038B4  EF5E  F01C         	goto	u5311
 10828   0038B8  EF60  F01C         	goto	u5310
 10829   0038BC                     u5311:
 10830   0038BC  EFCE  F01C         	goto	l400
 10831   0038C0                     u5310:
 10832   0038C0                     l4298:
 10833   0038C0  0E01               	movlw	1
 10834   0038C2  6E61               	movwf	create_chain@scl^0,c
 10835   0038C4  0E00               	movlw	0
 10836   0038C6  6E62               	movwf	(create_chain@scl+1)^0,c
 10837   0038C8  0E00               	movlw	0
 10838   0038CA  6E63               	movwf	(create_chain@scl+2)^0,c
 10839   0038CC  0E00               	movlw	0
 10840   0038CE  6E64               	movwf	(create_chain@scl+3)^0,c
 10841   0038D0  EFCE  F01C         	goto	l400
 10842   0038D4                     l4300:
 10843                           
 10844                           ;ff.c: 1004:   cs = get_fat(fs, clst);
 10845   0038D4  C056  F03B         	movff	create_chain@fs,get_fat@fs
 10846   0038D8  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 10847   0038DC  C058  F03D         	movff	create_chain@clst,get_fat@clst
 10848   0038E0  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
 10849   0038E4  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
 10850   0038E8  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
 10851   0038EC  EC38  F01A         	call	_get_fat	;wreg free
 10852   0038F0  C03B  F069         	movff	?_get_fat,create_chain@cs
 10853   0038F4  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 10854   0038F8  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 10855   0038FC  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 10856   003900                     
 10857                           ;ff.c: 1005:   if (cs < 2) return 1;
 10858   003900  506C               	movf	(create_chain@cs+3)^0,w,c
 10859   003902  106B               	iorwf	(create_chain@cs+2)^0,w,c
 10860   003904  106A               	iorwf	(create_chain@cs+1)^0,w,c
 10861   003906  E107               	bnz	u5321
 10862   003908  0E02               	movlw	2
 10863   00390A  5C69               	subwf	create_chain@cs^0,w,c
 10864   00390C  B0D8               	btfsc	status,0,c
 10865   00390E  EF8B  F01C         	goto	u5321
 10866   003912  EF8D  F01C         	goto	u5320
 10867   003916                     u5321:
 10868   003916  EF97  F01C         	goto	l4308
 10869   00391A                     u5320:
 10870   00391A  0E01               	movlw	1
 10871   00391C  6E56               	movwf	?_create_chain^0,c
 10872   00391E  0E00               	movlw	0
 10873   003920  6E57               	movwf	(?_create_chain+1)^0,c
 10874   003922  0E00               	movlw	0
 10875   003924  6E58               	movwf	(?_create_chain+2)^0,c
 10876   003926  0E00               	movlw	0
 10877   003928  6E59               	movwf	(?_create_chain+3)^0,c
 10878   00392A  EF00  F01E         	goto	l402
 10879   00392E                     l4308:
 10880                           
 10881                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
 10882   00392E  2869               	incf	create_chain@cs^0,w,c
 10883   003930  E10A               	bnz	u5331
 10884   003932  286A               	incf	(create_chain@cs+1)^0,w,c
 10885   003934  E108               	bnz	u5331
 10886   003936  286B               	incf	(create_chain@cs+2)^0,w,c
 10887   003938  E106               	bnz	u5331
 10888   00393A  286C               	incf	(create_chain@cs+3)^0,w,c
 10889   00393C  A4D8               	btfss	status,2,c
 10890   00393E  EFA3  F01C         	goto	u5331
 10891   003942  EFA5  F01C         	goto	u5330
 10892   003946                     u5331:
 10893   003946  EFAF  F01C         	goto	l4312
 10894   00394A                     u5330:
 10895   00394A                     l4310:
 10896   00394A  C069  F056         	movff	create_chain@cs,?_create_chain
 10897   00394E  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 10898   003952  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 10899   003956  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 10900   00395A  EF00  F01E         	goto	l402
 10901   00395E                     l4312:
 10902                           
 10903                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
 10904   00395E  EE20 F012          	lfsr	2,18
 10905   003962  5056               	movf	create_chain@fs^0,w,c
 10906   003964  26D9               	addwf	fsr2l,f,c
 10907   003966  5057               	movf	(create_chain@fs+1)^0,w,c
 10908   003968  22DA               	addwfc	fsr2h,f,c
 10909   00396A  50DE               	movf	postinc2,w,c
 10910   00396C  5C69               	subwf	create_chain@cs^0,w,c
 10911   00396E  50DE               	movf	postinc2,w,c
 10912   003970  586A               	subwfb	(create_chain@cs+1)^0,w,c
 10913   003972  50DE               	movf	postinc2,w,c
 10914   003974  586B               	subwfb	(create_chain@cs+2)^0,w,c
 10915   003976  50DE               	movf	postinc2,w,c
 10916   003978  586C               	subwfb	(create_chain@cs+3)^0,w,c
 10917   00397A  B0D8               	btfsc	status,0,c
 10918   00397C  EFC2  F01C         	goto	u5341
 10919   003980  EFC4  F01C         	goto	u5340
 10920   003984                     u5341:
 10921   003984  EFC6  F01C         	goto	l404
 10922   003988                     u5340:
 10923   003988  EFA5  F01C         	goto	l4310
 10924   00398C                     l404:
 10925                           
 10926                           ;ff.c: 1008:   scl = clst;
 10927   00398C  C058  F061         	movff	create_chain@clst,create_chain@scl
 10928   003990  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
 10929   003994  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
 10930   003998  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
 10931   00399C                     l400:
 10932                           
 10933                           ;ff.c: 1011:  ncl = scl;
 10934   00399C  C061  F065         	movff	create_chain@scl,create_chain@ncl
 10935   0039A0  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
 10936   0039A4  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
 10937   0039A8  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
 10938   0039AC                     l4316:
 10939                           
 10940                           ;ff.c: 1013:   ncl++;
 10941   0039AC  0E01               	movlw	1
 10942   0039AE  2665               	addwf	create_chain@ncl^0,f,c
 10943   0039B0  0E00               	movlw	0
 10944   0039B2  2266               	addwfc	(create_chain@ncl+1)^0,f,c
 10945   0039B4  2267               	addwfc	(create_chain@ncl+2)^0,f,c
 10946   0039B6  2268               	addwfc	(create_chain@ncl+3)^0,f,c
 10947   0039B8                     
 10948                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
 10949   0039B8  EE20 F012          	lfsr	2,18
 10950   0039BC  5056               	movf	create_chain@fs^0,w,c
 10951   0039BE  26D9               	addwf	fsr2l,f,c
 10952   0039C0  5057               	movf	(create_chain@fs+1)^0,w,c
 10953   0039C2  22DA               	addwfc	fsr2h,f,c
 10954   0039C4  50DE               	movf	postinc2,w,c
 10955   0039C6  5C65               	subwf	create_chain@ncl^0,w,c
 10956   0039C8  50DE               	movf	postinc2,w,c
 10957   0039CA  5866               	subwfb	(create_chain@ncl+1)^0,w,c
 10958   0039CC  50DE               	movf	postinc2,w,c
 10959   0039CE  5867               	subwfb	(create_chain@ncl+2)^0,w,c
 10960   0039D0  50DE               	movf	postinc2,w,c
 10961   0039D2  5868               	subwfb	(create_chain@ncl+3)^0,w,c
 10962   0039D4  A0D8               	btfss	status,0,c
 10963   0039D6  EFEF  F01C         	goto	u5351
 10964   0039DA  EFF1  F01C         	goto	u5350
 10965   0039DE                     u5351:
 10966   0039DE  EF10  F01D         	goto	l4328
 10967   0039E2                     u5350:
 10968   0039E2                     
 10969                           ;ff.c: 1015:    ncl = 2;
 10970   0039E2  0E02               	movlw	2
 10971   0039E4  6E65               	movwf	create_chain@ncl^0,c
 10972   0039E6  0E00               	movlw	0
 10973   0039E8  6E66               	movwf	(create_chain@ncl+1)^0,c
 10974   0039EA  0E00               	movlw	0
 10975   0039EC  6E67               	movwf	(create_chain@ncl+2)^0,c
 10976   0039EE  0E00               	movlw	0
 10977   0039F0  6E68               	movwf	(create_chain@ncl+3)^0,c
 10978   0039F2                     
 10979                           ;ff.c: 1016:    if (ncl > scl) return 0;
 10980   0039F2  5064               	movf	(create_chain@scl+3)^0,w,c
 10981   0039F4  1063               	iorwf	(create_chain@scl+2)^0,w,c
 10982   0039F6  1062               	iorwf	(create_chain@scl+1)^0,w,c
 10983   0039F8  E107               	bnz	u5361
 10984   0039FA  0E02               	movlw	2
 10985   0039FC  5C61               	subwf	create_chain@scl^0,w,c
 10986   0039FE  B0D8               	btfsc	status,0,c
 10987   003A00  EF04  F01D         	goto	u5361
 10988   003A04  EF06  F01D         	goto	u5360
 10989   003A08                     u5361:
 10990   003A08  EF10  F01D         	goto	l4328
 10991   003A0C                     u5360:
 10992   003A0C                     l4324:
 10993   003A0C  0E00               	movlw	0
 10994   003A0E  6E56               	movwf	?_create_chain^0,c
 10995   003A10  0E00               	movlw	0
 10996   003A12  6E57               	movwf	(?_create_chain+1)^0,c
 10997   003A14  0E00               	movlw	0
 10998   003A16  6E58               	movwf	(?_create_chain+2)^0,c
 10999   003A18  0E00               	movlw	0
 11000   003A1A  6E59               	movwf	(?_create_chain+3)^0,c
 11001   003A1C  EF00  F01E         	goto	l402
 11002   003A20                     l4328:
 11003                           
 11004                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
 11005   003A20  C056  F03B         	movff	create_chain@fs,get_fat@fs
 11006   003A24  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 11007   003A28  C065  F03D         	movff	create_chain@ncl,get_fat@clst
 11008   003A2C  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
 11009   003A30  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
 11010   003A34  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
 11011   003A38  EC38  F01A         	call	_get_fat	;wreg free
 11012   003A3C  C03B  F069         	movff	?_get_fat,create_chain@cs
 11013   003A40  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 11014   003A44  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 11015   003A48  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 11016   003A4C                     
 11017                           ;ff.c: 1019:   if (cs == 0) break;
 11018   003A4C  5069               	movf	create_chain@cs^0,w,c
 11019   003A4E  106A               	iorwf	(create_chain@cs+1)^0,w,c
 11020   003A50  106B               	iorwf	(create_chain@cs+2)^0,w,c
 11021   003A52  106C               	iorwf	(create_chain@cs+3)^0,w,c
 11022   003A54  A4D8               	btfss	status,2,c
 11023   003A56  EF2F  F01D         	goto	u5371
 11024   003A5A  EF31  F01D         	goto	u5370
 11025   003A5E                     u5371:
 11026   003A5E  EF33  F01D         	goto	l4334
 11027   003A62                     u5370:
 11028   003A62  EF62  F01D         	goto	l4344
 11029   003A66                     l4334:
 11030                           
 11031                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
 11032   003A66  2869               	incf	create_chain@cs^0,w,c
 11033   003A68  E10C               	bnz	u5380
 11034   003A6A  286A               	incf	(create_chain@cs+1)^0,w,c
 11035   003A6C  E10A               	bnz	u5380
 11036   003A6E  286B               	incf	(create_chain@cs+2)^0,w,c
 11037   003A70  E108               	bnz	u5380
 11038   003A72  286C               	incf	(create_chain@cs+3)^0,w,c
 11039   003A74  B4D8               	btfsc	status,2,c
 11040   003A76  EF3F  F01D         	goto	u5381
 11041   003A7A  EF41  F01D         	goto	u5380
 11042   003A7E                     u5381:
 11043   003A7E  EFA5  F01C         	goto	l4310
 11044   003A82                     u5380:
 11045   003A82  0469               	decf	create_chain@cs^0,w,c
 11046   003A84  106A               	iorwf	(create_chain@cs+1)^0,w,c
 11047   003A86  106B               	iorwf	(create_chain@cs+2)^0,w,c
 11048   003A88  106C               	iorwf	(create_chain@cs+3)^0,w,c
 11049   003A8A  A4D8               	btfss	status,2,c
 11050   003A8C  EF4A  F01D         	goto	u5391
 11051   003A90  EF4C  F01D         	goto	u5390
 11052   003A94                     u5391:
 11053   003A94  EF4E  F01D         	goto	l4338
 11054   003A98                     u5390:
 11055   003A98  EFA5  F01C         	goto	l4310
 11056   003A9C                     l4338:
 11057                           
 11058                           ;ff.c: 1022:   if (ncl == scl) return 0;
 11059   003A9C  5061               	movf	create_chain@scl^0,w,c
 11060   003A9E  1865               	xorwf	create_chain@ncl^0,w,c
 11061   003AA0  E10D               	bnz	u5401
 11062   003AA2  5062               	movf	(create_chain@scl+1)^0,w,c
 11063   003AA4  1866               	xorwf	(create_chain@ncl+1)^0,w,c
 11064   003AA6  E10A               	bnz	u5401
 11065   003AA8  5063               	movf	(create_chain@scl+2)^0,w,c
 11066   003AAA  1867               	xorwf	(create_chain@ncl+2)^0,w,c
 11067   003AAC  E107               	bnz	u5401
 11068   003AAE  5064               	movf	(create_chain@scl+3)^0,w,c
 11069   003AB0  1868               	xorwf	(create_chain@ncl+3)^0,w,c
 11070   003AB2  A4D8               	btfss	status,2,c
 11071   003AB4  EF5E  F01D         	goto	u5401
 11072   003AB8  EF60  F01D         	goto	u5400
 11073   003ABC                     u5401:
 11074   003ABC  EFD6  F01C         	goto	l4316
 11075   003AC0                     u5400:
 11076   003AC0  EF06  F01D         	goto	l4324
 11077   003AC4                     l4344:
 11078                           
 11079                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
 11080   003AC4  C056  F03B         	movff	create_chain@fs,put_fat@fs
 11081   003AC8  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 11082   003ACC  C065  F03D         	movff	create_chain@ncl,put_fat@clst
 11083   003AD0  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
 11084   003AD4  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
 11085   003AD8  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
 11086   003ADC  0EFF               	movlw	255
 11087   003ADE  6E41               	movwf	put_fat@val^0,c
 11088   003AE0  0EFF               	movlw	255
 11089   003AE2  6E42               	movwf	(put_fat@val+1)^0,c
 11090   003AE4  0EFF               	movlw	255
 11091   003AE6  6E43               	movwf	(put_fat@val+2)^0,c
 11092   003AE8  0E0F               	movlw	15
 11093   003AEA  6E44               	movwf	(put_fat@val+3)^0,c
 11094   003AEC  EC82  F013         	call	_put_fat	;wreg free
 11095   003AF0  6E60               	movwf	create_chain@res^0,c
 11096   003AF2                     
 11097                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
 11098   003AF2  5060               	movf	create_chain@res^0,w,c
 11099   003AF4  A4D8               	btfss	status,2,c
 11100   003AF6  EF7F  F01D         	goto	u5411
 11101   003AFA  EF81  F01D         	goto	u5410
 11102   003AFE                     u5411:
 11103   003AFE  EFA3  F01D         	goto	l4352
 11104   003B02                     u5410:
 11105   003B02  5058               	movf	create_chain@clst^0,w,c
 11106   003B04  1059               	iorwf	(create_chain@clst+1)^0,w,c
 11107   003B06  105A               	iorwf	(create_chain@clst+2)^0,w,c
 11108   003B08  105B               	iorwf	(create_chain@clst+3)^0,w,c
 11109   003B0A  B4D8               	btfsc	status,2,c
 11110   003B0C  EF8A  F01D         	goto	u5421
 11111   003B10  EF8C  F01D         	goto	u5420
 11112   003B14                     u5421:
 11113   003B14  EFA3  F01D         	goto	l4352
 11114   003B18                     u5420:
 11115   003B18                     
 11116                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
 11117   003B18  C056  F03B         	movff	create_chain@fs,put_fat@fs
 11118   003B1C  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 11119   003B20  C058  F03D         	movff	create_chain@clst,put_fat@clst
 11120   003B24  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
 11121   003B28  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
 11122   003B2C  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
 11123   003B30  C065  F041         	movff	create_chain@ncl,put_fat@val
 11124   003B34  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
 11125   003B38  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
 11126   003B3C  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
 11127   003B40  EC82  F013         	call	_put_fat	;wreg free
 11128   003B44  6E60               	movwf	create_chain@res^0,c
 11129   003B46                     l4352:
 11130                           
 11131                           ;ff.c: 1029:  if (res == FR_OK) {
 11132   003B46  5060               	movf	create_chain@res^0,w,c
 11133   003B48  A4D8               	btfss	status,2,c
 11134   003B4A  EFA9  F01D         	goto	u5431
 11135   003B4E  EFAB  F01D         	goto	u5430
 11136   003B52                     u5431:
 11137   003B52  EFE2  F01D         	goto	l4358
 11138   003B56                     u5430:
 11139   003B56                     
 11140                           ;ff.c: 1030:   fs->last_clust = ncl;
 11141   003B56  EE20 F00A          	lfsr	2,10
 11142   003B5A  5056               	movf	create_chain@fs^0,w,c
 11143   003B5C  26D9               	addwf	fsr2l,f,c
 11144   003B5E  5057               	movf	(create_chain@fs+1)^0,w,c
 11145   003B60  22DA               	addwfc	fsr2h,f,c
 11146   003B62  C065  FFDE         	movff	create_chain@ncl,postinc2
 11147   003B66  C066  FFDE         	movff	create_chain@ncl+1,postinc2
 11148   003B6A  C067  FFDE         	movff	create_chain@ncl+2,postinc2
 11149   003B6E  C068  FFDE         	movff	create_chain@ncl+3,postinc2
 11150                           
 11151                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
 11152   003B72  EE20 F00E          	lfsr	2,14
 11153   003B76  5056               	movf	create_chain@fs^0,w,c
 11154   003B78  26D9               	addwf	fsr2l,f,c
 11155   003B7A  5057               	movf	(create_chain@fs+1)^0,w,c
 11156   003B7C  22DA               	addwfc	fsr2h,f,c
 11157   003B7E  28DE               	incf	postinc2,w,c
 11158   003B80  E10C               	bnz	u5440
 11159   003B82  28DE               	incf	postinc2,w,c
 11160   003B84  E10A               	bnz	u5440
 11161   003B86  28DE               	incf	postinc2,w,c
 11162   003B88  E108               	bnz	u5440
 11163   003B8A  28DE               	incf	postinc2,w,c
 11164   003B8C  B4D8               	btfsc	status,2,c
 11165   003B8E  EFCB  F01D         	goto	u5441
 11166   003B92  EFCD  F01D         	goto	u5440
 11167   003B96                     u5441:
 11168   003B96  EFF8  F01D         	goto	l417
 11169   003B9A                     u5440:
 11170   003B9A                     
 11171                           ;ff.c: 1032:    fs->free_clust--;
 11172   003B9A  EE20 F00E          	lfsr	2,14
 11173   003B9E  5056               	movf	create_chain@fs^0,w,c
 11174   003BA0  26D9               	addwf	fsr2l,f,c
 11175   003BA2  5057               	movf	(create_chain@fs+1)^0,w,c
 11176   003BA4  22DA               	addwfc	fsr2h,f,c
 11177   003BA6  06DE               	decf	postinc2,f,c
 11178   003BA8  0E00               	movlw	0
 11179   003BAA  5ADE               	subwfb	postinc2,f,c
 11180   003BAC  5ADE               	subwfb	postinc2,f,c
 11181   003BAE  5ADE               	subwfb	postinc2,f,c
 11182                           
 11183                           ;ff.c: 1033:    fs->fsi_flag |= 1;
 11184   003BB0  EE20 F005          	lfsr	2,5
 11185   003BB4  5056               	movf	create_chain@fs^0,w,c
 11186   003BB6  26D9               	addwf	fsr2l,f,c
 11187   003BB8  5057               	movf	(create_chain@fs+1)^0,w,c
 11188   003BBA  22DA               	addwfc	fsr2h,f,c
 11189   003BBC  0E00               	movlw	0
 11190   003BBE  80DB               	bsf	plusw2,0,c
 11191   003BC0  EFF8  F01D         	goto	l417
 11192   003BC4                     l4358:
 11193                           
 11194                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 11195   003BC4  0460               	decf	create_chain@res^0,w,c
 11196   003BC6  B4D8               	btfsc	status,2,c
 11197   003BC8  EFE8  F01D         	goto	u5451
 11198   003BCC  EFEA  F01D         	goto	u5450
 11199   003BD0                     u5451:
 11200   003BD0  EFF4  F01D         	goto	l419
 11201   003BD4                     u5450:
 11202   003BD4  0E01               	movlw	1
 11203   003BD6  6E65               	movwf	create_chain@ncl^0,c
 11204   003BD8  0E00               	movlw	0
 11205   003BDA  6E66               	movwf	(create_chain@ncl+1)^0,c
 11206   003BDC  0E00               	movlw	0
 11207   003BDE  6E67               	movwf	(create_chain@ncl+2)^0,c
 11208   003BE0  0E00               	movlw	0
 11209   003BE2  6E68               	movwf	(create_chain@ncl+3)^0,c
 11210   003BE4  EFF8  F01D         	goto	l417
 11211   003BE8                     l419:
 11212   003BE8  6865               	setf	create_chain@ncl^0,c
 11213   003BEA  6866               	setf	(create_chain@ncl+1)^0,c
 11214   003BEC  6867               	setf	(create_chain@ncl+2)^0,c
 11215   003BEE  6868               	setf	(create_chain@ncl+3)^0,c
 11216   003BF0                     l417:
 11217                           
 11218                           ;ff.c: 1039:  return ncl;
 11219   003BF0  C065  F056         	movff	create_chain@ncl,?_create_chain
 11220   003BF4  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
 11221   003BF8  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
 11222   003BFC  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
 11223   003C00                     l402:
 11224   003C00  0012               	return		;funcret
 11225   003C02                     __end_of_create_chain:
 11226                           	callstack 0
 11227                           
 11228 ;; *************** function _put_fat *****************
 11229 ;; Defined at:
 11230 ;;		line 873 in file "ff.c"
 11231 ;; Parameters:    Size  Location     Type
 11232 ;;  fs              2   58[COMRAM] PTR struct .
 11233 ;;		 -> FatFs(558), NULL(0), 
 11234 ;;  clst            4   60[COMRAM] unsigned long 
 11235 ;;  val             4   64[COMRAM] unsigned long 
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;  p               2   83[COMRAM] PTR unsigned char 
 11238 ;;		 -> FatFs(558), FatFs$win(512), NULL(0), 
 11239 ;;  bc              2   80[COMRAM] unsigned short 
 11240 ;;  res             1   82[COMRAM] enum E95
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  1    wreg      enum E95
 11243 ;; Registers used:
 11244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11245 ;; Tracked objects:
 11246 ;;		On entry : 0/0
 11247 ;;		On exit  : 0/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11250 ;;      Params:        10       0       0       0       0       0       0
 11251 ;;      Locals:         9       0       0       0       0       0       0
 11252 ;;      Temps:          8       0       0       0       0       0       0
 11253 ;;      Totals:        27       0       0       0       0       0       0
 11254 ;;Total ram usage:       27 bytes
 11255 ;; Hardware stack levels used: 1
 11256 ;; Hardware stack levels required when called: 8
 11257 ;; This function calls:
 11258 ;;		_move_window
 11259 ;; This function is called by:
 11260 ;;		_remove_chain
 11261 ;;		_create_chain
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           	psect	text24
 11266   002704                     __ptext24:
 11267                           	callstack 0
 11268   002704                     _put_fat:
 11269                           	callstack 20
 11270   002704                     
 11271                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
 11272   002704  5040               	movf	(put_fat@clst+3)^0,w,c
 11273   002706  103F               	iorwf	(put_fat@clst+2)^0,w,c
 11274   002708  103E               	iorwf	(put_fat@clst+1)^0,w,c
 11275   00270A  E109               	bnz	u5130
 11276   00270C  0E02               	movlw	2
 11277   00270E  5C3D               	subwf	put_fat@clst^0,w,c
 11278   002710  A0D8               	btfss	status,0,c
 11279   002712  EF8D  F013         	goto	u5131
 11280   002716  EF8F  F013         	goto	u5130
 11281   00271A                     u5131:
 11282   00271A  EFA4  F013         	goto	l4190
 11283   00271E                     u5130:
 11284   00271E  EE20 F012          	lfsr	2,18
 11285   002722  503B               	movf	put_fat@fs^0,w,c
 11286   002724  26D9               	addwf	fsr2l,f,c
 11287   002726  503C               	movf	(put_fat@fs+1)^0,w,c
 11288   002728  22DA               	addwfc	fsr2h,f,c
 11289   00272A  50DE               	movf	postinc2,w,c
 11290   00272C  5C3D               	subwf	put_fat@clst^0,w,c
 11291   00272E  50DE               	movf	postinc2,w,c
 11292   002730  583E               	subwfb	(put_fat@clst+1)^0,w,c
 11293   002732  50DE               	movf	postinc2,w,c
 11294   002734  583F               	subwfb	(put_fat@clst+2)^0,w,c
 11295   002736  50DE               	movf	postinc2,w,c
 11296   002738  5840               	subwfb	(put_fat@clst+3)^0,w,c
 11297   00273A  A0D8               	btfss	status,0,c
 11298   00273C  EFA2  F013         	goto	u5141
 11299   002740  EFA4  F013         	goto	u5140
 11300   002744                     u5141:
 11301   002744  EFB5  F015         	goto	l4254
 11302   002748                     u5140:
 11303   002748                     l4190:
 11304                           
 11305                           ;ff.c: 885:   res = FR_INT_ERR;
 11306   002748  0E02               	movlw	2
 11307   00274A  6E53               	movwf	put_fat@res^0,c
 11308                           
 11309                           ;ff.c: 887:  } else {
 11310   00274C  EFC8  F015         	goto	l4256
 11311   002750                     l361:
 11312                           
 11313                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
 11314   002750  C03D  F051         	movff	put_fat@clst,put_fat@bc
 11315   002754  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
 11316   002758  90D8               	bcf	status,0,c
 11317   00275A  3052               	rrcf	(put_fat@bc+1)^0,w,c
 11318   00275C  6E46               	movwf	(??_put_fat+1)^0,c
 11319   00275E  3051               	rrcf	put_fat@bc^0,w,c
 11320   002760  6E45               	movwf	??_put_fat^0,c
 11321   002762  5045               	movf	??_put_fat^0,w,c
 11322   002764  2651               	addwf	put_fat@bc^0,f,c
 11323   002766  5046               	movf	(??_put_fat+1)^0,w,c
 11324   002768  2252               	addwfc	(put_fat@bc+1)^0,f,c
 11325   00276A                     
 11326                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11327   00276A  C03B  F030         	movff	put_fat@fs,move_window@fs
 11328   00276E  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11329   002772  EE20 F01E          	lfsr	2,30
 11330   002776  503B               	movf	put_fat@fs^0,w,c
 11331   002778  26D9               	addwf	fsr2l,f,c
 11332   00277A  503C               	movf	(put_fat@fs+1)^0,w,c
 11333   00277C  22DA               	addwfc	fsr2h,f,c
 11334   00277E  CFDE F045          	movff	postinc2,??_put_fat
 11335   002782  CFDE F046          	movff	postinc2,??_put_fat+1
 11336   002786  CFDE F047          	movff	postinc2,??_put_fat+2
 11337   00278A  CFDE F048          	movff	postinc2,??_put_fat+3
 11338   00278E  C051  F049         	movff	put_fat@bc,??_put_fat+4
 11339   002792  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 11340   002796  0E09               	movlw	9
 11341   002798  6E4B               	movwf	(??_put_fat+6)^0,c
 11342   00279A                     u5155:
 11343   00279A  90D8               	bcf	status,0,c
 11344   00279C  324A               	rrcf	(??_put_fat+5)^0,f,c
 11345   00279E  3249               	rrcf	(??_put_fat+4)^0,f,c
 11346   0027A0  2E4B               	decfsz	(??_put_fat+6)^0,f,c
 11347   0027A2  EFCD  F013         	goto	u5155
 11348   0027A6  5049               	movf	(??_put_fat+4)^0,w,c
 11349   0027A8  2445               	addwf	??_put_fat^0,w,c
 11350   0027AA  6E32               	movwf	move_window@sector^0,c
 11351   0027AC  504A               	movf	(??_put_fat+5)^0,w,c
 11352   0027AE  2046               	addwfc	(??_put_fat+1)^0,w,c
 11353   0027B0  6E33               	movwf	(move_window@sector+1)^0,c
 11354   0027B2  0E00               	movlw	0
 11355   0027B4  2047               	addwfc	(??_put_fat+2)^0,w,c
 11356   0027B6  6E34               	movwf	(move_window@sector+2)^0,c
 11357   0027B8  0E00               	movlw	0
 11358   0027BA  2048               	addwfc	(??_put_fat+3)^0,w,c
 11359   0027BC  6E35               	movwf	(move_window@sector+3)^0,c
 11360   0027BE  EC3C  F02D         	call	_move_window	;wreg free
 11361   0027C2  6E53               	movwf	put_fat@res^0,c
 11362   0027C4                     
 11363                           ;ff.c: 892:    if (res != FR_OK) break;
 11364   0027C4  5053               	movf	put_fat@res^0,w,c
 11365   0027C6  B4D8               	btfsc	status,2,c
 11366   0027C8  EFE8  F013         	goto	u5161
 11367   0027CC  EFEA  F013         	goto	u5160
 11368   0027D0                     u5161:
 11369   0027D0  EFEC  F013         	goto	l4200
 11370   0027D4                     u5160:
 11371   0027D4  EFC8  F015         	goto	l4256
 11372   0027D8                     l4200:
 11373                           
 11374                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
 11375   0027D8  0EFF               	movlw	255
 11376   0027DA  1451               	andwf	put_fat@bc^0,w,c
 11377   0027DC  6E45               	movwf	??_put_fat^0,c
 11378   0027DE  0E01               	movlw	1
 11379   0027E0  1452               	andwf	(put_fat@bc+1)^0,w,c
 11380   0027E2  6E46               	movwf	(??_put_fat+1)^0,c
 11381   0027E4  5045               	movf	??_put_fat^0,w,c
 11382   0027E6  243B               	addwf	put_fat@fs^0,w,c
 11383   0027E8  6E47               	movwf	(??_put_fat+2)^0,c
 11384   0027EA  5046               	movf	(??_put_fat+1)^0,w,c
 11385   0027EC  203C               	addwfc	(put_fat@fs+1)^0,w,c
 11386   0027EE  6E48               	movwf	(??_put_fat+3)^0,c
 11387   0027F0  0E2E               	movlw	46
 11388   0027F2  2447               	addwf	(??_put_fat+2)^0,w,c
 11389   0027F4  6E54               	movwf	put_fat@p^0,c
 11390   0027F6  0E00               	movlw	0
 11391   0027F8  2048               	addwfc	(??_put_fat+3)^0,w,c
 11392   0027FA  6E55               	movwf	(put_fat@p+1)^0,c
 11393   0027FC  4A51               	infsnz	put_fat@bc^0,f,c
 11394   0027FE  2A52               	incf	(put_fat@bc+1)^0,f,c
 11395   002800                     
 11396                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 11397   002800  B03D               	btfsc	put_fat@clst^0,0,c
 11398   002802  EF05  F014         	goto	u5171
 11399   002806  EF07  F014         	goto	u5170
 11400   00280A                     u5171:
 11401   00280A  EF0C  F014         	goto	l4208
 11402   00280E                     u5170:
 11403   00280E  C041  F04D         	movff	put_fat@val,_put_fat$614
 11404   002812  6A4E               	clrf	(_put_fat$614+1)^0,c
 11405   002814  EF26  F014         	goto	l4210
 11406   002818                     l4208:
 11407   002818  5041               	movf	put_fat@val^0,w,c
 11408   00281A  6E45               	movwf	??_put_fat^0,c
 11409   00281C  6A46               	clrf	(??_put_fat+1)^0,c
 11410   00281E  3A45               	swapf	??_put_fat^0,f,c
 11411   002820  3A46               	swapf	(??_put_fat+1)^0,f,c
 11412   002822  0EF0               	movlw	240
 11413   002824  1646               	andwf	(??_put_fat+1)^0,f,c
 11414   002826  5045               	movf	??_put_fat^0,w,c
 11415   002828  0B0F               	andlw	15
 11416   00282A  1246               	iorwf	(??_put_fat+1)^0,f,c
 11417   00282C  0EF0               	movlw	240
 11418   00282E  1645               	andwf	??_put_fat^0,f,c
 11419   002830  C054  FFD9         	movff	put_fat@p,fsr2l
 11420   002834  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11421   002838  50DF               	movf	indf2,w,c
 11422   00283A  0B0F               	andlw	15
 11423   00283C  6E47               	movwf	(??_put_fat+2)^0,c
 11424   00283E  6A48               	clrf	(??_put_fat+3)^0,c
 11425   002840  5045               	movf	??_put_fat^0,w,c
 11426   002842  1047               	iorwf	(??_put_fat+2)^0,w,c
 11427   002844  6E4D               	movwf	_put_fat$614^0,c
 11428   002846  5046               	movf	(??_put_fat+1)^0,w,c
 11429   002848  1048               	iorwf	(??_put_fat+3)^0,w,c
 11430   00284A  6E4E               	movwf	(_put_fat$614+1)^0,c
 11431   00284C                     l4210:
 11432   00284C  C054  FFD9         	movff	put_fat@p,fsr2l
 11433   002850  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11434   002854  C04D  FFDF         	movff	_put_fat$614,indf2
 11435   002858                     
 11436                           ;ff.c: 895:    fs->wflag = 1;
 11437   002858  EE20 F004          	lfsr	2,4
 11438   00285C  503B               	movf	put_fat@fs^0,w,c
 11439   00285E  26D9               	addwf	fsr2l,f,c
 11440   002860  503C               	movf	(put_fat@fs+1)^0,w,c
 11441   002862  22DA               	addwfc	fsr2h,f,c
 11442   002864  0E01               	movlw	1
 11443   002866  6EDF               	movwf	indf2,c
 11444   002868                     
 11445                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11446   002868  C03B  F030         	movff	put_fat@fs,move_window@fs
 11447   00286C  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11448   002870  EE20 F01E          	lfsr	2,30
 11449   002874  503B               	movf	put_fat@fs^0,w,c
 11450   002876  26D9               	addwf	fsr2l,f,c
 11451   002878  503C               	movf	(put_fat@fs+1)^0,w,c
 11452   00287A  22DA               	addwfc	fsr2h,f,c
 11453   00287C  CFDE F045          	movff	postinc2,??_put_fat
 11454   002880  CFDE F046          	movff	postinc2,??_put_fat+1
 11455   002884  CFDE F047          	movff	postinc2,??_put_fat+2
 11456   002888  CFDE F048          	movff	postinc2,??_put_fat+3
 11457   00288C  C051  F049         	movff	put_fat@bc,??_put_fat+4
 11458   002890  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 11459   002894  0E09               	movlw	9
 11460   002896  6E4B               	movwf	(??_put_fat+6)^0,c
 11461   002898                     u5185:
 11462   002898  90D8               	bcf	status,0,c
 11463   00289A  324A               	rrcf	(??_put_fat+5)^0,f,c
 11464   00289C  3249               	rrcf	(??_put_fat+4)^0,f,c
 11465   00289E  2E4B               	decfsz	(??_put_fat+6)^0,f,c
 11466   0028A0  EF4C  F014         	goto	u5185
 11467   0028A4  5049               	movf	(??_put_fat+4)^0,w,c
 11468   0028A6  2445               	addwf	??_put_fat^0,w,c
 11469   0028A8  6E32               	movwf	move_window@sector^0,c
 11470   0028AA  504A               	movf	(??_put_fat+5)^0,w,c
 11471   0028AC  2046               	addwfc	(??_put_fat+1)^0,w,c
 11472   0028AE  6E33               	movwf	(move_window@sector+1)^0,c
 11473   0028B0  0E00               	movlw	0
 11474   0028B2  2047               	addwfc	(??_put_fat+2)^0,w,c
 11475   0028B4  6E34               	movwf	(move_window@sector+2)^0,c
 11476   0028B6  0E00               	movlw	0
 11477   0028B8  2048               	addwfc	(??_put_fat+3)^0,w,c
 11478   0028BA  6E35               	movwf	(move_window@sector+3)^0,c
 11479   0028BC  EC3C  F02D         	call	_move_window	;wreg free
 11480   0028C0  6E53               	movwf	put_fat@res^0,c
 11481   0028C2                     
 11482                           ;ff.c: 897:    if (res != FR_OK) break;
 11483   0028C2  5053               	movf	put_fat@res^0,w,c
 11484   0028C4  B4D8               	btfsc	status,2,c
 11485   0028C6  EF67  F014         	goto	u5191
 11486   0028CA  EF69  F014         	goto	u5190
 11487   0028CE                     u5191:
 11488   0028CE  EF6B  F014         	goto	l4220
 11489   0028D2                     u5190:
 11490   0028D2  EFC8  F015         	goto	l4256
 11491   0028D6                     l4220:
 11492                           
 11493                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
 11494   0028D6  0EFF               	movlw	255
 11495   0028D8  1451               	andwf	put_fat@bc^0,w,c
 11496   0028DA  6E45               	movwf	??_put_fat^0,c
 11497   0028DC  0E01               	movlw	1
 11498   0028DE  1452               	andwf	(put_fat@bc+1)^0,w,c
 11499   0028E0  6E46               	movwf	(??_put_fat+1)^0,c
 11500   0028E2  5045               	movf	??_put_fat^0,w,c
 11501   0028E4  243B               	addwf	put_fat@fs^0,w,c
 11502   0028E6  6E47               	movwf	(??_put_fat+2)^0,c
 11503   0028E8  5046               	movf	(??_put_fat+1)^0,w,c
 11504   0028EA  203C               	addwfc	(put_fat@fs+1)^0,w,c
 11505   0028EC  6E48               	movwf	(??_put_fat+3)^0,c
 11506   0028EE  0E2E               	movlw	46
 11507   0028F0  2447               	addwf	(??_put_fat+2)^0,w,c
 11508   0028F2  6E54               	movwf	put_fat@p^0,c
 11509   0028F4  0E00               	movlw	0
 11510   0028F6  2048               	addwfc	(??_put_fat+3)^0,w,c
 11511   0028F8  6E55               	movwf	(put_fat@p+1)^0,c
 11512   0028FA                     
 11513                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
 11514   0028FA  B03D               	btfsc	put_fat@clst^0,0,c
 11515   0028FC  EF82  F014         	goto	u5201
 11516   002900  EF84  F014         	goto	u5200
 11517   002904                     u5201:
 11518   002904  EFA2  F014         	goto	l4226
 11519   002908                     u5200:
 11520   002908  C041  F045         	movff	put_fat@val,??_put_fat
 11521   00290C  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11522   002910  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11523   002914  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11524   002918  C046  F045         	movff	??_put_fat+1,??_put_fat
 11525   00291C  C047  F046         	movff	??_put_fat+2,??_put_fat+1
 11526   002920  C048  F047         	movff	??_put_fat+3,??_put_fat+2
 11527   002924  6A48               	clrf	(??_put_fat+3)^0,c
 11528   002926  0E0F               	movlw	15
 11529   002928  1645               	andwf	??_put_fat^0,f,c
 11530   00292A  C054  FFD9         	movff	put_fat@p,fsr2l
 11531   00292E  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11532   002932  50DF               	movf	indf2,w,c
 11533   002934  0BF0               	andlw	240
 11534   002936  1045               	iorwf	??_put_fat^0,w,c
 11535   002938  6E49               	movwf	(??_put_fat+4)^0,c
 11536   00293A  5049               	movf	(??_put_fat+4)^0,w,c
 11537   00293C  6E4F               	movwf	_put_fat$615^0,c
 11538   00293E  6A50               	clrf	(_put_fat$615+1)^0,c
 11539   002940  EFB8  F014         	goto	l4228
 11540   002944                     l4226:
 11541   002944  C041  F045         	movff	put_fat@val,??_put_fat
 11542   002948  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11543   00294C  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11544   002950  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11545   002954  0E05               	movlw	5
 11546   002956  EFB2  F014         	goto	u5210
 11547   00295A                     u5215:
 11548   00295A  90D8               	bcf	status,0,c
 11549   00295C  3248               	rrcf	(??_put_fat+3)^0,f,c
 11550   00295E  3247               	rrcf	(??_put_fat+2)^0,f,c
 11551   002960  3246               	rrcf	(??_put_fat+1)^0,f,c
 11552   002962  3245               	rrcf	??_put_fat^0,f,c
 11553   002964                     u5210:
 11554   002964  2EE8               	decfsz	wreg,f,c
 11555   002966  EFAD  F014         	goto	u5215
 11556   00296A  5045               	movf	??_put_fat^0,w,c
 11557   00296C  6E4F               	movwf	_put_fat$615^0,c
 11558   00296E  6A50               	clrf	(_put_fat$615+1)^0,c
 11559   002970                     l4228:
 11560   002970  C054  FFD9         	movff	put_fat@p,fsr2l
 11561   002974  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11562   002978  C04F  FFDF         	movff	_put_fat$615,indf2
 11563                           
 11564                           ;ff.c: 900:    fs->wflag = 1;
 11565   00297C  EE20 F004          	lfsr	2,4
 11566   002980  503B               	movf	put_fat@fs^0,w,c
 11567   002982  26D9               	addwf	fsr2l,f,c
 11568   002984  503C               	movf	(put_fat@fs+1)^0,w,c
 11569   002986  22DA               	addwfc	fsr2h,f,c
 11570   002988  0E01               	movlw	1
 11571   00298A  6EDF               	movwf	indf2,c
 11572                           
 11573                           ;ff.c: 901:    break;
 11574   00298C  EFC8  F015         	goto	l4256
 11575   002990                     l4230:
 11576                           
 11577                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 11578   002990  C03B  F030         	movff	put_fat@fs,move_window@fs
 11579   002994  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11580   002998  EE20 F01E          	lfsr	2,30
 11581   00299C  503B               	movf	put_fat@fs^0,w,c
 11582   00299E  26D9               	addwf	fsr2l,f,c
 11583   0029A0  503C               	movf	(put_fat@fs+1)^0,w,c
 11584   0029A2  22DA               	addwfc	fsr2h,f,c
 11585   0029A4  CFDE F045          	movff	postinc2,??_put_fat
 11586   0029A8  CFDE F046          	movff	postinc2,??_put_fat+1
 11587   0029AC  CFDE F047          	movff	postinc2,??_put_fat+2
 11588   0029B0  CFDE F048          	movff	postinc2,??_put_fat+3
 11589   0029B4  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11590   0029B8  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11591   0029BC  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11592   0029C0  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11593   0029C4  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
 11594   0029C8  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
 11595   0029CC  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
 11596   0029D0  6A4C               	clrf	(??_put_fat+7)^0,c
 11597   0029D2  5045               	movf	??_put_fat^0,w,c
 11598   0029D4  2449               	addwf	(??_put_fat+4)^0,w,c
 11599   0029D6  6E32               	movwf	move_window@sector^0,c
 11600   0029D8  5046               	movf	(??_put_fat+1)^0,w,c
 11601   0029DA  204A               	addwfc	(??_put_fat+5)^0,w,c
 11602   0029DC  6E33               	movwf	(move_window@sector+1)^0,c
 11603   0029DE  5047               	movf	(??_put_fat+2)^0,w,c
 11604   0029E0  204B               	addwfc	(??_put_fat+6)^0,w,c
 11605   0029E2  6E34               	movwf	(move_window@sector+2)^0,c
 11606   0029E4  5048               	movf	(??_put_fat+3)^0,w,c
 11607   0029E6  204C               	addwfc	(??_put_fat+7)^0,w,c
 11608   0029E8  6E35               	movwf	(move_window@sector+3)^0,c
 11609   0029EA  EC3C  F02D         	call	_move_window	;wreg free
 11610   0029EE  6E53               	movwf	put_fat@res^0,c
 11611   0029F0                     
 11612                           ;ff.c: 905:    if (res != FR_OK) break;
 11613   0029F0  5053               	movf	put_fat@res^0,w,c
 11614   0029F2  B4D8               	btfsc	status,2,c
 11615   0029F4  EFFE  F014         	goto	u5221
 11616   0029F8  EF00  F015         	goto	u5220
 11617   0029FC                     u5221:
 11618   0029FC  EF02  F015         	goto	l4236
 11619   002A00                     u5220:
 11620   002A00  EFC8  F015         	goto	l4256
 11621   002A04                     l4236:
 11622                           
 11623                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
 11624   002A04  C03D  F045         	movff	put_fat@clst,??_put_fat
 11625   002A08  C03E  F046         	movff	put_fat@clst+1,??_put_fat+1
 11626   002A0C  90D8               	bcf	status,0,c
 11627   002A0E  3645               	rlcf	??_put_fat^0,f,c
 11628   002A10  3646               	rlcf	(??_put_fat+1)^0,f,c
 11629   002A12  0EFF               	movlw	255
 11630   002A14  1445               	andwf	??_put_fat^0,w,c
 11631   002A16  6E47               	movwf	(??_put_fat+2)^0,c
 11632   002A18  0E01               	movlw	1
 11633   002A1A  1446               	andwf	(??_put_fat+1)^0,w,c
 11634   002A1C  6E48               	movwf	(??_put_fat+3)^0,c
 11635   002A1E  5047               	movf	(??_put_fat+2)^0,w,c
 11636   002A20  243B               	addwf	put_fat@fs^0,w,c
 11637   002A22  6E49               	movwf	(??_put_fat+4)^0,c
 11638   002A24  5048               	movf	(??_put_fat+3)^0,w,c
 11639   002A26  203C               	addwfc	(put_fat@fs+1)^0,w,c
 11640   002A28  6E4A               	movwf	(??_put_fat+5)^0,c
 11641   002A2A  0E2E               	movlw	46
 11642   002A2C  2449               	addwf	(??_put_fat+4)^0,w,c
 11643   002A2E  6E54               	movwf	put_fat@p^0,c
 11644   002A30  0E00               	movlw	0
 11645   002A32  204A               	addwfc	(??_put_fat+5)^0,w,c
 11646   002A34  6E55               	movwf	(put_fat@p+1)^0,c
 11647   002A36                     
 11648                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 11649   002A36  C054  FFD9         	movff	put_fat@p,fsr2l
 11650   002A3A  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11651   002A3E  C041  FFDE         	movff	put_fat@val,postinc2
 11652   002A42  C042  FFDD         	movff	put_fat@val+1,postdec2
 11653                           
 11654                           ;ff.c: 908:    fs->wflag = 1;
 11655   002A46  EE20 F004          	lfsr	2,4
 11656   002A4A  503B               	movf	put_fat@fs^0,w,c
 11657   002A4C  26D9               	addwf	fsr2l,f,c
 11658   002A4E  503C               	movf	(put_fat@fs+1)^0,w,c
 11659   002A50  22DA               	addwfc	fsr2h,f,c
 11660   002A52  0E01               	movlw	1
 11661   002A54  6EDF               	movwf	indf2,c
 11662                           
 11663                           ;ff.c: 909:    break;
 11664   002A56  EFC8  F015         	goto	l4256
 11665   002A5A                     l4240:
 11666                           
 11667                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 11668   002A5A  C03B  F030         	movff	put_fat@fs,move_window@fs
 11669   002A5E  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11670   002A62  EE20 F01E          	lfsr	2,30
 11671   002A66  503B               	movf	put_fat@fs^0,w,c
 11672   002A68  26D9               	addwf	fsr2l,f,c
 11673   002A6A  503C               	movf	(put_fat@fs+1)^0,w,c
 11674   002A6C  22DA               	addwfc	fsr2h,f,c
 11675   002A6E  CFDE F045          	movff	postinc2,??_put_fat
 11676   002A72  CFDE F046          	movff	postinc2,??_put_fat+1
 11677   002A76  CFDE F047          	movff	postinc2,??_put_fat+2
 11678   002A7A  CFDE F048          	movff	postinc2,??_put_fat+3
 11679   002A7E  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11680   002A82  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11681   002A86  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11682   002A8A  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11683   002A8E  0E08               	movlw	8
 11684   002A90  EF4F  F015         	goto	u5230
 11685   002A94                     u5235:
 11686   002A94  90D8               	bcf	status,0,c
 11687   002A96  324C               	rrcf	(??_put_fat+7)^0,f,c
 11688   002A98  324B               	rrcf	(??_put_fat+6)^0,f,c
 11689   002A9A  324A               	rrcf	(??_put_fat+5)^0,f,c
 11690   002A9C  3249               	rrcf	(??_put_fat+4)^0,f,c
 11691   002A9E                     u5230:
 11692   002A9E  2EE8               	decfsz	wreg,f,c
 11693   002AA0  EF4A  F015         	goto	u5235
 11694   002AA4  5045               	movf	??_put_fat^0,w,c
 11695   002AA6  2449               	addwf	(??_put_fat+4)^0,w,c
 11696   002AA8  6E32               	movwf	move_window@sector^0,c
 11697   002AAA  5046               	movf	(??_put_fat+1)^0,w,c
 11698   002AAC  204A               	addwfc	(??_put_fat+5)^0,w,c
 11699   002AAE  6E33               	movwf	(move_window@sector+1)^0,c
 11700   002AB0  5047               	movf	(??_put_fat+2)^0,w,c
 11701   002AB2  204B               	addwfc	(??_put_fat+6)^0,w,c
 11702   002AB4  6E34               	movwf	(move_window@sector+2)^0,c
 11703   002AB6  5048               	movf	(??_put_fat+3)^0,w,c
 11704   002AB8  204C               	addwfc	(??_put_fat+7)^0,w,c
 11705   002ABA  6E35               	movwf	(move_window@sector+3)^0,c
 11706   002ABC  EC3C  F02D         	call	_move_window	;wreg free
 11707   002AC0  6E53               	movwf	put_fat@res^0,c
 11708   002AC2                     
 11709                           ;ff.c: 913:    if (res != FR_OK) break;
 11710   002AC2  5053               	movf	put_fat@res^0,w,c
 11711   002AC4  B4D8               	btfsc	status,2,c
 11712   002AC6  EF67  F015         	goto	u5241
 11713   002ACA  EF69  F015         	goto	u5240
 11714   002ACE                     u5241:
 11715   002ACE  EF6B  F015         	goto	l4246
 11716   002AD2                     u5240:
 11717   002AD2  EFC8  F015         	goto	l4256
 11718   002AD6                     l4246:
 11719                           
 11720                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
 11721   002AD6  C03D  F045         	movff	put_fat@clst,??_put_fat
 11722   002ADA  C03E  F046         	movff	put_fat@clst+1,??_put_fat+1
 11723   002ADE  90D8               	bcf	status,0,c
 11724   002AE0  3645               	rlcf	??_put_fat^0,f,c
 11725   002AE2  3646               	rlcf	(??_put_fat+1)^0,f,c
 11726   002AE4  90D8               	bcf	status,0,c
 11727   002AE6  3645               	rlcf	??_put_fat^0,f,c
 11728   002AE8  3646               	rlcf	(??_put_fat+1)^0,f,c
 11729   002AEA  0EFF               	movlw	255
 11730   002AEC  1445               	andwf	??_put_fat^0,w,c
 11731   002AEE  6E47               	movwf	(??_put_fat+2)^0,c
 11732   002AF0  0E01               	movlw	1
 11733   002AF2  1446               	andwf	(??_put_fat+1)^0,w,c
 11734   002AF4  6E48               	movwf	(??_put_fat+3)^0,c
 11735   002AF6  5047               	movf	(??_put_fat+2)^0,w,c
 11736   002AF8  243B               	addwf	put_fat@fs^0,w,c
 11737   002AFA  6E49               	movwf	(??_put_fat+4)^0,c
 11738   002AFC  5048               	movf	(??_put_fat+3)^0,w,c
 11739   002AFE  203C               	addwfc	(put_fat@fs+1)^0,w,c
 11740   002B00  6E4A               	movwf	(??_put_fat+5)^0,c
 11741   002B02  0E2E               	movlw	46
 11742   002B04  2449               	addwf	(??_put_fat+4)^0,w,c
 11743   002B06  6E54               	movwf	put_fat@p^0,c
 11744   002B08  0E00               	movlw	0
 11745   002B0A  204A               	addwfc	(??_put_fat+5)^0,w,c
 11746   002B0C  6E55               	movwf	(put_fat@p+1)^0,c
 11747   002B0E                     
 11748                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 11749   002B0E  C054  FFD9         	movff	put_fat@p,fsr2l
 11750   002B12  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11751   002B16  0E00               	movlw	0
 11752   002B18  14DE               	andwf	postinc2,w,c
 11753   002B1A  6E45               	movwf	??_put_fat^0,c
 11754   002B1C  0E00               	movlw	0
 11755   002B1E  14DE               	andwf	postinc2,w,c
 11756   002B20  6E46               	movwf	(??_put_fat+1)^0,c
 11757   002B22  0E00               	movlw	0
 11758   002B24  14DE               	andwf	postinc2,w,c
 11759   002B26  6E47               	movwf	(??_put_fat+2)^0,c
 11760   002B28  0EF0               	movlw	240
 11761   002B2A  14DE               	andwf	postinc2,w,c
 11762   002B2C  6E48               	movwf	(??_put_fat+3)^0,c
 11763   002B2E  5045               	movf	??_put_fat^0,w,c
 11764   002B30  1241               	iorwf	put_fat@val^0,f,c
 11765   002B32  5046               	movf	(??_put_fat+1)^0,w,c
 11766   002B34  1242               	iorwf	(put_fat@val+1)^0,f,c
 11767   002B36  5047               	movf	(??_put_fat+2)^0,w,c
 11768   002B38  1243               	iorwf	(put_fat@val+2)^0,f,c
 11769   002B3A  5048               	movf	(??_put_fat+3)^0,w,c
 11770   002B3C  1244               	iorwf	(put_fat@val+3)^0,f,c
 11771                           
 11772                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 11773   002B3E  C054  FFD9         	movff	put_fat@p,fsr2l
 11774   002B42  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11775   002B46  C041  FFDE         	movff	put_fat@val,postinc2
 11776   002B4A  C042  FFDE         	movff	put_fat@val+1,postinc2
 11777   002B4E  C043  FFDE         	movff	put_fat@val+2,postinc2
 11778   002B52  C044  FFDE         	movff	put_fat@val+3,postinc2
 11779   002B56                     
 11780                           ;ff.c: 917:    fs->wflag = 1;
 11781   002B56  EE20 F004          	lfsr	2,4
 11782   002B5A  503B               	movf	put_fat@fs^0,w,c
 11783   002B5C  26D9               	addwf	fsr2l,f,c
 11784   002B5E  503C               	movf	(put_fat@fs+1)^0,w,c
 11785   002B60  22DA               	addwfc	fsr2h,f,c
 11786   002B62  0E01               	movlw	1
 11787   002B64  6EDF               	movwf	indf2,c
 11788                           
 11789                           ;ff.c: 918:    break;
 11790   002B66  EFC8  F015         	goto	l4256
 11791   002B6A                     l4254:
 11792   002B6A  C03B  FFD9         	movff	put_fat@fs,fsr2l
 11793   002B6E  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 11794   002B72  50DF               	movf	indf2,w,c
 11795                           
 11796                           ; Switch size 1, requested type "simple"
 11797                           ; Number of cases is 3, Range of values is 1 to 3
 11798                           ; switch strategies available:
 11799                           ; Name         Instructions Cycles
 11800                           ; simple_byte           10     6 (average)
 11801                           ;	Chosen strategy is simple_byte
 11802   002B74  0A01               	xorlw	1	; case 1
 11803   002B76  B4D8               	btfsc	status,2,c
 11804   002B78  EFA8  F013         	goto	l361
 11805   002B7C  0A03               	xorlw	3	; case 2
 11806   002B7E  B4D8               	btfsc	status,2,c
 11807   002B80  EFC8  F014         	goto	l4230
 11808   002B84  0A01               	xorlw	1	; case 3
 11809   002B86  B4D8               	btfsc	status,2,c
 11810   002B88  EF2D  F015         	goto	l4240
 11811   002B8C  EFA4  F013         	goto	l4190
 11812   002B90                     l4256:
 11813                           
 11814                           ;ff.c: 925:  return res;
 11815   002B90  5053               	movf	put_fat@res^0,w,c
 11816   002B92  0012               	return		;funcret
 11817   002B94                     __end_of_put_fat:
 11818                           	callstack 0
 11819                           
 11820 ;; *************** function _get_fat *****************
 11821 ;; Defined at:
 11822 ;;		line 818 in file "ff.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;  fs              2   58[COMRAM] PTR struct .
 11825 ;;		 -> FatFs(558), NULL(0), 
 11826 ;;  clst            4   60[COMRAM] unsigned long 
 11827 ;; Auto vars:     Size  Location     Type
 11828 ;;  val             4   74[COMRAM] unsigned long 
 11829 ;;  bc              2   82[COMRAM] unsigned short 
 11830 ;;  p               2   80[COMRAM] PTR unsigned char 
 11831 ;;		 -> FatFs(558), FatFs$win(512), NULL(0), 
 11832 ;;  wc              2   78[COMRAM] unsigned short 
 11833 ;; Return value:  Size  Location     Type
 11834 ;;                  4   58[COMRAM] unsigned long 
 11835 ;; Registers used:
 11836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11837 ;; Tracked objects:
 11838 ;;		On entry : 0/0
 11839 ;;		On exit  : 0/0
 11840 ;;		Unchanged: 0/0
 11841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11842 ;;      Params:         6       0       0       0       0       0       0
 11843 ;;      Locals:        12       0       0       0       0       0       0
 11844 ;;      Temps:          8       0       0       0       0       0       0
 11845 ;;      Totals:        26       0       0       0       0       0       0
 11846 ;;Total ram usage:       26 bytes
 11847 ;; Hardware stack levels used: 1
 11848 ;; Hardware stack levels required when called: 8
 11849 ;; This function calls:
 11850 ;;		_move_window
 11851 ;; This function is called by:
 11852 ;;		_remove_chain
 11853 ;;		_create_chain
 11854 ;;		_dir_sdi
 11855 ;;		_dir_next
 11856 ;;		_f_lseek
 11857 ;;		_f_read
 11858 ;; This function uses a non-reentrant model
 11859 ;;
 11860                           
 11861                           	psect	text25
 11862   003470                     __ptext25:
 11863                           	callstack 0
 11864   003470                     _get_fat:
 11865                           	callstack 20
 11866   003470                     
 11867                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 11868   003470  5040               	movf	(get_fat@clst+3)^0,w,c
 11869   003472  103F               	iorwf	(get_fat@clst+2)^0,w,c
 11870   003474  103E               	iorwf	(get_fat@clst+1)^0,w,c
 11871   003476  E109               	bnz	u5020
 11872   003478  0E02               	movlw	2
 11873   00347A  5C3D               	subwf	get_fat@clst^0,w,c
 11874   00347C  A0D8               	btfss	status,0,c
 11875   00347E  EF43  F01A         	goto	u5021
 11876   003482  EF45  F01A         	goto	u5020
 11877   003486                     u5021:
 11878   003486  EF5A  F01A         	goto	l4140
 11879   00348A                     u5020:
 11880   00348A  EE20 F012          	lfsr	2,18
 11881   00348E  503B               	movf	get_fat@fs^0,w,c
 11882   003490  26D9               	addwf	fsr2l,f,c
 11883   003492  503C               	movf	(get_fat@fs+1)^0,w,c
 11884   003494  22DA               	addwfc	fsr2h,f,c
 11885   003496  50DE               	movf	postinc2,w,c
 11886   003498  5C3D               	subwf	get_fat@clst^0,w,c
 11887   00349A  50DE               	movf	postinc2,w,c
 11888   00349C  583E               	subwfb	(get_fat@clst+1)^0,w,c
 11889   00349E  50DE               	movf	postinc2,w,c
 11890   0034A0  583F               	subwfb	(get_fat@clst+2)^0,w,c
 11891   0034A2  50DE               	movf	postinc2,w,c
 11892   0034A4  5840               	subwfb	(get_fat@clst+3)^0,w,c
 11893   0034A6  A0D8               	btfss	status,0,c
 11894   0034A8  EF58  F01A         	goto	u5031
 11895   0034AC  EF5A  F01A         	goto	u5030
 11896   0034B0                     u5031:
 11897   0034B0  EF64  F01A         	goto	l335
 11898   0034B4                     u5030:
 11899   0034B4                     l4140:
 11900                           
 11901                           ;ff.c: 829:   val = 1;
 11902   0034B4  0E01               	movlw	1
 11903   0034B6  6E4B               	movwf	get_fat@val^0,c
 11904   0034B8  0E00               	movlw	0
 11905   0034BA  6E4C               	movwf	(get_fat@val+1)^0,c
 11906   0034BC  0E00               	movlw	0
 11907   0034BE  6E4D               	movwf	(get_fat@val+2)^0,c
 11908   0034C0  0E00               	movlw	0
 11909   0034C2  6E4E               	movwf	(get_fat@val+3)^0,c
 11910                           
 11911                           ;ff.c: 831:  } else {
 11912   0034C4  EF1E  F01C         	goto	l338
 11913   0034C8                     l335:
 11914                           
 11915                           ;ff.c: 832:   val = 0xFFFFFFFF;
 11916   0034C8  684B               	setf	get_fat@val^0,c
 11917   0034CA  684C               	setf	(get_fat@val+1)^0,c
 11918   0034CC  684D               	setf	(get_fat@val+2)^0,c
 11919   0034CE  684E               	setf	(get_fat@val+3)^0,c
 11920                           
 11921                           ;ff.c: 834:   switch (fs->fs_type) {
 11922   0034D0  EF0B  F01C         	goto	l4184
 11923   0034D4                     l340:
 11924                           
 11925                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 11926   0034D4  C03D  F053         	movff	get_fat@clst,get_fat@bc
 11927   0034D8  C03E  F054         	movff	get_fat@clst+1,get_fat@bc+1
 11928   0034DC  90D8               	bcf	status,0,c
 11929   0034DE  3054               	rrcf	(get_fat@bc+1)^0,w,c
 11930   0034E0  6E42               	movwf	(??_get_fat+1)^0,c
 11931   0034E2  3053               	rrcf	get_fat@bc^0,w,c
 11932   0034E4  6E41               	movwf	??_get_fat^0,c
 11933   0034E6  5041               	movf	??_get_fat^0,w,c
 11934   0034E8  2653               	addwf	get_fat@bc^0,f,c
 11935   0034EA  5042               	movf	(??_get_fat+1)^0,w,c
 11936   0034EC  2254               	addwfc	(get_fat@bc+1)^0,f,c
 11937   0034EE                     
 11938                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11939   0034EE  C03B  F030         	movff	get_fat@fs,move_window@fs
 11940   0034F2  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11941   0034F6  EE20 F01E          	lfsr	2,30
 11942   0034FA  503B               	movf	get_fat@fs^0,w,c
 11943   0034FC  26D9               	addwf	fsr2l,f,c
 11944   0034FE  503C               	movf	(get_fat@fs+1)^0,w,c
 11945   003500  22DA               	addwfc	fsr2h,f,c
 11946   003502  CFDE F041          	movff	postinc2,??_get_fat
 11947   003506  CFDE F042          	movff	postinc2,??_get_fat+1
 11948   00350A  CFDE F043          	movff	postinc2,??_get_fat+2
 11949   00350E  CFDE F044          	movff	postinc2,??_get_fat+3
 11950   003512  C053  F045         	movff	get_fat@bc,??_get_fat+4
 11951   003516  C054  F046         	movff	get_fat@bc+1,??_get_fat+5
 11952   00351A  0E09               	movlw	9
 11953   00351C  6E47               	movwf	(??_get_fat+6)^0,c
 11954   00351E                     u5045:
 11955   00351E  90D8               	bcf	status,0,c
 11956   003520  3246               	rrcf	(??_get_fat+5)^0,f,c
 11957   003522  3245               	rrcf	(??_get_fat+4)^0,f,c
 11958   003524  2E47               	decfsz	(??_get_fat+6)^0,f,c
 11959   003526  EF8F  F01A         	goto	u5045
 11960   00352A  5045               	movf	(??_get_fat+4)^0,w,c
 11961   00352C  2441               	addwf	??_get_fat^0,w,c
 11962   00352E  6E32               	movwf	move_window@sector^0,c
 11963   003530  5046               	movf	(??_get_fat+5)^0,w,c
 11964   003532  2042               	addwfc	(??_get_fat+1)^0,w,c
 11965   003534  6E33               	movwf	(move_window@sector+1)^0,c
 11966   003536  0E00               	movlw	0
 11967   003538  2043               	addwfc	(??_get_fat+2)^0,w,c
 11968   00353A  6E34               	movwf	(move_window@sector+2)^0,c
 11969   00353C  0E00               	movlw	0
 11970   00353E  2044               	addwfc	(??_get_fat+3)^0,w,c
 11971   003540  6E35               	movwf	(move_window@sector+3)^0,c
 11972   003542  EC3C  F02D         	call	_move_window	;wreg free
 11973   003546  0900               	iorlw	0
 11974   003548  B4D8               	btfsc	status,2,c
 11975   00354A  EFA9  F01A         	goto	u5051
 11976   00354E  EFAB  F01A         	goto	u5050
 11977   003552                     u5051:
 11978   003552  EFAD  F01A         	goto	l4148
 11979   003556                     u5050:
 11980   003556  EF1E  F01C         	goto	l338
 11981   00355A                     l4148:
 11982                           
 11983                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 11984   00355A  0EFF               	movlw	255
 11985   00355C  1453               	andwf	get_fat@bc^0,w,c
 11986   00355E  6E41               	movwf	??_get_fat^0,c
 11987   003560  0E01               	movlw	1
 11988   003562  1454               	andwf	(get_fat@bc+1)^0,w,c
 11989   003564  6E42               	movwf	(??_get_fat+1)^0,c
 11990   003566  5041               	movf	??_get_fat^0,w,c
 11991   003568  243B               	addwf	get_fat@fs^0,w,c
 11992   00356A  6E43               	movwf	(??_get_fat+2)^0,c
 11993   00356C  5042               	movf	(??_get_fat+1)^0,w,c
 11994   00356E  203C               	addwfc	(get_fat@fs+1)^0,w,c
 11995   003570  6E44               	movwf	(??_get_fat+3)^0,c
 11996   003572  0E2E               	movlw	46
 11997   003574  2443               	addwf	(??_get_fat+2)^0,w,c
 11998   003576  6ED9               	movwf	fsr2l,c
 11999   003578  0E00               	movlw	0
 12000   00357A  2044               	addwfc	(??_get_fat+3)^0,w,c
 12001   00357C  6EDA               	movwf	fsr2h,c
 12002   00357E  50DF               	movf	indf2,w,c
 12003   003580  6E45               	movwf	(??_get_fat+4)^0,c
 12004   003582  5045               	movf	(??_get_fat+4)^0,w,c
 12005   003584  6E4F               	movwf	get_fat@wc^0,c
 12006   003586  6A50               	clrf	(get_fat@wc+1)^0,c
 12007   003588  4A53               	infsnz	get_fat@bc^0,f,c
 12008   00358A  2A54               	incf	(get_fat@bc+1)^0,f,c
 12009   00358C                     
 12010                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 12011   00358C  C03B  F030         	movff	get_fat@fs,move_window@fs
 12012   003590  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12013   003594  EE20 F01E          	lfsr	2,30
 12014   003598  503B               	movf	get_fat@fs^0,w,c
 12015   00359A  26D9               	addwf	fsr2l,f,c
 12016   00359C  503C               	movf	(get_fat@fs+1)^0,w,c
 12017   00359E  22DA               	addwfc	fsr2h,f,c
 12018   0035A0  CFDE F041          	movff	postinc2,??_get_fat
 12019   0035A4  CFDE F042          	movff	postinc2,??_get_fat+1
 12020   0035A8  CFDE F043          	movff	postinc2,??_get_fat+2
 12021   0035AC  CFDE F044          	movff	postinc2,??_get_fat+3
 12022   0035B0  C053  F045         	movff	get_fat@bc,??_get_fat+4
 12023   0035B4  C054  F046         	movff	get_fat@bc+1,??_get_fat+5
 12024   0035B8  0E09               	movlw	9
 12025   0035BA  6E47               	movwf	(??_get_fat+6)^0,c
 12026   0035BC                     u5065:
 12027   0035BC  90D8               	bcf	status,0,c
 12028   0035BE  3246               	rrcf	(??_get_fat+5)^0,f,c
 12029   0035C0  3245               	rrcf	(??_get_fat+4)^0,f,c
 12030   0035C2  2E47               	decfsz	(??_get_fat+6)^0,f,c
 12031   0035C4  EFDE  F01A         	goto	u5065
 12032   0035C8  5045               	movf	(??_get_fat+4)^0,w,c
 12033   0035CA  2441               	addwf	??_get_fat^0,w,c
 12034   0035CC  6E32               	movwf	move_window@sector^0,c
 12035   0035CE  5046               	movf	(??_get_fat+5)^0,w,c
 12036   0035D0  2042               	addwfc	(??_get_fat+1)^0,w,c
 12037   0035D2  6E33               	movwf	(move_window@sector+1)^0,c
 12038   0035D4  0E00               	movlw	0
 12039   0035D6  2043               	addwfc	(??_get_fat+2)^0,w,c
 12040   0035D8  6E34               	movwf	(move_window@sector+2)^0,c
 12041   0035DA  0E00               	movlw	0
 12042   0035DC  2044               	addwfc	(??_get_fat+3)^0,w,c
 12043   0035DE  6E35               	movwf	(move_window@sector+3)^0,c
 12044   0035E0  EC3C  F02D         	call	_move_window	;wreg free
 12045   0035E4  0900               	iorlw	0
 12046   0035E6  B4D8               	btfsc	status,2,c
 12047   0035E8  EFF8  F01A         	goto	u5071
 12048   0035EC  EFFA  F01A         	goto	u5070
 12049   0035F0                     u5071:
 12050   0035F0  EFFC  F01A         	goto	l4156
 12051   0035F4                     u5070:
 12052   0035F4  EF1E  F01C         	goto	l338
 12053   0035F8                     l4156:
 12054                           
 12055                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 12056   0035F8  0EFF               	movlw	255
 12057   0035FA  1453               	andwf	get_fat@bc^0,w,c
 12058   0035FC  6E41               	movwf	??_get_fat^0,c
 12059   0035FE  0E01               	movlw	1
 12060   003600  1454               	andwf	(get_fat@bc+1)^0,w,c
 12061   003602  6E42               	movwf	(??_get_fat+1)^0,c
 12062   003604  5041               	movf	??_get_fat^0,w,c
 12063   003606  243B               	addwf	get_fat@fs^0,w,c
 12064   003608  6E43               	movwf	(??_get_fat+2)^0,c
 12065   00360A  5042               	movf	(??_get_fat+1)^0,w,c
 12066   00360C  203C               	addwfc	(get_fat@fs+1)^0,w,c
 12067   00360E  6E44               	movwf	(??_get_fat+3)^0,c
 12068   003610  0E2E               	movlw	46
 12069   003612  2443               	addwf	(??_get_fat+2)^0,w,c
 12070   003614  6ED9               	movwf	fsr2l,c
 12071   003616  0E00               	movlw	0
 12072   003618  2044               	addwfc	(??_get_fat+3)^0,w,c
 12073   00361A  6EDA               	movwf	fsr2h,c
 12074   00361C  50DF               	movf	indf2,w,c
 12075   00361E  6E45               	movwf	(??_get_fat+4)^0,c
 12076   003620  5045               	movf	(??_get_fat+4)^0,w,c
 12077   003622  6E47               	movwf	(??_get_fat+6)^0,c
 12078   003624  6A46               	clrf	(??_get_fat+5)^0,c
 12079   003626  5046               	movf	(??_get_fat+5)^0,w,c
 12080   003628  124F               	iorwf	get_fat@wc^0,f,c
 12081   00362A  5047               	movf	(??_get_fat+6)^0,w,c
 12082   00362C  1250               	iorwf	(get_fat@wc+1)^0,f,c
 12083   00362E                     
 12084                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 12085   00362E  B03D               	btfsc	get_fat@clst^0,0,c
 12086   003630  EF1C  F01B         	goto	u5081
 12087   003634  EF1E  F01B         	goto	u5080
 12088   003638                     u5081:
 12089   003638  EF26  F01B         	goto	l4162
 12090   00363C                     u5080:
 12091   00363C  0EFF               	movlw	255
 12092   00363E  144F               	andwf	get_fat@wc^0,w,c
 12093   003640  6E49               	movwf	_get_fat$588^0,c
 12094   003642  0E0F               	movlw	15
 12095   003644  1450               	andwf	(get_fat@wc+1)^0,w,c
 12096   003646  6E4A               	movwf	(_get_fat$588+1)^0,c
 12097   003648  EF36  F01B         	goto	l4164
 12098   00364C                     l4162:
 12099   00364C  C04F  F041         	movff	get_fat@wc,??_get_fat
 12100   003650  C050  F042         	movff	get_fat@wc+1,??_get_fat+1
 12101   003654  0E04               	movlw	4
 12102   003656  6E43               	movwf	(??_get_fat+2)^0,c
 12103   003658                     u5095:
 12104   003658  90D8               	bcf	status,0,c
 12105   00365A  3242               	rrcf	(??_get_fat+1)^0,f,c
 12106   00365C  3241               	rrcf	??_get_fat^0,f,c
 12107   00365E  2E43               	decfsz	(??_get_fat+2)^0,f,c
 12108   003660  EF2C  F01B         	goto	u5095
 12109   003664  C041  F049         	movff	??_get_fat,_get_fat$588
 12110   003668  C042  F04A         	movff	??_get_fat+1,_get_fat$588+1
 12111   00366C                     l4164:
 12112   00366C  C049  F04B         	movff	_get_fat$588,get_fat@val
 12113   003670  C04A  F04C         	movff	_get_fat$588+1,get_fat@val+1
 12114   003674  6A4D               	clrf	(get_fat@val+2)^0,c
 12115   003676  6A4E               	clrf	(get_fat@val+3)^0,c
 12116                           
 12117                           ;ff.c: 842:    break;
 12118   003678  EF1E  F01C         	goto	l338
 12119   00367C                     l4166:
 12120                           
 12121                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 12122   00367C  C03B  F030         	movff	get_fat@fs,move_window@fs
 12123   003680  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12124   003684  EE20 F01E          	lfsr	2,30
 12125   003688  503B               	movf	get_fat@fs^0,w,c
 12126   00368A  26D9               	addwf	fsr2l,f,c
 12127   00368C  503C               	movf	(get_fat@fs+1)^0,w,c
 12128   00368E  22DA               	addwfc	fsr2h,f,c
 12129   003690  CFDE F041          	movff	postinc2,??_get_fat
 12130   003694  CFDE F042          	movff	postinc2,??_get_fat+1
 12131   003698  CFDE F043          	movff	postinc2,??_get_fat+2
 12132   00369C  CFDE F044          	movff	postinc2,??_get_fat+3
 12133   0036A0  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 12134   0036A4  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 12135   0036A8  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 12136   0036AC  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 12137   0036B0  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 12138   0036B4  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 12139   0036B8  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 12140   0036BC  6A48               	clrf	(??_get_fat+7)^0,c
 12141   0036BE  5041               	movf	??_get_fat^0,w,c
 12142   0036C0  2445               	addwf	(??_get_fat+4)^0,w,c
 12143   0036C2  6E32               	movwf	move_window@sector^0,c
 12144   0036C4  5042               	movf	(??_get_fat+1)^0,w,c
 12145   0036C6  2046               	addwfc	(??_get_fat+5)^0,w,c
 12146   0036C8  6E33               	movwf	(move_window@sector+1)^0,c
 12147   0036CA  5043               	movf	(??_get_fat+2)^0,w,c
 12148   0036CC  2047               	addwfc	(??_get_fat+6)^0,w,c
 12149   0036CE  6E34               	movwf	(move_window@sector+2)^0,c
 12150   0036D0  5044               	movf	(??_get_fat+3)^0,w,c
 12151   0036D2  2048               	addwfc	(??_get_fat+7)^0,w,c
 12152   0036D4  6E35               	movwf	(move_window@sector+3)^0,c
 12153   0036D6  EC3C  F02D         	call	_move_window	;wreg free
 12154   0036DA  0900               	iorlw	0
 12155   0036DC  B4D8               	btfsc	status,2,c
 12156   0036DE  EF73  F01B         	goto	u5101
 12157   0036E2  EF75  F01B         	goto	u5100
 12158   0036E6                     u5101:
 12159   0036E6  EF77  F01B         	goto	l4170
 12160   0036EA                     u5100:
 12161   0036EA  EF1E  F01C         	goto	l338
 12162   0036EE                     l4170:
 12163                           
 12164                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 12165   0036EE  C03D  F041         	movff	get_fat@clst,??_get_fat
 12166   0036F2  C03E  F042         	movff	get_fat@clst+1,??_get_fat+1
 12167   0036F6  90D8               	bcf	status,0,c
 12168   0036F8  3641               	rlcf	??_get_fat^0,f,c
 12169   0036FA  3642               	rlcf	(??_get_fat+1)^0,f,c
 12170   0036FC  0EFF               	movlw	255
 12171   0036FE  1441               	andwf	??_get_fat^0,w,c
 12172   003700  6E43               	movwf	(??_get_fat+2)^0,c
 12173   003702  0E01               	movlw	1
 12174   003704  1442               	andwf	(??_get_fat+1)^0,w,c
 12175   003706  6E44               	movwf	(??_get_fat+3)^0,c
 12176   003708  5043               	movf	(??_get_fat+2)^0,w,c
 12177   00370A  243B               	addwf	get_fat@fs^0,w,c
 12178   00370C  6E45               	movwf	(??_get_fat+4)^0,c
 12179   00370E  5044               	movf	(??_get_fat+3)^0,w,c
 12180   003710  203C               	addwfc	(get_fat@fs+1)^0,w,c
 12181   003712  6E46               	movwf	(??_get_fat+5)^0,c
 12182   003714  0E2E               	movlw	46
 12183   003716  2445               	addwf	(??_get_fat+4)^0,w,c
 12184   003718  6E51               	movwf	get_fat@p^0,c
 12185   00371A  0E00               	movlw	0
 12186   00371C  2046               	addwfc	(??_get_fat+5)^0,w,c
 12187   00371E  6E52               	movwf	(get_fat@p+1)^0,c
 12188   003720                     
 12189                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 12190   003720  C051  FFD9         	movff	get_fat@p,fsr2l
 12191   003724  C052  FFDA         	movff	get_fat@p+1,fsr2h
 12192   003728  CFDE F041          	movff	postinc2,??_get_fat
 12193   00372C  CFDD F042          	movff	postdec2,??_get_fat+1
 12194   003730  C041  F04B         	movff	??_get_fat,get_fat@val
 12195   003734  C042  F04C         	movff	??_get_fat+1,get_fat@val+1
 12196   003738  6A4D               	clrf	(get_fat@val+2)^0,c
 12197   00373A  6A4E               	clrf	(get_fat@val+3)^0,c
 12198                           
 12199                           ;ff.c: 848:    break;
 12200   00373C  EF1E  F01C         	goto	l338
 12201   003740                     l4174:
 12202                           
 12203                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 12204   003740  C03B  F030         	movff	get_fat@fs,move_window@fs
 12205   003744  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12206   003748  EE20 F01E          	lfsr	2,30
 12207   00374C  503B               	movf	get_fat@fs^0,w,c
 12208   00374E  26D9               	addwf	fsr2l,f,c
 12209   003750  503C               	movf	(get_fat@fs+1)^0,w,c
 12210   003752  22DA               	addwfc	fsr2h,f,c
 12211   003754  CFDE F041          	movff	postinc2,??_get_fat
 12212   003758  CFDE F042          	movff	postinc2,??_get_fat+1
 12213   00375C  CFDE F043          	movff	postinc2,??_get_fat+2
 12214   003760  CFDE F044          	movff	postinc2,??_get_fat+3
 12215   003764  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 12216   003768  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 12217   00376C  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 12218   003770  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 12219   003774  0E08               	movlw	8
 12220   003776  EFC2  F01B         	goto	u5110
 12221   00377A                     u5115:
 12222   00377A  90D8               	bcf	status,0,c
 12223   00377C  3248               	rrcf	(??_get_fat+7)^0,f,c
 12224   00377E  3247               	rrcf	(??_get_fat+6)^0,f,c
 12225   003780  3246               	rrcf	(??_get_fat+5)^0,f,c
 12226   003782  3245               	rrcf	(??_get_fat+4)^0,f,c
 12227   003784                     u5110:
 12228   003784  2EE8               	decfsz	wreg,f,c
 12229   003786  EFBD  F01B         	goto	u5115
 12230   00378A  5041               	movf	??_get_fat^0,w,c
 12231   00378C  2445               	addwf	(??_get_fat+4)^0,w,c
 12232   00378E  6E32               	movwf	move_window@sector^0,c
 12233   003790  5042               	movf	(??_get_fat+1)^0,w,c
 12234   003792  2046               	addwfc	(??_get_fat+5)^0,w,c
 12235   003794  6E33               	movwf	(move_window@sector+1)^0,c
 12236   003796  5043               	movf	(??_get_fat+2)^0,w,c
 12237   003798  2047               	addwfc	(??_get_fat+6)^0,w,c
 12238   00379A  6E34               	movwf	(move_window@sector+2)^0,c
 12239   00379C  5044               	movf	(??_get_fat+3)^0,w,c
 12240   00379E  2048               	addwfc	(??_get_fat+7)^0,w,c
 12241   0037A0  6E35               	movwf	(move_window@sector+3)^0,c
 12242   0037A2  EC3C  F02D         	call	_move_window	;wreg free
 12243   0037A6  0900               	iorlw	0
 12244   0037A8  B4D8               	btfsc	status,2,c
 12245   0037AA  EFD9  F01B         	goto	u5121
 12246   0037AE  EFDB  F01B         	goto	u5120
 12247   0037B2                     u5121:
 12248   0037B2  EFDD  F01B         	goto	l4178
 12249   0037B6                     u5120:
 12250   0037B6  EF1E  F01C         	goto	l338
 12251   0037BA                     l4178:
 12252                           
 12253                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 12254   0037BA  C03D  F041         	movff	get_fat@clst,??_get_fat
 12255   0037BE  C03E  F042         	movff	get_fat@clst+1,??_get_fat+1
 12256   0037C2  90D8               	bcf	status,0,c
 12257   0037C4  3641               	rlcf	??_get_fat^0,f,c
 12258   0037C6  3642               	rlcf	(??_get_fat+1)^0,f,c
 12259   0037C8  90D8               	bcf	status,0,c
 12260   0037CA  3641               	rlcf	??_get_fat^0,f,c
 12261   0037CC  3642               	rlcf	(??_get_fat+1)^0,f,c
 12262   0037CE  0EFF               	movlw	255
 12263   0037D0  1441               	andwf	??_get_fat^0,w,c
 12264   0037D2  6E43               	movwf	(??_get_fat+2)^0,c
 12265   0037D4  0E01               	movlw	1
 12266   0037D6  1442               	andwf	(??_get_fat+1)^0,w,c
 12267   0037D8  6E44               	movwf	(??_get_fat+3)^0,c
 12268   0037DA  5043               	movf	(??_get_fat+2)^0,w,c
 12269   0037DC  243B               	addwf	get_fat@fs^0,w,c
 12270   0037DE  6E45               	movwf	(??_get_fat+4)^0,c
 12271   0037E0  5044               	movf	(??_get_fat+3)^0,w,c
 12272   0037E2  203C               	addwfc	(get_fat@fs+1)^0,w,c
 12273   0037E4  6E46               	movwf	(??_get_fat+5)^0,c
 12274   0037E6  0E2E               	movlw	46
 12275   0037E8  2445               	addwf	(??_get_fat+4)^0,w,c
 12276   0037EA  6E51               	movwf	get_fat@p^0,c
 12277   0037EC  0E00               	movlw	0
 12278   0037EE  2046               	addwfc	(??_get_fat+5)^0,w,c
 12279   0037F0  6E52               	movwf	(get_fat@p+1)^0,c
 12280   0037F2                     
 12281                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 12282   0037F2  C051  FFD9         	movff	get_fat@p,fsr2l
 12283   0037F6  C052  FFDA         	movff	get_fat@p+1,fsr2h
 12284   0037FA  0EFF               	movlw	255
 12285   0037FC  14DE               	andwf	postinc2,w,c
 12286   0037FE  6E4B               	movwf	get_fat@val^0,c
 12287   003800  0EFF               	movlw	255
 12288   003802  14DE               	andwf	postinc2,w,c
 12289   003804  6E4C               	movwf	(get_fat@val+1)^0,c
 12290   003806  0EFF               	movlw	255
 12291   003808  14DE               	andwf	postinc2,w,c
 12292   00380A  6E4D               	movwf	(get_fat@val+2)^0,c
 12293   00380C  0E0F               	movlw	15
 12294   00380E  14DE               	andwf	postinc2,w,c
 12295   003810  6E4E               	movwf	(get_fat@val+3)^0,c
 12296                           
 12297                           ;ff.c: 854:    break;
 12298   003812  EF1E  F01C         	goto	l338
 12299   003816                     l4184:
 12300   003816  C03B  FFD9         	movff	get_fat@fs,fsr2l
 12301   00381A  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 12302   00381E  50DF               	movf	indf2,w,c
 12303                           
 12304                           ; Switch size 1, requested type "simple"
 12305                           ; Number of cases is 3, Range of values is 1 to 3
 12306                           ; switch strategies available:
 12307                           ; Name         Instructions Cycles
 12308                           ; simple_byte           10     6 (average)
 12309                           ;	Chosen strategy is simple_byte
 12310   003820  0A01               	xorlw	1	; case 1
 12311   003822  B4D8               	btfsc	status,2,c
 12312   003824  EF6A  F01A         	goto	l340
 12313   003828  0A03               	xorlw	3	; case 2
 12314   00382A  B4D8               	btfsc	status,2,c
 12315   00382C  EF3E  F01B         	goto	l4166
 12316   003830  0A01               	xorlw	1	; case 3
 12317   003832  B4D8               	btfsc	status,2,c
 12318   003834  EFA0  F01B         	goto	l4174
 12319   003838  EF5A  F01A         	goto	l4140
 12320   00383C                     l338:
 12321                           
 12322                           ;ff.c: 861:  return val;
 12323   00383C  C04B  F03B         	movff	get_fat@val,?_get_fat
 12324   003840  C04C  F03C         	movff	get_fat@val+1,?_get_fat+1
 12325   003844  C04D  F03D         	movff	get_fat@val+2,?_get_fat+2
 12326   003848  C04E  F03E         	movff	get_fat@val+3,?_get_fat+3
 12327   00384C  0012               	return		;funcret
 12328   00384E                     __end_of_get_fat:
 12329                           	callstack 0
 12330                           
 12331 ;; *************** function _clust2sect *****************
 12332 ;; Defined at:
 12333 ;;		line 800 in file "ff.c"
 12334 ;; Parameters:    Size  Location     Type
 12335 ;;  fs              2   12[COMRAM] PTR struct .
 12336 ;;		 -> FatFs(558), NULL(0), 
 12337 ;;  clst            4   14[COMRAM] unsigned long 
 12338 ;; Auto vars:     Size  Location     Type
 12339 ;;		None
 12340 ;; Return value:  Size  Location     Type
 12341 ;;                  4   12[COMRAM] unsigned long 
 12342 ;; Registers used:
 12343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12344 ;; Tracked objects:
 12345 ;;		On entry : 0/0
 12346 ;;		On exit  : 0/0
 12347 ;;		Unchanged: 0/0
 12348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12349 ;;      Params:         6       0       0       0       0       0       0
 12350 ;;      Locals:         0       0       0       0       0       0       0
 12351 ;;      Temps:          5       0       0       0       0       0       0
 12352 ;;      Totals:        11       0       0       0       0       0       0
 12353 ;;Total ram usage:       11 bytes
 12354 ;; Hardware stack levels used: 1
 12355 ;; Hardware stack levels required when called: 1
 12356 ;; This function calls:
 12357 ;;		___lmul
 12358 ;; This function is called by:
 12359 ;;		_dir_sdi
 12360 ;;		_dir_next
 12361 ;;		_f_write
 12362 ;;		_f_lseek
 12363 ;;		_f_read
 12364 ;; This function uses a non-reentrant model
 12365 ;;
 12366                           
 12367                           	psect	text26
 12368   0059B2                     __ptext26:
 12369                           	callstack 0
 12370   0059B2                     _clust2sect:
 12371                           	callstack 28
 12372   0059B2                     
 12373                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 12374   0059B2  0E02               	movlw	2
 12375   0059B4  5E0F               	subwf	clust2sect@clst^0,f,c
 12376   0059B6  0E00               	movlw	0
 12377   0059B8  5A10               	subwfb	(clust2sect@clst+1)^0,f,c
 12378   0059BA  5A11               	subwfb	(clust2sect@clst+2)^0,f,c
 12379   0059BC  5A12               	subwfb	(clust2sect@clst+3)^0,f,c
 12380   0059BE                     
 12381                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 12382   0059BE  EE20 F012          	lfsr	2,18
 12383   0059C2  500D               	movf	clust2sect@fs^0,w,c
 12384   0059C4  26D9               	addwf	fsr2l,f,c
 12385   0059C6  500E               	movf	(clust2sect@fs+1)^0,w,c
 12386   0059C8  22DA               	addwfc	fsr2h,f,c
 12387   0059CA  0EFE               	movlw	254
 12388   0059CC  24DE               	addwf	postinc2,w,c
 12389   0059CE  6E13               	movwf	??_clust2sect^0,c
 12390   0059D0  0EFF               	movlw	255
 12391   0059D2  20DE               	addwfc	postinc2,w,c
 12392   0059D4  6E14               	movwf	(??_clust2sect+1)^0,c
 12393   0059D6  0EFF               	movlw	255
 12394   0059D8  20DE               	addwfc	postinc2,w,c
 12395   0059DA  6E15               	movwf	(??_clust2sect+2)^0,c
 12396   0059DC  0EFF               	movlw	255
 12397   0059DE  20DE               	addwfc	postinc2,w,c
 12398   0059E0  6E16               	movwf	(??_clust2sect+3)^0,c
 12399   0059E2  5013               	movf	??_clust2sect^0,w,c
 12400   0059E4  5C0F               	subwf	clust2sect@clst^0,w,c
 12401   0059E6  5014               	movf	(??_clust2sect+1)^0,w,c
 12402   0059E8  5810               	subwfb	(clust2sect@clst+1)^0,w,c
 12403   0059EA  5015               	movf	(??_clust2sect+2)^0,w,c
 12404   0059EC  5811               	subwfb	(clust2sect@clst+2)^0,w,c
 12405   0059EE  5016               	movf	(??_clust2sect+3)^0,w,c
 12406   0059F0  5812               	subwfb	(clust2sect@clst+3)^0,w,c
 12407   0059F2  A0D8               	btfss	status,0,c
 12408   0059F4  EFFE  F02C         	goto	u5281
 12409   0059F8  EF00  F02D         	goto	u5280
 12410   0059FC                     u5281:
 12411   0059FC  EF0A  F02D         	goto	l4286
 12412   005A00                     u5280:
 12413   005A00  0E00               	movlw	0
 12414   005A02  6E0D               	movwf	?_clust2sect^0,c
 12415   005A04  0E00               	movlw	0
 12416   005A06  6E0E               	movwf	(?_clust2sect+1)^0,c
 12417   005A08  0E00               	movlw	0
 12418   005A0A  6E0F               	movwf	(?_clust2sect+2)^0,c
 12419   005A0C  0E00               	movlw	0
 12420   005A0E  6E10               	movwf	(?_clust2sect+3)^0,c
 12421   005A10  EF3B  F02D         	goto	l332
 12422   005A14                     l4286:
 12423                           
 12424                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 12425   005A14  EE20 F026          	lfsr	2,38
 12426   005A18  500D               	movf	clust2sect@fs^0,w,c
 12427   005A1A  26D9               	addwf	fsr2l,f,c
 12428   005A1C  500E               	movf	(clust2sect@fs+1)^0,w,c
 12429   005A1E  22DA               	addwfc	fsr2h,f,c
 12430   005A20  CFDE F013          	movff	postinc2,??_clust2sect
 12431   005A24  CFDE F014          	movff	postinc2,??_clust2sect+1
 12432   005A28  CFDE F015          	movff	postinc2,??_clust2sect+2
 12433   005A2C  CFDE F016          	movff	postinc2,??_clust2sect+3
 12434   005A30  EE20 F002          	lfsr	2,2
 12435   005A34  500D               	movf	clust2sect@fs^0,w,c
 12436   005A36  26D9               	addwf	fsr2l,f,c
 12437   005A38  500E               	movf	(clust2sect@fs+1)^0,w,c
 12438   005A3A  22DA               	addwfc	fsr2h,f,c
 12439   005A3C  50DF               	movf	indf2,w,c
 12440   005A3E  6E17               	movwf	(??_clust2sect+4)^0,c
 12441   005A40  5017               	movf	(??_clust2sect+4)^0,w,c
 12442   005A42  6E01               	movwf	___lmul@multiplier^0,c
 12443   005A44  6A02               	clrf	(___lmul@multiplier+1)^0,c
 12444   005A46  6A03               	clrf	(___lmul@multiplier+2)^0,c
 12445   005A48  6A04               	clrf	(___lmul@multiplier+3)^0,c
 12446   005A4A  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 12447   005A4E  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 12448   005A52  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 12449   005A56  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 12450   005A5A  EC70  F02F         	call	___lmul	;wreg free
 12451   005A5E  5013               	movf	??_clust2sect^0,w,c
 12452   005A60  2401               	addwf	?___lmul^0,w,c
 12453   005A62  6E0D               	movwf	?_clust2sect^0,c
 12454   005A64  5014               	movf	(??_clust2sect+1)^0,w,c
 12455   005A66  2002               	addwfc	(?___lmul+1)^0,w,c
 12456   005A68  6E0E               	movwf	(?_clust2sect+1)^0,c
 12457   005A6A  5015               	movf	(??_clust2sect+2)^0,w,c
 12458   005A6C  2003               	addwfc	(?___lmul+2)^0,w,c
 12459   005A6E  6E0F               	movwf	(?_clust2sect+2)^0,c
 12460   005A70  5016               	movf	(??_clust2sect+3)^0,w,c
 12461   005A72  2004               	addwfc	(?___lmul+3)^0,w,c
 12462   005A74  6E10               	movwf	(?_clust2sect+3)^0,c
 12463   005A76                     l332:
 12464   005A76  0012               	return		;funcret
 12465   005A78                     __end_of_clust2sect:
 12466                           	callstack 0
 12467                           
 12468 ;; *************** function ___lmul *****************
 12469 ;; Defined at:
 12470 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul32.c"
 12471 ;; Parameters:    Size  Location     Type
 12472 ;;  multiplier      4    0[COMRAM] unsigned long 
 12473 ;;  multiplicand    4    4[COMRAM] unsigned long 
 12474 ;; Auto vars:     Size  Location     Type
 12475 ;;  product         4    8[COMRAM] unsigned long 
 12476 ;; Return value:  Size  Location     Type
 12477 ;;                  4    0[COMRAM] unsigned long 
 12478 ;; Registers used:
 12479 ;;		wreg, status,2, status,0
 12480 ;; Tracked objects:
 12481 ;;		On entry : 0/0
 12482 ;;		On exit  : 0/0
 12483 ;;		Unchanged: 0/0
 12484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12485 ;;      Params:         8       0       0       0       0       0       0
 12486 ;;      Locals:         4       0       0       0       0       0       0
 12487 ;;      Temps:          0       0       0       0       0       0       0
 12488 ;;      Totals:        12       0       0       0       0       0       0
 12489 ;;Total ram usage:       12 bytes
 12490 ;; Hardware stack levels used: 1
 12491 ;; This function calls:
 12492 ;;		Nothing
 12493 ;; This function is called by:
 12494 ;;		_clust2sect
 12495 ;;		_find_volume
 12496 ;; This function uses a non-reentrant model
 12497 ;;
 12498                           
 12499                           	psect	text27
 12500   005EE0                     __ptext27:
 12501                           	callstack 0
 12502   005EE0                     ___lmul:
 12503                           	callstack 28
 12504   005EE0  0E00               	movlw	0
 12505   005EE2  6E09               	movwf	___lmul@product^0,c
 12506   005EE4  0E00               	movlw	0
 12507   005EE6  6E0A               	movwf	(___lmul@product+1)^0,c
 12508   005EE8  0E00               	movlw	0
 12509   005EEA  6E0B               	movwf	(___lmul@product+2)^0,c
 12510   005EEC  0E00               	movlw	0
 12511   005EEE  6E0C               	movwf	(___lmul@product+3)^0,c
 12512   005EF0                     l4262:
 12513   005EF0  A001               	btfss	___lmul@multiplier^0,0,c
 12514   005EF2  EF7D  F02F         	goto	u5251
 12515   005EF6  EF7F  F02F         	goto	u5250
 12516   005EFA                     u5251:
 12517   005EFA  EF87  F02F         	goto	l4266
 12518   005EFE                     u5250:
 12519   005EFE  5005               	movf	___lmul@multiplicand^0,w,c
 12520   005F00  2609               	addwf	___lmul@product^0,f,c
 12521   005F02  5006               	movf	(___lmul@multiplicand+1)^0,w,c
 12522   005F04  220A               	addwfc	(___lmul@product+1)^0,f,c
 12523   005F06  5007               	movf	(___lmul@multiplicand+2)^0,w,c
 12524   005F08  220B               	addwfc	(___lmul@product+2)^0,f,c
 12525   005F0A  5008               	movf	(___lmul@multiplicand+3)^0,w,c
 12526   005F0C  220C               	addwfc	(___lmul@product+3)^0,f,c
 12527   005F0E                     l4266:
 12528   005F0E  90D8               	bcf	status,0,c
 12529   005F10  3605               	rlcf	___lmul@multiplicand^0,f,c
 12530   005F12  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
 12531   005F14  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
 12532   005F16  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
 12533   005F18  90D8               	bcf	status,0,c
 12534   005F1A  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
 12535   005F1C  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
 12536   005F1E  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
 12537   005F20  3201               	rrcf	___lmul@multiplier^0,f,c
 12538   005F22  5001               	movf	___lmul@multiplier^0,w,c
 12539   005F24  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
 12540   005F26  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
 12541   005F28  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
 12542   005F2A  A4D8               	btfss	status,2,c
 12543   005F2C  EF9A  F02F         	goto	u5261
 12544   005F30  EF9C  F02F         	goto	u5260
 12545   005F34                     u5261:
 12546   005F34  EF78  F02F         	goto	l4262
 12547   005F38                     u5260:
 12548   005F38  C009  F001         	movff	___lmul@product,?___lmul
 12549   005F3C  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 12550   005F40  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 12551   005F44  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 12552   005F48  0012               	return		;funcret
 12553   005F4A                     __end_of___lmul:
 12554                           	callstack 0
 12555                           
 12556 ;; *************** function ___lldiv *****************
 12557 ;; Defined at:
 12558 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\__lldiv.c"
 12559 ;; Parameters:    Size  Location     Type
 12560 ;;  dividend        4    0[COMRAM] unsigned long 
 12561 ;;  divisor         4    4[COMRAM] unsigned long 
 12562 ;; Auto vars:     Size  Location     Type
 12563 ;;  quotient        4    8[COMRAM] unsigned long 
 12564 ;;  counter         1   12[COMRAM] unsigned char 
 12565 ;; Return value:  Size  Location     Type
 12566 ;;                  4    0[COMRAM] unsigned long 
 12567 ;; Registers used:
 12568 ;;		wreg, status,2, status,0
 12569 ;; Tracked objects:
 12570 ;;		On entry : 0/0
 12571 ;;		On exit  : 0/0
 12572 ;;		Unchanged: 0/0
 12573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12574 ;;      Params:         8       0       0       0       0       0       0
 12575 ;;      Locals:         5       0       0       0       0       0       0
 12576 ;;      Temps:          0       0       0       0       0       0       0
 12577 ;;      Totals:        13       0       0       0       0       0       0
 12578 ;;Total ram usage:       13 bytes
 12579 ;; Hardware stack levels used: 1
 12580 ;; This function calls:
 12581 ;;		Nothing
 12582 ;; This function is called by:
 12583 ;;		_find_volume
 12584 ;;		_f_lseek
 12585 ;; This function uses a non-reentrant model
 12586 ;;
 12587                           
 12588                           	psect	text28
 12589   005CA6                     __ptext28:
 12590                           	callstack 0
 12591   005CA6                     ___lldiv:
 12592                           	callstack 28
 12593   005CA6  0E00               	movlw	0
 12594   005CA8  6E09               	movwf	___lldiv@quotient^0,c
 12595   005CAA  0E00               	movlw	0
 12596   005CAC  6E0A               	movwf	(___lldiv@quotient+1)^0,c
 12597   005CAE  0E00               	movlw	0
 12598   005CB0  6E0B               	movwf	(___lldiv@quotient+2)^0,c
 12599   005CB2  0E00               	movlw	0
 12600   005CB4  6E0C               	movwf	(___lldiv@quotient+3)^0,c
 12601   005CB6  5005               	movf	___lldiv@divisor^0,w,c
 12602   005CB8  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
 12603   005CBA  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
 12604   005CBC  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
 12605   005CBE  B4D8               	btfsc	status,2,c
 12606   005CC0  EF64  F02E         	goto	u7011
 12607   005CC4  EF66  F02E         	goto	u7010
 12608   005CC8                     u7011:
 12609   005CC8  EF9C  F02E         	goto	l854
 12610   005CCC                     u7010:
 12611   005CCC  0E01               	movlw	1
 12612   005CCE  6E0D               	movwf	___lldiv@counter^0,c
 12613   005CD0  EF70  F02E         	goto	l5156
 12614   005CD4                     l5154:
 12615   005CD4  90D8               	bcf	status,0,c
 12616   005CD6  3605               	rlcf	___lldiv@divisor^0,f,c
 12617   005CD8  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
 12618   005CDA  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
 12619   005CDC  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
 12620   005CDE  2A0D               	incf	___lldiv@counter^0,f,c
 12621   005CE0                     l5156:
 12622   005CE0  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
 12623   005CE2  EF75  F02E         	goto	u7021
 12624   005CE6  EF77  F02E         	goto	u7020
 12625   005CEA                     u7021:
 12626   005CEA  EF6A  F02E         	goto	l5154
 12627   005CEE                     u7020:
 12628   005CEE                     l5158:
 12629   005CEE  90D8               	bcf	status,0,c
 12630   005CF0  3609               	rlcf	___lldiv@quotient^0,f,c
 12631   005CF2  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
 12632   005CF4  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
 12633   005CF6  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
 12634   005CF8  5005               	movf	___lldiv@divisor^0,w,c
 12635   005CFA  5C01               	subwf	___lldiv@dividend^0,w,c
 12636   005CFC  5006               	movf	(___lldiv@divisor+1)^0,w,c
 12637   005CFE  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
 12638   005D00  5007               	movf	(___lldiv@divisor+2)^0,w,c
 12639   005D02  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
 12640   005D04  5008               	movf	(___lldiv@divisor+3)^0,w,c
 12641   005D06  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
 12642   005D08  A0D8               	btfss	status,0,c
 12643   005D0A  EF89  F02E         	goto	u7031
 12644   005D0E  EF8B  F02E         	goto	u7030
 12645   005D12                     u7031:
 12646   005D12  EF94  F02E         	goto	l5166
 12647   005D16                     u7030:
 12648   005D16  5005               	movf	___lldiv@divisor^0,w,c
 12649   005D18  5E01               	subwf	___lldiv@dividend^0,f,c
 12650   005D1A  5006               	movf	(___lldiv@divisor+1)^0,w,c
 12651   005D1C  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
 12652   005D1E  5007               	movf	(___lldiv@divisor+2)^0,w,c
 12653   005D20  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
 12654   005D22  5008               	movf	(___lldiv@divisor+3)^0,w,c
 12655   005D24  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
 12656   005D26  8009               	bsf	___lldiv@quotient^0,0,c
 12657   005D28                     l5166:
 12658   005D28  90D8               	bcf	status,0,c
 12659   005D2A  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
 12660   005D2C  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
 12661   005D2E  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
 12662   005D30  3205               	rrcf	___lldiv@divisor^0,f,c
 12663   005D32  2E0D               	decfsz	___lldiv@counter^0,f,c
 12664   005D34  EF77  F02E         	goto	l5158
 12665   005D38                     l854:
 12666   005D38  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12667   005D3C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12668   005D40  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12669   005D44  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12670   005D48  0012               	return		;funcret
 12671   005D4A                     __end_of___lldiv:
 12672                           	callstack 0
 12673                           
 12674 ;; *************** function _f_close *****************
 12675 ;; Defined at:
 12676 ;;		line 2861 in file "ff.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;  fp              2   72[COMRAM] PTR struct .
 12679 ;;		 -> Fil(32), 
 12680 ;; Auto vars:     Size  Location     Type
 12681 ;;  res             1   74[COMRAM] enum E95
 12682 ;; Return value:  Size  Location     Type
 12683 ;;                  1    wreg      enum E95
 12684 ;; Registers used:
 12685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12686 ;; Tracked objects:
 12687 ;;		On entry : 0/0
 12688 ;;		On exit  : 0/0
 12689 ;;		Unchanged: 0/0
 12690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12691 ;;      Params:         2       0       0       0       0       0       0
 12692 ;;      Locals:         1       0       0       0       0       0       0
 12693 ;;      Temps:          0       0       0       0       0       0       0
 12694 ;;      Totals:         3       0       0       0       0       0       0
 12695 ;;Total ram usage:        3 bytes
 12696 ;; Hardware stack levels used: 1
 12697 ;; Hardware stack levels required when called: 9
 12698 ;; This function calls:
 12699 ;;		_f_sync
 12700 ;;		_validate
 12701 ;; This function is called by:
 12702 ;;		_main
 12703 ;; This function uses a non-reentrant model
 12704 ;;
 12705                           
 12706                           	psect	text29
 12707   00605C                     __ptext29:
 12708                           	callstack 0
 12709   00605C                     _f_close:
 12710                           	callstack 21
 12711   00605C                     
 12712                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 12713   00605C  C049  F044         	movff	f_close@fp,f_sync@fp
 12714   006060  C04A  F045         	movff	f_close@fp+1,f_sync@fp+1
 12715   006064  ECB5  F027         	call	_f_sync	;wreg free
 12716   006068  6E4B               	movwf	f_close@res^0,c
 12717   00606A                     
 12718                           ;ff.c: 2870:  if (res == FR_OK)
 12719   00606A  504B               	movf	f_close@res^0,w,c
 12720   00606C  A4D8               	btfss	status,2,c
 12721   00606E  EF3B  F030         	goto	u8241
 12722   006072  EF3D  F030         	goto	u8240
 12723   006076                     u8241:
 12724   006076  EF52  F030         	goto	l744
 12725   00607A                     u8240:
 12726   00607A                     
 12727                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 12728   00607A  C049  F002         	movff	f_close@fp,validate@obj
 12729   00607E  C04A  F003         	movff	f_close@fp+1,validate@obj+1
 12730   006082  EC12  F02C         	call	_validate	;wreg free
 12731   006086  6E4B               	movwf	f_close@res^0,c
 12732   006088                     
 12733                           ;ff.c: 2874:   if (res == FR_OK) {
 12734   006088  504B               	movf	f_close@res^0,w,c
 12735   00608A  A4D8               	btfss	status,2,c
 12736   00608C  EF4A  F030         	goto	u8251
 12737   006090  EF4C  F030         	goto	u8250
 12738   006094                     u8251:
 12739   006094  EF52  F030         	goto	l744
 12740   006098                     u8250:
 12741   006098                     
 12742                           ;ff.c: 2882:     fp->fs = 0;
 12743   006098  C049  FFD9         	movff	f_close@fp,fsr2l
 12744   00609C  C04A  FFDA         	movff	f_close@fp+1,fsr2h
 12745   0060A0  6ADE               	clrf	postinc2,c
 12746   0060A2  6ADD               	clrf	postdec2,c
 12747   0060A4                     l744:
 12748   0060A4  0012               	return		;funcret
 12749   0060A6                     __end_of_f_close:
 12750                           	callstack 0
 12751                           
 12752 ;; *************** function _f_sync *****************
 12753 ;; Defined at:
 12754 ;;		line 2813 in file "ff.c"
 12755 ;; Parameters:    Size  Location     Type
 12756 ;;  fp              2   67[COMRAM] PTR struct .
 12757 ;;		 -> Fil(32), 
 12758 ;; Auto vars:     Size  Location     Type
 12759 ;;  tm              4    0        unsigned long 
 12760 ;;  dir             2   70[COMRAM] PTR unsigned char 
 12761 ;;		 -> FatFs(558), NULL(0), 
 12762 ;;  res             1   69[COMRAM] enum E95
 12763 ;; Return value:  Size  Location     Type
 12764 ;;                  1    wreg      enum E95
 12765 ;; Registers used:
 12766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12767 ;; Tracked objects:
 12768 ;;		On entry : 0/0
 12769 ;;		On exit  : 0/0
 12770 ;;		Unchanged: 0/0
 12771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12772 ;;      Params:         2       0       0       0       0       0       0
 12773 ;;      Locals:         3       0       0       0       0       0       0
 12774 ;;      Temps:          0       0       0       0       0       0       0
 12775 ;;      Totals:         5       0       0       0       0       0       0
 12776 ;;Total ram usage:        5 bytes
 12777 ;; Hardware stack levels used: 1
 12778 ;; Hardware stack levels required when called: 8
 12779 ;; This function calls:
 12780 ;;		_move_window
 12781 ;;		_st_clust
 12782 ;;		_sync_fs
 12783 ;;		_validate
 12784 ;; This function is called by:
 12785 ;;		_f_close
 12786 ;;		_main
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           	psect	text30
 12791   004F6A                     __ptext30:
 12792                           	callstack 0
 12793   004F6A                     _f_sync:
 12794                           	callstack 22
 12795   004F6A                     
 12796                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 12797   004F6A  C044  F002         	movff	f_sync@fp,validate@obj
 12798   004F6E  C045  F003         	movff	f_sync@fp+1,validate@obj+1
 12799   004F72  EC12  F02C         	call	_validate	;wreg free
 12800   004F76  6E46               	movwf	f_sync@res^0,c
 12801   004F78                     
 12802                           ;ff.c: 2823:  if (res == FR_OK) {
 12803   004F78  5046               	movf	f_sync@res^0,w,c
 12804   004F7A  A4D8               	btfss	status,2,c
 12805   004F7C  EFC2  F027         	goto	u7681
 12806   004F80  EFC4  F027         	goto	u7680
 12807   004F84                     u7681:
 12808   004F84  EF61  F028         	goto	l5574
 12809   004F88                     u7680:
 12810   004F88                     
 12811                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 12812   004F88  EE20 F004          	lfsr	2,4
 12813   004F8C  5044               	movf	f_sync@fp^0,w,c
 12814   004F8E  26D9               	addwf	fsr2l,f,c
 12815   004F90  5045               	movf	(f_sync@fp+1)^0,w,c
 12816   004F92  22DA               	addwfc	fsr2h,f,c
 12817   004F94  AADF               	btfss	indf2,5,c
 12818   004F96  EFCF  F027         	goto	u7691
 12819   004F9A  EFD1  F027         	goto	u7690
 12820   004F9E                     u7691:
 12821   004F9E  EF61  F028         	goto	l5574
 12822   004FA2                     u7690:
 12823   004FA2                     
 12824                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 12825   004FA2  C044  FFD9         	movff	f_sync@fp,fsr2l
 12826   004FA6  C045  FFDA         	movff	f_sync@fp+1,fsr2h
 12827   004FAA  CFDE F030          	movff	postinc2,move_window@fs
 12828   004FAE  CFDD F031          	movff	postdec2,move_window@fs+1
 12829   004FB2  EE20 F01A          	lfsr	2,26
 12830   004FB6  5044               	movf	f_sync@fp^0,w,c
 12831   004FB8  26D9               	addwf	fsr2l,f,c
 12832   004FBA  5045               	movf	(f_sync@fp+1)^0,w,c
 12833   004FBC  22DA               	addwfc	fsr2h,f,c
 12834   004FBE  CFDE F032          	movff	postinc2,move_window@sector
 12835   004FC2  CFDE F033          	movff	postinc2,move_window@sector+1
 12836   004FC6  CFDE F034          	movff	postinc2,move_window@sector+2
 12837   004FCA  CFDE F035          	movff	postinc2,move_window@sector+3
 12838   004FCE  EC3C  F02D         	call	_move_window	;wreg free
 12839   004FD2  6E46               	movwf	f_sync@res^0,c
 12840   004FD4                     
 12841                           ;ff.c: 2834:    if (res == FR_OK) {
 12842   004FD4  5046               	movf	f_sync@res^0,w,c
 12843   004FD6  A4D8               	btfss	status,2,c
 12844   004FD8  EFF0  F027         	goto	u7701
 12845   004FDC  EFF2  F027         	goto	u7700
 12846   004FE0                     u7701:
 12847   004FE0  EF61  F028         	goto	l5574
 12848   004FE4                     u7700:
 12849   004FE4                     
 12850                           ;ff.c: 2835:     dir = fp->dir_ptr;
 12851   004FE4  EE20 F01E          	lfsr	2,30
 12852   004FE8  5044               	movf	f_sync@fp^0,w,c
 12853   004FEA  26D9               	addwf	fsr2l,f,c
 12854   004FEC  5045               	movf	(f_sync@fp+1)^0,w,c
 12855   004FEE  22DA               	addwfc	fsr2h,f,c
 12856   004FF0  CFDE F047          	movff	postinc2,f_sync@dir
 12857   004FF4  CFDD F048          	movff	postdec2,f_sync@dir+1
 12858                           
 12859                           ;ff.c: 2836:     dir[11] |= 0x20;
 12860   004FF8  EE20 F00B          	lfsr	2,11
 12861   004FFC  5047               	movf	f_sync@dir^0,w,c
 12862   004FFE  26D9               	addwf	fsr2l,f,c
 12863   005000  5048               	movf	(f_sync@dir+1)^0,w,c
 12864   005002  22DA               	addwfc	fsr2h,f,c
 12865   005004  0E00               	movlw	0
 12866   005006  8ADB               	bsf	plusw2,5,c
 12867   005008                     
 12868                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 12869   005008  EE20 F00A          	lfsr	2,10
 12870   00500C  5044               	movf	f_sync@fp^0,w,c
 12871   00500E  26D9               	addwf	fsr2l,f,c
 12872   005010  5045               	movf	(f_sync@fp+1)^0,w,c
 12873   005012  22DA               	addwfc	fsr2h,f,c
 12874   005014  EE10 F01C          	lfsr	1,28
 12875   005018  5047               	movf	f_sync@dir^0,w,c
 12876   00501A  26E1               	addwf	fsr1l,f,c
 12877   00501C  5048               	movf	(f_sync@dir+1)^0,w,c
 12878   00501E  22E2               	addwfc	fsr1h,f,c
 12879   005020  CFDE FFE6          	movff	postinc2,postinc1
 12880   005024  CFDE FFE6          	movff	postinc2,postinc1
 12881   005028  CFDE FFE6          	movff	postinc2,postinc1
 12882   00502C  CFDE FFE6          	movff	postinc2,postinc1
 12883   005030                     
 12884                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 12885   005030  C047  F001         	movff	f_sync@dir,st_clust@dir
 12886   005034  C048  F002         	movff	f_sync@dir+1,st_clust@dir+1
 12887   005038  EE20 F00E          	lfsr	2,14
 12888   00503C  5044               	movf	f_sync@fp^0,w,c
 12889   00503E  26D9               	addwf	fsr2l,f,c
 12890   005040  5045               	movf	(f_sync@fp+1)^0,w,c
 12891   005042  22DA               	addwfc	fsr2h,f,c
 12892   005044  CFDE F003          	movff	postinc2,st_clust@cl
 12893   005048  CFDE F004          	movff	postinc2,st_clust@cl+1
 12894   00504C  CFDE F005          	movff	postinc2,st_clust@cl+2
 12895   005050  CFDE F006          	movff	postinc2,st_clust@cl+3
 12896   005054  EC93  F030         	call	_st_clust	;wreg free
 12897   005058                     
 12898                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 12899   005058  EE20 F016          	lfsr	2,22
 12900   00505C  5047               	movf	f_sync@dir^0,w,c
 12901   00505E  26D9               	addwf	fsr2l,f,c
 12902   005060  5048               	movf	(f_sync@dir+1)^0,w,c
 12903   005062  22DA               	addwfc	fsr2h,f,c
 12904   005064  0E00               	movlw	0
 12905   005066  6EDE               	movwf	postinc2,c
 12906   005068  0E00               	movlw	0
 12907   00506A  6EDE               	movwf	postinc2,c
 12908   00506C  0E21               	movlw	33
 12909   00506E  6EDE               	movwf	postinc2,c
 12910   005070  0E46               	movlw	70
 12911   005072  6EDD               	movwf	postdec2,c
 12912   005074                     
 12913                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 12914   005074  EE20 F012          	lfsr	2,18
 12915   005078  5047               	movf	f_sync@dir^0,w,c
 12916   00507A  26D9               	addwf	fsr2l,f,c
 12917   00507C  5048               	movf	(f_sync@dir+1)^0,w,c
 12918   00507E  22DA               	addwfc	fsr2h,f,c
 12919   005080  6ADE               	clrf	postinc2,c
 12920   005082  6ADD               	clrf	postdec2,c
 12921   005084                     
 12922                           ;ff.c: 2842:     fp->flag &= ~0x20;
 12923   005084  EE20 F004          	lfsr	2,4
 12924   005088  5044               	movf	f_sync@fp^0,w,c
 12925   00508A  26D9               	addwf	fsr2l,f,c
 12926   00508C  5045               	movf	(f_sync@fp+1)^0,w,c
 12927   00508E  22DA               	addwfc	fsr2h,f,c
 12928   005090  0EDF               	movlw	223
 12929   005092  16DF               	andwf	indf2,f,c
 12930   005094                     
 12931                           ;ff.c: 2843:     fp->fs->wflag = 1;
 12932   005094  C044  FFD9         	movff	f_sync@fp,fsr2l
 12933   005098  C045  FFDA         	movff	f_sync@fp+1,fsr2h
 12934   00509C  EE10 F004          	lfsr	1,4
 12935   0050A0  50DE               	movf	postinc2,w,c
 12936   0050A2  26E1               	addwf	fsr1l,f,c
 12937   0050A4  50DD               	movf	postdec2,w,c
 12938   0050A6  22E2               	addwfc	fsr1h,f,c
 12939   0050A8  0E01               	movlw	1
 12940   0050AA  6EE7               	movwf	indf1,c
 12941   0050AC                     
 12942                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 12943   0050AC  C044  FFD9         	movff	f_sync@fp,fsr2l
 12944   0050B0  C045  FFDA         	movff	f_sync@fp+1,fsr2h
 12945   0050B4  CFDE F039          	movff	postinc2,sync_fs@fs
 12946   0050B8  CFDD F03A          	movff	postdec2,sync_fs@fs+1
 12947   0050BC  ECBB  F022         	call	_sync_fs	;wreg free
 12948   0050C0  6E46               	movwf	f_sync@res^0,c
 12949   0050C2                     l5574:
 12950                           
 12951                           ;ff.c: 2849:  return res;
 12952   0050C2  5046               	movf	f_sync@res^0,w,c
 12953   0050C4  0012               	return		;funcret
 12954   0050C6                     __end_of_f_sync:
 12955                           	callstack 0
 12956                           
 12957 ;; *************** function _validate *****************
 12958 ;; Defined at:
 12959 ;;		line 2372 in file "ff.c"
 12960 ;; Parameters:    Size  Location     Type
 12961 ;;  obj             2    1[COMRAM] PTR void 
 12962 ;;		 -> Fil(32), 
 12963 ;; Auto vars:     Size  Location     Type
 12964 ;;  fil             2    7[COMRAM] PTR struct .
 12965 ;;		 -> Fil(32), 
 12966 ;; Return value:  Size  Location     Type
 12967 ;;                  1    wreg      enum E95
 12968 ;; Registers used:
 12969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12970 ;; Tracked objects:
 12971 ;;		On entry : 0/0
 12972 ;;		On exit  : 0/0
 12973 ;;		Unchanged: 0/0
 12974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12975 ;;      Params:         2       0       0       0       0       0       0
 12976 ;;      Locals:         2       0       0       0       0       0       0
 12977 ;;      Temps:          4       0       0       0       0       0       0
 12978 ;;      Totals:         8       0       0       0       0       0       0
 12979 ;;Total ram usage:        8 bytes
 12980 ;; Hardware stack levels used: 1
 12981 ;; Hardware stack levels required when called: 1
 12982 ;; This function calls:
 12983 ;;		_disk_status
 12984 ;; This function is called by:
 12985 ;;		_f_write
 12986 ;;		_f_sync
 12987 ;;		_f_close
 12988 ;;		_f_lseek
 12989 ;;		_f_read
 12990 ;; This function uses a non-reentrant model
 12991 ;;
 12992                           
 12993                           	psect	text31
 12994   005824                     __ptext31:
 12995                           	callstack 0
 12996   005824                     _validate:
 12997                           	callstack 28
 12998   005824                     
 12999                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 13000   005824  C002  F008         	movff	validate@obj,validate@fil
 13001   005828  C003  F009         	movff	validate@obj+1,validate@fil+1
 13002                           
 13003                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 13004   00582C  5008               	movf	validate@fil^0,w,c
 13005   00582E  1009               	iorwf	(validate@fil+1)^0,w,c
 13006   005830  B4D8               	btfsc	status,2,c
 13007   005832  EF1D  F02C         	goto	u6961
 13008   005836  EF1F  F02C         	goto	u6960
 13009   00583A                     u6961:
 13010   00583A  EF71  F02C         	goto	l5140
 13011   00583E                     u6960:
 13012   00583E  C008  FFD9         	movff	validate@fil,fsr2l
 13013   005842  C009  FFDA         	movff	validate@fil+1,fsr2h
 13014   005846  50DE               	movf	postinc2,w,c
 13015   005848  10DE               	iorwf	postinc2,w,c
 13016   00584A  B4D8               	btfsc	status,2,c
 13017   00584C  EF2A  F02C         	goto	u6971
 13018   005850  EF2C  F02C         	goto	u6970
 13019   005854                     u6971:
 13020   005854  EF71  F02C         	goto	l5140
 13021   005858                     u6970:
 13022   005858  C008  FFD9         	movff	validate@fil,fsr2l
 13023   00585C  C009  FFDA         	movff	validate@fil+1,fsr2h
 13024   005860  CFDE F004          	movff	postinc2,??_validate
 13025   005864  CFDD F005          	movff	postdec2,??_validate+1
 13026   005868  C004  FFD9         	movff	??_validate,fsr2l
 13027   00586C  C005  FFDA         	movff	??_validate+1,fsr2h
 13028   005870  50DF               	movf	indf2,w,c
 13029   005872  B4D8               	btfsc	status,2,c
 13030   005874  EF3E  F02C         	goto	u6981
 13031   005878  EF40  F02C         	goto	u6980
 13032   00587C                     u6981:
 13033   00587C  EF71  F02C         	goto	l5140
 13034   005880                     u6980:
 13035   005880  EE20 F002          	lfsr	2,2
 13036   005884  5008               	movf	validate@fil^0,w,c
 13037   005886  26D9               	addwf	fsr2l,f,c
 13038   005888  5009               	movf	(validate@fil+1)^0,w,c
 13039   00588A  22DA               	addwfc	fsr2h,f,c
 13040   00588C  C008  FFE1         	movff	validate@fil,fsr1l
 13041   005890  C009  FFE2         	movff	validate@fil+1,fsr1h
 13042   005894  EE00 F006          	lfsr	0,6
 13043   005898  50E6               	movf	postinc1,w,c
 13044   00589A  26E9               	addwf	fsr0l,f,c
 13045   00589C  50E5               	movf	postdec1,w,c
 13046   00589E  22EA               	addwfc	fsr0h,f,c
 13047   0058A0  50DE               	movf	postinc2,w,c
 13048   0058A2  18EE               	xorwf	postinc0,w,c
 13049   0058A4  E107               	bnz	u6991
 13050   0058A6  50DE               	movf	postinc2,w,c
 13051   0058A8  18EE               	xorwf	postinc0,w,c
 13052   0058AA  A4D8               	btfss	status,2,c
 13053   0058AC  EF5A  F02C         	goto	u6991
 13054   0058B0  EF5C  F02C         	goto	u6990
 13055   0058B4                     u6991:
 13056   0058B4  EF71  F02C         	goto	l5140
 13057   0058B8                     u6990:
 13058   0058B8  C008  FFD9         	movff	validate@fil,fsr2l
 13059   0058BC  C009  FFDA         	movff	validate@fil+1,fsr2h
 13060   0058C0  EE10 F001          	lfsr	1,1
 13061   0058C4  50DE               	movf	postinc2,w,c
 13062   0058C6  26E1               	addwf	fsr1l,f,c
 13063   0058C8  50DD               	movf	postdec2,w,c
 13064   0058CA  22E2               	addwfc	fsr1h,f,c
 13065   0058CC  50E7               	movf	indf1,w,c
 13066   0058CE  ECCF  F030         	call	_disk_status
 13067   0058D2  6E04               	movwf	??_validate^0,c
 13068   0058D4  A004               	btfss	??_validate^0,0,c
 13069   0058D6  EF6F  F02C         	goto	u7001
 13070   0058DA  EF71  F02C         	goto	u7000
 13071   0058DE                     u7001:
 13072   0058DE  EF74  F02C         	goto	l5144
 13073   0058E2                     u7000:
 13074   0058E2                     l5140:
 13075                           
 13076                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 13077   0058E2  0E09               	movlw	9
 13078   0058E4  EF75  F02C         	goto	l644
 13079   0058E8                     l5144:
 13080                           
 13081                           ;ff.c: 2384:  return FR_OK;
 13082   0058E8  0E00               	movlw	0
 13083   0058EA                     l644:
 13084   0058EA  0012               	return		;funcret
 13085   0058EC                     __end_of_validate:
 13086                           	callstack 0
 13087                           
 13088 ;; *************** function _disk_status *****************
 13089 ;; Defined at:
 13090 ;;		line 366 in file "diskio.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;  pdrv            1    wreg     unsigned char 
 13093 ;; Auto vars:     Size  Location     Type
 13094 ;;  pdrv            1    0[COMRAM] unsigned char 
 13095 ;; Return value:  Size  Location     Type
 13096 ;;                  1    wreg      unsigned char 
 13097 ;; Registers used:
 13098 ;;		wreg, status,2
 13099 ;; Tracked objects:
 13100 ;;		On entry : 0/0
 13101 ;;		On exit  : 0/0
 13102 ;;		Unchanged: 0/0
 13103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13104 ;;      Params:         0       0       0       0       0       0       0
 13105 ;;      Locals:         1       0       0       0       0       0       0
 13106 ;;      Temps:          0       0       0       0       0       0       0
 13107 ;;      Totals:         1       0       0       0       0       0       0
 13108 ;;Total ram usage:        1 bytes
 13109 ;; Hardware stack levels used: 1
 13110 ;; This function calls:
 13111 ;;		Nothing
 13112 ;; This function is called by:
 13113 ;;		_find_volume
 13114 ;;		_validate
 13115 ;; This function uses a non-reentrant model
 13116 ;;
 13117                           
 13118                           	psect	text32
 13119   00619E                     __ptext32:
 13120                           	callstack 0
 13121   00619E                     _disk_status:
 13122                           	callstack 28
 13123                           
 13124                           ;incstack = 0
 13125                           ;disk_status@pdrv stored from wreg
 13126   00619E  6E01               	movwf	disk_status@pdrv^0,c
 13127   0061A0                     
 13128                           ;diskio.c: 367:  BYTE pdrv;diskio.c: 369: {;diskio.c: 370:  if (pdrv) return 0x01;
 13129   0061A0  5001               	movf	disk_status@pdrv^0,w,c
 13130   0061A2  B4D8               	btfsc	status,2,c
 13131   0061A4  EFD6  F030         	goto	u5461
 13132   0061A8  EFD8  F030         	goto	u5460
 13133   0061AC                     u5461:
 13134   0061AC  EFDB  F030         	goto	l4384
 13135   0061B0                     u5460:
 13136   0061B0  0E01               	movlw	1
 13137   0061B2  EFDD  F030         	goto	l189
 13138   0061B6                     l4384:
 13139                           
 13140                           ;diskio.c: 371:  return Stat;
 13141   0061B6  0100               	movlb	0	; () banked
 13142   0061B8  51FD               	movf	_Stat& (0+255),w,b
 13143   0061BA                     l189:
 13144   0061BA  0012               	return		;funcret
 13145   0061BC                     __end_of_disk_status:
 13146                           	callstack 0
 13147                           
 13148 ;; *************** function _sync_fs *****************
 13149 ;; Defined at:
 13150 ;;		line 760 in file "ff.c"
 13151 ;; Parameters:    Size  Location     Type
 13152 ;;  fs              2   56[COMRAM] PTR struct .
 13153 ;;		 -> FatFs(558), NULL(0), 
 13154 ;; Auto vars:     Size  Location     Type
 13155 ;;  res             1   66[COMRAM] enum E95
 13156 ;; Return value:  Size  Location     Type
 13157 ;;                  1    wreg      enum E95
 13158 ;; Registers used:
 13159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13160 ;; Tracked objects:
 13161 ;;		On entry : 0/0
 13162 ;;		On exit  : 0/0
 13163 ;;		Unchanged: 0/0
 13164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13165 ;;      Params:         2       0       0       0       0       0       0
 13166 ;;      Locals:         1       0       0       0       0       0       0
 13167 ;;      Temps:          8       0       0       0       0       0       0
 13168 ;;      Totals:        11       0       0       0       0       0       0
 13169 ;;Total ram usage:       11 bytes
 13170 ;; Hardware stack levels used: 1
 13171 ;; Hardware stack levels required when called: 7
 13172 ;; This function calls:
 13173 ;;		_disk_ioctl
 13174 ;;		_disk_write
 13175 ;;		_mem_set
 13176 ;;		_sync_window
 13177 ;; This function is called by:
 13178 ;;		_f_sync
 13179 ;; This function uses a non-reentrant model
 13180 ;;
 13181                           
 13182                           	psect	text33
 13183   004576                     __ptext33:
 13184                           	callstack 0
 13185   004576                     _sync_fs:
 13186                           	callstack 22
 13187   004576                     
 13188                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 13189   004576  C039  F01B         	movff	sync_fs@fs,sync_window@fs
 13190   00457A  C03A  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 13191   00457E  ECF3  F026         	call	_sync_window	;wreg free
 13192   004582  6E43               	movwf	sync_fs@res^0,c
 13193   004584                     
 13194                           ;ff.c: 768:  if (res == FR_OK) {
 13195   004584  5043               	movf	sync_fs@res^0,w,c
 13196   004586  A4D8               	btfss	status,2,c
 13197   004588  EFC8  F022         	goto	u6371
 13198   00458C  EFCA  F022         	goto	u6370
 13199   004590                     u6371:
 13200   004590  EFAC  F023         	goto	l325
 13201   004594                     u6370:
 13202   004594                     
 13203                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 13204   004594  C039  FFD9         	movff	sync_fs@fs,fsr2l
 13205   004598  C03A  FFDA         	movff	sync_fs@fs+1,fsr2h
 13206   00459C  0E03               	movlw	3
 13207   00459E  18DE               	xorwf	postinc2,w,c
 13208   0045A0  A4D8               	btfss	status,2,c
 13209   0045A2  EFD5  F022         	goto	u6381
 13210   0045A6  EFD7  F022         	goto	u6380
 13211   0045AA                     u6381:
 13212   0045AA  EF93  F023         	goto	l4836
 13213   0045AE                     u6380:
 13214   0045AE  EE20 F005          	lfsr	2,5
 13215   0045B2  5039               	movf	sync_fs@fs^0,w,c
 13216   0045B4  26D9               	addwf	fsr2l,f,c
 13217   0045B6  503A               	movf	(sync_fs@fs+1)^0,w,c
 13218   0045B8  22DA               	addwfc	fsr2h,f,c
 13219   0045BA  04DE               	decf	postinc2,w,c
 13220   0045BC  A4D8               	btfss	status,2,c
 13221   0045BE  EFE3  F022         	goto	u6391
 13222   0045C2  EFE5  F022         	goto	u6390
 13223   0045C6                     u6391:
 13224   0045C6  EF93  F023         	goto	l4836
 13225   0045CA                     u6390:
 13226   0045CA                     
 13227                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 13228   0045CA  0E2E               	movlw	46
 13229   0045CC  2439               	addwf	sync_fs@fs^0,w,c
 13230   0045CE  6E01               	movwf	mem_set@dst^0,c
 13231   0045D0  0E00               	movlw	0
 13232   0045D2  203A               	addwfc	(sync_fs@fs+1)^0,w,c
 13233   0045D4  6E02               	movwf	(mem_set@dst+1)^0,c
 13234   0045D6  0E00               	movlw	0
 13235   0045D8  6E04               	movwf	(mem_set@val+1)^0,c
 13236   0045DA  0E00               	movlw	0
 13237   0045DC  6E03               	movwf	mem_set@val^0,c
 13238   0045DE  0E02               	movlw	2
 13239   0045E0  6E06               	movwf	(mem_set@cnt+1)^0,c
 13240   0045E2  0E00               	movlw	0
 13241   0045E4  6E05               	movwf	mem_set@cnt^0,c
 13242   0045E6  EC77  F030         	call	_mem_set	;wreg free
 13243   0045EA                     
 13244                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 13245   0045EA  EE22 F02C          	lfsr	2,556
 13246   0045EE  5039               	movf	sync_fs@fs^0,w,c
 13247   0045F0  26D9               	addwf	fsr2l,f,c
 13248   0045F2  503A               	movf	(sync_fs@fs+1)^0,w,c
 13249   0045F4  22DA               	addwfc	fsr2h,f,c
 13250   0045F6  0E55               	movlw	85
 13251   0045F8  6EDE               	movwf	postinc2,c
 13252   0045FA  0EAA               	movlw	170
 13253   0045FC  6EDD               	movwf	postdec2,c
 13254   0045FE                     
 13255                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 13256   0045FE  EE20 F02E          	lfsr	2,46
 13257   004602  5039               	movf	sync_fs@fs^0,w,c
 13258   004604  26D9               	addwf	fsr2l,f,c
 13259   004606  503A               	movf	(sync_fs@fs+1)^0,w,c
 13260   004608  22DA               	addwfc	fsr2h,f,c
 13261   00460A  0E52               	movlw	82
 13262   00460C  6EDE               	movwf	postinc2,c
 13263   00460E  0E52               	movlw	82
 13264   004610  6EDE               	movwf	postinc2,c
 13265   004612  0E61               	movlw	97
 13266   004614  6EDE               	movwf	postinc2,c
 13267   004616  0E41               	movlw	65
 13268   004618  6EDD               	movwf	postdec2,c
 13269   00461A                     
 13270                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 13271   00461A  EE22 F012          	lfsr	2,530
 13272   00461E  5039               	movf	sync_fs@fs^0,w,c
 13273   004620  26D9               	addwf	fsr2l,f,c
 13274   004622  503A               	movf	(sync_fs@fs+1)^0,w,c
 13275   004624  22DA               	addwfc	fsr2h,f,c
 13276   004626  0E72               	movlw	114
 13277   004628  6EDE               	movwf	postinc2,c
 13278   00462A  0E72               	movlw	114
 13279   00462C  6EDE               	movwf	postinc2,c
 13280   00462E  0E41               	movlw	65
 13281   004630  6EDE               	movwf	postinc2,c
 13282   004632  0E61               	movlw	97
 13283   004634  6EDD               	movwf	postdec2,c
 13284   004636                     
 13285                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 13286   004636  EE20 F00E          	lfsr	2,14
 13287   00463A  5039               	movf	sync_fs@fs^0,w,c
 13288   00463C  26D9               	addwf	fsr2l,f,c
 13289   00463E  503A               	movf	(sync_fs@fs+1)^0,w,c
 13290   004640  22DA               	addwfc	fsr2h,f,c
 13291   004642  EE12 F016          	lfsr	1,534
 13292   004646  5039               	movf	sync_fs@fs^0,w,c
 13293   004648  26E1               	addwf	fsr1l,f,c
 13294   00464A  503A               	movf	(sync_fs@fs+1)^0,w,c
 13295   00464C  22E2               	addwfc	fsr1h,f,c
 13296   00464E  CFDE FFE6          	movff	postinc2,postinc1
 13297   004652  CFDE FFE6          	movff	postinc2,postinc1
 13298   004656  CFDE FFE6          	movff	postinc2,postinc1
 13299   00465A  CFDE FFE6          	movff	postinc2,postinc1
 13300   00465E                     
 13301                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 13302   00465E  EE20 F00A          	lfsr	2,10
 13303   004662  5039               	movf	sync_fs@fs^0,w,c
 13304   004664  26D9               	addwf	fsr2l,f,c
 13305   004666  503A               	movf	(sync_fs@fs+1)^0,w,c
 13306   004668  22DA               	addwfc	fsr2h,f,c
 13307   00466A  EE12 F01A          	lfsr	1,538
 13308   00466E  5039               	movf	sync_fs@fs^0,w,c
 13309   004670  26E1               	addwf	fsr1l,f,c
 13310   004672  503A               	movf	(sync_fs@fs+1)^0,w,c
 13311   004674  22E2               	addwfc	fsr1h,f,c
 13312   004676  CFDE FFE6          	movff	postinc2,postinc1
 13313   00467A  CFDE FFE6          	movff	postinc2,postinc1
 13314   00467E  CFDE FFE6          	movff	postinc2,postinc1
 13315   004682  CFDE FFE6          	movff	postinc2,postinc1
 13316   004686                     
 13317                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 13318   004686  EE20 F01A          	lfsr	2,26
 13319   00468A  5039               	movf	sync_fs@fs^0,w,c
 13320   00468C  26D9               	addwf	fsr2l,f,c
 13321   00468E  503A               	movf	(sync_fs@fs+1)^0,w,c
 13322   004690  22DA               	addwfc	fsr2h,f,c
 13323   004692  CFDE F03B          	movff	postinc2,??_sync_fs
 13324   004696  CFDE F03C          	movff	postinc2,??_sync_fs+1
 13325   00469A  CFDE F03D          	movff	postinc2,??_sync_fs+2
 13326   00469E  CFDE F03E          	movff	postinc2,??_sync_fs+3
 13327   0046A2  0E01               	movlw	1
 13328   0046A4  243B               	addwf	??_sync_fs^0,w,c
 13329   0046A6  6E3F               	movwf	(??_sync_fs+4)^0,c
 13330   0046A8  0E00               	movlw	0
 13331   0046AA  203C               	addwfc	(??_sync_fs+1)^0,w,c
 13332   0046AC  6E40               	movwf	(??_sync_fs+5)^0,c
 13333   0046AE  0E00               	movlw	0
 13334   0046B0  203D               	addwfc	(??_sync_fs+2)^0,w,c
 13335   0046B2  6E41               	movwf	(??_sync_fs+6)^0,c
 13336   0046B4  0E00               	movlw	0
 13337   0046B6  203E               	addwfc	(??_sync_fs+3)^0,w,c
 13338   0046B8  6E42               	movwf	(??_sync_fs+7)^0,c
 13339   0046BA  EE20 F02A          	lfsr	2,42
 13340   0046BE  5039               	movf	sync_fs@fs^0,w,c
 13341   0046C0  26D9               	addwf	fsr2l,f,c
 13342   0046C2  503A               	movf	(sync_fs@fs+1)^0,w,c
 13343   0046C4  22DA               	addwfc	fsr2h,f,c
 13344   0046C6  C03F  FFDE         	movff	??_sync_fs+4,postinc2
 13345   0046CA  C040  FFDE         	movff	??_sync_fs+5,postinc2
 13346   0046CE  C041  FFDE         	movff	??_sync_fs+6,postinc2
 13347   0046D2  C042  FFDE         	movff	??_sync_fs+7,postinc2
 13348   0046D6                     
 13349                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 13350   0046D6  0E2E               	movlw	46
 13351   0046D8  2439               	addwf	sync_fs@fs^0,w,c
 13352   0046DA  6E11               	movwf	disk_write@buff^0,c
 13353   0046DC  0E00               	movlw	0
 13354   0046DE  203A               	addwfc	(sync_fs@fs+1)^0,w,c
 13355   0046E0  6E12               	movwf	(disk_write@buff+1)^0,c
 13356   0046E2  EE20 F02A          	lfsr	2,42
 13357   0046E6  5039               	movf	sync_fs@fs^0,w,c
 13358   0046E8  26D9               	addwf	fsr2l,f,c
 13359   0046EA  503A               	movf	(sync_fs@fs+1)^0,w,c
 13360   0046EC  22DA               	addwfc	fsr2h,f,c
 13361   0046EE  CFDE F013          	movff	postinc2,disk_write@sector
 13362   0046F2  CFDE F014          	movff	postinc2,disk_write@sector+1
 13363   0046F6  CFDE F015          	movff	postinc2,disk_write@sector+2
 13364   0046FA  CFDE F016          	movff	postinc2,disk_write@sector+3
 13365   0046FE  0E00               	movlw	0
 13366   004700  6E18               	movwf	(disk_write@count+1)^0,c
 13367   004702  0E01               	movlw	1
 13368   004704  6E17               	movwf	disk_write@count^0,c
 13369   004706  EE20 F001          	lfsr	2,1
 13370   00470A  5039               	movf	sync_fs@fs^0,w,c
 13371   00470C  26D9               	addwf	fsr2l,f,c
 13372   00470E  503A               	movf	(sync_fs@fs+1)^0,w,c
 13373   004710  22DA               	addwfc	fsr2h,f,c
 13374   004712  50DF               	movf	indf2,w,c
 13375   004714  EC84  F024         	call	_disk_write
 13376   004718                     
 13377                           ;ff.c: 781:    fs->fsi_flag = 0;
 13378   004718  EE20 F005          	lfsr	2,5
 13379   00471C  5039               	movf	sync_fs@fs^0,w,c
 13380   00471E  26D9               	addwf	fsr2l,f,c
 13381   004720  503A               	movf	(sync_fs@fs+1)^0,w,c
 13382   004722  22DA               	addwfc	fsr2h,f,c
 13383   004724  6ADF               	clrf	indf2,c
 13384   004726                     l4836:
 13385                           
 13386                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 13387   004726  0E00               	movlw	0
 13388   004728  6E11               	movwf	disk_ioctl@cmd^0,c
 13389   00472A  0E00               	movlw	0
 13390   00472C  6E12               	movwf	disk_ioctl@buff^0,c
 13391   00472E  0E00               	movlw	0
 13392   004730  6E13               	movwf	(disk_ioctl@buff+1)^0,c
 13393   004732  EE20 F001          	lfsr	2,1
 13394   004736  5039               	movf	sync_fs@fs^0,w,c
 13395   004738  26D9               	addwf	fsr2l,f,c
 13396   00473A  503A               	movf	(sync_fs@fs+1)^0,w,c
 13397   00473C  22DA               	addwfc	fsr2h,f,c
 13398   00473E  50DF               	movf	indf2,w,c
 13399   004740  EC89  F010         	call	_disk_ioctl
 13400   004744  0900               	iorlw	0
 13401   004746  B4D8               	btfsc	status,2,c
 13402   004748  EFA8  F023         	goto	u6401
 13403   00474C  EFAA  F023         	goto	u6400
 13404   004750                     u6401:
 13405   004750  EFAC  F023         	goto	l325
 13406   004754                     u6400:
 13407   004754                     
 13408                           ;ff.c: 785:    res = FR_DISK_ERR;
 13409   004754  0E01               	movlw	1
 13410   004756  6E43               	movwf	sync_fs@res^0,c
 13411   004758                     l325:
 13412                           
 13413                           ;ff.c: 788:  return res;
 13414   004758  5043               	movf	sync_fs@res^0,w,c
 13415   00475A  0012               	return		;funcret
 13416   00475C                     __end_of_sync_fs:
 13417                           	callstack 0
 13418                           
 13419 ;; *************** function _mem_set *****************
 13420 ;; Defined at:
 13421 ;;		line 524 in file "ff.c"
 13422 ;; Parameters:    Size  Location     Type
 13423 ;;  dst             2    0[COMRAM] PTR void 
 13424 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 13425 ;;  val             2    2[COMRAM] int 
 13426 ;;  cnt             2    4[COMRAM] unsigned short 
 13427 ;; Auto vars:     Size  Location     Type
 13428 ;;  d               2    6[COMRAM] PTR unsigned char 
 13429 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 13430 ;; Return value:  Size  Location     Type
 13431 ;;                  1    wreg      void 
 13432 ;; Registers used:
 13433 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13434 ;; Tracked objects:
 13435 ;;		On entry : 0/0
 13436 ;;		On exit  : 0/0
 13437 ;;		Unchanged: 0/0
 13438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13439 ;;      Params:         6       0       0       0       0       0       0
 13440 ;;      Locals:         2       0       0       0       0       0       0
 13441 ;;      Temps:          0       0       0       0       0       0       0
 13442 ;;      Totals:         8       0       0       0       0       0       0
 13443 ;;Total ram usage:        8 bytes
 13444 ;; Hardware stack levels used: 1
 13445 ;; This function calls:
 13446 ;;		Nothing
 13447 ;; This function is called by:
 13448 ;;		_sync_fs
 13449 ;;		_dir_next
 13450 ;;		_dir_register
 13451 ;;		_create_name
 13452 ;; This function uses a non-reentrant model
 13453 ;;
 13454                           
 13455                           	psect	text34
 13456   0060EE                     __ptext34:
 13457                           	callstack 0
 13458   0060EE                     _mem_set:
 13459                           	callstack 28
 13460   0060EE                     
 13461                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 13462   0060EE  C001  F007         	movff	mem_set@dst,mem_set@d
 13463   0060F2  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 13464                           
 13465                           ;ff.c: 527:  while (cnt--)
 13466   0060F6  EF85  F030         	goto	l4276
 13467   0060FA                     l4272:
 13468                           
 13469                           ;ff.c: 528:   *d++ = (BYTE)val;
 13470   0060FA  C007  FFD9         	movff	mem_set@d,fsr2l
 13471   0060FE  C008  FFDA         	movff	mem_set@d+1,fsr2h
 13472   006102  C003  FFDF         	movff	mem_set@val,indf2
 13473   006106  4A07               	infsnz	mem_set@d^0,f,c
 13474   006108  2A08               	incf	(mem_set@d+1)^0,f,c
 13475   00610A                     l4276:
 13476                           
 13477                           ;ff.c: 527:  while (cnt--)
 13478   00610A  0605               	decf	mem_set@cnt^0,f,c
 13479   00610C  A0D8               	btfss	status,0,c
 13480   00610E  0606               	decf	(mem_set@cnt+1)^0,f,c
 13481   006110  2805               	incf	mem_set@cnt^0,w,c
 13482   006112  E106               	bnz	u5271
 13483   006114  2806               	incf	(mem_set@cnt+1)^0,w,c
 13484   006116  A4D8               	btfss	status,2,c
 13485   006118  EF90  F030         	goto	u5271
 13486   00611C  EF92  F030         	goto	u5270
 13487   006120                     u5271:
 13488   006120  EF7D  F030         	goto	l4272
 13489   006124                     u5270:
 13490   006124  0012               	return		;funcret
 13491   006126                     __end_of_mem_set:
 13492                           	callstack 0
 13493                           
 13494 ;; *************** function _disk_ioctl *****************
 13495 ;; Defined at:
 13496 ;;		line 456 in file "diskio.c"
 13497 ;; Parameters:    Size  Location     Type
 13498 ;;  pdrv            1    wreg     unsigned char 
 13499 ;;  cmd             1   16[COMRAM] unsigned char 
 13500 ;;  buff            2   17[COMRAM] PTR void 
 13501 ;;		 -> NULL(0), 
 13502 ;; Auto vars:     Size  Location     Type
 13503 ;;  pdrv            1   47[COMRAM] unsigned char 
 13504 ;;  csd            16   31[COMRAM] unsigned char [16]
 13505 ;;  csize           4   48[COMRAM] unsigned long 
 13506 ;;  ptr             2   54[COMRAM] PTR unsigned char 
 13507 ;;		 -> NULL(0), 
 13508 ;;  n               1   53[COMRAM] unsigned char 
 13509 ;;  res             1   52[COMRAM] enum E45
 13510 ;; Return value:  Size  Location     Type
 13511 ;;                  1    wreg      enum E45
 13512 ;; Registers used:
 13513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13514 ;; Tracked objects:
 13515 ;;		On entry : 0/0
 13516 ;;		On exit  : 0/0
 13517 ;;		Unchanged: 0/0
 13518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13519 ;;      Params:         3       0       0       0       0       0       0
 13520 ;;      Locals:        25       0       0       0       0       0       0
 13521 ;;      Temps:         12       0       0       0       0       0       0
 13522 ;;      Totals:        40       0       0       0       0       0       0
 13523 ;;Total ram usage:       40 bytes
 13524 ;; Hardware stack levels used: 1
 13525 ;; Hardware stack levels required when called: 5
 13526 ;; This function calls:
 13527 ;;		_SPI_Exchange8bit
 13528 ;;		_deselect
 13529 ;;		_rcvr_datablock
 13530 ;;		_select
 13531 ;;		_send_cmd
 13532 ;; This function is called by:
 13533 ;;		_sync_fs
 13534 ;; This function uses a non-reentrant model
 13535 ;;
 13536                           
 13537                           	psect	text35
 13538   002112                     __ptext35:
 13539                           	callstack 0
 13540   002112                     _disk_ioctl:
 13541                           	callstack 23
 13542                           
 13543                           ;incstack = 0
 13544                           ;disk_ioctl@pdrv stored from wreg
 13545   002112  6E30               	movwf	disk_ioctl@pdrv^0,c
 13546   002114                     
 13547                           ;diskio.c: 457:  BYTE pdrv,;diskio.c: 458:  BYTE cmd,;diskio.c: 459:  void *buff;diskio.
      +                          c: 461: {;diskio.c: 462:  DRESULT res;;diskio.c: 463:  BYTE n, csd[16], *ptr = buff;
 13548   002114  C012  F037         	movff	disk_ioctl@buff,disk_ioctl@ptr
 13549   002118  C013  F038         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 13550   00211C                     
 13551                           ;diskio.c: 464:  DWORD csize;;diskio.c: 467:  if (pdrv) return RES_PARERR;
 13552   00211C  5030               	movf	disk_ioctl@pdrv^0,w,c
 13553   00211E  B4D8               	btfsc	status,2,c
 13554   002120  EF94  F010         	goto	u5471
 13555   002124  EF96  F010         	goto	u5470
 13556   002128                     u5471:
 13557   002128  EF99  F010         	goto	l4396
 13558   00212C                     u5470:
 13559   00212C  0E04               	movlw	4
 13560   00212E  EF81  F013         	goto	l228
 13561   002132                     l4396:
 13562                           
 13563                           ;diskio.c: 469:  res = RES_ERROR;
 13564   002132  0E01               	movlw	1
 13565   002134  6E35               	movwf	disk_ioctl@res^0,c
 13566   002136                     
 13567                           ;diskio.c: 471:  if (Stat & 0x01) return RES_NOTRDY;
 13568   002136  0100               	movlb	0	; () banked
 13569   002138  A1FD               	btfss	_Stat& (0+255),0,b
 13570   00213A  EFA1  F010         	goto	u5481
 13571   00213E  EFA3  F010         	goto	u5480
 13572   002142                     u5481:
 13573   002142  EF5B  F013         	goto	l4494
 13574   002146                     u5480:
 13575   002146                     
 13576                           ; BSR set to: 0
 13577   002146  0E03               	movlw	3
 13578   002148  EF81  F013         	goto	l228
 13579   00214C                     l4404:
 13580                           
 13581                           ; BSR set to: 0
 13582                           ;diskio.c: 475:   if (select()) res = RES_OK;
 13583   00214C  ECA8  F030         	call	_select	;wreg free
 13584   002150  0900               	iorlw	0
 13585   002152  B4D8               	btfsc	status,2,c
 13586   002154  EFAE  F010         	goto	u5491
 13587   002158  EFB0  F010         	goto	u5490
 13588   00215C                     u5491:
 13589   00215C  EF7E  F013         	goto	l4496
 13590   002160                     u5490:
 13591   002160                     l4406:
 13592   002160  6A35               	clrf	disk_ioctl@res^0,c
 13593   002162  EF7E  F013         	goto	l4496
 13594   002166                     l4408:
 13595                           
 13596                           ; BSR set to: 0
 13597                           ;diskio.c: 479:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 13598   002166  0E00               	movlw	0
 13599   002168  6E0B               	movwf	send_cmd@arg^0,c
 13600   00216A  0E00               	movlw	0
 13601   00216C  6E0C               	movwf	(send_cmd@arg+1)^0,c
 13602   00216E  0E00               	movlw	0
 13603   002170  6E0D               	movwf	(send_cmd@arg+2)^0,c
 13604   002172  0E00               	movlw	0
 13605   002174  6E0E               	movwf	(send_cmd@arg+3)^0,c
 13606   002176  0E09               	movlw	9
 13607   002178  EC02  F030         	call	_send_cmd
 13608   00217C  0900               	iorlw	0
 13609   00217E  A4D8               	btfss	status,2,c
 13610   002180  EFC4  F010         	goto	u5501
 13611   002184  EFC6  F010         	goto	u5500
 13612   002188                     u5501:
 13613   002188  EF7E  F013         	goto	l4496
 13614   00218C                     u5500:
 13615   00218C  0E20               	movlw	low disk_ioctl@csd
 13616   00218E  6E02               	movwf	rcvr_datablock@buff^0,c
 13617   002190  6A03               	clrf	(rcvr_datablock@buff+1)^0,c
 13618   002192  0E00               	movlw	0
 13619   002194  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 13620   002196  0E10               	movlw	16
 13621   002198  6E04               	movwf	rcvr_datablock@btr^0,c
 13622   00219A  ECA5  F02E         	call	_rcvr_datablock	;wreg free
 13623   00219E  0900               	iorlw	0
 13624   0021A0  B4D8               	btfsc	status,2,c
 13625   0021A2  EFD5  F010         	goto	u5511
 13626   0021A6  EFD7  F010         	goto	u5510
 13627   0021AA                     u5511:
 13628   0021AA  EF7E  F013         	goto	l4496
 13629   0021AE                     u5510:
 13630   0021AE                     
 13631                           ;diskio.c: 480:    if ((csd[0] >> 6) == 1) {
 13632   0021AE  4420               	rlncf	disk_ioctl@csd^0,w,c
 13633   0021B0  46E8               	rlncf	wreg,f,c
 13634   0021B2  0B03               	andlw	3
 13635   0021B4  06E8               	decf	wreg,f,c
 13636   0021B6  A4D8               	btfss	status,2,c
 13637   0021B8  EFE0  F010         	goto	u5521
 13638   0021BC  EFE2  F010         	goto	u5520
 13639   0021C0                     u5521:
 13640   0021C0  EF2C  F011         	goto	l4418
 13641   0021C4                     u5520:
 13642   0021C4                     
 13643                           ;diskio.c: 481:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 13644   0021C4  C027  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 13645   0021C8  0E3F               	movlw	63
 13646   0021CA  1614               	andwf	??_disk_ioctl^0,f,c
 13647   0021CC  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 13648   0021D0  6A16               	clrf	(??_disk_ioctl+2)^0,c
 13649   0021D2  6A17               	clrf	(??_disk_ioctl+3)^0,c
 13650   0021D4  6A18               	clrf	(??_disk_ioctl+4)^0,c
 13651   0021D6  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 13652   0021DA  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 13653   0021DE  6A16               	clrf	(??_disk_ioctl+2)^0,c
 13654   0021E0  6A15               	clrf	(??_disk_ioctl+1)^0,c
 13655   0021E2  5028               	movf	(disk_ioctl@csd+8)^0,w,c
 13656   0021E4  6E1A               	movwf	(??_disk_ioctl+6)^0,c
 13657   0021E6  5029               	movf	(disk_ioctl@csd+9)^0,w,c
 13658   0021E8  6E19               	movwf	(??_disk_ioctl+5)^0,c
 13659   0021EA  5019               	movf	(??_disk_ioctl+5)^0,w,c
 13660   0021EC  2415               	addwf	(??_disk_ioctl+1)^0,w,c
 13661   0021EE  6E1B               	movwf	(??_disk_ioctl+7)^0,c
 13662   0021F0  501A               	movf	(??_disk_ioctl+6)^0,w,c
 13663   0021F2  2016               	addwfc	(??_disk_ioctl+2)^0,w,c
 13664   0021F4  6E1C               	movwf	(??_disk_ioctl+8)^0,c
 13665   0021F6  0E00               	movlw	0
 13666   0021F8  2017               	addwfc	(??_disk_ioctl+3)^0,w,c
 13667   0021FA  6E1D               	movwf	(??_disk_ioctl+9)^0,c
 13668   0021FC  0E00               	movlw	0
 13669   0021FE  2018               	addwfc	(??_disk_ioctl+4)^0,w,c
 13670   002200  6E1E               	movwf	(??_disk_ioctl+10)^0,c
 13671   002202  0E01               	movlw	1
 13672   002204  241B               	addwf	(??_disk_ioctl+7)^0,w,c
 13673   002206  6E31               	movwf	disk_ioctl@csize^0,c
 13674   002208  0E00               	movlw	0
 13675   00220A  201C               	addwfc	(??_disk_ioctl+8)^0,w,c
 13676   00220C  6E32               	movwf	(disk_ioctl@csize+1)^0,c
 13677   00220E  0E00               	movlw	0
 13678   002210  201D               	addwfc	(??_disk_ioctl+9)^0,w,c
 13679   002212  6E33               	movwf	(disk_ioctl@csize+2)^0,c
 13680   002214  0E00               	movlw	0
 13681   002216  201E               	addwfc	(??_disk_ioctl+10)^0,w,c
 13682   002218  6E34               	movwf	(disk_ioctl@csize+3)^0,c
 13683   00221A                     
 13684                           ;diskio.c: 482:     *(DWORD*)buff = csize << 10;
 13685   00221A  C031  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 13686   00221E  C032  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 13687   002222  C033  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 13688   002226  C034  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 13689   00222A  0E0A               	movlw	10
 13690   00222C                     u5535:
 13691   00222C  90D8               	bcf	status,0,c
 13692   00222E  3614               	rlcf	??_disk_ioctl^0,f,c
 13693   002230  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 13694   002232  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 13695   002234  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 13696   002236  2EE8               	decfsz	wreg,f,c
 13697   002238  EF16  F011         	goto	u5535
 13698   00223C  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13699   002240  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13700   002244  C014  FFDE         	movff	??_disk_ioctl,postinc2
 13701   002248  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13702   00224C  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13703   002250  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13704                           
 13705                           ;diskio.c: 483:    } else {
 13706   002254  EFB0  F010         	goto	l4406
 13707   002258                     l4418:
 13708                           
 13709                           ;diskio.c: 484:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 13710   002258  6A14               	clrf	??_disk_ioctl^0,c
 13711   00225A  AE2A               	btfss	(disk_ioctl@csd+10)^0,7,c
 13712   00225C  D001               	bra	u5545
 13713   00225E  2A14               	incf	??_disk_ioctl^0,f,c
 13714   002260                     u5545:
 13715   002260  0E01               	movlw	1
 13716   002262  1614               	andwf	??_disk_ioctl^0,f,c
 13717   002264  C025  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 13718   002268  0E0F               	movlw	15
 13719   00226A  1615               	andwf	(??_disk_ioctl+1)^0,f,c
 13720   00226C  5029               	movf	(disk_ioctl@csd+9)^0,w,c
 13721   00226E  0B03               	andlw	3
 13722   002270  0D02               	mullw	2
 13723   002272  50F3               	movf	243,w,c
 13724   002274  2415               	addwf	(??_disk_ioctl+1)^0,w,c
 13725   002276  2414               	addwf	??_disk_ioctl^0,w,c
 13726   002278  0F02               	addlw	2
 13727   00227A  6E36               	movwf	disk_ioctl@n^0,c
 13728   00227C                     
 13729                           ;diskio.c: 485:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 13730   00227C  5026               	movf	(disk_ioctl@csd+6)^0,w,c
 13731   00227E  0B03               	andlw	3
 13732   002280  6E14               	movwf	??_disk_ioctl^0,c
 13733   002282  6A15               	clrf	(??_disk_ioctl+1)^0,c
 13734   002284  0E0A               	movlw	10
 13735   002286                     u5555:
 13736   002286  90D8               	bcf	status,0,c
 13737   002288  3614               	rlcf	??_disk_ioctl^0,f,c
 13738   00228A  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 13739   00228C  2EE8               	decfsz	wreg,f,c
 13740   00228E  EF43  F011         	goto	u5555
 13741   002292  5027               	movf	(disk_ioctl@csd+7)^0,w,c
 13742   002294  6E16               	movwf	(??_disk_ioctl+2)^0,c
 13743   002296  6A17               	clrf	(??_disk_ioctl+3)^0,c
 13744   002298  90D8               	bcf	status,0,c
 13745   00229A  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 13746   00229C  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 13747   00229E  90D8               	bcf	status,0,c
 13748   0022A0  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 13749   0022A2  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 13750   0022A4  C028  F018         	movff	disk_ioctl@csd+8,??_disk_ioctl+4
 13751   0022A8  0E06               	movlw	6
 13752   0022AA  6E19               	movwf	(??_disk_ioctl+5)^0,c
 13753   0022AC                     u5565:
 13754   0022AC  90D8               	bcf	status,0,c
 13755   0022AE  3218               	rrcf	(??_disk_ioctl+4)^0,f,c
 13756   0022B0  2E19               	decfsz	(??_disk_ioctl+5)^0,f,c
 13757   0022B2  EF56  F011         	goto	u5565
 13758   0022B6  5018               	movf	(??_disk_ioctl+4)^0,w,c
 13759   0022B8  2416               	addwf	(??_disk_ioctl+2)^0,w,c
 13760   0022BA  6E1A               	movwf	(??_disk_ioctl+6)^0,c
 13761   0022BC  0E00               	movlw	0
 13762   0022BE  2017               	addwfc	(??_disk_ioctl+3)^0,w,c
 13763   0022C0  6E1B               	movwf	(??_disk_ioctl+7)^0,c
 13764   0022C2  5014               	movf	??_disk_ioctl^0,w,c
 13765   0022C4  241A               	addwf	(??_disk_ioctl+6)^0,w,c
 13766   0022C6  6E1C               	movwf	(??_disk_ioctl+8)^0,c
 13767   0022C8  5015               	movf	(??_disk_ioctl+1)^0,w,c
 13768   0022CA  201B               	addwfc	(??_disk_ioctl+7)^0,w,c
 13769   0022CC  6E1D               	movwf	(??_disk_ioctl+9)^0,c
 13770   0022CE  0E01               	movlw	1
 13771   0022D0  261C               	addwf	(??_disk_ioctl+8)^0,f,c
 13772   0022D2  0E00               	movlw	0
 13773   0022D4  221D               	addwfc	(??_disk_ioctl+9)^0,f,c
 13774   0022D6  C01C  F031         	movff	??_disk_ioctl+8,disk_ioctl@csize
 13775   0022DA  C01D  F032         	movff	??_disk_ioctl+9,disk_ioctl@csize+1
 13776   0022DE  6A33               	clrf	(disk_ioctl@csize+2)^0,c
 13777   0022E0  6A34               	clrf	(disk_ioctl@csize+3)^0,c
 13778   0022E2                     
 13779                           ;diskio.c: 486:     *(DWORD*)buff = csize << (n - 9);
 13780   0022E2  C036  F014         	movff	disk_ioctl@n,??_disk_ioctl
 13781   0022E6  0EF7               	movlw	-9
 13782   0022E8  2614               	addwf	??_disk_ioctl^0,f,c
 13783   0022EA  C031  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 13784   0022EE  C032  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 13785   0022F2  C033  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 13786   0022F6  C034  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 13787   0022FA  2A14               	incf	??_disk_ioctl^0,f,c
 13788   0022FC  EF85  F011         	goto	u5570
 13789   002300                     u5575:
 13790   002300  90D8               	bcf	status,0,c
 13791   002302  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 13792   002304  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 13793   002306  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 13794   002308  3618               	rlcf	(??_disk_ioctl+4)^0,f,c
 13795   00230A                     u5570:
 13796   00230A  2E14               	decfsz	??_disk_ioctl^0,f,c
 13797   00230C  EF80  F011         	goto	u5575
 13798   002310  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13799   002314  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13800   002318  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13801   00231C  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13802   002320  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13803   002324  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 13804   002328  EFB0  F010         	goto	l4406
 13805   00232C                     l238:
 13806                           
 13807                           ; BSR set to: 0
 13808                           ;diskio.c: 493:   if (CardType & 0x04) {
 13809   00232C  A5FC               	btfss	_CardType& (0+255),2,b
 13810   00232E  EF9B  F011         	goto	u5581
 13811   002332  EF9D  F011         	goto	u5580
 13812   002336                     u5581:
 13813   002336  EFF7  F011         	goto	l4444
 13814   00233A                     u5580:
 13815   00233A                     
 13816                           ; BSR set to: 0
 13817                           ;diskio.c: 494:    if (send_cmd((0x80+13), 0) == 0) {
 13818   00233A  0E00               	movlw	0
 13819   00233C  6E0B               	movwf	send_cmd@arg^0,c
 13820   00233E  0E00               	movlw	0
 13821   002340  6E0C               	movwf	(send_cmd@arg+1)^0,c
 13822   002342  0E00               	movlw	0
 13823   002344  6E0D               	movwf	(send_cmd@arg+2)^0,c
 13824   002346  0E00               	movlw	0
 13825   002348  6E0E               	movwf	(send_cmd@arg+3)^0,c
 13826   00234A  0E8D               	movlw	141
 13827   00234C  EC02  F030         	call	_send_cmd
 13828   002350  0900               	iorlw	0
 13829   002352  A4D8               	btfss	status,2,c
 13830   002354  EFAE  F011         	goto	u5591
 13831   002358  EFB0  F011         	goto	u5590
 13832   00235C                     u5591:
 13833   00235C  EF7E  F013         	goto	l4496
 13834   002360                     u5590:
 13835   002360                     
 13836                           ;diskio.c: 495:     SPI_Exchange8bit(0xFF);
 13837   002360  0EFF               	movlw	255
 13838   002362  ECED  F030         	call	_SPI_Exchange8bit
 13839   002366                     
 13840                           ;diskio.c: 496:     if (rcvr_datablock(csd, 16)) {
 13841   002366  0E20               	movlw	low disk_ioctl@csd
 13842   002368  6E02               	movwf	rcvr_datablock@buff^0,c
 13843   00236A  6A03               	clrf	(rcvr_datablock@buff+1)^0,c
 13844   00236C  0E00               	movlw	0
 13845   00236E  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 13846   002370  0E10               	movlw	16
 13847   002372  6E04               	movwf	rcvr_datablock@btr^0,c
 13848   002374  ECA5  F02E         	call	_rcvr_datablock	;wreg free
 13849   002378  0900               	iorlw	0
 13850   00237A  B4D8               	btfsc	status,2,c
 13851   00237C  EFC2  F011         	goto	u5601
 13852   002380  EFC4  F011         	goto	u5600
 13853   002384                     u5601:
 13854   002384  EF7E  F013         	goto	l4496
 13855   002388                     u5600:
 13856   002388                     
 13857                           ;diskio.c: 497:      for (n = 64 - 16; n; n--) SPI_Exchange8bit(0xFF);
 13858   002388  0E30               	movlw	48
 13859   00238A  6E36               	movwf	disk_ioctl@n^0,c
 13860   00238C  EFCC  F011         	goto	l4438
 13861   002390                     l4434:
 13862   002390  0EFF               	movlw	255
 13863   002392  ECED  F030         	call	_SPI_Exchange8bit
 13864   002396  0636               	decf	disk_ioctl@n^0,f,c
 13865   002398                     l4438:
 13866   002398  5036               	movf	disk_ioctl@n^0,w,c
 13867   00239A  A4D8               	btfss	status,2,c
 13868   00239C  EFD2  F011         	goto	u5611
 13869   0023A0  EFD4  F011         	goto	u5610
 13870   0023A4                     u5611:
 13871   0023A4  EFC8  F011         	goto	l4434
 13872   0023A8                     u5610:
 13873   0023A8                     
 13874                           ;diskio.c: 498:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 13875   0023A8  C02A  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 13876   0023AC  3A14               	swapf	??_disk_ioctl^0,f,c
 13877   0023AE  0E0F               	movlw	15
 13878   0023B0  1614               	andwf	??_disk_ioctl^0,f,c
 13879   0023B2  0E10               	movlw	16
 13880   0023B4  6E15               	movwf	(??_disk_ioctl+1)^0,c
 13881   0023B6  6A16               	clrf	(??_disk_ioctl+2)^0,c
 13882   0023B8  6A17               	clrf	(??_disk_ioctl+3)^0,c
 13883   0023BA  6A18               	clrf	(??_disk_ioctl+4)^0,c
 13884   0023BC  2A14               	incf	??_disk_ioctl^0,f,c
 13885   0023BE  EFE6  F011         	goto	u5620
 13886   0023C2                     u5625:
 13887   0023C2  90D8               	bcf	status,0,c
 13888   0023C4  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 13889   0023C6  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 13890   0023C8  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 13891   0023CA  3618               	rlcf	(??_disk_ioctl+4)^0,f,c
 13892   0023CC                     u5620:
 13893   0023CC  2E14               	decfsz	??_disk_ioctl^0,f,c
 13894   0023CE  EFE1  F011         	goto	u5625
 13895   0023D2  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13896   0023D6  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13897   0023DA  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13898   0023DE  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13899   0023E2  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13900   0023E6  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 13901   0023EA  EFB0  F010         	goto	l4406
 13902   0023EE                     l4444:
 13903                           
 13904                           ; BSR set to: 0
 13905                           ;diskio.c: 503:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 13906   0023EE  0E00               	movlw	0
 13907   0023F0  6E0B               	movwf	send_cmd@arg^0,c
 13908   0023F2  0E00               	movlw	0
 13909   0023F4  6E0C               	movwf	(send_cmd@arg+1)^0,c
 13910   0023F6  0E00               	movlw	0
 13911   0023F8  6E0D               	movwf	(send_cmd@arg+2)^0,c
 13912   0023FA  0E00               	movlw	0
 13913   0023FC  6E0E               	movwf	(send_cmd@arg+3)^0,c
 13914   0023FE  0E09               	movlw	9
 13915   002400  EC02  F030         	call	_send_cmd
 13916   002404  0900               	iorlw	0
 13917   002406  A4D8               	btfss	status,2,c
 13918   002408  EF08  F012         	goto	u5631
 13919   00240C  EF0A  F012         	goto	u5630
 13920   002410                     u5631:
 13921   002410  EF7E  F013         	goto	l4496
 13922   002414                     u5630:
 13923   002414  0E20               	movlw	low disk_ioctl@csd
 13924   002416  6E02               	movwf	rcvr_datablock@buff^0,c
 13925   002418  6A03               	clrf	(rcvr_datablock@buff+1)^0,c
 13926   00241A  0E00               	movlw	0
 13927   00241C  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 13928   00241E  0E10               	movlw	16
 13929   002420  6E04               	movwf	rcvr_datablock@btr^0,c
 13930   002422  ECA5  F02E         	call	_rcvr_datablock	;wreg free
 13931   002426  0900               	iorlw	0
 13932   002428  B4D8               	btfsc	status,2,c
 13933   00242A  EF19  F012         	goto	u5641
 13934   00242E  EF1B  F012         	goto	u5640
 13935   002432                     u5641:
 13936   002432  EF7E  F013         	goto	l4496
 13937   002436                     u5640:
 13938   002436                     
 13939                           ;diskio.c: 504:     if (CardType & 0x02) {
 13940   002436  0100               	movlb	0	; () banked
 13941   002438  A3FC               	btfss	_CardType& (0+255),1,b
 13942   00243A  EF21  F012         	goto	u5651
 13943   00243E  EF23  F012         	goto	u5650
 13944   002442                     u5651:
 13945   002442  EF60  F012         	goto	l4452
 13946   002446                     u5650:
 13947   002446                     
 13948                           ; BSR set to: 0
 13949                           ;diskio.c: 505:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 13950   002446  C02D  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 13951   00244A  0E06               	movlw	6
 13952   00244C  6E15               	movwf	(??_disk_ioctl+1)^0,c
 13953   00244E                     u5665:
 13954   00244E  90D8               	bcf	status,0,c
 13955   002450  3214               	rrcf	??_disk_ioctl^0,f,c
 13956   002452  2E15               	decfsz	(??_disk_ioctl+1)^0,f,c
 13957   002454  EF27  F012         	goto	u5665
 13958   002458  0EFF               	movlw	-1
 13959   00245A  2614               	addwf	??_disk_ioctl^0,f,c
 13960   00245C  502A               	movf	(disk_ioctl@csd+10)^0,w,c
 13961   00245E  0B3F               	andlw	63
 13962   002460  6E16               	movwf	(??_disk_ioctl+2)^0,c
 13963   002462  6A17               	clrf	(??_disk_ioctl+3)^0,c
 13964   002464  90D8               	bcf	status,0,c
 13965   002466  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 13966   002468  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 13967   00246A  6A18               	clrf	(??_disk_ioctl+4)^0,c
 13968   00246C  AE2B               	btfss	(disk_ioctl@csd+11)^0,7,c
 13969   00246E  D001               	bra	u5675
 13970   002470  2A18               	incf	(??_disk_ioctl+4)^0,f,c
 13971   002472                     u5675:
 13972   002472  0E01               	movlw	1
 13973   002474  1618               	andwf	(??_disk_ioctl+4)^0,f,c
 13974   002476  5018               	movf	(??_disk_ioctl+4)^0,w,c
 13975   002478  2616               	addwf	(??_disk_ioctl+2)^0,f,c
 13976   00247A  0E00               	movlw	0
 13977   00247C  2217               	addwfc	(??_disk_ioctl+3)^0,f,c
 13978   00247E  0E01               	movlw	1
 13979   002480  2616               	addwf	(??_disk_ioctl+2)^0,f,c
 13980   002482  0E00               	movlw	0
 13981   002484  2217               	addwfc	(??_disk_ioctl+3)^0,f,c
 13982   002486  2A14               	incf	??_disk_ioctl^0,f,c
 13983   002488  EF49  F012         	goto	u5684
 13984   00248C                     u5685:
 13985   00248C  90D8               	bcf	status,0,c
 13986   00248E  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 13987   002490  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 13988   002492                     u5684:
 13989   002492  2E14               	decfsz	??_disk_ioctl^0,f,c
 13990   002494  EF46  F012         	goto	u5685
 13991   002498  5016               	movf	(??_disk_ioctl+2)^0,w,c
 13992   00249A  6E19               	movwf	(??_disk_ioctl+5)^0,c
 13993   00249C  5017               	movf	(??_disk_ioctl+3)^0,w,c
 13994   00249E  6E1A               	movwf	(??_disk_ioctl+6)^0,c
 13995   0024A0  6A1B               	clrf	(??_disk_ioctl+7)^0,c
 13996   0024A2  6A1C               	clrf	(??_disk_ioctl+8)^0,c
 13997   0024A4  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13998   0024A8  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13999   0024AC  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 14000   0024B0  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 14001   0024B4  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 14002   0024B8  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 14003                           
 14004                           ;diskio.c: 506:     } else {
 14005   0024BC  EFB0  F010         	goto	l4406
 14006   0024C0                     l4452:
 14007                           
 14008                           ; BSR set to: 0
 14009                           ;diskio.c: 507:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 14010   0024C0  502B               	movf	(disk_ioctl@csd+11)^0,w,c
 14011   0024C2  0B03               	andlw	3
 14012   0024C4  6E14               	movwf	??_disk_ioctl^0,c
 14013   0024C6  6A15               	clrf	(??_disk_ioctl+1)^0,c
 14014   0024C8  90D8               	bcf	status,0,c
 14015   0024CA  3614               	rlcf	??_disk_ioctl^0,f,c
 14016   0024CC  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 14017   0024CE  90D8               	bcf	status,0,c
 14018   0024D0  3614               	rlcf	??_disk_ioctl^0,f,c
 14019   0024D2  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 14020   0024D4  90D8               	bcf	status,0,c
 14021   0024D6  3614               	rlcf	??_disk_ioctl^0,f,c
 14022   0024D8  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 14023   0024DA  C02B  F016         	movff	disk_ioctl@csd+11,??_disk_ioctl+2
 14024   0024DE  0E05               	movlw	5
 14025   0024E0  6E17               	movwf	(??_disk_ioctl+3)^0,c
 14026   0024E2                     u5695:
 14027   0024E2  90D8               	bcf	status,0,c
 14028   0024E4  3216               	rrcf	(??_disk_ioctl+2)^0,f,c
 14029   0024E6  2E17               	decfsz	(??_disk_ioctl+3)^0,f,c
 14030   0024E8  EF71  F012         	goto	u5695
 14031   0024EC  0E07               	movlw	7
 14032   0024EE  1616               	andwf	(??_disk_ioctl+2)^0,f,c
 14033   0024F0  5016               	movf	(??_disk_ioctl+2)^0,w,c
 14034   0024F2  2614               	addwf	??_disk_ioctl^0,f,c
 14035   0024F4  0E00               	movlw	0
 14036   0024F6  2215               	addwfc	(??_disk_ioctl+1)^0,f,c
 14037   0024F8  0E01               	movlw	1
 14038   0024FA  2614               	addwf	??_disk_ioctl^0,f,c
 14039   0024FC  0E00               	movlw	0
 14040   0024FE  2215               	addwfc	(??_disk_ioctl+1)^0,f,c
 14041   002500  402A               	rrncf	(disk_ioctl@csd+10)^0,w,c
 14042   002502  42E8               	rrncf	wreg,f,c
 14043   002504  0B3F               	andlw	63
 14044   002506  0B1F               	andlw	31
 14045   002508  6E18               	movwf	(??_disk_ioctl+4)^0,c
 14046   00250A  6A19               	clrf	(??_disk_ioctl+5)^0,c
 14047   00250C  0E01               	movlw	1
 14048   00250E  2618               	addwf	(??_disk_ioctl+4)^0,f,c
 14049   002510  0E00               	movlw	0
 14050   002512  2219               	addwfc	(??_disk_ioctl+5)^0,f,c
 14051   002514  5014               	movf	??_disk_ioctl^0,w,c
 14052   002516  0218               	mulwf	(??_disk_ioctl+4)^0,c
 14053   002518  CFF3 F01A          	movff	prodl,??_disk_ioctl+6
 14054   00251C  CFF4 F01B          	movff	prodh,??_disk_ioctl+7
 14055   002520  0219               	mulwf	(??_disk_ioctl+5)^0,c
 14056   002522  50F3               	movf	prodl,w,c
 14057   002524  261B               	addwf	(??_disk_ioctl+7)^0,f,c
 14058   002526  5015               	movf	(??_disk_ioctl+1)^0,w,c
 14059   002528  0218               	mulwf	(??_disk_ioctl+4)^0,c
 14060   00252A  50F3               	movf	prodl,w,c
 14061   00252C  261B               	addwf	(??_disk_ioctl+7)^0,f,c
 14062   00252E  501A               	movf	(??_disk_ioctl+6)^0,w,c
 14063   002530  6E1C               	movwf	(??_disk_ioctl+8)^0,c
 14064   002532  501B               	movf	(??_disk_ioctl+7)^0,w,c
 14065   002534  6E1D               	movwf	(??_disk_ioctl+9)^0,c
 14066   002536  6A1E               	clrf	(??_disk_ioctl+10)^0,c
 14067   002538  6A1F               	clrf	(??_disk_ioctl+11)^0,c
 14068   00253A  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14069   00253E  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14070   002542  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 14071   002546  C01D  FFDE         	movff	??_disk_ioctl+9,postinc2
 14072   00254A  C01E  FFDE         	movff	??_disk_ioctl+10,postinc2
 14073   00254E  C01F  FFDE         	movff	??_disk_ioctl+11,postinc2
 14074   002552  EFB0  F010         	goto	l4406
 14075   002556                     l4456:
 14076                           
 14077                           ; BSR set to: 0
 14078                           ;diskio.c: 517:   *ptr = CardType;
 14079   002556  C037  FFD9         	movff	disk_ioctl@ptr,fsr2l
 14080   00255A  C038  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 14081   00255E  C0FC  FFDF         	movff	_CardType,indf2
 14082   002562  EFB0  F010         	goto	l4406
 14083   002566                     l4460:
 14084                           
 14085                           ; BSR set to: 0
 14086                           ;diskio.c: 522:   if (send_cmd((9), 0) == 0
 14087   002566  0E00               	movlw	0
 14088   002568  6E0B               	movwf	send_cmd@arg^0,c
 14089   00256A  0E00               	movlw	0
 14090   00256C  6E0C               	movwf	(send_cmd@arg+1)^0,c
 14091   00256E  0E00               	movlw	0
 14092   002570  6E0D               	movwf	(send_cmd@arg+2)^0,c
 14093   002572  0E00               	movlw	0
 14094   002574  6E0E               	movwf	(send_cmd@arg+3)^0,c
 14095   002576  0E09               	movlw	9
 14096   002578  EC02  F030         	call	_send_cmd
 14097   00257C  0900               	iorlw	0
 14098   00257E  A4D8               	btfss	status,2,c
 14099   002580  EFC4  F012         	goto	u5701
 14100   002584  EFC6  F012         	goto	u5700
 14101   002588                     u5701:
 14102   002588  EF7E  F013         	goto	l4496
 14103   00258C                     u5700:
 14104   00258C  C037  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 14105   002590  C038  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 14106   002594  0E00               	movlw	0
 14107   002596  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 14108   002598  0E10               	movlw	16
 14109   00259A  6E04               	movwf	rcvr_datablock@btr^0,c
 14110   00259C  ECA5  F02E         	call	_rcvr_datablock	;wreg free
 14111   0025A0  0900               	iorlw	0
 14112   0025A2  B4D8               	btfsc	status,2,c
 14113   0025A4  EFD6  F012         	goto	u5711
 14114   0025A8  EFD8  F012         	goto	u5710
 14115   0025AC                     u5711:
 14116   0025AC  EF7E  F013         	goto	l4496
 14117   0025B0                     u5710:
 14118   0025B0  EFB0  F010         	goto	l4406
 14119   0025B4                     l4466:
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;diskio.c: 528:   if (send_cmd((10), 0) == 0
 14123   0025B4  0E00               	movlw	0
 14124   0025B6  6E0B               	movwf	send_cmd@arg^0,c
 14125   0025B8  0E00               	movlw	0
 14126   0025BA  6E0C               	movwf	(send_cmd@arg+1)^0,c
 14127   0025BC  0E00               	movlw	0
 14128   0025BE  6E0D               	movwf	(send_cmd@arg+2)^0,c
 14129   0025C0  0E00               	movlw	0
 14130   0025C2  6E0E               	movwf	(send_cmd@arg+3)^0,c
 14131   0025C4  0E0A               	movlw	10
 14132   0025C6  EC02  F030         	call	_send_cmd
 14133   0025CA  0900               	iorlw	0
 14134   0025CC  A4D8               	btfss	status,2,c
 14135   0025CE  EFEB  F012         	goto	u5721
 14136   0025D2  EFED  F012         	goto	u5720
 14137   0025D6                     u5721:
 14138   0025D6  EF7E  F013         	goto	l4496
 14139   0025DA                     u5720:
 14140   0025DA  C037  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 14141   0025DE  C038  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 14142   0025E2  0E00               	movlw	0
 14143   0025E4  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 14144   0025E6  0E10               	movlw	16
 14145   0025E8  6E04               	movwf	rcvr_datablock@btr^0,c
 14146   0025EA  ECA5  F02E         	call	_rcvr_datablock	;wreg free
 14147   0025EE  0900               	iorlw	0
 14148   0025F0  B4D8               	btfsc	status,2,c
 14149   0025F2  EFFD  F012         	goto	u5731
 14150   0025F6  EFFF  F012         	goto	u5730
 14151   0025FA                     u5731:
 14152   0025FA  EF7E  F013         	goto	l4496
 14153   0025FE                     u5730:
 14154   0025FE  EFB0  F010         	goto	l4406
 14155   002602                     l4472:
 14156                           
 14157                           ; BSR set to: 0
 14158                           ;diskio.c: 534:   if (send_cmd((58), 0) == 0) {
 14159   002602  0E00               	movlw	0
 14160   002604  6E0B               	movwf	send_cmd@arg^0,c
 14161   002606  0E00               	movlw	0
 14162   002608  6E0C               	movwf	(send_cmd@arg+1)^0,c
 14163   00260A  0E00               	movlw	0
 14164   00260C  6E0D               	movwf	(send_cmd@arg+2)^0,c
 14165   00260E  0E00               	movlw	0
 14166   002610  6E0E               	movwf	(send_cmd@arg+3)^0,c
 14167   002612  0E3A               	movlw	58
 14168   002614  EC02  F030         	call	_send_cmd
 14169   002618  0900               	iorlw	0
 14170   00261A  A4D8               	btfss	status,2,c
 14171   00261C  EF12  F013         	goto	u5741
 14172   002620  EF14  F013         	goto	u5740
 14173   002624                     u5741:
 14174   002624  EF7E  F013         	goto	l4496
 14175   002628                     u5740:
 14176   002628                     
 14177                           ;diskio.c: 535:    for (n = 4; n; n--) *ptr++ = SPI_Exchange8bit(0xFF);
 14178   002628  0E04               	movlw	4
 14179   00262A  6E36               	movwf	disk_ioctl@n^0,c
 14180   00262C  EF23  F013         	goto	l4482
 14181   002630                     l4476:
 14182   002630  0EFF               	movlw	255
 14183   002632  ECED  F030         	call	_SPI_Exchange8bit
 14184   002636  C037  FFD9         	movff	disk_ioctl@ptr,fsr2l
 14185   00263A  C038  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 14186   00263E  6EDF               	movwf	indf2,c
 14187   002640  4A37               	infsnz	disk_ioctl@ptr^0,f,c
 14188   002642  2A38               	incf	(disk_ioctl@ptr+1)^0,f,c
 14189   002644  0636               	decf	disk_ioctl@n^0,f,c
 14190   002646                     l4482:
 14191   002646  5036               	movf	disk_ioctl@n^0,w,c
 14192   002648  A4D8               	btfss	status,2,c
 14193   00264A  EF29  F013         	goto	u5751
 14194   00264E  EF2B  F013         	goto	u5750
 14195   002652                     u5751:
 14196   002652  EF18  F013         	goto	l4476
 14197   002656                     u5750:
 14198   002656  EFB0  F010         	goto	l4406
 14199   00265A                     l4484:
 14200                           
 14201                           ; BSR set to: 0
 14202                           ;diskio.c: 541:   if (send_cmd((0x80+13), 0) == 0) {
 14203   00265A  0E00               	movlw	0
 14204   00265C  6E0B               	movwf	send_cmd@arg^0,c
 14205   00265E  0E00               	movlw	0
 14206   002660  6E0C               	movwf	(send_cmd@arg+1)^0,c
 14207   002662  0E00               	movlw	0
 14208   002664  6E0D               	movwf	(send_cmd@arg+2)^0,c
 14209   002666  0E00               	movlw	0
 14210   002668  6E0E               	movwf	(send_cmd@arg+3)^0,c
 14211   00266A  0E8D               	movlw	141
 14212   00266C  EC02  F030         	call	_send_cmd
 14213   002670  0900               	iorlw	0
 14214   002672  A4D8               	btfss	status,2,c
 14215   002674  EF3E  F013         	goto	u5761
 14216   002678  EF40  F013         	goto	u5760
 14217   00267C                     u5761:
 14218   00267C  EF7E  F013         	goto	l4496
 14219   002680                     u5760:
 14220   002680                     
 14221                           ;diskio.c: 542:    SPI_Exchange8bit(0xFF);
 14222   002680  0EFF               	movlw	255
 14223   002682  ECED  F030         	call	_SPI_Exchange8bit
 14224   002686                     
 14225                           ;diskio.c: 543:    if (rcvr_datablock(ptr, 64))
 14226   002686  C037  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 14227   00268A  C038  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 14228   00268E  0E00               	movlw	0
 14229   002690  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 14230   002692  0E40               	movlw	64
 14231   002694  6E04               	movwf	rcvr_datablock@btr^0,c
 14232   002696  ECA5  F02E         	call	_rcvr_datablock	;wreg free
 14233   00269A  0900               	iorlw	0
 14234   00269C  B4D8               	btfsc	status,2,c
 14235   00269E  EF53  F013         	goto	u5771
 14236   0026A2  EF55  F013         	goto	u5770
 14237   0026A6                     u5771:
 14238   0026A6  EF7E  F013         	goto	l4496
 14239   0026AA                     u5770:
 14240   0026AA  EFB0  F010         	goto	l4406
 14241   0026AE                     l4492:
 14242                           
 14243                           ; BSR set to: 0
 14244                           ;diskio.c: 549:   res = RES_PARERR;
 14245   0026AE  0E04               	movlw	4
 14246   0026B0  6E35               	movwf	disk_ioctl@res^0,c
 14247                           
 14248                           ;diskio.c: 550:  }
 14249   0026B2  EF7E  F013         	goto	l4496
 14250   0026B6                     l4494:
 14251                           
 14252                           ; BSR set to: 0
 14253   0026B6  5011               	movf	disk_ioctl@cmd^0,w,c
 14254                           
 14255                           ; Switch size 1, requested type "simple"
 14256                           ; Number of cases is 8, Range of values is 0 to 14
 14257                           ; switch strategies available:
 14258                           ; Name         Instructions Cycles
 14259                           ; simple_byte           25    13 (average)
 14260                           ;	Chosen strategy is simple_byte
 14261   0026B8  0A00               	xorlw	0	; case 0
 14262   0026BA  B4D8               	btfsc	status,2,c
 14263   0026BC  EFA6  F010         	goto	l4404
 14264   0026C0  0A01               	xorlw	1	; case 1
 14265   0026C2  B4D8               	btfsc	status,2,c
 14266   0026C4  EFB3  F010         	goto	l4408
 14267   0026C8  0A02               	xorlw	2	; case 3
 14268   0026CA  B4D8               	btfsc	status,2,c
 14269   0026CC  EF96  F011         	goto	l238
 14270   0026D0  0A09               	xorlw	9	; case 10
 14271   0026D2  B4D8               	btfsc	status,2,c
 14272   0026D4  EFAB  F012         	goto	l4456
 14273   0026D8  0A01               	xorlw	1	; case 11
 14274   0026DA  B4D8               	btfsc	status,2,c
 14275   0026DC  EFB3  F012         	goto	l4460
 14276   0026E0  0A07               	xorlw	7	; case 12
 14277   0026E2  B4D8               	btfsc	status,2,c
 14278   0026E4  EFDA  F012         	goto	l4466
 14279   0026E8  0A01               	xorlw	1	; case 13
 14280   0026EA  B4D8               	btfsc	status,2,c
 14281   0026EC  EF01  F013         	goto	l4472
 14282   0026F0  0A03               	xorlw	3	; case 14
 14283   0026F2  B4D8               	btfsc	status,2,c
 14284   0026F4  EF2D  F013         	goto	l4484
 14285   0026F8  EF57  F013         	goto	l4492
 14286   0026FC                     l4496:
 14287                           
 14288                           ;diskio.c: 552:  deselect();
 14289   0026FC  EC10  F031         	call	_deselect	;wreg free
 14290   002700                     
 14291                           ;diskio.c: 554:  return res;
 14292   002700  5035               	movf	disk_ioctl@res^0,w,c
 14293   002702                     l228:
 14294   002702  0012               	return		;funcret
 14295   002704                     __end_of_disk_ioctl:
 14296                           	callstack 0
 14297                           
 14298 ;; *************** function _st_clust *****************
 14299 ;; Defined at:
 14300 ;;		line 1252 in file "ff.c"
 14301 ;; Parameters:    Size  Location     Type
 14302 ;;  dir             2    0[COMRAM] PTR unsigned char 
 14303 ;;		 -> FatFs(558), NULL(0), 
 14304 ;;  cl              4    2[COMRAM] unsigned long 
 14305 ;; Auto vars:     Size  Location     Type
 14306 ;;		None
 14307 ;; Return value:  Size  Location     Type
 14308 ;;                  1    wreg      void 
 14309 ;; Registers used:
 14310 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14311 ;; Tracked objects:
 14312 ;;		On entry : 0/0
 14313 ;;		On exit  : 0/0
 14314 ;;		Unchanged: 0/0
 14315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14316 ;;      Params:         6       0       0       0       0       0       0
 14317 ;;      Locals:         0       0       0       0       0       0       0
 14318 ;;      Temps:          0       0       0       0       0       0       0
 14319 ;;      Totals:         6       0       0       0       0       0       0
 14320 ;;Total ram usage:        6 bytes
 14321 ;; Hardware stack levels used: 1
 14322 ;; This function calls:
 14323 ;;		Nothing
 14324 ;; This function is called by:
 14325 ;;		_f_open
 14326 ;;		_f_sync
 14327 ;; This function uses a non-reentrant model
 14328 ;;
 14329                           
 14330                           	psect	text36
 14331   006126                     __ptext36:
 14332                           	callstack 0
 14333   006126                     _st_clust:
 14334                           	callstack 29
 14335   006126                     
 14336                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 14337   006126  EE20 F01A          	lfsr	2,26
 14338   00612A  5001               	movf	st_clust@dir^0,w,c
 14339   00612C  26D9               	addwf	fsr2l,f,c
 14340   00612E  5002               	movf	(st_clust@dir+1)^0,w,c
 14341   006130  22DA               	addwfc	fsr2h,f,c
 14342   006132  C003  FFDE         	movff	st_clust@cl,postinc2
 14343   006136  C004  FFDD         	movff	st_clust@cl+1,postdec2
 14344                           
 14345                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 14346   00613A  EE20 F014          	lfsr	2,20
 14347   00613E  5001               	movf	st_clust@dir^0,w,c
 14348   006140  26D9               	addwf	fsr2l,f,c
 14349   006142  5002               	movf	(st_clust@dir+1)^0,w,c
 14350   006144  22DA               	addwfc	fsr2h,f,c
 14351   006146  C005  FFDE         	movff	st_clust@cl+2,postinc2
 14352   00614A  C006  FFDD         	movff	st_clust@cl+3,postdec2
 14353   00614E  0012               	return		;funcret
 14354   006150                     __end_of_st_clust:
 14355                           	callstack 0
 14356                           
 14357 ;; *************** function _move_window *****************
 14358 ;; Defined at:
 14359 ;;		line 729 in file "ff.c"
 14360 ;; Parameters:    Size  Location     Type
 14361 ;;  fs              2   47[COMRAM] PTR struct .
 14362 ;;		 -> FatFs(558), NULL(0), 
 14363 ;;  sector          4   49[COMRAM] unsigned long 
 14364 ;; Auto vars:     Size  Location     Type
 14365 ;;  res             1   57[COMRAM] enum E95
 14366 ;; Return value:  Size  Location     Type
 14367 ;;                  1    wreg      enum E95
 14368 ;; Registers used:
 14369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14370 ;; Tracked objects:
 14371 ;;		On entry : 0/0
 14372 ;;		On exit  : 0/0
 14373 ;;		Unchanged: 0/0
 14374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14375 ;;      Params:         6       0       0       0       0       0       0
 14376 ;;      Locals:         1       0       0       0       0       0       0
 14377 ;;      Temps:          4       0       0       0       0       0       0
 14378 ;;      Totals:        11       0       0       0       0       0       0
 14379 ;;Total ram usage:       11 bytes
 14380 ;; Hardware stack levels used: 1
 14381 ;; Hardware stack levels required when called: 7
 14382 ;; This function calls:
 14383 ;;		_disk_read
 14384 ;;		_sync_window
 14385 ;; This function is called by:
 14386 ;;		_get_fat
 14387 ;;		_put_fat
 14388 ;;		_dir_alloc
 14389 ;;		_dir_find
 14390 ;;		_dir_register
 14391 ;;		_check_fs
 14392 ;;		_find_volume
 14393 ;;		_f_open
 14394 ;;		_f_write
 14395 ;;		_f_sync
 14396 ;;		_f_read
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400                           	psect	text37
 14401   005A78                     __ptext37:
 14402                           	callstack 0
 14403   005A78                     _move_window:
 14404                           	callstack 22
 14405   005A78                     
 14406                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 14407   005A78  6A3A               	clrf	move_window@res^0,c
 14408   005A7A                     
 14409                           ;ff.c: 737:  if (sector != fs->winsect) {
 14410   005A7A  EE20 F02A          	lfsr	2,42
 14411   005A7E  5030               	movf	move_window@fs^0,w,c
 14412   005A80  26D9               	addwf	fsr2l,f,c
 14413   005A82  5031               	movf	(move_window@fs+1)^0,w,c
 14414   005A84  22DA               	addwfc	fsr2h,f,c
 14415   005A86  5032               	movf	move_window@sector^0,w,c
 14416   005A88  18DE               	xorwf	postinc2,w,c
 14417   005A8A  E10F               	bnz	u4990
 14418   005A8C  5033               	movf	(move_window@sector+1)^0,w,c
 14419   005A8E  18DE               	xorwf	postinc2,w,c
 14420   005A90  E10C               	bnz	u4990
 14421   005A92  5034               	movf	(move_window@sector+2)^0,w,c
 14422   005A94  18DE               	xorwf	postinc2,w,c
 14423   005A96  E109               	bnz	u4990
 14424   005A98  5035               	movf	(move_window@sector+3)^0,w,c
 14425   005A9A  18DE               	xorwf	postinc2,w,c
 14426   005A9C  B4D8               	btfsc	status,2,c
 14427   005A9E  EF53  F02D         	goto	u4991
 14428   005AA2  EF55  F02D         	goto	u4990
 14429   005AA6                     u4991:
 14430   005AA6  EF9B  F02D         	goto	l4132
 14431   005AAA                     u4990:
 14432   005AAA                     
 14433                           ;ff.c: 739:   res = sync_window(fs);
 14434   005AAA  C030  F01B         	movff	move_window@fs,sync_window@fs
 14435   005AAE  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 14436   005AB2  ECF3  F026         	call	_sync_window	;wreg free
 14437   005AB6  6E3A               	movwf	move_window@res^0,c
 14438   005AB8                     
 14439                           ;ff.c: 741:   if (res == FR_OK) {
 14440   005AB8  503A               	movf	move_window@res^0,w,c
 14441   005ABA  A4D8               	btfss	status,2,c
 14442   005ABC  EF62  F02D         	goto	u5001
 14443   005AC0  EF64  F02D         	goto	u5000
 14444   005AC4                     u5001:
 14445   005AC4  EF9B  F02D         	goto	l4132
 14446   005AC8                     u5000:
 14447   005AC8                     
 14448                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 14449   005AC8  0E2E               	movlw	46
 14450   005ACA  2430               	addwf	move_window@fs^0,w,c
 14451   005ACC  6E11               	movwf	disk_read@buff^0,c
 14452   005ACE  0E00               	movlw	0
 14453   005AD0  2031               	addwfc	(move_window@fs+1)^0,w,c
 14454   005AD2  6E12               	movwf	(disk_read@buff+1)^0,c
 14455   005AD4  C032  F013         	movff	move_window@sector,disk_read@sector
 14456   005AD8  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 14457   005ADC  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 14458   005AE0  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 14459   005AE4  0E00               	movlw	0
 14460   005AE6  6E18               	movwf	(disk_read@count+1)^0,c
 14461   005AE8  0E01               	movlw	1
 14462   005AEA  6E17               	movwf	disk_read@count^0,c
 14463   005AEC  EE20 F001          	lfsr	2,1
 14464   005AF0  5030               	movf	move_window@fs^0,w,c
 14465   005AF2  26D9               	addwf	fsr2l,f,c
 14466   005AF4  5031               	movf	(move_window@fs+1)^0,w,c
 14467   005AF6  22DA               	addwfc	fsr2h,f,c
 14468   005AF8  50DF               	movf	indf2,w,c
 14469   005AFA  EC63  F028         	call	_disk_read
 14470   005AFE  0900               	iorlw	0
 14471   005B00  B4D8               	btfsc	status,2,c
 14472   005B02  EF85  F02D         	goto	u5011
 14473   005B06  EF87  F02D         	goto	u5010
 14474   005B0A                     u5011:
 14475   005B0A  EF8D  F02D         	goto	l4130
 14476   005B0E                     u5010:
 14477   005B0E                     
 14478                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 14479   005B0E  6832               	setf	move_window@sector^0,c
 14480   005B10  6833               	setf	(move_window@sector+1)^0,c
 14481   005B12  6834               	setf	(move_window@sector+2)^0,c
 14482   005B14  6835               	setf	(move_window@sector+3)^0,c
 14483   005B16                     
 14484                           ;ff.c: 744:     res = FR_DISK_ERR;
 14485   005B16  0E01               	movlw	1
 14486   005B18  6E3A               	movwf	move_window@res^0,c
 14487   005B1A                     l4130:
 14488                           
 14489                           ;ff.c: 746:    fs->winsect = sector;
 14490   005B1A  EE20 F02A          	lfsr	2,42
 14491   005B1E  5030               	movf	move_window@fs^0,w,c
 14492   005B20  26D9               	addwf	fsr2l,f,c
 14493   005B22  5031               	movf	(move_window@fs+1)^0,w,c
 14494   005B24  22DA               	addwfc	fsr2h,f,c
 14495   005B26  C032  FFDE         	movff	move_window@sector,postinc2
 14496   005B2A  C033  FFDE         	movff	move_window@sector+1,postinc2
 14497   005B2E  C034  FFDE         	movff	move_window@sector+2,postinc2
 14498   005B32  C035  FFDE         	movff	move_window@sector+3,postinc2
 14499   005B36                     l4132:
 14500                           
 14501                           ;ff.c: 749:  return res;
 14502   005B36  503A               	movf	move_window@res^0,w,c
 14503   005B38  0012               	return		;funcret
 14504   005B3A                     __end_of_move_window:
 14505                           	callstack 0
 14506                           
 14507 ;; *************** function _sync_window *****************
 14508 ;; Defined at:
 14509 ;;		line 700 in file "ff.c"
 14510 ;; Parameters:    Size  Location     Type
 14511 ;;  fs              2   26[COMRAM] PTR struct .
 14512 ;;		 -> FatFs(558), NULL(0), 
 14513 ;; Auto vars:     Size  Location     Type
 14514 ;;  wsect           4   43[COMRAM] unsigned long 
 14515 ;;  nf              2   41[COMRAM] unsigned short 
 14516 ;;  res             1   40[COMRAM] enum E95
 14517 ;; Return value:  Size  Location     Type
 14518 ;;                  1    wreg      enum E95
 14519 ;; Registers used:
 14520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14521 ;; Tracked objects:
 14522 ;;		On entry : 0/0
 14523 ;;		On exit  : 0/0
 14524 ;;		Unchanged: 0/0
 14525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14526 ;;      Params:         2       0       0       0       0       0       0
 14527 ;;      Locals:         7       0       0       0       0       0       0
 14528 ;;      Temps:         12       0       0       0       0       0       0
 14529 ;;      Totals:        21       0       0       0       0       0       0
 14530 ;;Total ram usage:       21 bytes
 14531 ;; Hardware stack levels used: 1
 14532 ;; Hardware stack levels required when called: 6
 14533 ;; This function calls:
 14534 ;;		_disk_write
 14535 ;; This function is called by:
 14536 ;;		_move_window
 14537 ;;		_sync_fs
 14538 ;;		_dir_next
 14539 ;;		_f_write
 14540 ;; This function uses a non-reentrant model
 14541 ;;
 14542                           
 14543                           	psect	text38
 14544   004DE6                     __ptext38:
 14545                           	callstack 0
 14546   004DE6                     _sync_window:
 14547                           	callstack 23
 14548   004DE6                     
 14549                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 14550   004DE6  6A29               	clrf	sync_window@res^0,c
 14551   004DE8                     
 14552                           ;ff.c: 709:  if (fs->wflag) {
 14553   004DE8  EE20 F004          	lfsr	2,4
 14554   004DEC  501B               	movf	sync_window@fs^0,w,c
 14555   004DEE  26D9               	addwf	fsr2l,f,c
 14556   004DF0  501C               	movf	(sync_window@fs+1)^0,w,c
 14557   004DF2  22DA               	addwfc	fsr2h,f,c
 14558   004DF4  50DF               	movf	indf2,w,c
 14559   004DF6  B4D8               	btfsc	status,2,c
 14560   004DF8  EF00  F027         	goto	u4951
 14561   004DFC  EF02  F027         	goto	u4950
 14562   004E00                     u4951:
 14563   004E00  EFB3  F027         	goto	l4112
 14564   004E04                     u4950:
 14565   004E04                     
 14566                           ;ff.c: 710:   wsect = fs->winsect;
 14567   004E04  EE20 F02A          	lfsr	2,42
 14568   004E08  501B               	movf	sync_window@fs^0,w,c
 14569   004E0A  26D9               	addwf	fsr2l,f,c
 14570   004E0C  501C               	movf	(sync_window@fs+1)^0,w,c
 14571   004E0E  22DA               	addwfc	fsr2h,f,c
 14572   004E10  CFDE F02C          	movff	postinc2,sync_window@wsect
 14573   004E14  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 14574   004E18  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 14575   004E1C  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 14576   004E20                     
 14577                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 14578   004E20  0E2E               	movlw	46
 14579   004E22  241B               	addwf	sync_window@fs^0,w,c
 14580   004E24  6E11               	movwf	disk_write@buff^0,c
 14581   004E26  0E00               	movlw	0
 14582   004E28  201C               	addwfc	(sync_window@fs+1)^0,w,c
 14583   004E2A  6E12               	movwf	(disk_write@buff+1)^0,c
 14584   004E2C  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 14585   004E30  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 14586   004E34  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 14587   004E38  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 14588   004E3C  0E00               	movlw	0
 14589   004E3E  6E18               	movwf	(disk_write@count+1)^0,c
 14590   004E40  0E01               	movlw	1
 14591   004E42  6E17               	movwf	disk_write@count^0,c
 14592   004E44  EE20 F001          	lfsr	2,1
 14593   004E48  501B               	movf	sync_window@fs^0,w,c
 14594   004E4A  26D9               	addwf	fsr2l,f,c
 14595   004E4C  501C               	movf	(sync_window@fs+1)^0,w,c
 14596   004E4E  22DA               	addwfc	fsr2h,f,c
 14597   004E50  50DF               	movf	indf2,w,c
 14598   004E52  EC84  F024         	call	_disk_write
 14599   004E56  0900               	iorlw	0
 14600   004E58  B4D8               	btfsc	status,2,c
 14601   004E5A  EF31  F027         	goto	u4961
 14602   004E5E  EF33  F027         	goto	u4960
 14603   004E62                     u4961:
 14604   004E62  EF37  F027         	goto	l4094
 14605   004E66                     u4960:
 14606   004E66                     
 14607                           ;ff.c: 712:    res = FR_DISK_ERR;
 14608   004E66  0E01               	movlw	1
 14609   004E68  6E29               	movwf	sync_window@res^0,c
 14610                           
 14611                           ;ff.c: 713:   } else {
 14612   004E6A  EFB3  F027         	goto	l4112
 14613   004E6E                     l4094:
 14614                           
 14615                           ;ff.c: 714:    fs->wflag = 0;
 14616   004E6E  EE20 F004          	lfsr	2,4
 14617   004E72  501B               	movf	sync_window@fs^0,w,c
 14618   004E74  26D9               	addwf	fsr2l,f,c
 14619   004E76  501C               	movf	(sync_window@fs+1)^0,w,c
 14620   004E78  22DA               	addwfc	fsr2h,f,c
 14621   004E7A  6ADF               	clrf	indf2,c
 14622   004E7C                     
 14623                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 14624   004E7C  EE20 F016          	lfsr	2,22
 14625   004E80  501B               	movf	sync_window@fs^0,w,c
 14626   004E82  26D9               	addwf	fsr2l,f,c
 14627   004E84  501C               	movf	(sync_window@fs+1)^0,w,c
 14628   004E86  22DA               	addwfc	fsr2h,f,c
 14629   004E88  EE10 F01E          	lfsr	1,30
 14630   004E8C  501B               	movf	sync_window@fs^0,w,c
 14631   004E8E  26E1               	addwf	fsr1l,f,c
 14632   004E90  501C               	movf	(sync_window@fs+1)^0,w,c
 14633   004E92  22E2               	addwfc	fsr1h,f,c
 14634   004E94  CFE6 F021          	movff	postinc1,??_sync_window+4
 14635   004E98  CFE6 F022          	movff	postinc1,??_sync_window+5
 14636   004E9C  CFE6 F023          	movff	postinc1,??_sync_window+6
 14637   004EA0  CFE6 F024          	movff	postinc1,??_sync_window+7
 14638   004EA4  5021               	movf	(??_sync_window+4)^0,w,c
 14639   004EA6  5C2C               	subwf	sync_window@wsect^0,w,c
 14640   004EA8  6E25               	movwf	(??_sync_window+8)^0,c
 14641   004EAA  5022               	movf	(??_sync_window+5)^0,w,c
 14642   004EAC  582D               	subwfb	(sync_window@wsect+1)^0,w,c
 14643   004EAE  6E26               	movwf	(??_sync_window+9)^0,c
 14644   004EB0  5023               	movf	(??_sync_window+6)^0,w,c
 14645   004EB2  582E               	subwfb	(sync_window@wsect+2)^0,w,c
 14646   004EB4  6E27               	movwf	(??_sync_window+10)^0,c
 14647   004EB6  5024               	movf	(??_sync_window+7)^0,w,c
 14648   004EB8  582F               	subwfb	(sync_window@wsect+3)^0,w,c
 14649   004EBA  6E28               	movwf	(??_sync_window+11)^0,c
 14650   004EBC  50DE               	movf	postinc2,w,c
 14651   004EBE  5C25               	subwf	(??_sync_window+8)^0,w,c
 14652   004EC0  50DE               	movf	postinc2,w,c
 14653   004EC2  5826               	subwfb	(??_sync_window+9)^0,w,c
 14654   004EC4  50DE               	movf	postinc2,w,c
 14655   004EC6  5827               	subwfb	(??_sync_window+10)^0,w,c
 14656   004EC8  50DE               	movf	postinc2,w,c
 14657   004ECA  5828               	subwfb	(??_sync_window+11)^0,w,c
 14658   004ECC  B0D8               	btfsc	status,0,c
 14659   004ECE  EF6B  F027         	goto	u4971
 14660   004ED2  EF6D  F027         	goto	u4970
 14661   004ED6                     u4971:
 14662   004ED6  EFB3  F027         	goto	l4112
 14663   004EDA                     u4970:
 14664   004EDA                     
 14665                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 14666   004EDA  EE20 F003          	lfsr	2,3
 14667   004EDE  501B               	movf	sync_window@fs^0,w,c
 14668   004EE0  26D9               	addwf	fsr2l,f,c
 14669   004EE2  501C               	movf	(sync_window@fs+1)^0,w,c
 14670   004EE4  22DA               	addwfc	fsr2h,f,c
 14671   004EE6  50DF               	movf	indf2,w,c
 14672   004EE8  6E1D               	movwf	??_sync_window^0,c
 14673   004EEA  501D               	movf	??_sync_window^0,w,c
 14674   004EEC  6E2A               	movwf	sync_window@nf^0,c
 14675   004EEE  6A2B               	clrf	(sync_window@nf+1)^0,c
 14676   004EF0                     l4100:
 14677   004EF0  502B               	movf	(sync_window@nf+1)^0,w,c
 14678   004EF2  E107               	bnz	u4981
 14679   004EF4  0E02               	movlw	2
 14680   004EF6  5C2A               	subwf	sync_window@nf^0,w,c
 14681   004EF8  B0D8               	btfsc	status,0,c
 14682   004EFA  EF81  F027         	goto	u4981
 14683   004EFE  EF83  F027         	goto	u4980
 14684   004F02                     u4981:
 14685   004F02  EF85  F027         	goto	l4104
 14686   004F06                     u4980:
 14687   004F06  EFB3  F027         	goto	l4112
 14688   004F0A                     l4104:
 14689                           
 14690                           ;ff.c: 717:      wsect += fs->fsize;
 14691   004F0A  EE20 F016          	lfsr	2,22
 14692   004F0E  501B               	movf	sync_window@fs^0,w,c
 14693   004F10  26D9               	addwf	fsr2l,f,c
 14694   004F12  501C               	movf	(sync_window@fs+1)^0,w,c
 14695   004F14  22DA               	addwfc	fsr2h,f,c
 14696   004F16  50DE               	movf	postinc2,w,c
 14697   004F18  262C               	addwf	sync_window@wsect^0,f,c
 14698   004F1A  50DE               	movf	postinc2,w,c
 14699   004F1C  222D               	addwfc	(sync_window@wsect+1)^0,f,c
 14700   004F1E  50DE               	movf	postinc2,w,c
 14701   004F20  222E               	addwfc	(sync_window@wsect+2)^0,f,c
 14702   004F22  50DD               	movf	postdec2,w,c
 14703   004F24  222F               	addwfc	(sync_window@wsect+3)^0,f,c
 14704   004F26                     
 14705                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 14706   004F26  0E2E               	movlw	46
 14707   004F28  241B               	addwf	sync_window@fs^0,w,c
 14708   004F2A  6E11               	movwf	disk_write@buff^0,c
 14709   004F2C  0E00               	movlw	0
 14710   004F2E  201C               	addwfc	(sync_window@fs+1)^0,w,c
 14711   004F30  6E12               	movwf	(disk_write@buff+1)^0,c
 14712   004F32  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 14713   004F36  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 14714   004F3A  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 14715   004F3E  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 14716   004F42  0E00               	movlw	0
 14717   004F44  6E18               	movwf	(disk_write@count+1)^0,c
 14718   004F46  0E01               	movlw	1
 14719   004F48  6E17               	movwf	disk_write@count^0,c
 14720   004F4A  EE20 F001          	lfsr	2,1
 14721   004F4E  501B               	movf	sync_window@fs^0,w,c
 14722   004F50  26D9               	addwf	fsr2l,f,c
 14723   004F52  501C               	movf	(sync_window@fs+1)^0,w,c
 14724   004F54  22DA               	addwfc	fsr2h,f,c
 14725   004F56  50DF               	movf	indf2,w,c
 14726   004F58  EC84  F024         	call	_disk_write
 14727   004F5C                     
 14728                           ;ff.c: 719:     }
 14729   004F5C  062A               	decf	sync_window@nf^0,f,c
 14730   004F5E  A0D8               	btfss	status,0,c
 14731   004F60  062B               	decf	(sync_window@nf+1)^0,f,c
 14732   004F62  EF78  F027         	goto	l4100
 14733   004F66                     l4112:
 14734                           
 14735                           ;ff.c: 723:  return res;
 14736   004F66  5029               	movf	sync_window@res^0,w,c
 14737   004F68  0012               	return		;funcret
 14738   004F6A                     __end_of_sync_window:
 14739                           	callstack 0
 14740                           
 14741 ;; *************** function _disk_write *****************
 14742 ;; Defined at:
 14743 ;;		line 415 in file "diskio.c"
 14744 ;; Parameters:    Size  Location     Type
 14745 ;;  pdrv            1    wreg     unsigned char 
 14746 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 14747 ;;		 -> STR_6(15), STR_5(15), FatFs(558), FatFs$win(512), 
 14748 ;;		 -> NULL(0), 
 14749 ;;  sector          4   18[COMRAM] unsigned long 
 14750 ;;  count           2   22[COMRAM] unsigned short 
 14751 ;; Auto vars:     Size  Location     Type
 14752 ;;  pdrv            1   25[COMRAM] unsigned char 
 14753 ;; Return value:  Size  Location     Type
 14754 ;;                  1    wreg      enum E45
 14755 ;; Registers used:
 14756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14757 ;; Tracked objects:
 14758 ;;		On entry : 0/0
 14759 ;;		On exit  : 0/0
 14760 ;;		Unchanged: 0/0
 14761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14762 ;;      Params:         8       0       0       0       0       0       0
 14763 ;;      Locals:         1       0       0       0       0       0       0
 14764 ;;      Temps:          1       0       0       0       0       0       0
 14765 ;;      Totals:        10       0       0       0       0       0       0
 14766 ;;Total ram usage:       10 bytes
 14767 ;; Hardware stack levels used: 1
 14768 ;; Hardware stack levels required when called: 5
 14769 ;; This function calls:
 14770 ;;		_deselect
 14771 ;;		_send_cmd
 14772 ;;		_xmit_datablock
 14773 ;; This function is called by:
 14774 ;;		_sync_window
 14775 ;;		_sync_fs
 14776 ;;		_f_write
 14777 ;; This function uses a non-reentrant model
 14778 ;;
 14779                           
 14780                           	psect	text39
 14781   004908                     __ptext39:
 14782                           	callstack 0
 14783   004908                     _disk_write:
 14784                           	callstack 23
 14785                           
 14786                           ;incstack = 0
 14787                           ;disk_write@pdrv stored from wreg
 14788   004908  6E1A               	movwf	disk_write@pdrv^0,c
 14789   00490A                     
 14790                           ;diskio.c: 416:  BYTE pdrv,;diskio.c: 417:  const BYTE *buff,;diskio.c: 418:  DWORD sect
      +                          or,;diskio.c: 419:  UINT count;diskio.c: 421: {;diskio.c: 422:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 14791   00490A  501A               	movf	disk_write@pdrv^0,w,c
 14792   00490C  A4D8               	btfss	status,2,c
 14793   00490E  EF8B  F024         	goto	u4671
 14794   004912  EF8D  F024         	goto	u4670
 14795   004916                     u4671:
 14796   004916  EF96  F024         	goto	l4006
 14797   00491A                     u4670:
 14798   00491A  5017               	movf	disk_write@count^0,w,c
 14799   00491C  1018               	iorwf	(disk_write@count+1)^0,w,c
 14800   00491E  A4D8               	btfss	status,2,c
 14801   004920  EF94  F024         	goto	u4681
 14802   004924  EF96  F024         	goto	u4680
 14803   004928                     u4681:
 14804   004928  EF99  F024         	goto	l209
 14805   00492C                     u4680:
 14806   00492C                     l4006:
 14807   00492C  0E04               	movlw	4
 14808   00492E  EF58  F025         	goto	l212
 14809   004932                     l209:
 14810                           
 14811                           ;diskio.c: 423:  if (Stat & 0x01) return RES_NOTRDY;
 14812   004932  0100               	movlb	0	; () banked
 14813   004934  A1FD               	btfss	_Stat& (0+255),0,b
 14814   004936  EF9F  F024         	goto	u4691
 14815   00493A  EFA1  F024         	goto	u4690
 14816   00493E                     u4691:
 14817   00493E  EFA4  F024         	goto	l213
 14818   004942                     u4690:
 14819   004942                     
 14820                           ; BSR set to: 0
 14821   004942  0E03               	movlw	3
 14822   004944  EF58  F025         	goto	l212
 14823   004948                     l213:
 14824                           
 14825                           ; BSR set to: 0
 14826                           ;diskio.c: 424:  if (Stat & 0x04) return RES_WRPRT;
 14827   004948  A5FD               	btfss	_Stat& (0+255),2,b
 14828   00494A  EFA9  F024         	goto	u4701
 14829   00494E  EFAB  F024         	goto	u4700
 14830   004952                     u4701:
 14831   004952  EFAE  F024         	goto	l214
 14832   004956                     u4700:
 14833   004956                     
 14834                           ; BSR set to: 0
 14835   004956  0E02               	movlw	2
 14836   004958  EF58  F025         	goto	l212
 14837   00495C                     l214:
 14838                           
 14839                           ; BSR set to: 0
 14840                           ;diskio.c: 426:  if (!(CardType & 0x08)) sector *= 512;
 14841   00495C  B7FC               	btfsc	_CardType& (0+255),3,b
 14842   00495E  EFB3  F024         	goto	u4711
 14843   004962  EFB5  F024         	goto	u4710
 14844   004966                     u4711:
 14845   004966  EFBE  F024         	goto	l215
 14846   00496A                     u4710:
 14847   00496A                     
 14848                           ; BSR set to: 0
 14849   00496A  0E09               	movlw	9
 14850   00496C                     u4725:
 14851   00496C  90D8               	bcf	status,0,c
 14852   00496E  3613               	rlcf	disk_write@sector^0,f,c
 14853   004970  3614               	rlcf	(disk_write@sector+1)^0,f,c
 14854   004972  3615               	rlcf	(disk_write@sector+2)^0,f,c
 14855   004974  3616               	rlcf	(disk_write@sector+3)^0,f,c
 14856   004976  2EE8               	decfsz	wreg,f,c
 14857   004978  EFB6  F024         	goto	u4725
 14858   00497C                     l215:
 14859                           
 14860                           ; BSR set to: 0
 14861                           ;diskio.c: 428:  if (count == 1) {
 14862   00497C  0417               	decf	disk_write@count^0,w,c
 14863   00497E  1018               	iorwf	(disk_write@count+1)^0,w,c
 14864   004980  A4D8               	btfss	status,2,c
 14865   004982  EFC5  F024         	goto	u4731
 14866   004986  EFC7  F024         	goto	u4730
 14867   00498A                     u4731:
 14868   00498A  EFF0  F024         	goto	l4026
 14869   00498E                     u4730:
 14870   00498E                     
 14871                           ; BSR set to: 0
 14872                           ;diskio.c: 429:   if ((send_cmd((24), sector) == 0)
 14873   00498E  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 14874   004992  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 14875   004996  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 14876   00499A  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 14877   00499E  0E18               	movlw	24
 14878   0049A0  EC02  F030         	call	_send_cmd
 14879   0049A4  0900               	iorlw	0
 14880   0049A6  A4D8               	btfss	status,2,c
 14881   0049A8  EFD8  F024         	goto	u4741
 14882   0049AC  EFDA  F024         	goto	u4740
 14883   0049B0                     u4741:
 14884   0049B0  EF4B  F025         	goto	l4040
 14885   0049B4                     u4740:
 14886   0049B4  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 14887   0049B8  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 14888   0049BC  0EFE               	movlw	254
 14889   0049BE  6E06               	movwf	xmit_datablock@token^0,c
 14890   0049C0  ECFE  F02D         	call	_xmit_datablock	;wreg free
 14891   0049C4  0900               	iorlw	0
 14892   0049C6  B4D8               	btfsc	status,2,c
 14893   0049C8  EFE8  F024         	goto	u4751
 14894   0049CC  EFEA  F024         	goto	u4750
 14895   0049D0                     u4751:
 14896   0049D0  EF4B  F025         	goto	l4040
 14897   0049D4                     u4750:
 14898   0049D4                     
 14899                           ;diskio.c: 431:    count = 0;
 14900   0049D4  0E00               	movlw	0
 14901   0049D6  6E18               	movwf	(disk_write@count+1)^0,c
 14902   0049D8  0E00               	movlw	0
 14903   0049DA  6E17               	movwf	disk_write@count^0,c
 14904   0049DC  EF4B  F025         	goto	l4040
 14905   0049E0                     l4026:
 14906                           
 14907                           ; BSR set to: 0
 14908                           ;diskio.c: 434:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 14909   0049E0  C0FC  F019         	movff	_CardType,??_disk_write
 14910   0049E4  0E06               	movlw	6
 14911   0049E6  1619               	andwf	??_disk_write^0,f,c
 14912   0049E8  B4D8               	btfsc	status,2,c
 14913   0049EA  EFF9  F024         	goto	u4761
 14914   0049EE  EFFB  F024         	goto	u4760
 14915   0049F2                     u4761:
 14916   0049F2  EF04  F025         	goto	l219
 14917   0049F6                     u4760:
 14918   0049F6                     
 14919                           ; BSR set to: 0
 14920   0049F6  C017  F00B         	movff	disk_write@count,send_cmd@arg
 14921   0049FA  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 14922   0049FE  6A0D               	clrf	(send_cmd@arg+2)^0,c
 14923   004A00  6A0E               	clrf	(send_cmd@arg+3)^0,c
 14924   004A02  0E97               	movlw	151
 14925   004A04  EC02  F030         	call	_send_cmd
 14926   004A08                     l219:
 14927                           
 14928                           ;diskio.c: 435:   if (send_cmd((25), sector) == 0) {
 14929   004A08  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 14930   004A0C  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 14931   004A10  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 14932   004A14  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 14933   004A18  0E19               	movlw	25
 14934   004A1A  EC02  F030         	call	_send_cmd
 14935   004A1E  0900               	iorlw	0
 14936   004A20  A4D8               	btfss	status,2,c
 14937   004A22  EF15  F025         	goto	u4771
 14938   004A26  EF17  F025         	goto	u4770
 14939   004A2A                     u4771:
 14940   004A2A  EF4B  F025         	goto	l4040
 14941   004A2E                     u4770:
 14942   004A2E                     l4030:
 14943                           
 14944                           ;diskio.c: 437:     if (!xmit_datablock(buff, 0xFC)) break;
 14945   004A2E  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 14946   004A32  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 14947   004A36  0EFC               	movlw	252
 14948   004A38  6E06               	movwf	xmit_datablock@token^0,c
 14949   004A3A  ECFE  F02D         	call	_xmit_datablock	;wreg free
 14950   004A3E  0900               	iorlw	0
 14951   004A40  A4D8               	btfss	status,2,c
 14952   004A42  EF25  F025         	goto	u4781
 14953   004A46  EF27  F025         	goto	u4780
 14954   004A4A                     u4781:
 14955   004A4A  EF29  F025         	goto	l4034
 14956   004A4E                     u4780:
 14957   004A4E  EF37  F025         	goto	l4036
 14958   004A52                     l4034:
 14959                           
 14960                           ;diskio.c: 438:     buff += 512;
 14961   004A52  0E02               	movlw	2
 14962   004A54  2612               	addwf	(disk_write@buff+1)^0,f,c
 14963                           
 14964                           ;diskio.c: 439:    } while (--count);
 14965   004A56  0617               	decf	disk_write@count^0,f,c
 14966   004A58  A0D8               	btfss	status,0,c
 14967   004A5A  0618               	decf	(disk_write@count+1)^0,f,c
 14968   004A5C  5017               	movf	disk_write@count^0,w,c
 14969   004A5E  1018               	iorwf	(disk_write@count+1)^0,w,c
 14970   004A60  A4D8               	btfss	status,2,c
 14971   004A62  EF35  F025         	goto	u4791
 14972   004A66  EF37  F025         	goto	u4790
 14973   004A6A                     u4791:
 14974   004A6A  EF17  F025         	goto	l4030
 14975   004A6E                     u4790:
 14976   004A6E                     l4036:
 14977                           
 14978                           ;diskio.c: 440:    if (!xmit_datablock(0, 0xFD))
 14979   004A6E  0E00               	movlw	0
 14980   004A70  6E04               	movwf	xmit_datablock@buff^0,c
 14981   004A72  0E00               	movlw	0
 14982   004A74  6E05               	movwf	(xmit_datablock@buff+1)^0,c
 14983   004A76  0EFD               	movlw	253
 14984   004A78  6E06               	movwf	xmit_datablock@token^0,c
 14985   004A7A  ECFE  F02D         	call	_xmit_datablock	;wreg free
 14986   004A7E  0900               	iorlw	0
 14987   004A80  A4D8               	btfss	status,2,c
 14988   004A82  EF45  F025         	goto	u4801
 14989   004A86  EF47  F025         	goto	u4800
 14990   004A8A                     u4801:
 14991   004A8A  EF4B  F025         	goto	l4040
 14992   004A8E                     u4800:
 14993   004A8E                     
 14994                           ;diskio.c: 441:     count = 1;
 14995   004A8E  0E00               	movlw	0
 14996   004A90  6E18               	movwf	(disk_write@count+1)^0,c
 14997   004A92  0E01               	movlw	1
 14998   004A94  6E17               	movwf	disk_write@count^0,c
 14999   004A96                     l4040:
 15000                           
 15001                           ;diskio.c: 444:  deselect();
 15002   004A96  EC10  F031         	call	_deselect	;wreg free
 15003   004A9A                     
 15004                           ;diskio.c: 446:  return count ? RES_ERROR : RES_OK;
 15005   004A9A  5017               	movf	disk_write@count^0,w,c
 15006   004A9C  1018               	iorwf	(disk_write@count+1)^0,w,c
 15007   004A9E  A4D8               	btfss	status,2,c
 15008   004AA0  EF54  F025         	goto	u4811
 15009   004AA4  EF57  F025         	goto	u4810
 15010   004AA8                     u4811:
 15011   004AA8  0E01               	movlw	1
 15012   004AAA  EF58  F025         	goto	u4820
 15013   004AAE                     u4810:
 15014   004AAE  0E00               	movlw	0
 15015   004AB0                     u4820:
 15016   004AB0                     l212:
 15017   004AB0  0012               	return		;funcret
 15018   004AB2                     __end_of_disk_write:
 15019                           	callstack 0
 15020                           
 15021 ;; *************** function _xmit_datablock *****************
 15022 ;; Defined at:
 15023 ;;		line 165 in file "diskio.c"
 15024 ;; Parameters:    Size  Location     Type
 15025 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 15026 ;;		 -> STR_6(15), STR_5(15), FatFs(558), FatFs$win(512), 
 15027 ;;		 -> NULL(0), 
 15028 ;;  token           1    5[COMRAM] unsigned char 
 15029 ;; Auto vars:     Size  Location     Type
 15030 ;;  i               2    6[COMRAM] unsigned short 
 15031 ;;  resp            1    8[COMRAM] unsigned char 
 15032 ;; Return value:  Size  Location     Type
 15033 ;;                  1    wreg      unsigned char 
 15034 ;; Registers used:
 15035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15036 ;; Tracked objects:
 15037 ;;		On entry : 0/0
 15038 ;;		On exit  : 0/0
 15039 ;;		Unchanged: 0/0
 15040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15041 ;;      Params:         3       0       0       0       0       0       0
 15042 ;;      Locals:         3       0       0       0       0       0       0
 15043 ;;      Temps:          0       0       0       0       0       0       0
 15044 ;;      Totals:         6       0       0       0       0       0       0
 15045 ;;Total ram usage:        6 bytes
 15046 ;; Hardware stack levels used: 1
 15047 ;; Hardware stack levels required when called: 2
 15048 ;; This function calls:
 15049 ;;		_SPI_Exchange8bit
 15050 ;;		_wait_ready
 15051 ;; This function is called by:
 15052 ;;		_disk_write
 15053 ;; This function uses a non-reentrant model
 15054 ;;
 15055                           
 15056                           	psect	text40
 15057   005BFC                     __ptext40:
 15058                           	callstack 0
 15059   005BFC                     _xmit_datablock:
 15060                           	callstack 25
 15061   005BFC                     
 15062                           ;diskio.c: 166:  const BYTE *buff,;diskio.c: 167:  BYTE token;diskio.c: 169: {;diskio.c:
      +                           170:  BYTE resp;;diskio.c: 171:  WORD i;;diskio.c: 174:  if (!wait_ready()) return 0;
 15063   005BFC  ECA5  F02F         	call	_wait_ready	;wreg free
 15064   005C00  0900               	iorlw	0
 15065   005C02  A4D8               	btfss	status,2,c
 15066   005C04  EF06  F02E         	goto	u4561
 15067   005C08  EF08  F02E         	goto	u4560
 15068   005C0C                     u4561:
 15069   005C0C  EF0B  F02E         	goto	l3932
 15070   005C10                     u4560:
 15071   005C10                     l3928:
 15072   005C10  0E00               	movlw	0
 15073   005C12  EF52  F02E         	goto	l129
 15074   005C16                     l3932:
 15075                           
 15076                           ;diskio.c: 176:  SPI_Exchange8bit(token);
 15077   005C16  5006               	movf	xmit_datablock@token^0,w,c
 15078   005C18  ECED  F030         	call	_SPI_Exchange8bit
 15079   005C1C                     
 15080                           ;diskio.c: 177:  if (token != 0xFD) {
 15081   005C1C  0EFD               	movlw	253
 15082   005C1E  1806               	xorwf	xmit_datablock@token^0,w,c
 15083   005C20  B4D8               	btfsc	status,2,c
 15084   005C22  EF15  F02E         	goto	u4571
 15085   005C26  EF17  F02E         	goto	u4570
 15086   005C2A                     u4571:
 15087   005C2A  EF51  F02E         	goto	l3952
 15088   005C2E                     u4570:
 15089   005C2E                     
 15090                           ;diskio.c: 178:   i = 512;
 15091   005C2E  0E02               	movlw	2
 15092   005C30  6E08               	movwf	(xmit_datablock@i+1)^0,c
 15093   005C32  0E00               	movlw	0
 15094   005C34  6E07               	movwf	xmit_datablock@i^0,c
 15095   005C36                     l3938:
 15096                           
 15097                           ;diskio.c: 180:    SPI_Exchange8bit(*buff++);
 15098   005C36  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 15099   005C3A  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 15100   005C3E  6AF8               	clrf	tblptru,c
 15101   005C40  0E05               	movlw	(high __ramtop+-1)
 15102   005C42  64F7               	cpfsgt	tblptrh,c
 15103   005C44  D003               	bra	u4587
 15104   005C46  0008               	tblrd		*
 15105   005C48  50F5               	movf	tablat,w,c
 15106   005C4A  D005               	bra	u4580
 15107   005C4C                     u4587:
 15108   005C4C  CFF6 FFE9          	movff	tblptrl,fsr0l
 15109   005C50  CFF7 FFEA          	movff	tblptrh,fsr0h
 15110   005C54  50EF               	movf	indf0,w,c
 15111   005C56                     u4580:
 15112   005C56  ECED  F030         	call	_SPI_Exchange8bit
 15113   005C5A  4A04               	infsnz	xmit_datablock@buff^0,f,c
 15114   005C5C  2A05               	incf	(xmit_datablock@buff+1)^0,f,c
 15115   005C5E  0607               	decf	xmit_datablock@i^0,f,c
 15116   005C60  A0D8               	btfss	status,0,c
 15117   005C62  0608               	decf	(xmit_datablock@i+1)^0,f,c
 15118   005C64  5007               	movf	xmit_datablock@i^0,w,c
 15119   005C66  1008               	iorwf	(xmit_datablock@i+1)^0,w,c
 15120   005C68  A4D8               	btfss	status,2,c
 15121   005C6A  EF39  F02E         	goto	u4591
 15122   005C6E  EF3B  F02E         	goto	u4590
 15123   005C72                     u4591:
 15124   005C72  EF1B  F02E         	goto	l3938
 15125   005C76                     u4590:
 15126   005C76                     
 15127                           ;diskio.c: 182:   SPI_Exchange8bit(0xFF);
 15128   005C76  0EFF               	movlw	255
 15129   005C78  ECED  F030         	call	_SPI_Exchange8bit
 15130                           
 15131                           ;diskio.c: 183:   SPI_Exchange8bit(0xFF);
 15132   005C7C  0EFF               	movlw	255
 15133   005C7E  ECED  F030         	call	_SPI_Exchange8bit
 15134                           
 15135                           ;diskio.c: 184:   resp = SPI_Exchange8bit(0xFF);
 15136   005C82  0EFF               	movlw	255
 15137   005C84  ECED  F030         	call	_SPI_Exchange8bit
 15138   005C88  6E09               	movwf	xmit_datablock@resp^0,c
 15139   005C8A                     
 15140                           ;diskio.c: 185:   if ((resp & 0x1F) != 0x05)
 15141   005C8A  5009               	movf	xmit_datablock@resp^0,w,c
 15142   005C8C  0B1F               	andlw	31
 15143   005C8E  0A05               	xorlw	5
 15144   005C90  B4D8               	btfsc	status,2,c
 15145   005C92  EF4D  F02E         	goto	u4601
 15146   005C96  EF4F  F02E         	goto	u4600
 15147   005C9A                     u4601:
 15148   005C9A  EF51  F02E         	goto	l3952
 15149   005C9E                     u4600:
 15150   005C9E  EF08  F02E         	goto	l3928
 15151   005CA2                     l3952:
 15152                           
 15153                           ;diskio.c: 189:  return 1;
 15154   005CA2  0E01               	movlw	1
 15155   005CA4                     l129:
 15156   005CA4  0012               	return		;funcret
 15157   005CA6                     __end_of_xmit_datablock:
 15158                           	callstack 0
 15159                           
 15160 ;; *************** function _disk_read *****************
 15161 ;; Defined at:
 15162 ;;		line 380 in file "diskio.c"
 15163 ;; Parameters:    Size  Location     Type
 15164 ;;  pdrv            1    wreg     unsigned char 
 15165 ;;  buff            2   16[COMRAM] PTR unsigned char 
 15166 ;;		 -> FatFs(558), NULL(0), 
 15167 ;;  sector          4   18[COMRAM] unsigned long 
 15168 ;;  count           2   22[COMRAM] unsigned short 
 15169 ;; Auto vars:     Size  Location     Type
 15170 ;;  pdrv            1   24[COMRAM] unsigned char 
 15171 ;;  cmd             1   27[COMRAM] unsigned char 
 15172 ;; Return value:  Size  Location     Type
 15173 ;;                  1    wreg      enum E45
 15174 ;; Registers used:
 15175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15176 ;; Tracked objects:
 15177 ;;		On entry : 0/0
 15178 ;;		On exit  : 0/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15181 ;;      Params:         8       0       0       0       0       0       0
 15182 ;;      Locals:         4       0       0       0       0       0       0
 15183 ;;      Temps:          0       0       0       0       0       0       0
 15184 ;;      Totals:        12       0       0       0       0       0       0
 15185 ;;Total ram usage:       12 bytes
 15186 ;; Hardware stack levels used: 1
 15187 ;; Hardware stack levels required when called: 5
 15188 ;; This function calls:
 15189 ;;		_deselect
 15190 ;;		_rcvr_datablock
 15191 ;;		_send_cmd
 15192 ;; This function is called by:
 15193 ;;		_move_window
 15194 ;;		_f_read
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           	psect	text41
 15199   0050C6                     __ptext41:
 15200                           	callstack 0
 15201   0050C6                     _disk_read:
 15202                           	callstack 23
 15203                           
 15204                           ;incstack = 0
 15205                           ;disk_read@pdrv stored from wreg
 15206   0050C6  6E19               	movwf	disk_read@pdrv^0,c
 15207   0050C8                     
 15208                           ;diskio.c: 381:  BYTE pdrv,;diskio.c: 382:  BYTE *buff,;diskio.c: 383:  DWORD sector,;di
      +                          skio.c: 384:  UINT count;diskio.c: 386: {;diskio.c: 387:  BYTE cmd;;diskio.c: 390:  if (
      +                          pdrv || !count) return RES_PARERR;
 15209   0050C8  5019               	movf	disk_read@pdrv^0,w,c
 15210   0050CA  A4D8               	btfss	status,2,c
 15211   0050CC  EF6A  F028         	goto	u4831
 15212   0050D0  EF6C  F028         	goto	u4830
 15213   0050D4                     u4831:
 15214   0050D4  EF75  F028         	goto	l4050
 15215   0050D8                     u4830:
 15216   0050D8  5017               	movf	disk_read@count^0,w,c
 15217   0050DA  1018               	iorwf	(disk_read@count+1)^0,w,c
 15218   0050DC  A4D8               	btfss	status,2,c
 15219   0050DE  EF73  F028         	goto	u4841
 15220   0050E2  EF75  F028         	goto	u4840
 15221   0050E6                     u4841:
 15222   0050E6  EF78  F028         	goto	l192
 15223   0050EA                     u4840:
 15224   0050EA                     l4050:
 15225   0050EA  0E04               	movlw	4
 15226   0050EC  EF00  F029         	goto	l195
 15227   0050F0                     l192:
 15228                           
 15229                           ;diskio.c: 391:  if (Stat & 0x01) return RES_NOTRDY;
 15230   0050F0  0100               	movlb	0	; () banked
 15231   0050F2  A1FD               	btfss	_Stat& (0+255),0,b
 15232   0050F4  EF7E  F028         	goto	u4851
 15233   0050F8  EF80  F028         	goto	u4850
 15234   0050FC                     u4851:
 15235   0050FC  EF83  F028         	goto	l196
 15236   005100                     u4850:
 15237   005100                     
 15238                           ; BSR set to: 0
 15239   005100  0E03               	movlw	3
 15240   005102  EF00  F029         	goto	l195
 15241   005106                     l196:
 15242                           
 15243                           ; BSR set to: 0
 15244                           ;diskio.c: 393:  if (!(CardType & 0x08)) sector *= 512;
 15245   005106  B7FC               	btfsc	_CardType& (0+255),3,b
 15246   005108  EF88  F028         	goto	u4861
 15247   00510C  EF8A  F028         	goto	u4860
 15248   005110                     u4861:
 15249   005110  EF93  F028         	goto	l197
 15250   005114                     u4860:
 15251   005114                     
 15252                           ; BSR set to: 0
 15253   005114  0E09               	movlw	9
 15254   005116                     u4875:
 15255   005116  90D8               	bcf	status,0,c
 15256   005118  3613               	rlcf	disk_read@sector^0,f,c
 15257   00511A  3614               	rlcf	(disk_read@sector+1)^0,f,c
 15258   00511C  3615               	rlcf	(disk_read@sector+2)^0,f,c
 15259   00511E  3616               	rlcf	(disk_read@sector+3)^0,f,c
 15260   005120  2EE8               	decfsz	wreg,f,c
 15261   005122  EF8B  F028         	goto	u4875
 15262   005126                     l197:
 15263                           
 15264                           ; BSR set to: 0
 15265                           ;diskio.c: 395:  cmd = count > 1 ? (18) : (17);
 15266   005126  5018               	movf	(disk_read@count+1)^0,w,c
 15267   005128  E107               	bnz	u4881
 15268   00512A  0E02               	movlw	2
 15269   00512C  5C17               	subwf	disk_read@count^0,w,c
 15270   00512E  B0D8               	btfsc	status,0,c
 15271   005130  EF9C  F028         	goto	u4881
 15272   005134  EF9E  F028         	goto	u4880
 15273   005138                     u4881:
 15274   005138  EFA4  F028         	goto	l4062
 15275   00513C                     u4880:
 15276   00513C                     
 15277                           ; BSR set to: 0
 15278   00513C  0E00               	movlw	0
 15279   00513E  6E1B               	movwf	(_disk_read$358+1)^0,c
 15280   005140  0E11               	movlw	17
 15281   005142  6E1A               	movwf	_disk_read$358^0,c
 15282   005144  EFA8  F028         	goto	l4064
 15283   005148                     l4062:
 15284                           
 15285                           ; BSR set to: 0
 15286   005148  0E00               	movlw	0
 15287   00514A  6E1B               	movwf	(_disk_read$358+1)^0,c
 15288   00514C  0E12               	movlw	18
 15289   00514E  6E1A               	movwf	_disk_read$358^0,c
 15290   005150                     l4064:
 15291                           
 15292                           ; BSR set to: 0
 15293   005150  C01A  F01C         	movff	_disk_read$358,disk_read@cmd
 15294   005154                     
 15295                           ; BSR set to: 0
 15296                           ;diskio.c: 396:  if (send_cmd(cmd, sector) == 0) {
 15297   005154  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 15298   005158  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 15299   00515C  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 15300   005160  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 15301   005164  501C               	movf	disk_read@cmd^0,w,c
 15302   005166  EC02  F030         	call	_send_cmd
 15303   00516A  0900               	iorlw	0
 15304   00516C  A4D8               	btfss	status,2,c
 15305   00516E  EFBB  F028         	goto	u4891
 15306   005172  EFBD  F028         	goto	u4890
 15307   005176                     u4891:
 15308   005176  EFF3  F028         	goto	l4078
 15309   00517A                     u4890:
 15310   00517A                     l4068:
 15311                           
 15312                           ;diskio.c: 398:    if (!rcvr_datablock(buff, 512)) break;
 15313   00517A  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 15314   00517E  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 15315   005182  0E02               	movlw	2
 15316   005184  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 15317   005186  0E00               	movlw	0
 15318   005188  6E04               	movwf	rcvr_datablock@btr^0,c
 15319   00518A  ECA5  F02E         	call	_rcvr_datablock	;wreg free
 15320   00518E  0900               	iorlw	0
 15321   005190  A4D8               	btfss	status,2,c
 15322   005192  EFCD  F028         	goto	u4901
 15323   005196  EFCF  F028         	goto	u4900
 15324   00519A                     u4901:
 15325   00519A  EFD1  F028         	goto	l4072
 15326   00519E                     u4900:
 15327   00519E  EFDF  F028         	goto	l4074
 15328   0051A2                     l4072:
 15329                           
 15330                           ;diskio.c: 399:    buff += 512;
 15331   0051A2  0E02               	movlw	2
 15332   0051A4  2612               	addwf	(disk_read@buff+1)^0,f,c
 15333                           
 15334                           ;diskio.c: 400:   } while (--count);
 15335   0051A6  0617               	decf	disk_read@count^0,f,c
 15336   0051A8  A0D8               	btfss	status,0,c
 15337   0051AA  0618               	decf	(disk_read@count+1)^0,f,c
 15338   0051AC  5017               	movf	disk_read@count^0,w,c
 15339   0051AE  1018               	iorwf	(disk_read@count+1)^0,w,c
 15340   0051B0  A4D8               	btfss	status,2,c
 15341   0051B2  EFDD  F028         	goto	u4911
 15342   0051B6  EFDF  F028         	goto	u4910
 15343   0051BA                     u4911:
 15344   0051BA  EFBD  F028         	goto	l4068
 15345   0051BE                     u4910:
 15346   0051BE                     l4074:
 15347                           
 15348                           ;diskio.c: 401:   if (cmd == (18)) send_cmd((12), 0);
 15349   0051BE  0E12               	movlw	18
 15350   0051C0  181C               	xorwf	disk_read@cmd^0,w,c
 15351   0051C2  A4D8               	btfss	status,2,c
 15352   0051C4  EFE6  F028         	goto	u4921
 15353   0051C8  EFE8  F028         	goto	u4920
 15354   0051CC                     u4921:
 15355   0051CC  EFF3  F028         	goto	l4078
 15356   0051D0                     u4920:
 15357   0051D0  0E00               	movlw	0
 15358   0051D2  6E0B               	movwf	send_cmd@arg^0,c
 15359   0051D4  0E00               	movlw	0
 15360   0051D6  6E0C               	movwf	(send_cmd@arg+1)^0,c
 15361   0051D8  0E00               	movlw	0
 15362   0051DA  6E0D               	movwf	(send_cmd@arg+2)^0,c
 15363   0051DC  0E00               	movlw	0
 15364   0051DE  6E0E               	movwf	(send_cmd@arg+3)^0,c
 15365   0051E0  0E0C               	movlw	12
 15366   0051E2  EC02  F030         	call	_send_cmd
 15367   0051E6                     l4078:
 15368                           
 15369                           ;diskio.c: 403:  deselect();
 15370   0051E6  EC10  F031         	call	_deselect	;wreg free
 15371   0051EA                     
 15372                           ;diskio.c: 405:  return count ? RES_ERROR : RES_OK;
 15373   0051EA  5017               	movf	disk_read@count^0,w,c
 15374   0051EC  1018               	iorwf	(disk_read@count+1)^0,w,c
 15375   0051EE  A4D8               	btfss	status,2,c
 15376   0051F0  EFFC  F028         	goto	u4931
 15377   0051F4  EFFF  F028         	goto	u4930
 15378   0051F8                     u4931:
 15379   0051F8  0E01               	movlw	1
 15380   0051FA  EF00  F029         	goto	u4940
 15381   0051FE                     u4930:
 15382   0051FE  0E00               	movlw	0
 15383   005200                     u4940:
 15384   005200                     l195:
 15385   005200  0012               	return		;funcret
 15386   005202                     __end_of_disk_read:
 15387                           	callstack 0
 15388                           
 15389 ;; *************** function _send_cmd *****************
 15390 ;; Defined at:
 15391 ;;		line 241 in file "diskio.c"
 15392 ;; Parameters:    Size  Location     Type
 15393 ;;  cmd             1    wreg     unsigned char 
 15394 ;;  arg             4   10[COMRAM] unsigned long 
 15395 ;; Auto vars:     Size  Location     Type
 15396 ;;  cmd             1   14[COMRAM] unsigned char 
 15397 ;;  res             1   15[COMRAM] unsigned char 
 15398 ;; Return value:  Size  Location     Type
 15399 ;;                  1    wreg      unsigned char 
 15400 ;; Registers used:
 15401 ;;		wreg, status,2, status,0, cstack
 15402 ;; Tracked objects:
 15403 ;;		On entry : 0/0
 15404 ;;		On exit  : 0/0
 15405 ;;		Unchanged: 0/0
 15406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15407 ;;      Params:         4       0       0       0       0       0       0
 15408 ;;      Locals:         2       0       0       0       0       0       0
 15409 ;;      Temps:          0       0       0       0       0       0       0
 15410 ;;      Totals:         6       0       0       0       0       0       0
 15411 ;;Total ram usage:        6 bytes
 15412 ;; Hardware stack levels used: 1
 15413 ;; Hardware stack levels required when called: 4
 15414 ;; This function calls:
 15415 ;;		___send_cmd
 15416 ;; This function is called by:
 15417 ;;		_disk_initialize
 15418 ;;		_disk_read
 15419 ;;		_disk_write
 15420 ;;		_disk_ioctl
 15421 ;; This function uses a non-reentrant model
 15422 ;;
 15423                           
 15424                           	psect	text42
 15425   006004                     __ptext42:
 15426                           	callstack 0
 15427   006004                     _send_cmd:
 15428                           	callstack 23
 15429                           
 15430                           ;incstack = 0
 15431                           ;send_cmd@cmd stored from wreg
 15432   006004  6E0F               	movwf	send_cmd@cmd^0,c
 15433   006006                     
 15434                           ;diskio.c: 242:  BYTE cmd,;diskio.c: 243:  DWORD arg;diskio.c: 245: {;diskio.c: 249:  BY
      +                          TE res;;diskio.c: 252:  if (cmd & 0x80) {
 15435   006006  AE0F               	btfss	send_cmd@cmd^0,7,c
 15436   006008  EF08  F030         	goto	u4611
 15437   00600C  EF0A  F030         	goto	u4610
 15438   006010                     u4611:
 15439   006010  EF22  F030         	goto	l3968
 15440   006014                     u4610:
 15441   006014                     
 15442                           ;diskio.c: 253:   cmd &= 0x7F;
 15443   006014  9E0F               	bcf	send_cmd@cmd^0,7,c
 15444   006016                     
 15445                           ;diskio.c: 255:   res = __send_cmd((55), 0);
 15446   006016  0E00               	movlw	0
 15447   006018  6E04               	movwf	___send_cmd@arg^0,c
 15448   00601A  0E00               	movlw	0
 15449   00601C  6E05               	movwf	(___send_cmd@arg+1)^0,c
 15450   00601E  0E00               	movlw	0
 15451   006020  6E06               	movwf	(___send_cmd@arg+2)^0,c
 15452   006022  0E00               	movlw	0
 15453   006024  6E07               	movwf	(___send_cmd@arg+3)^0,c
 15454   006026  0E37               	movlw	55
 15455   006028  EC9D  F02D         	call	___send_cmd
 15456   00602C  6E10               	movwf	send_cmd@res^0,c
 15457   00602E                     
 15458                           ;diskio.c: 259:   if (res > 1) return res;
 15459   00602E  0E01               	movlw	1
 15460   006030  6410               	cpfsgt	send_cmd@res^0,c
 15461   006032  EF1D  F030         	goto	u4621
 15462   006036  EF1F  F030         	goto	u4620
 15463   00603A                     u4621:
 15464   00603A  EF22  F030         	goto	l3968
 15465   00603E                     u4620:
 15466   00603E  5010               	movf	send_cmd@res^0,w,c
 15467   006040  EF2D  F030         	goto	l150
 15468   006044                     l3968:
 15469                           
 15470                           ;diskio.c: 263:  return __send_cmd(cmd, arg);
 15471   006044  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 15472   006048  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 15473   00604C  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 15474   006050  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 15475   006054  500F               	movf	send_cmd@cmd^0,w,c
 15476   006056  EC9D  F02D         	call	___send_cmd
 15477   00605A                     l150:
 15478   00605A  0012               	return		;funcret
 15479   00605C                     __end_of_send_cmd:
 15480                           	callstack 0
 15481                           
 15482 ;; *************** function ___send_cmd *****************
 15483 ;; Defined at:
 15484 ;;		line 204 in file "diskio.c"
 15485 ;; Parameters:    Size  Location     Type
 15486 ;;  cmd             1    wreg     unsigned char 
 15487 ;;  arg             4    3[COMRAM] unsigned long 
 15488 ;; Auto vars:     Size  Location     Type
 15489 ;;  cmd             1    9[COMRAM] unsigned char 
 15490 ;;  n               1    8[COMRAM] unsigned char 
 15491 ;;  res             1    7[COMRAM] unsigned char 
 15492 ;; Return value:  Size  Location     Type
 15493 ;;                  1    wreg      unsigned char 
 15494 ;; Registers used:
 15495 ;;		wreg, status,2, status,0, cstack
 15496 ;; Tracked objects:
 15497 ;;		On entry : 0/0
 15498 ;;		On exit  : 0/0
 15499 ;;		Unchanged: 0/0
 15500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15501 ;;      Params:         4       0       0       0       0       0       0
 15502 ;;      Locals:         3       0       0       0       0       0       0
 15503 ;;      Temps:          0       0       0       0       0       0       0
 15504 ;;      Totals:         7       0       0       0       0       0       0
 15505 ;;Total ram usage:        7 bytes
 15506 ;; Hardware stack levels used: 1
 15507 ;; Hardware stack levels required when called: 3
 15508 ;; This function calls:
 15509 ;;		_SPI_Exchange8bit
 15510 ;;		_deselect
 15511 ;;		_select
 15512 ;; This function is called by:
 15513 ;;		_send_cmd
 15514 ;; This function uses a non-reentrant model
 15515 ;;
 15516                           
 15517                           	psect	text43
 15518   005B3A                     __ptext43:
 15519                           	callstack 0
 15520   005B3A                     ___send_cmd:
 15521                           	callstack 23
 15522                           
 15523                           ;incstack = 0
 15524                           ;___send_cmd@cmd stored from wreg
 15525   005B3A  6E0A               	movwf	___send_cmd@cmd^0,c
 15526   005B3C                     
 15527                           ;diskio.c: 205:  BYTE cmd,;diskio.c: 206:  DWORD arg;diskio.c: 208: {;diskio.c: 209:  BY
      +                          TE n, res;;diskio.c: 213:  if (cmd != (12)) {
 15528   005B3C  0E0C               	movlw	12
 15529   005B3E  180A               	xorwf	___send_cmd@cmd^0,w,c
 15530   005B40  B4D8               	btfsc	status,2,c
 15531   005B42  EFA5  F02D         	goto	u4501
 15532   005B46  EFA7  F02D         	goto	u4500
 15533   005B4A                     u4501:
 15534   005B4A  EFB6  F02D         	goto	l3888
 15535   005B4E                     u4500:
 15536   005B4E                     
 15537                           ;diskio.c: 214:   deselect();
 15538   005B4E  EC10  F031         	call	_deselect	;wreg free
 15539   005B52                     
 15540                           ;diskio.c: 215:   if (!select()) return 0xFF;
 15541   005B52  ECA8  F030         	call	_select	;wreg free
 15542   005B56  0900               	iorlw	0
 15543   005B58  A4D8               	btfss	status,2,c
 15544   005B5A  EFB1  F02D         	goto	u4511
 15545   005B5E  EFB3  F02D         	goto	u4510
 15546   005B62                     u4511:
 15547   005B62  EFB6  F02D         	goto	l3888
 15548   005B66                     u4510:
 15549   005B66  0EFF               	movlw	255
 15550   005B68  EFFD  F02D         	goto	l138
 15551   005B6C                     l3888:
 15552                           
 15553                           ;diskio.c: 219:  SPI_Exchange8bit(0x40 | cmd);
 15554   005B6C  500A               	movf	___send_cmd@cmd^0,w,c
 15555   005B6E  0940               	iorlw	64
 15556   005B70  ECED  F030         	call	_SPI_Exchange8bit
 15557   005B74                     
 15558                           ;diskio.c: 220:  SPI_Exchange8bit((BYTE)(arg >> 24));
 15559   005B74  5007               	movf	(___send_cmd@arg+3)^0,w,c
 15560   005B76  ECED  F030         	call	_SPI_Exchange8bit
 15561   005B7A                     
 15562                           ;diskio.c: 221:  SPI_Exchange8bit((BYTE)(arg >> 16));
 15563   005B7A  5006               	movf	(___send_cmd@arg+2)^0,w,c
 15564   005B7C  ECED  F030         	call	_SPI_Exchange8bit
 15565   005B80                     
 15566                           ;diskio.c: 222:  SPI_Exchange8bit((BYTE)(arg >> 8));
 15567   005B80  5005               	movf	(___send_cmd@arg+1)^0,w,c
 15568   005B82  ECED  F030         	call	_SPI_Exchange8bit
 15569   005B86                     
 15570                           ;diskio.c: 223:  SPI_Exchange8bit((BYTE)arg);
 15571   005B86  5004               	movf	___send_cmd@arg^0,w,c
 15572   005B88  ECED  F030         	call	_SPI_Exchange8bit
 15573   005B8C                     
 15574                           ;diskio.c: 224:  n = 0x01;
 15575   005B8C  0E01               	movlw	1
 15576   005B8E  6E09               	movwf	___send_cmd@n^0,c
 15577   005B90                     
 15578                           ;diskio.c: 225:  if (cmd == (0)) n = 0x95;
 15579   005B90  500A               	movf	___send_cmd@cmd^0,w,c
 15580   005B92  A4D8               	btfss	status,2,c
 15581   005B94  EFCE  F02D         	goto	u4521
 15582   005B98  EFD0  F02D         	goto	u4520
 15583   005B9C                     u4521:
 15584   005B9C  EFD2  F02D         	goto	l3904
 15585   005BA0                     u4520:
 15586   005BA0  0E95               	movlw	149
 15587   005BA2  6E09               	movwf	___send_cmd@n^0,c
 15588   005BA4                     l3904:
 15589                           
 15590                           ;diskio.c: 226:  if (cmd == (8)) n = 0x87;
 15591   005BA4  0E08               	movlw	8
 15592   005BA6  180A               	xorwf	___send_cmd@cmd^0,w,c
 15593   005BA8  A4D8               	btfss	status,2,c
 15594   005BAA  EFD9  F02D         	goto	u4531
 15595   005BAE  EFDB  F02D         	goto	u4530
 15596   005BB2                     u4531:
 15597   005BB2  EFDD  F02D         	goto	l3908
 15598   005BB6                     u4530:
 15599   005BB6  0E87               	movlw	135
 15600   005BB8  6E09               	movwf	___send_cmd@n^0,c
 15601   005BBA                     l3908:
 15602                           
 15603                           ;diskio.c: 227:  SPI_Exchange8bit(n);
 15604   005BBA  5009               	movf	___send_cmd@n^0,w,c
 15605   005BBC  ECED  F030         	call	_SPI_Exchange8bit
 15606   005BC0                     
 15607                           ;diskio.c: 230:  if (cmd == (12)) SPI_Exchange8bit(0xFF);
 15608   005BC0  0E0C               	movlw	12
 15609   005BC2  180A               	xorwf	___send_cmd@cmd^0,w,c
 15610   005BC4  A4D8               	btfss	status,2,c
 15611   005BC6  EFE7  F02D         	goto	u4541
 15612   005BCA  EFE9  F02D         	goto	u4540
 15613   005BCE                     u4541:
 15614   005BCE  EFEC  F02D         	goto	l3914
 15615   005BD2                     u4540:
 15616   005BD2  0EFF               	movlw	255
 15617   005BD4  ECED  F030         	call	_SPI_Exchange8bit
 15618   005BD8                     l3914:
 15619                           
 15620                           ;diskio.c: 231:  n = 10;
 15621   005BD8  0E0A               	movlw	10
 15622   005BDA  6E09               	movwf	___send_cmd@n^0,c
 15623   005BDC                     l3916:
 15624                           
 15625                           ;diskio.c: 233:   res = SPI_Exchange8bit(0xFF);
 15626   005BDC  0EFF               	movlw	255
 15627   005BDE  ECED  F030         	call	_SPI_Exchange8bit
 15628   005BE2  6E08               	movwf	___send_cmd@res^0,c
 15629   005BE4  AE08               	btfss	___send_cmd@res^0,7,c
 15630   005BE6  EFF7  F02D         	goto	u4551
 15631   005BEA  EFF9  F02D         	goto	u4550
 15632   005BEE                     u4551:
 15633   005BEE  EFFC  F02D         	goto	l3922
 15634   005BF2                     u4550:
 15635   005BF2  2E09               	decfsz	___send_cmd@n^0,f,c
 15636   005BF4  EFEE  F02D         	goto	l3916
 15637   005BF8                     l3922:
 15638                           
 15639                           ;diskio.c: 236:  return res;
 15640   005BF8  5008               	movf	___send_cmd@res^0,w,c
 15641   005BFA                     l138:
 15642   005BFA  0012               	return		;funcret
 15643   005BFC                     __end_of___send_cmd:
 15644                           	callstack 0
 15645                           
 15646 ;; *************** function _select *****************
 15647 ;; Defined at:
 15648 ;;		line 115 in file "diskio.c"
 15649 ;; Parameters:    Size  Location     Type
 15650 ;;		None
 15651 ;; Auto vars:     Size  Location     Type
 15652 ;;		None
 15653 ;; Return value:  Size  Location     Type
 15654 ;;                  1    wreg      unsigned char 
 15655 ;; Registers used:
 15656 ;;		wreg, status,2, status,0, cstack
 15657 ;; Tracked objects:
 15658 ;;		On entry : 0/0
 15659 ;;		On exit  : 0/0
 15660 ;;		Unchanged: 0/0
 15661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15662 ;;      Params:         0       0       0       0       0       0       0
 15663 ;;      Locals:         0       0       0       0       0       0       0
 15664 ;;      Temps:          0       0       0       0       0       0       0
 15665 ;;      Totals:         0       0       0       0       0       0       0
 15666 ;;Total ram usage:        0 bytes
 15667 ;; Hardware stack levels used: 1
 15668 ;; Hardware stack levels required when called: 2
 15669 ;; This function calls:
 15670 ;;		_SPI_Exchange8bit
 15671 ;;		_deselect
 15672 ;;		_wait_ready
 15673 ;; This function is called by:
 15674 ;;		___send_cmd
 15675 ;;		_disk_ioctl
 15676 ;; This function uses a non-reentrant model
 15677 ;;
 15678                           
 15679                           	psect	text44
 15680   006150                     __ptext44:
 15681                           	callstack 0
 15682   006150                     _select:
 15683                           	callstack 23
 15684   006150  948B               	bcf	3979,2,c	;volatile
 15685   006152                     
 15686                           ;diskio.c: 118:  SPI_Exchange8bit(0xFF);
 15687   006152  0EFF               	movlw	255
 15688   006154  ECED  F030         	call	_SPI_Exchange8bit
 15689   006158                     
 15690                           ;diskio.c: 119:  if (wait_ready()) return 1;
 15691   006158  ECA5  F02F         	call	_wait_ready	;wreg free
 15692   00615C  0900               	iorlw	0
 15693   00615E  B4D8               	btfsc	status,2,c
 15694   006160  EFB4  F030         	goto	u4491
 15695   006164  EFB6  F030         	goto	u4490
 15696   006168                     u4491:
 15697   006168  EFB9  F030         	goto	l3872
 15698   00616C                     u4490:
 15699   00616C  0E01               	movlw	1
 15700   00616E  EFBC  F030         	goto	l115
 15701   006172                     l3872:
 15702                           
 15703                           ;diskio.c: 121:  deselect();
 15704   006172  EC10  F031         	call	_deselect	;wreg free
 15705   006176                     
 15706                           ;diskio.c: 122:  return 0;
 15707   006176  0E00               	movlw	0
 15708   006178                     l115:
 15709   006178  0012               	return		;funcret
 15710   00617A                     __end_of_select:
 15711                           	callstack 0
 15712                           
 15713 ;; *************** function _wait_ready *****************
 15714 ;; Defined at:
 15715 ;;		line 82 in file "diskio.c"
 15716 ;; Parameters:    Size  Location     Type
 15717 ;;		None
 15718 ;; Auto vars:     Size  Location     Type
 15719 ;;  tmr             2    1[COMRAM] unsigned short 
 15720 ;; Return value:  Size  Location     Type
 15721 ;;                  1    wreg      unsigned char 
 15722 ;; Registers used:
 15723 ;;		wreg, status,2, status,0, cstack
 15724 ;; Tracked objects:
 15725 ;;		On entry : 0/0
 15726 ;;		On exit  : 0/0
 15727 ;;		Unchanged: 0/0
 15728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15729 ;;      Params:         0       0       0       0       0       0       0
 15730 ;;      Locals:         2       0       0       0       0       0       0
 15731 ;;      Temps:          0       0       0       0       0       0       0
 15732 ;;      Totals:         2       0       0       0       0       0       0
 15733 ;;Total ram usage:        2 bytes
 15734 ;; Hardware stack levels used: 1
 15735 ;; Hardware stack levels required when called: 1
 15736 ;; This function calls:
 15737 ;;		_SPI_Exchange8bit
 15738 ;; This function is called by:
 15739 ;;		_select
 15740 ;;		_xmit_datablock
 15741 ;; This function uses a non-reentrant model
 15742 ;;
 15743                           
 15744                           	psect	text45
 15745   005F4A                     __ptext45:
 15746                           	callstack 0
 15747   005F4A                     _wait_ready:
 15748                           	callstack 25
 15749   005F4A                     
 15750                           ;diskio.c: 84:  UINT tmr;;diskio.c: 87:  for (tmr = 5000; tmr; tmr--) {
 15751   005F4A  0E13               	movlw	19
 15752   005F4C  6E03               	movwf	(wait_ready@tmr+1)^0,c
 15753   005F4E  0E88               	movlw	136
 15754   005F50  6E02               	movwf	wait_ready@tmr^0,c
 15755   005F52  EFBF  F02F         	goto	l100
 15756   005F56                     l3850:
 15757                           
 15758                           ;diskio.c: 88:   if (SPI_Exchange8bit(0xFF) == 0xFF) break;
 15759   005F56  0EFF               	movlw	255
 15760   005F58  ECED  F030         	call	_SPI_Exchange8bit
 15761   005F5C  0AFF               	xorlw	255
 15762   005F5E  A4D8               	btfss	status,2,c
 15763   005F60  EFB4  F02F         	goto	u4451
 15764   005F64  EFB6  F02F         	goto	u4450
 15765   005F68                     u4451:
 15766   005F68  EFB8  F02F         	goto	l3854
 15767   005F6C                     u4450:
 15768   005F6C  EFC8  F02F         	goto	l3858
 15769   005F70                     l3854:
 15770                           
 15771                           ;diskio.c: 89:   _delay((unsigned long)((100)*(8000000UL/4000000.0)));
 15772   005F70  0E42               	movlw	66
 15773   005F72                     u8907:
 15774   005F72  2EE8               	decfsz	wreg,f,c
 15775   005F74  D7FE               	bra	u8907
 15776   005F76  D000               	nop2	
 15777   005F78                     
 15778                           ;diskio.c: 90:  }
 15779   005F78  0602               	decf	wait_ready@tmr^0,f,c
 15780   005F7A  A0D8               	btfss	status,0,c
 15781   005F7C  0603               	decf	(wait_ready@tmr+1)^0,f,c
 15782   005F7E                     l100:
 15783   005F7E  5002               	movf	wait_ready@tmr^0,w,c
 15784   005F80  1003               	iorwf	(wait_ready@tmr+1)^0,w,c
 15785   005F82  A4D8               	btfss	status,2,c
 15786   005F84  EFC6  F02F         	goto	u4461
 15787   005F88  EFC8  F02F         	goto	u4460
 15788   005F8C                     u4461:
 15789   005F8C  EFAB  F02F         	goto	l3850
 15790   005F90                     u4460:
 15791   005F90                     l3858:
 15792                           
 15793                           ;diskio.c: 92:  return tmr ? 1 : 0;
 15794   005F90  5002               	movf	wait_ready@tmr^0,w,c
 15795   005F92  1003               	iorwf	(wait_ready@tmr+1)^0,w,c
 15796   005F94  A4D8               	btfss	status,2,c
 15797   005F96  EFCF  F02F         	goto	u4471
 15798   005F9A  EFD2  F02F         	goto	u4470
 15799   005F9E                     u4471:
 15800   005F9E  0E01               	movlw	1
 15801   005FA0  EFD3  F02F         	goto	u4480
 15802   005FA4                     u4470:
 15803   005FA4  0E00               	movlw	0
 15804   005FA6                     u4480:
 15805   005FA6  0012               	return		;funcret
 15806   005FA8                     __end_of_wait_ready:
 15807                           	callstack 0
 15808                           
 15809 ;; *************** function _deselect *****************
 15810 ;; Defined at:
 15811 ;;		line 102 in file "diskio.c"
 15812 ;; Parameters:    Size  Location     Type
 15813 ;;		None
 15814 ;; Auto vars:     Size  Location     Type
 15815 ;;		None
 15816 ;; Return value:  Size  Location     Type
 15817 ;;                  1    wreg      void 
 15818 ;; Registers used:
 15819 ;;		wreg, status,2, cstack
 15820 ;; Tracked objects:
 15821 ;;		On entry : 0/0
 15822 ;;		On exit  : 0/0
 15823 ;;		Unchanged: 0/0
 15824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15825 ;;      Params:         0       0       0       0       0       0       0
 15826 ;;      Locals:         0       0       0       0       0       0       0
 15827 ;;      Temps:          0       0       0       0       0       0       0
 15828 ;;      Totals:         0       0       0       0       0       0       0
 15829 ;;Total ram usage:        0 bytes
 15830 ;; Hardware stack levels used: 1
 15831 ;; Hardware stack levels required when called: 1
 15832 ;; This function calls:
 15833 ;;		_SPI_Exchange8bit
 15834 ;; This function is called by:
 15835 ;;		_select
 15836 ;;		___send_cmd
 15837 ;;		_disk_initialize
 15838 ;;		_disk_read
 15839 ;;		_disk_write
 15840 ;;		_disk_ioctl
 15841 ;; This function uses a non-reentrant model
 15842 ;;
 15843                           
 15844                           	psect	text46
 15845   006220                     __ptext46:
 15846                           	callstack 0
 15847   006220                     _deselect:
 15848                           	callstack 23
 15849   006220  848B               	bsf	3979,2,c	;volatile
 15850   006222                     
 15851                           ;diskio.c: 105:  SPI_Exchange8bit(0xFF);
 15852   006222  0EFF               	movlw	255
 15853   006224  ECED  F030         	call	_SPI_Exchange8bit
 15854   006228  0012               	return		;funcret
 15855   00622A                     __end_of_deselect:
 15856                           	callstack 0
 15857                           
 15858 ;; *************** function _rcvr_datablock *****************
 15859 ;; Defined at:
 15860 ;;		line 132 in file "diskio.c"
 15861 ;; Parameters:    Size  Location     Type
 15862 ;;  buff            2    1[COMRAM] PTR unsigned char 
 15863 ;;		 -> FatFs(558), disk_ioctl@csd(16), NULL(0), 
 15864 ;;  btr             2    3[COMRAM] unsigned short 
 15865 ;; Auto vars:     Size  Location     Type
 15866 ;;  tmr             2    5[COMRAM] unsigned short 
 15867 ;;  token           1    7[COMRAM] unsigned char 
 15868 ;; Return value:  Size  Location     Type
 15869 ;;                  1    wreg      unsigned char 
 15870 ;; Registers used:
 15871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15872 ;; Tracked objects:
 15873 ;;		On entry : 0/0
 15874 ;;		On exit  : 0/0
 15875 ;;		Unchanged: 0/0
 15876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15877 ;;      Params:         4       0       0       0       0       0       0
 15878 ;;      Locals:         3       0       0       0       0       0       0
 15879 ;;      Temps:          0       0       0       0       0       0       0
 15880 ;;      Totals:         7       0       0       0       0       0       0
 15881 ;;Total ram usage:        7 bytes
 15882 ;; Hardware stack levels used: 1
 15883 ;; Hardware stack levels required when called: 1
 15884 ;; This function calls:
 15885 ;;		_SPI_Exchange8bit
 15886 ;; This function is called by:
 15887 ;;		_disk_read
 15888 ;;		_disk_ioctl
 15889 ;; This function uses a non-reentrant model
 15890 ;;
 15891                           
 15892                           	psect	text47
 15893   005D4A                     __ptext47:
 15894                           	callstack 0
 15895   005D4A                     _rcvr_datablock:
 15896                           	callstack 26
 15897   005D4A                     
 15898                           ;diskio.c: 133:  BYTE *buff,;diskio.c: 134:  UINT btr;diskio.c: 136: {;diskio.c: 137:  B
      +                          YTE token;;diskio.c: 138:  UINT tmr;;diskio.c: 141:  for (tmr = 2000; tmr; tmr--) {
 15899   005D4A  0E07               	movlw	7
 15900   005D4C  6E07               	movwf	(rcvr_datablock@tmr+1)^0,c
 15901   005D4E  0ED0               	movlw	208
 15902   005D50  6E06               	movwf	rcvr_datablock@tmr^0,c
 15903   005D52  EFC0  F02E         	goto	l118
 15904   005D56                     l3974:
 15905                           
 15906                           ;diskio.c: 142:   token = SPI_Exchange8bit(0xFF);
 15907   005D56  0EFF               	movlw	255
 15908   005D58  ECED  F030         	call	_SPI_Exchange8bit
 15909   005D5C  6E08               	movwf	rcvr_datablock@token^0,c
 15910   005D5E                     
 15911                           ;diskio.c: 143:   if (token != 0xFF) break;
 15912   005D5E  2808               	incf	rcvr_datablock@token^0,w,c
 15913   005D60  B4D8               	btfsc	status,2,c
 15914   005D62  EFB5  F02E         	goto	u4631
 15915   005D66  EFB7  F02E         	goto	u4630
 15916   005D6A                     u4631:
 15917   005D6A  EFB9  F02E         	goto	l3980
 15918   005D6E                     u4630:
 15919   005D6E  EFC9  F02E         	goto	l3984
 15920   005D72                     l3980:
 15921                           
 15922                           ;diskio.c: 144:   _delay((unsigned long)((100)*(8000000UL/4000000.0)));
 15923   005D72  0E42               	movlw	66
 15924   005D74                     u8917:
 15925   005D74  2EE8               	decfsz	wreg,f,c
 15926   005D76  D7FE               	bra	u8917
 15927   005D78  D000               	nop2	
 15928   005D7A                     
 15929                           ;diskio.c: 145:  }
 15930   005D7A  0606               	decf	rcvr_datablock@tmr^0,f,c
 15931   005D7C  A0D8               	btfss	status,0,c
 15932   005D7E  0607               	decf	(rcvr_datablock@tmr+1)^0,f,c
 15933   005D80                     l118:
 15934   005D80  5006               	movf	rcvr_datablock@tmr^0,w,c
 15935   005D82  1007               	iorwf	(rcvr_datablock@tmr+1)^0,w,c
 15936   005D84  A4D8               	btfss	status,2,c
 15937   005D86  EFC7  F02E         	goto	u4641
 15938   005D8A  EFC9  F02E         	goto	u4640
 15939   005D8E                     u4641:
 15940   005D8E  EFAB  F02E         	goto	l3974
 15941   005D92                     u4640:
 15942   005D92                     l3984:
 15943                           
 15944                           ;diskio.c: 146:  if (token != 0xFE) return 0;
 15945   005D92  0EFE               	movlw	254
 15946   005D94  1808               	xorwf	rcvr_datablock@token^0,w,c
 15947   005D96  B4D8               	btfsc	status,2,c
 15948   005D98  EFD0  F02E         	goto	u4651
 15949   005D9C  EFD2  F02E         	goto	u4650
 15950   005DA0                     u4651:
 15951   005DA0  EFD5  F02E         	goto	l3990
 15952   005DA4                     u4650:
 15953   005DA4  0E00               	movlw	0
 15954   005DA6  EFF2  F02E         	goto	l123
 15955   005DAA                     l3990:
 15956                           
 15957                           ;diskio.c: 149:   *buff++ = SPI_Exchange8bit(0xFF);
 15958   005DAA  0EFF               	movlw	255
 15959   005DAC  ECED  F030         	call	_SPI_Exchange8bit
 15960   005DB0  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 15961   005DB4  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 15962   005DB8  6EDF               	movwf	indf2,c
 15963   005DBA  4A02               	infsnz	rcvr_datablock@buff^0,f,c
 15964   005DBC  2A03               	incf	(rcvr_datablock@buff+1)^0,f,c
 15965   005DBE  0604               	decf	rcvr_datablock@btr^0,f,c
 15966   005DC0  A0D8               	btfss	status,0,c
 15967   005DC2  0605               	decf	(rcvr_datablock@btr+1)^0,f,c
 15968   005DC4  5004               	movf	rcvr_datablock@btr^0,w,c
 15969   005DC6  1005               	iorwf	(rcvr_datablock@btr+1)^0,w,c
 15970   005DC8  A4D8               	btfss	status,2,c
 15971   005DCA  EFE9  F02E         	goto	u4661
 15972   005DCE  EFEB  F02E         	goto	u4660
 15973   005DD2                     u4661:
 15974   005DD2  EFD5  F02E         	goto	l3990
 15975   005DD6                     u4660:
 15976   005DD6                     
 15977                           ;diskio.c: 151:  SPI_Exchange8bit(0xFF);
 15978   005DD6  0EFF               	movlw	255
 15979   005DD8  ECED  F030         	call	_SPI_Exchange8bit
 15980                           
 15981                           ;diskio.c: 152:  SPI_Exchange8bit(0xFF);
 15982   005DDC  0EFF               	movlw	255
 15983   005DDE  ECED  F030         	call	_SPI_Exchange8bit
 15984   005DE2                     
 15985                           ;diskio.c: 154:  return 1;
 15986   005DE2  0E01               	movlw	1
 15987   005DE4                     l123:
 15988   005DE4  0012               	return		;funcret
 15989   005DE6                     __end_of_rcvr_datablock:
 15990                           	callstack 0
 15991                           
 15992 ;; *************** function _SPI_Exchange8bit *****************
 15993 ;; Defined at:
 15994 ;;		line 80 in file "mcc_generated_files/spi.c"
 15995 ;; Parameters:    Size  Location     Type
 15996 ;;  data            1    wreg     unsigned char 
 15997 ;; Auto vars:     Size  Location     Type
 15998 ;;  data            1    0[COMRAM] unsigned char 
 15999 ;; Return value:  Size  Location     Type
 16000 ;;                  1    wreg      unsigned char 
 16001 ;; Registers used:
 16002 ;;		wreg, status,2
 16003 ;; Tracked objects:
 16004 ;;		On entry : 0/0
 16005 ;;		On exit  : 0/0
 16006 ;;		Unchanged: 0/0
 16007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16008 ;;      Params:         0       0       0       0       0       0       0
 16009 ;;      Locals:         1       0       0       0       0       0       0
 16010 ;;      Temps:          0       0       0       0       0       0       0
 16011 ;;      Totals:         1       0       0       0       0       0       0
 16012 ;;Total ram usage:        1 bytes
 16013 ;; Hardware stack levels used: 1
 16014 ;; This function calls:
 16015 ;;		Nothing
 16016 ;; This function is called by:
 16017 ;;		_wait_ready
 16018 ;;		_deselect
 16019 ;;		_select
 16020 ;;		_rcvr_datablock
 16021 ;;		_xmit_datablock
 16022 ;;		___send_cmd
 16023 ;;		_disk_initialize
 16024 ;;		_disk_ioctl
 16025 ;;		_SPI_Exchange8bitBuffer
 16026 ;; This function uses a non-reentrant model
 16027 ;;
 16028                           
 16029                           	psect	text48
 16030   0061DA                     __ptext48:
 16031                           	callstack 0
 16032   0061DA                     _SPI_Exchange8bit:
 16033                           	callstack 25
 16034                           
 16035                           ;incstack = 0
 16036                           ;SPI_Exchange8bit@data stored from wreg
 16037   0061DA  6E01               	movwf	SPI_Exchange8bit@data^0,c
 16038   0061DC                     
 16039                           ;mcc_generated_files/spi.c: 82:     SSPCON1bits.WCOL = 0;
 16040   0061DC  9EC6               	bcf	198,7,c	;volatile
 16041   0061DE                     
 16042                           ;mcc_generated_files/spi.c: 84:     SSPBUF = data;
 16043   0061DE  C001  FFC9         	movff	SPI_Exchange8bit@data,4041	;volatile
 16044   0061E2                     l21:
 16045                           
 16046                           ;mcc_generated_files/spi.c: 86:     while (SSPSTATbits.BF == 0x0) {
 16047   0061E2  A0C7               	btfss	199,0,c	;volatile
 16048   0061E4  EFF6  F030         	goto	u4441
 16049   0061E8  EFF8  F030         	goto	u4440
 16050   0061EC                     u4441:
 16051   0061EC  EFF1  F030         	goto	l21
 16052   0061F0                     u4440:
 16053   0061F0                     
 16054                           ;mcc_generated_files/spi.c: 89:     return (SSPBUF);
 16055   0061F0  50C9               	movf	201,w,c	;volatile
 16056   0061F2  0012               	return		;funcret
 16057   0061F4                     __end_of_SPI_Exchange8bit:
 16058                           	callstack 0
 16059                           
 16060 ;; *************** function _SYSTEM_Initialize *****************
 16061 ;; Defined at:
 16062 ;;		line 107 in file "mcc_generated_files/mcc.c"
 16063 ;; Parameters:    Size  Location     Type
 16064 ;;		None
 16065 ;; Auto vars:     Size  Location     Type
 16066 ;;		None
 16067 ;; Return value:  Size  Location     Type
 16068 ;;                  1    wreg      void 
 16069 ;; Registers used:
 16070 ;;		wreg, status,2, cstack
 16071 ;; Tracked objects:
 16072 ;;		On entry : 0/0
 16073 ;;		On exit  : 0/0
 16074 ;;		Unchanged: 0/0
 16075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16076 ;;      Params:         0       0       0       0       0       0       0
 16077 ;;      Locals:         0       0       0       0       0       0       0
 16078 ;;      Temps:          0       0       0       0       0       0       0
 16079 ;;      Totals:         0       0       0       0       0       0       0
 16080 ;;Total ram usage:        0 bytes
 16081 ;; Hardware stack levels used: 1
 16082 ;; Hardware stack levels required when called: 1
 16083 ;; This function calls:
 16084 ;;		_OSCILLATOR_Initialize
 16085 ;;		_PIN_MANAGER_Initialize
 16086 ;; This function is called by:
 16087 ;;		_main
 16088 ;; This function uses a non-reentrant model
 16089 ;;
 16090                           
 16091                           	psect	text49
 16092   00622A                     __ptext49:
 16093                           	callstack 0
 16094   00622A                     _SYSTEM_Initialize:
 16095                           	callstack 29
 16096   00622A                     
 16097                           ;mcc_generated_files/mcc.c: 108:     OSCILLATOR_Initialize();
 16098   00622A  EC0A  F031         	call	_OSCILLATOR_Initialize	;wreg free
 16099                           
 16100                           ;mcc_generated_files/mcc.c: 109:     PIN_MANAGER_Initialize();
 16101   00622E  ECDE  F030         	call	_PIN_MANAGER_Initialize	;wreg free
 16102   006232  0012               	return		;funcret
 16103   006234                     __end_of_SYSTEM_Initialize:
 16104                           	callstack 0
 16105                           
 16106 ;; *************** function _PIN_MANAGER_Initialize *****************
 16107 ;; Defined at:
 16108 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 16109 ;; Parameters:    Size  Location     Type
 16110 ;;		None
 16111 ;; Auto vars:     Size  Location     Type
 16112 ;;		None
 16113 ;; Return value:  Size  Location     Type
 16114 ;;                  1    wreg      void 
 16115 ;; Registers used:
 16116 ;;		wreg, status,2
 16117 ;; Tracked objects:
 16118 ;;		On entry : 0/0
 16119 ;;		On exit  : 0/0
 16120 ;;		Unchanged: 0/0
 16121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16122 ;;      Params:         0       0       0       0       0       0       0
 16123 ;;      Locals:         0       0       0       0       0       0       0
 16124 ;;      Temps:          0       0       0       0       0       0       0
 16125 ;;      Totals:         0       0       0       0       0       0       0
 16126 ;;Total ram usage:        0 bytes
 16127 ;; Hardware stack levels used: 1
 16128 ;; This function calls:
 16129 ;;		Nothing
 16130 ;; This function is called by:
 16131 ;;		_SYSTEM_Initialize
 16132 ;; This function uses a non-reentrant model
 16133 ;;
 16134                           
 16135                           	psect	text50
 16136   0061BC                     __ptext50:
 16137                           	callstack 0
 16138   0061BC                     _PIN_MANAGER_Initialize:
 16139                           	callstack 29
 16140   0061BC                     
 16141                           ;mcc_generated_files/pin_manager.c: 52:     TRISA0 = 1;
 16142   0061BC  8092               	bsf	3986,0,c	;volatile
 16143                           
 16144                           ;mcc_generated_files/pin_manager.c: 53:     TRISE0 = 0;
 16145   0061BE  9096               	bcf	3990,0,c	;volatile
 16146                           
 16147                           ;mcc_generated_files/pin_manager.c: 56:     TRISD2 = 1;
 16148   0061C0  8495               	bsf	3989,2,c	;volatile
 16149                           
 16150                           ;mcc_generated_files/pin_manager.c: 57:     TRISE1 = 0;
 16151   0061C2  9296               	bcf	3990,1,c	;volatile
 16152   0061C4                     
 16153                           ;mcc_generated_files/pin_manager.c: 60:     ADCON1 = 0x0E;
 16154   0061C4  0E0E               	movlw	14
 16155   0061C6  6EC1               	movwf	193,c	;volatile
 16156                           
 16157                           ;mcc_generated_files/pin_manager.c: 61:     ADCON2 = 0x89;
 16158   0061C8  0E89               	movlw	137
 16159   0061CA  6EC0               	movwf	192,c	;volatile
 16160                           
 16161                           ;mcc_generated_files/pin_manager.c: 62:     ADCON0 = 0x01;
 16162   0061CC  0E01               	movlw	1
 16163   0061CE  6EC2               	movwf	194,c	;volatile
 16164                           
 16165                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x04;
 16166   0061D0  0E04               	movlw	4
 16167   0061D2  6E8B               	movwf	139,c	;volatile
 16168                           
 16169                           ;mcc_generated_files/pin_manager.c: 66:     TRISC = 0xD3;
 16170   0061D4  0ED3               	movlw	211
 16171   0061D6  6E94               	movwf	148,c	;volatile
 16172   0061D8  0012               	return		;funcret
 16173   0061DA                     __end_of_PIN_MANAGER_Initialize:
 16174                           	callstack 0
 16175                           
 16176 ;; *************** function _OSCILLATOR_Initialize *****************
 16177 ;; Defined at:
 16178 ;;		line 112 in file "mcc_generated_files/mcc.c"
 16179 ;; Parameters:    Size  Location     Type
 16180 ;;		None
 16181 ;; Auto vars:     Size  Location     Type
 16182 ;;		None
 16183 ;; Return value:  Size  Location     Type
 16184 ;;                  1    wreg      void 
 16185 ;; Registers used:
 16186 ;;		wreg, status,2
 16187 ;; Tracked objects:
 16188 ;;		On entry : 0/0
 16189 ;;		On exit  : 0/0
 16190 ;;		Unchanged: 0/0
 16191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16192 ;;      Params:         0       0       0       0       0       0       0
 16193 ;;      Locals:         0       0       0       0       0       0       0
 16194 ;;      Temps:          0       0       0       0       0       0       0
 16195 ;;      Totals:         0       0       0       0       0       0       0
 16196 ;;Total ram usage:        0 bytes
 16197 ;; Hardware stack levels used: 1
 16198 ;; This function calls:
 16199 ;;		Nothing
 16200 ;; This function is called by:
 16201 ;;		_SYSTEM_Initialize
 16202 ;; This function uses a non-reentrant model
 16203 ;;
 16204                           
 16205                           	psect	text51
 16206   006214                     __ptext51:
 16207                           	callstack 0
 16208   006214                     _OSCILLATOR_Initialize:
 16209                           	callstack 29
 16210   006214                     
 16211                           ;mcc_generated_files/mcc.c: 115:     OSCCONbits.IRCF = 0b111;
 16212   006214  0E70               	movlw	112
 16213   006216  12D3               	iorwf	211,f,c	;volatile
 16214                           
 16215                           ;mcc_generated_files/mcc.c: 116:     OSCCONbits.SCS = 0b00;
 16216   006218  0EFC               	movlw	-4
 16217   00621A  16D3               	andwf	211,f,c	;volatile
 16218   00621C                     
 16219                           ;mcc_generated_files/mcc.c: 117:     OSCTUNEbits.PLLEN = 0;
 16220   00621C  9C9B               	bcf	155,6,c	;volatile
 16221   00621E  0012               	return		;funcret
 16222   006220                     __end_of_OSCILLATOR_Initialize:
 16223                           	callstack 0
 16224                           
 16225 ;; *************** function _ADC_Read *****************
 16226 ;; Defined at:
 16227 ;;		line 9 in file "main.c"
 16228 ;; Parameters:    Size  Location     Type
 16229 ;;		None
 16230 ;; Auto vars:     Size  Location     Type
 16231 ;;		None
 16232 ;; Return value:  Size  Location     Type
 16233 ;;                  2    0[COMRAM] unsigned int 
 16234 ;; Registers used:
 16235 ;;		wreg, status,2, status,0
 16236 ;; Tracked objects:
 16237 ;;		On entry : 0/0
 16238 ;;		On exit  : 0/0
 16239 ;;		Unchanged: 0/0
 16240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16241 ;;      Params:         2       0       0       0       0       0       0
 16242 ;;      Locals:         0       0       0       0       0       0       0
 16243 ;;      Temps:          2       0       0       0       0       0       0
 16244 ;;      Totals:         4       0       0       0       0       0       0
 16245 ;;Total ram usage:        4 bytes
 16246 ;; Hardware stack levels used: 1
 16247 ;; This function calls:
 16248 ;;		Nothing
 16249 ;; This function is called by:
 16250 ;;		_main
 16251 ;; This function uses a non-reentrant model
 16252 ;;
 16253                           
 16254                           	psect	text52
 16255   00617A                     __ptext52:
 16256                           	callstack 0
 16257   00617A                     _ADC_Read:
 16258                           	callstack 30
 16259   00617A                     
 16260                           ;main.c: 10:     ADCON0bits.GO = 1;
 16261   00617A  82C2               	bsf	194,1,c	;volatile
 16262   00617C                     l804:
 16263   00617C  B2C2               	btfsc	194,1,c	;volatile
 16264   00617E  EFC3  F030         	goto	u8501
 16265   006182  EFC5  F030         	goto	u8500
 16266   006186                     u8501:
 16267   006186  EFBE  F030         	goto	l804
 16268   00618A                     u8500:
 16269   00618A                     
 16270                           ;main.c: 12:     return ((ADRESH << 8) + ADRESL);
 16271   00618A  50C4               	movf	196,w,c	;volatile
 16272   00618C  6E04               	movwf	(??_ADC_Read+1)^0,c
 16273   00618E  6A03               	clrf	??_ADC_Read^0,c
 16274   006190  50C3               	movf	195,w,c	;volatile
 16275   006192  2403               	addwf	??_ADC_Read^0,w,c
 16276   006194  6E01               	movwf	?_ADC_Read^0,c
 16277   006196  0E00               	movlw	0
 16278   006198  2004               	addwfc	(??_ADC_Read+1)^0,w,c
 16279   00619A  6E02               	movwf	(?_ADC_Read+1)^0,c
 16280   00619C  0012               	return		;funcret
 16281   00619E                     __end_of_ADC_Read:
 16282                           	callstack 0
 16283                           
 16284                           	psect	rparam
 16285   000001                     ___rparam_used  equ	1
 16286   000000                     ___param_bank   equ	0
 16287   000000                     __Lparam        equ	__Lrparam
 16288   000000                     __Hparam        equ	__Hrparam
 16289                           
 16290                           	psect	idloc
 16291                           
 16292                           ;Config register IDLOC0 @ 0x200000
 16293                           ;	unspecified, using default values
 16294   200000                     	org	2097152
 16295   200000  FF                 	db	255
 16296                           
 16297                           ;Config register IDLOC1 @ 0x200001
 16298                           ;	unspecified, using default values
 16299   200001                     	org	2097153
 16300   200001  FF                 	db	255
 16301                           
 16302                           ;Config register IDLOC2 @ 0x200002
 16303                           ;	unspecified, using default values
 16304   200002                     	org	2097154
 16305   200002  FF                 	db	255
 16306                           
 16307                           ;Config register IDLOC3 @ 0x200003
 16308                           ;	unspecified, using default values
 16309   200003                     	org	2097155
 16310   200003  FF                 	db	255
 16311                           
 16312                           ;Config register IDLOC4 @ 0x200004
 16313                           ;	unspecified, using default values
 16314   200004                     	org	2097156
 16315   200004  FF                 	db	255
 16316                           
 16317                           ;Config register IDLOC5 @ 0x200005
 16318                           ;	unspecified, using default values
 16319   200005                     	org	2097157
 16320   200005  FF                 	db	255
 16321                           
 16322                           ;Config register IDLOC6 @ 0x200006
 16323                           ;	unspecified, using default values
 16324   200006                     	org	2097158
 16325   200006  FF                 	db	255
 16326                           
 16327                           ;Config register IDLOC7 @ 0x200007
 16328                           ;	unspecified, using default values
 16329   200007                     	org	2097159
 16330   200007  FF                 	db	255
 16331                           
 16332                           	psect	config
 16333                           
 16334                           ; Padding undefined space
 16335   300000                     	org	3145728
 16336   300000  FF                 	db	255
 16337                           
 16338                           ;Config register CONFIG1H @ 0x300001
 16339                           ;	Oscillator Selection bits
 16340                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
 16341                           ;	Fail-Safe Clock Monitor Enable bit
 16342                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 16343                           ;	Internal/External Oscillator Switchover bit
 16344                           ;	IESO = OFF, Oscillator Switchover mode disabled
 16345   300001                     	org	3145729
 16346   300001  08                 	db	8
 16347                           
 16348                           ;Config register CONFIG2L @ 0x300002
 16349                           ;	Power-up Timer Enable bit
 16350                           ;	PWRT = ON, PWRT enabled
 16351                           ;	Brown-out Reset Enable bits
 16352                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 16353                           ;	Brown Out Reset Voltage bits
 16354                           ;	BORV = 0x12, user specified literal
 16355   300002                     	org	3145730
 16356   300002  96                 	db	150
 16357                           
 16358                           ;Config register CONFIG2H @ 0x300003
 16359                           ;	Watchdog Timer Enable bit
 16360                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 16361                           ;	Watchdog Timer Postscale Select bits
 16362                           ;	WDTPS = 32768, 1:32768
 16363   300003                     	org	3145731
 16364   300003  1E                 	db	30
 16365                           
 16366                           ; Padding undefined space
 16367   300004                     	org	3145732
 16368   300004  FF                 	db	255
 16369                           
 16370                           ;Config register CONFIG3H @ 0x300005
 16371                           ;	CCP2 MUX bit
 16372                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
 16373                           ;	PORTB A/D Enable bit
 16374                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 16375                           ;	Low-Power Timer1 Oscillator Enable bit
 16376                           ;	LPT1OSC = ON, Timer1 configured for low-power operation
 16377                           ;	MCLR Pin Enable bit
 16378                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
 16379   300005                     	org	3145733
 16380   300005  05                 	db	5
 16381                           
 16382                           ;Config register CONFIG4L @ 0x300006
 16383                           ;	Stack Full/Underflow Reset Enable bit
 16384                           ;	STVREN = ON, Stack full/underflow will cause Reset
 16385                           ;	Single-Supply ICSP Enable bit
 16386                           ;	LVP = OFF, Single-Supply ICSP disabled
 16387                           ;	Extended Instruction Set Enable bit
 16388                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 16389                           ;	Background Debugger Enable bit
 16390                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 16391   300006                     	org	3145734
 16392   300006  81                 	db	129
 16393                           
 16394                           ; Padding undefined space
 16395   300007                     	org	3145735
 16396   300007  FF                 	db	255
 16397                           
 16398                           ;Config register CONFIG5L @ 0x300008
 16399                           ;	Code Protection bit
 16400                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 16401                           ;	Code Protection bit
 16402                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 16403                           ;	Code Protection bit
 16404                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 16405                           ;	Code Protection bit
 16406                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 16407   300008                     	org	3145736
 16408   300008  0F                 	db	15
 16409                           
 16410                           ;Config register CONFIG5H @ 0x300009
 16411                           ;	Boot Block Code Protection bit
 16412                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 16413                           ;	Data EEPROM Code Protection bit
 16414                           ;	CPD = OFF, Data EEPROM not code-protected
 16415   300009                     	org	3145737
 16416   300009  C0                 	db	192
 16417                           
 16418                           ;Config register CONFIG6L @ 0x30000A
 16419                           ;	Write Protection bit
 16420                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 16421                           ;	Write Protection bit
 16422                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 16423                           ;	Write Protection bit
 16424                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 16425                           ;	Write Protection bit
 16426                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 16427   30000A                     	org	3145738
 16428   30000A  0F                 	db	15
 16429                           
 16430                           ;Config register CONFIG6H @ 0x30000B
 16431                           ;	Configuration Register Write Protection bit
 16432                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 16433                           ;	Boot Block Write Protection bit
 16434                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
 16435                           ;	Data EEPROM Write Protection bit
 16436                           ;	WRTD = OFF, Data EEPROM not write-protected
 16437   30000B                     	org	3145739
 16438   30000B  E0                 	db	224
 16439                           
 16440                           ;Config register CONFIG7L @ 0x30000C
 16441                           ;	Table Read Protection bit
 16442                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 16443                           ;	Table Read Protection bit
 16444                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 16445                           ;	Table Read Protection bit
 16446                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 16447                           ;	Table Read Protection bit
 16448                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 16449   30000C                     	org	3145740
 16450   30000C  0F                 	db	15
 16451                           
 16452                           ;Config register CONFIG7H @ 0x30000D
 16453                           ;	Boot Block Table Read Protection bit
 16454                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 16455   30000D                     	org	3145741
 16456   30000D  40                 	db	64
 16457                           tosu	equ	0xFFF
 16458                           tosh	equ	0xFFE
 16459                           tosl	equ	0xFFD
 16460                           stkptr	equ	0xFFC
 16461                           pclatu	equ	0xFFB
 16462                           pclath	equ	0xFFA
 16463                           pcl	equ	0xFF9
 16464                           tblptru	equ	0xFF8
 16465                           tblptrh	equ	0xFF7
 16466                           tblptrl	equ	0xFF6
 16467                           tablat	equ	0xFF5
 16468                           prodh	equ	0xFF4
 16469                           prodl	equ	0xFF3
 16470                           indf0	equ	0xFEF
 16471                           postinc0	equ	0xFEE
 16472                           postdec0	equ	0xFED
 16473                           preinc0	equ	0xFEC
 16474                           plusw0	equ	0xFEB
 16475                           fsr0h	equ	0xFEA
 16476                           fsr0l	equ	0xFE9
 16477                           wreg	equ	0xFE8
 16478                           indf1	equ	0xFE7
 16479                           postinc1	equ	0xFE6
 16480                           postdec1	equ	0xFE5
 16481                           preinc1	equ	0xFE4
 16482                           plusw1	equ	0xFE3
 16483                           fsr1h	equ	0xFE2
 16484                           fsr1l	equ	0xFE1
 16485                           bsr	equ	0xFE0
 16486                           indf2	equ	0xFDF
 16487                           postinc2	equ	0xFDE
 16488                           postdec2	equ	0xFDD
 16489                           preinc2	equ	0xFDC
 16490                           plusw2	equ	0xFDB
 16491                           fsr2h	equ	0xFDA
 16492                           fsr2l	equ	0xFD9
 16493                           status	equ	0xFD8

Data Sizes:
    Strings     55
    Constant    0
    Data        1
    BSS         595
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    127     127
    BANK0           128    120     126
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           244      0       0

Pointer List with Targets:

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    chk_chr@str	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[15]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    create_name@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@p	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    create_name@path	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> follow_path@path(BANK0[1]), 

    create_name@sfn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    dir_alloc@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    dir_find@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    dir_next@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    dir_register@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    dir_sdi@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), STR_5(CODE[15]), STR_6(CODE[15]), 
		 -> NULL(NULL[0]), 

    dj$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dj$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    f_close@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    f_lseek@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@path	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    f_mount@rp	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    f_open@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@path	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    f_read@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_read@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    f_sync@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@buff	PTR const void  size(1) Largest target is 15
		 -> STR_5(CODE[15]), STR_6(CODE[15]), 

    f_write@bw	PTR unsigned short  size(1) Largest target is 2
		 -> main@bw(BANK0[2]), 

    f_write@fp	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    f_write@fp$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@wbuff	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_5(CODE[15]), STR_6(CODE[15]), 

    FatFs@ff$F447	PTR struct .[1] size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    Fil$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    Fil$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@path	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> f_mount@path(COMRAM[1]), f_open@path(BANK0[1]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), NULL(NULL[0]), 

    find_volume@rfs	PTR PTR struct . size(1) Largest target is 22
		 -> f_mount@fs(COMRAM[2]), f_open@dj(BANK0[21]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp	PTR struct . size(1) Largest target is 22
		 -> f_open@dj(BANK0[21]), 

    follow_path@dp$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@path	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), NULL(NULL[0]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> f_mount@path(COMRAM[1]), f_mount@rp(COMRAM[1]), f_open@path(BANK0[1]), 

    get_ldnumber@tp	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    get_ldnumber@tt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[1]), STR_4(CODE[10]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@s	PTR const unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@src	PTR const void  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), NULL(NULL[0]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), NULL(NULL[0]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), FatFs(BIGRAM[558]), STR_5(CODE[15]), STR_6(CODE[15]), 
		 -> NULL(NULL[0]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), FatFs(BIGRAM[558]), STR_5(CODE[15]), STR_6(CODE[15]), 
		 -> NULL(NULL[0]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), NULL(NULL[0]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S424$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S424$fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S424$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S435$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S435$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil	PTR struct . size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    validate@fil$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@obj	PTR void  size(2) Largest target is 32
		 -> Fil(BANK1[32]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), FatFs$win(COMRAM[512]), STR_5(CODE[15]), STR_6(CODE[15]), 
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _remove_chain->_put_fat
    _dir_find->_dir_next
    _create_name->_mem_set
    _dir_alloc->_dir_next
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI_Exchange8bit
    _deselect->_SPI_Exchange8bit
    _rcvr_datablock->_SPI_Exchange8bit

Critical Paths under _main in BANK0

    _main->_f_open
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_register->_dir_alloc
    _f_mount->_find_volume

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  140284
                                            110 BANK0     10    10      0
                           _ADC_Read
                  _SYSTEM_Initialize
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                             _f_sync
                            _f_write
 ---------------------------------------------------------------------------------
 (1) _f_write                                             33    27      6   16859
                                            108 COMRAM    18    12      6
                                              0 BANK0     15    15      0
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (1) _f_open                                              52    48      4   79626
                                             58 BANK0     52    48      4
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (2) _remove_chain                                        15     9      6    8117
                                             85 COMRAM    15     9      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (2) _follow_path                                          6     4      2   29873
                                              5 BANK0      6     4      2
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (2) _ld_clust                                            14    10      4      96
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             5     4      1   23151
                                              0 BANK0      5     4      1
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             12     7      5     139
                                              0 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (3) _create_name                                         17    15      2    1432
                                              8 COMRAM    17    15      2
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _chk_chr                                              5     2      3      91
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _dir_register                                         3     2      1   26385
                                              9 BANK0      3     2      1
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _mem_cpy                                             12     6      6     198
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) _dir_alloc                                            9     6      3   22969
                                              0 BANK0      9     6      3
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _dir_sdi                                             20    17      3    4630
                                             84 COMRAM    20    17      3
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            19    16      3   15152
                                            108 COMRAM    19    16      3
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (1) _f_mount                                             10     6      4   11303
                                             79 COMRAM    10     6      4
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (2) _find_volume                                         69    66      3   10566
                                             68 COMRAM    11     8      3
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_ldnumber                                        11     9      2     386
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _disk_initialize                                     13    13      0    1217
                                             16 COMRAM    13    13      0
                   _SPI_Exchange8bit
                     _SPI_Initialize
                           _SPI_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _SPI_Open                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_fs                                            10     4      6    3051
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (1) _f_lseek                                             39    33      6   14483
                                            108 COMRAM     6     0      6
                                              0 BANK0     33    33      0
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (2) _create_chain                                        23    17      6    8658
                                             85 COMRAM    23    17      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _put_fat                                             27    17     10    4064
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_fat                                             26    20      6    3648
                                             58 COMRAM    26    20      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          11     5      6     221
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8      98
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     168
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _f_close                                              3     1      2    9077
                                             72 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (1) _f_sync                                               9     7      2    8769
                                             67 COMRAM     5     3      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (2) _validate                                             8     6      2     189
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (3) _disk_status                                          1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _sync_fs                                             11     9      2    5169
                                             56 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _mem_set                                              8     2      6     102
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _disk_ioctl                                          40    37      3    1918
                                             16 COMRAM    40    37      3
                   _SPI_Exchange8bit
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (2) _st_clust                                             6     0      6      92
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _move_window                                         11     5      6    2893
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _sync_window                                         21    19      2    1546
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (3) _disk_write                                          10     2      8    1160
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (4) _xmit_datablock                                       6     3      3     223
                                              3 COMRAM     6     3      3
                   _SPI_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (3) _disk_read                                           12     4      8    1089
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _send_cmd                                             6     2      4     665
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (5) ___send_cmd                                           7     3      4     519
                                              3 COMRAM     7     3      4
                   _SPI_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (6) _select                                               0     0      0     133
                   _SPI_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _wait_ready                                           2     2      0      75
                                              1 COMRAM     2     2      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _deselect                                             0     0      0      29
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _rcvr_datablock                                       7     3      4     157
                                              1 COMRAM     7     3      4
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI_Exchange8bit                                     1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _f_close
     _f_sync
       _move_window
         _disk_read
           _deselect
             _SPI_Exchange8bit
           _rcvr_datablock
             _SPI_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI_Exchange8bit
               _deselect
               _select
                 _SPI_Exchange8bit
                 _deselect
                 _wait_ready
                   _SPI_Exchange8bit
         _sync_window
           _disk_write
             _deselect
             _send_cmd
             _xmit_datablock
               _SPI_Exchange8bit
               _wait_ready
       _st_clust
       _sync_fs
         _disk_ioctl
           _SPI_Exchange8bit
           _deselect
           _rcvr_datablock
           _select
           _send_cmd
         _disk_write
         _mem_set
         _sync_window
       _validate
         _disk_status
     _validate
   _f_lseek
     ___lldiv
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
       _put_fat
         _move_window
     _get_fat
     _validate
   _f_mount
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
       _disk_initialize
         _SPI_Exchange8bit
         _SPI_Initialize
         _SPI_Open
         _deselect
         _send_cmd
       _disk_status
       _get_ldnumber
       _move_window
     _get_ldnumber
   _f_open
     _dir_register
       _dir_alloc
         _dir_next
           _clust2sect
           _create_chain
           _get_fat
           _mem_set
           _sync_window
         _dir_sdi
           _clust2sect
           _get_fat
         _move_window
       _mem_cpy
       _mem_set
       _move_window
     _find_volume
     _follow_path
       _create_name
         _chk_chr
         _mem_set
       _dir_find
         _dir_next
         _dir_sdi
         _mem_cmp
         _move_window
       _dir_sdi
       _ld_clust
     _ld_clust
     _move_window
     _remove_chain
       _get_fat
       _put_fat
     _st_clust
   _f_sync
   _f_write
     _clust2sect
     _create_chain
     _disk_write
     _mem_cpy
     _move_window
     _sync_window
     _validate

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1523      0     558     36.6%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0      32     12.5%
BITBANK5           244      0       0      0.0%
BANK5              244      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128    120     126     98.4%
BITCOMRAM          127      0       0      0.0%
COMRAM             127    127     127    100.0%
BITBIGSFR_1l        35      0       0      0.0%
BITBIGSFR_1h        17      0       0      0.0%
BITBIGSFRlh         14      0       0      0.0%
BITBIGSFR_5         13      0       0      0.0%
BITBIGSFRh           9      0       0      0.0%
BITBIGSFR_2          6      0       0      0.0%
BITBIGSFR_4          3      0       0      0.0%
BITBIGSFR_3          3      0       0      0.0%
BITBIGSFRll          3      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     842      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec 26 17:54:49 2024

                _SPI_Initialize 6204                     get_fat@clst 003D                    create_name@b 0011  
                  create_name@c 0019                    create_name@d 0014                    create_name@i 0016  
                  create_name@p 0015                     _SSPSTATbits 0FC7                get_ldnumber@path 0001  
                            l21 61E2                              l23 61F0                              l15 6212  
                            l24 61F2                              l18 6202                              l80 6232  
                            l83 621E                              l69 61D8                     disk_ioctl@n 0036  
                ??_dir_register 008A                disk_write@sector 0013                   create_name@dp 0009  
                 create_name@ni 0012                   create_name@si 000F                  create_chain@cs 0069  
                create_chain@fs 0056                             l100 5F7E                             l104 5FA6  
                           l112 6150                             l123 5DE4                             l107 6220  
                           l115 6178                             l212 4AB0                             l109 6228  
                           l213 4948                             l118 5D80                             l150 605A  
                           l214 495C                             l215 497C                             l400 399C  
                           l129 5CA4                             l209 4932                             l153 42CC  
                           l138 5BFA                             l322 5B38                             l402 3C00  
                           l170 4454                             l154 4574                             l219 4A08  
                           l307 6002                             l316 4F68                             l228 2702  
                           l332 5A76                             l340 34D4                             l404 398C  
                           l164 43E6                             l325 4758                             l238 232C  
                           l158 4308                             l335 34C8                             l159 4550  
                           l192 50F0                             l328 475A                             l184 454E  
                           l432 419C                             l353 384C                             l361 2750  
                           l417 3BF0                             l177 44BA                             l513 3F8A  
                           l338 383C                             l178 4504                             l195 5200  
                           l291 6124                             l419 3BE8                             l427 42B2  
                           l515 3D60                             l196 5106                             l197 5126  
                           l189 61BA                             l445 301C                             l285 5822  
                           l381 4AFE                             l630 0F82                             l622 0BAC  
                           l616 09D0                             l552 4D66                             l561 4DE4  
                           l393 4C54                             l385 4C28                             l482 614E  
                           l378 2B92                             l474 532A                             l298 5ED6  
                           l554 4D50                             l706 19EA                             l475 532C  
                           l539 3F4E                             l299 5EDE                             l804 617C  
                           l644 58EA                             l820 4836                             l581 556A  
                           l750 1A90                             l486 544E                             l822 48A4  
                           l814 47AE                             l807 619C                             l479 5E6C  
                           l671 3328                             l815 47B0                             l744 60A4  
                           l648 59B0                             l496 5750                             l664 3146  
                           l824 4904                             l816 47C8                             l577 5674  
                           l673 32FC                             l665 3134                             l657 346E  
                           l754 1D60                             l739 50C4                             l748 2110  
                           l588 119C                             l861 5D48                             l854 5D38  
                           l838 5F38                             l839 5F48                             _Fil 0100  
                  disk_read@cmd 001C                  ??_create_chain 005C                             wreg 0FE8  
             disk_initialize@ty 001A                  create_name@sfn 0018                 create_chain@ncl 0065  
               create_chain@scl 0061                 create_chain@res 0060                     ld_clust@dir 0003  
                          l4010 4942                            l4002 490A                            l4020 498E  
                          l4004 491A                            l4100 4EF0                            l4030 4A2E  
                          l4022 49B4                            l4014 4956                            l4006 492C  
                          l4024 49D4                            l4040 4A96                            l4104 4F0A  
                          l4112 4F66                            l4120 5AAA                            l4200 27D8  
                          l4050 50EA                            l4042 4A9A                            l4034 4A52  
                          l4026 49E0                            l4018 496A                            l4106 4F26  
                          l4130 5B1A                            l4122 5AB8                            l4210 284C  
                          l4202 27FC                            l5010 3E9C                            l5002 3E66  
                          l4060 513C                            l4036 4A6E                            l4028 49F6  
                          l4108 4F5C                            l4124 5AC8                            l4132 5B36  
                          l4116 5A78                            l4140 34B4                            l4220 28D6  
                          l4212 2858                            l4204 2800                            l4300 38D4  
                          l5100 5450                            l5012 3EAC                            l5004 3E76  
                          l5020 3EC6                            l4062 5148                            l4054 5100  
                          l4046 50C8                            l4038 4A8E                            l4126 5B0E  
                          l4118 5A7A                            l4150 3588                            l4142 34DC  
                          l4230 2990                            l4222 28FA                            l4214 2868  
                          l4206 280E                            l4310 394A                            l4302 3900  
                          l5110 54D0                            l5102 547A                            l5030 3EFA  
                          l5022 3ED2                            l5014 3EAE                            l5006 3E86  
                          l4080 51EA                            l4072 51A2                            l4064 5150  
                          l4048 50D8                            l4128 5B16                            l4400 2146  
                          l4160 363C                            l4152 358C                            l4144 34EE  
                          l4136 3470                            l4240 2A5A                            l4232 29F0  
                          l4224 2908                            l4216 28C2                            l4208 2818  
                          l4320 39E2                            l4312 395E                            l4304 391A  
                          l5120 5520                            l5104 54A6                            l5040 3F32  
                          l5024 3EE2                            l5016 3EB2                            l5008 3E8C  
                          l5200 4BB6                            l4074 51BE                            l4066 5154  
                          l4058 5114                            l4090 4E20                            l4410 218C  
                          l5130 5824                            l4170 36EE                            l4162 364C  
                          l4138 348A                            l4250 2B56                            l4242 2AC2  
                          l4226 2944                            l4330 3A4C                            l4322 39F2  
                          l5114 54D6                            l5050 3F7A                            l5042 3F46  
                          l5026 3EEE                            l5018 3EBE                            l5210 4C52  
                          l4076 51D0                            l4068 517A                            l4092 4E66  
                          l4084 4DE6                            l4420 227C                            l4412 21AE  
                          l4404 214C                            l5132 583E                            l5140 58E2  
                          l4260 5EE0                            l4180 37F2                            l4172 3720  
                          l4164 366C                            l4156 35F8                            l4148 355A  
                          l4236 2A04                            l4228 2970                            l4324 3A0C  
                          l4316 39AC                            l4308 392E                            l5116 551A  
                          l5108 54AC                            l5060 5586                            l5220 56CC  
                          l5052 3F88                            l5044 3F62                            l5036 3F10  
                          l5028 3EF6                            l5204 4BCA                            l4078 51E6  
                          l4094 4E6E                            l4086 4DE8                            l4430 2366  
                          l4422 22E2                            l4414 21C4                            l4406 2160  
                          l4270 60EE                            l5134 5858                            l5150 5CB6  
                          l4262 5EF0                            l4174 3740                            l4166 367C  
                          l4158 362E                            l4246 2AD6                            l4238 2A36  
                          l4254 2B6A                            l4190 2748                            l4350 3B18  
                          l4334 3A66                            l4318 39B8                            l5126 5568  
                          l5070 55B0                            l5062 5594                            l5310 06F0  
                          l5302 0696                            l5222 56DC                            l5214 5676  
                          l4510 5FA8                            l5046 3F64                            l5038 3F28  
                          l4502 5E6E                            l5206 4BF2                            l4096 4E7C  
                          l4088 4E04                            l4440 23A8                            l4432 2388  
                          l4416 221A                            l4408 2166                            l4272 60FA  
                          l5144 58E8                            l5136 5880                            l5160 5CF8  
                          l5152 5CCC                            l4264 5EFE                            l4280 59BE  
                          l4184 3816                            l4248 2B0E                            l4192 2758  
                          l4256 2B90                            l4360 3BD4                            l4352 3B46  
                          l4336 3A82                            l4344 3AC4                            l4328 3A20  
                          l5080 560E                            l5072 55CC                            l5064 5596  
                          l5056 556C                            l5312 06FE                            l5304 06BC  
                          l5320 070A                            l5224 5702                            l5216 568C  
                          l4512 5FAC                            l5048 3F78                            l4504 5E7A  
                          l5240 4CA6                            l5232 4C56                            l5208 4C18  
                          l5170 61BC                            l4098 4EDA                            l4450 2446  
                          l4434 2390                            l4426 233A                            l4418 2258  
                          l4274 6106                            l5138 58B8                            l5162 5D16  
                          l5154 5CD4                            l4266 5F0E                            l4282 5A00  
                          l4178 37BA                            l4194 276A                            l4186 2704  
                          l4354 3B56                            l4346 3AF2                            l4338 3A9C  
                          l4290 384E                            l4362 6204                            l4370 61F4  
                          l5082 5624                            l5074 55E8                            l5090 565C  
                          l5058 5570                            l5410 099E                            l5402 0958  
                          l5322 0714                            l5306 06D2                            l4610 2D16  
                          l4522 3F8C                            l5226 5736                            l5218 569C  
                          l4514 5FAE                            l4506 5E82                            l5242 4CC0  
                          l5234 4C72                            l6130 4778                            l5172 61C4  
                          l3900 5B90                            l4460 2566                            l4452 24C0  
                          l4436 2396                            l4428 2360                            l4444 23EE  
                          l4276 610A                            l4380 61B0                            l5164 5D26  
                          l5156 5CE0                            l5148 5CA6                            l4268 5F18  
                          l4196 27C4                            l4188 271E                            l4356 3B9A  
                          l4348 3B02                            l4292 3864                            l4364 620C  
                          l4372 61FC                            l4700 42E8                            l5084 5636  
                          l5076 55F2                            l5068 5596                            l5500 0E02  
                          l5412 09B4                            l5340 0770                            l5332 074E  
                          l5324 0724                            l5316 0704                            l5308 06E0  
                          l4620 2D3E                            l4604 2C68                            l4540 407A  
                          l4532 4004                            l4524 3FB8                            l5228 574E  
                          l4516 5FCA                            l4508 5E9C                            l5252 4D0A  
                          l5244 4CD4                            l5236 4C8E                            l5180 4ACC  
                          l6140 478E                            l6132 4778                            l5174 6214  
                          l3910 5BC0                            l3902 5BA0                            l4462 258C  
                          l4446 2414                            l4438 2398                            l4390 211C  
                          l5166 5D28                            l5158 5CEE                            l4286 5A14  
                          l4278 59B2                            l4358 3BC4                            l4294 3880  
                          l4366 620E                            l4374 61FE                            l4710 4330  
                          l4702 42F0                            l5086 5648                            l5078 560C  
                          l5094 5668                            l5510 0EB6                            l5502 0E44  
                          l5430 0ABE                            l5414 09EC                            l5350 07B4  
                          l5342 0780                            l5334 075E                            l5326 073A  
                          l4630 2DC0                            l4622 2D6E                            l4614 2D1C  
                          l4606 2CC0                            l4550 40F2                            l4534 401A  
                          l4526 3FCE                            l4518 5FF2                            l5270 4D5E  
                          l5254 4D16                            l5246 4CE6                            l5238 4C92  
                          l5190 4B4A                            l5182 4AF6                            l6150 47CA  
                          l6142 47A4                            l6134 477C                            l6126 475C  
                          l5176 621C                            l3920 5BF2                            l3912 5BD2  
                          l3904 5BA4                            l4480 2644                            l4472 2602  
                          l4456 2556                            l4448 2436                            l4392 212C  
                          l4384 61B6                            l5168 5D32                            l4296 3896  
                          l4368 6210                            l4376 6200                            l4720 4368  
                          l4712 4356                            l4704 42F6                            l5088 5650  
                          l5520 0FDE                            l5512 0EC8                            l5424 0A46  
                          l5416 0A08                            l5408 097E                            l5360 0824  
                          l5352 07BC                            l5344 07A0                            l5328 0748  
                          l5600 5960                            l4632 2DD6                            l4616 2D38  
                          l4608 2CFC                            l4560 4160                            l4552 4124  
                          l4536 4042                            l4528 3FFE                            l4800 57BC  
                          l5256 4D2E                            l5248 4CF6                            l5280 4DE2  
                          l5184 4B04                            l6160 4852                            l6152 47E2  
                          l6144 47A6                            l6136 4788                            l6128 4760  
                          l3850 5F56                            l3922 5BF8                            l3914 5BD8  
                          l3906 5BB6                            l4482 2646                            l4474 2628  
                          l4466 25B4                            l4810 4576                            l4378 61A0  
                          l4298 38C0                            l4730 43A8                            l4722 436A  
                          l4706 42F8                            l5530 108E                            l5522 101A  
                          l5514 0F54                            l5450 0BC0                            l5426 0A84  
                          l5418 0A24                            l5362 0838                            l5370 0878  
                          l5290 0664                            l5610 599C                            l5602 5974  
                          l4642 2DF6                            l4554 4140                            l4570 41E4  
                          l4546 40A6                            l4538 4064                            l4802 57D6  
                          l5274 4D78                            l5258 4D3E                            l5194 4B64  
                          l5186 4B30                            l5178 4AB2                            l6170 48CC  
                          l6162 485E                            l6154 47F2                            l6146 47BE  
                          l6138 478C                            l3844 61DC                            l3916 5BDC  
                          l3908 5BBA                            l3940 5C5A                            l3932 5C16  
                          l4492 26AE                            l4484 265A                            l4476 2630  
                          l4468 25DA                            l4396 2132                            l4388 2114  
                          l4820 45EA                            l4812 4584                            l4740 440A  
                          l4724 437A                            l4708 430A                            l5540 117E  
                          l5532 10C2                            l5524 102A                            l5508 0E66  
                          l5444 0B5A                            l5436 0B08                            l5428 0AA2  
                          l5380 08CA                            l5372 0880                            l5364 0854  
                          l5356 07D6                            l5284 063A                            l5612 59AE  
                          l5604 5986                            l4660 2EBA                            l4636 2DDC  
                          l4628 2D84                            l4580 42B0                            l4572 41FE  
                          l4548 40CC                            l4804 5800                            l4900 53B0  
                          l5196 4B80                            l5700 3324                            l6164 4870  
                          l6156 4802                            l6172 48D8                            l6148 47C0  
                          l3846 61DE                            l3862 6222                            l3854 5F70  
                          l3918 5BE4                            l3942 5C5E                            l3934 5C1C  
                          l3926 5BFC                            l4486 2680                            l4478 2640  
                          l4494 26B6                            l4398 2136                            l4830 4686  
                          l4822 45FE                            l4814 4594                            l5550 4F88  
                          l4750 4442                            l4742 4430                            l4734 43D2  
                          l4726 438A                            l4718 4358                            l5534 10F2  
                          l5526 103C                            l5446 0B7A                            l5438 0B28  
                          l5382 08D6                            l5374 0892                            l5366 0870  
                          l5358 0808                            l5390 092A                            l5294 066A  
                          l5286 0644                            l5606 5996                            l4670 2F12  
                          l4662 2ED0                            l4654 2E3C                            l4590 2BE4  
                          l4566 4194                            l4558 4146                            l4806 5804  
                          l4902 53BC                            l5278 4DA8                            l5198 4B88  
                          l5702 3338                            l5710 3384                            l5630 3066  
                          l5622 3038                            l6166 4888                            l6158 481A  
                          l6174 48F2                            l3856 5F78                            l3848 5F4A  
                          l3872 6172                            l3864 6152                            l3880 5B4E  
                          l3960 6016                            l3944 5C76                            l3936 5C2E  
                          l3952 5CA2                            l3928 5C10                            l4488 2686  
                          l4496 26FC                            l4832 46D6                            l4824 461A  
                          l4816 45AE                            l5560 5030                            l5552 4FA2  
                          l4752 4444                            l4736 43E0                            l4728 439C  
                          l4760 447E                            l5536 1122                            l5528 105A  
                          l5480 0CEA                            l5472 0CAA                            l5464 0C48  
                          l5456 0BD6                            l5448 0B90                            l5392 093C  
                          l5384 08FC                            l5376 0898                            l5296 067E  
                          l5288 0654                            l4672 2F16                            l4656 2E6A  
                          l4648 2E16                            l4680 2FBA                            l4584 2B94  
                          l4568 41B2                            l4808 5808                            l4920 3C02  
                          l4912 5426                            l4904 53CC                            l5720 3420  
                          l5712 3394                            l5704 3346                            l5640 30A2  
                          l5632 3076                            l5624 3044                            l5616 301E  
                          l5800 1582                            l6168 48C0                            l3858 5F90  
                          l3874 6176                            l3866 6158                            l3890 5B74  
                          l3882 5B52                            l3962 602E                            l3946 5C8A  
                          l3938 5C36                            l4498 2700                            l4834 4718  
                          l4826 4636                            l4818 45CA                            l5570 5094  
                          l5562 5058                            l5554 4FD4                            l5546 4F6A  
                          l4770 44F0                            l4762 44A6                            l4754 4462  
                          l4738 43F8                            l4690 42C6                            l5538 1172  
                          l5490 0DA6                            l5482 0CEE                            l5474 0CAE  
                          l5466 0C8E                            l5458 0C26                            l5386 0900  
                          l5378 08B4                            l5298 0690                            l4682 2FCC  
                          l4674 2F44                            l4658 2EAE                            l4594 2BEA  
                          l4586 2BB2                            l4578 4218                            l4850 525E  
                          l4842 5202                            l4930 3C58                            l4922 3C10  
                          l4914 543A                            l4906 53D4                            l5722 3434  
                          l5714 33B2                            l5706 3348                            l5650 30F0  
                          l5642 30B4                            l5634 307A                            l5626 304C  
                          l5618 3032                            l5810 1634                            l5730 119E  
                          l3980 5D72                            l3972 5D4A                            l3868 616C  
                          l3892 5B7A                            l3884 5B66                            l3964 603E  
                          l3956 6006                            l4828 465E                            l4836 4726  
                          l5572 50AC                            l5564 5058                            l5556 4FE4  
                          l5548 4F78                            l5900 1AEE                            l4780 4558  
                          l4772 44FE                            l4764 44B2                            l4756 446E  
                          l4748 4432                            l5492 0DB8                            l5484 0D22  
                          l5476 0CCA                            l5396 0942                            l5388 0910  
                          l5580 58EC                            l4684 301A                            l4668 2EF6  
                          l4676 2F64                            l4596 2C08                            l4588 2BC4  
                          l4844 5216                            l4940 3CA4                            l4932 3C72  
                          l4924 3C12                            l4908 53EE                            l5724 3444  
                          l5716 33E4                            l5708 3370                            l5660 3142  
                          l5652 30FC                            l5644 30B8                            l5636 308A  
                          l5628 3050                            l5820 1732                            l5812 1682  
                          l5804 1596                            l5740 11D0                            l5732 11A2  
                          l3990 5DAA                            l3982 5D7A                            l3974 5D56  
                          l3894 5B80                            l3878 5B3C                            l3958 6014  
                          l4838 4754                            l5566 5074                            l5558 5008  
                          l5574 50C2                            l5910 1C9E                            l5902 1B32  
                          l4782 4568                            l4774 4516                            l4766 44C6  
                          l4758 4476                            l4694 42DC                            l5486 0D3E  
                          l5478 0CCE                            l5398 0952                            l5590 5914  
                          l5582 58F0                            l4678 2F7E                            l4598 2C3C  
                          l4870 5326                            l4862 52E8                            l4854 5272  
                          l4846 5226                            l4790 5752                            l4950 3D04  
                          l4942 3CB4                            l4934 3C84                            l4926 3C2E  
                          l5718 340C                            l5670 319C                            l5662 3156  
                          l5654 30FE                            l5646 30CE                            l5638 3092  
                          l5726 346C                            l5822 1748                            l5806 15D4  
                          l5750 126C                            l5734 11AC                            l3992 5DBA  
                          l3984 5D92                            l3976 5D5E                            l3896 5B86  
                          l3888 5B6C                            l3968 6044                            l5568 5084  
                          l5920 1D14                            l5912 1CB4                            l5904 1B48  
                          l4784 456C                            l4776 4528                            l4688 42B6  
                          l5488 0D72                            l5592 5928                            l5584 5900  
                          l4864 52F0                            l4856 529E                            l4848 522E  
                          l4792 5766                            l4960 3D40                            l4952 3D18  
                          l4944 3CC6                            l4936 3C8C                            l4928 3C4A  
                          l5680 3210                            l5672 31AA                            l5664 3164  
                          l5648 30DE                            l5656 310A                            l5840 1860  
                          l5832 17D8                            l5816 1696                            l5808 1610  
                          l5824 176A                            l5760 1334                            l5752 1278  
                          l5744 11F0                            l5736 11BC                            l5578 622A  
                          l3994 5DBE                            l3986 5DA4                            l3898 5B8C  
                          l4882 6126                            l5922 1D30                            l5914 1CE8  
                          l5906 1BD2                            l4778 4554                            l4698 42E4  
                          l5498 0DDA                            l5594 593A                            l5586 590E  
                          l4866 5304                            l4858 52C8                            l4794 57A4  
                          l4970 3D90                            l4954 3D2A                            l4962 3D4C  
                          l4946 3CDC                            l4938 3CA0                            l4874 5DE6  
                          l5690 32A6                            l5682 3226                            l5674 31BE  
                          l5666 3164                            l5658 312C                            l5850 191C  
                          l5842 1868                            l5826 17A0                            l5834 17FC  
                          l5818 16FE                            l5762 1350                            l5754 12B2  
                          l3996 5DD6                            l5940 1E10                            l5932 1D96  
                          l5916 1D00                            l5908 1C82                            l5596 5944  
                          l4868 5314                            l4796 57AC                            l4980 3DD8  
                          l4972 3DA0                            l4964 3D5C                            l4948 3CEE  
                          l4892 535A                            l4884 532E                            l4876 5E20  
                          l5684 3242                            l5676 31E2                            l5668 3180  
                          l5692 32CA                            l5844 18A8                            l5828 17C4  
                          l5852 1934                            l5780 1440                            l5772 13FA  
                          l5764 1366                            l5756 1302                            l5836 1818  
                          l5860 196A                            l5748 120E                            l3998 5DE2  
                          l5870 605C                            l5950 1E90                            l5942 1E44  
                          l5934 1DB0                            l5926 1D44                            l5598 5956  
                          l4798 57B4                            l4990 3E1E                            l4982 3DE8  
                          l4974 3DB4                            l4966 3D70                            l4958 3D30  
                          l4894 538A                            l4886 5342                            l4878 5E5C  
                          l5694 32DA                            l5686 3262                            l5678 31FE  
                          l5854 193A                            l5838 184A                            l5790 14F2  
                          l5774 1410                            l5862 197C                            l5766 139E  
                          l5758 1312                            l5872 606A                            l5952 1EC2  
                          l5944 1E62                            l5936 1DE4                            l5960 1F1E  
                          l5928 1D7C                            l4992 3E2A                            l4984 3DF8  
                          l4976 3DB8                            l4968 3D80                            l4888 5352  
                          l5696 32F4                            l5688 3272                            l5864 19B2  
                          l5856 1954                            l5848 18BC                            l5792 1516  
                          l5784 1454                            l5768 13DE                            l5874 607A  
                          l5970 1FD2                            l5962 1F3C                            l5938 1DFC  
                          l5882 19EC                            l4994 3E2E                            l4978 3DC8  
                          l4898 539E                            l5698 330A                            l5866 19DA  
                          l5858 1962                            l5786 1492                            l5778 1424  
                          l5876 6088                            l5980 2086                            l5964 1F58  
                          l5956 1ED6                            l5948 1E76                            l5892 1A30  
                          l5884 19FC                            l4996 3E42                            l5796 152A  
                          l5788 14AE                            l5990 617A                            l5878 6098  
                          l5982 20A2                            l5974 1FE6                            l5966 1F86  
                          l5958 1F0E                            l5894 1A5A                            l5798 156A  
                          l5992 618A                            l5984 20D8                            l5968 1FBA  
                          l5976 201C                            l5896 1A74                            l5888 1A10  
                          l5986 2100                            l5978 2056                            l5898 1AD8  
                          STR_1 061F                            STR_2 061F                            STR_3 060F  
                          STR_4 062E                            STR_5 0601                            STR_6 0610  
                          _LATC 0F8B                            u5000 5AC8                            u5001 5AC4  
                          u5010 5B0E                            u5011 5B0A                            u5100 36EA  
                          u5020 348A                            u5101 36E6                            u5021 3486  
                          u5110 3784                            u5030 34B4                            u5031 34B0  
                          u5120 37B6                            u5200 2908                            u5121 37B2  
                          u5201 2904                            u5050 3556                            u5210 2964  
                          u5130 271E                            u6010 2CC0                            u5115 377A  
                          u5051 3552                            u5131 271A                            u6011 2CBC  
                          u4500 5B4E                            u5220 2A00                            u5140 2748  
                          u5300 3896                            u6100 2EF2                            u6020 2D16  
                          u4501 5B4A                            u5045 351E                            u5221 29FC  
                          u5141 2744                            u5301 3892                            u6101 2EEE  
                          u6021 2D12                            u6005 2C74                            u4510 5B66  
                          u5070 35F4                            u5230 2A9E                            u5310 38C0  
                          u6110 2F44                            u6030 2D38                            u4511 5B62  
                          u5071 35F0                            u5215 295A                            u5311 38BC  
                          u6111 2F40                            u6031 2D34                            u4440 61F0  
                          u4520 5BA0                            u4600 5C9E                            u7000 58E2  
                          u5080 363C                            u5240 2AD2                            u5160 27D4  
                          u5400 3AC0                            u5320 391A                            u6200 439C  
                          u6040 2D6E                            u4441 61EC                            u4521 5B9C  
                          u4601 5C9A                            u7001 58DE                            u5081 3638  
                          u5065 35BC                            u5241 2ACE                            u5161 27D0  
                          u5401 3ABC                            u5321 3916                            u6201 4398  
                          u6041 2D6A                            u4450 5F6C                            u4530 5BB6  
                          u4610 6014                            u7010 5CCC                            u5250 5EFE  
                          u5170 280E                            u5410 3B02                            u5330 394A  
                          u6210 43CE                            u6130 42C6                            u6050 2D80  
                          u4451 5F68                            u4531 5BB2                            u4611 6010  
                          u7011 5CC8                            u5251 5EFA                            u5235 2A94  
                          u5171 280A                            u5155 279A                            u5411 3AFE  
                          u5331 3946                            u6211 43CA                            u6131 42C2  
                          u6051 2D7C                            u4460 5F90                            u4540 5BD2  
                          u4620 603E                            u4700 4956                            u5500 218C  
                          u7020 5CEE                            u5260 5F38                            u5420 3B18  
                          u5340 3988                            u6300 4528                            u6220 43F8  
                          u6140 42DC                            u6060 2DD6                            u7100 4BF2  
                          u4461 5F8C                            u4541 5BCE                            u4621 603A  
                          u4701 4952                            u5501 2188                            u7021 5CEA  
                          u5261 5F34                            u5421 3B14                            u5341 3984  
                          u6301 4524                            u6221 43F4                            u6141 42D8  
                          u6125 2FDA                            u6061 2DD2                            u7101 4BEE  
                          u4630 5D6E                            u4470 5FA4                            u4550 5BF2  
                          u4710 496A                            u5510 21AE                            u5270 6124  
                          u7030 5D16                            u5190 28D2                            u5430 3B56  
                          u5350 39E2                            u6310 454E                            u6230 440A  
                          u6150 4308                            u6070 2DF2                            u7110 4C52  
                          u4631 5D6A                            u4471 5F9E                            u4551 5BEE  
                          u4711 4966                            u5511 21AA                            u5271 6120  
                          u7031 5D12                            u5095 3658                            u5191 28CE  
                          u5431 3B52                            u5351 39DE                            u6311 454A  
                          u6231 4406                            u6151 4304                            u6071 2DEE  
                          u7111 4C4E                            u4640 5D92                            u4480 5FA6  
                          u4560 5C10                            u4800 4A8E                            u5600 2388  
                          u5520 21C4                            u6400 4754                            u5280 5A00  
                          u5440 3B9A                            u5360 3A0C                            u6320 4568  
                          u6240 4430                            u6160 4330                            u6080 2E12  
                          u7120 569C                            u7200 4D5E                            u7040 4ACC  
                          u8000 12B2                            u4641 5D8E                            u4561 5C0C  
                          u4801 4A8A                            u5601 2384                            u5521 21C0  
                          u6401 4750                            u5281 59FC                            u5185 2898  
                          u5441 3B96                            u5361 3A08                            u6321 4564  
                          u6241 442C                            u6161 432C                            u6081 2E0E  
                          u7121 5698                            u7201 4D5A                            u7041 4AC8  
                          u8001 12AE                            u4650 5DA4                            u4490 616C  
                          u4570 5C2E                            u4810 4AAE                            u4730 498E  
                          u5610 23A8                            u5450 3BD4                            u5370 3A62  
                          u5290 3864                            u6250 4454                            u6170 4356  
                          u6090 2E38                            u6410 5226                            u6330 5794  
                          u7130 56DC                            u7210 4D74                            u7050 4AF6  
                          u8010 12DE                            u4651 5DA0                            u4491 6168  
                          u4571 5C2A                            u4811 4AA8                            u4731 498A  
                          u5611 23A4                            u5451 3BD0                            u5371 3A5E  
                          u5291 3860                            u6251 4450                            u6171 4352  
                          u6091 2E34                            u6411 5222                            u7131 56D8  
                          u7211 4D70                            u7051 4AF2                            u4660 5DD6  
                          u4900 519E                            u4580 5C56                            u4820 4AB0  
                          u4740 49B4                            u5700 258C                            u5620 23CC  
                          u5460 61B0                            u5380 3A82                            u6260 4462  
                          u6180 437A                            u7300 075E                            u6420 526E  
                          u6340 57D2                            u6500 539A                            u7220 4DA4  
                          u7140 4C72                            u7060 4B46                            u8100 1516  
                          u8020 1312                            u4661 5DD2                            u4901 519A  
                          u4741 49B0                            u4725 496C                            u5701 2588  
                          u5461 61AC                            u5381 3A7E                            u6261 445E  
                          u6181 4376                            u7301 075A                            u6421 526A  
                          u6341 57CE                            u6501 5396                            u7221 4DA0  
                          u7141 4C6E                            u7061 4B42                            u8101 1512  
                          u8021 130E                            u4910 51BE                            u4830 50D8  
                          u4590 5C76                            u4750 49D4                            u4670 491A  
                          u5710 25B0                            u5630 2414                            u5470 212C  
                          u5390 3A98                            u6270 44A6                            u6190 438A  
                          u7310 076C                            u7230 0664                            u6430 529E  
                          u6350 57FE                            u6510 53CC                            u7150 4C8E  
                          u7070 4B60                            u8110 1582                            u8030 1334  
                          u4911 51BA                            u4831 50D4                            u4591 5C72  
                          u4751 49D0                            u4671 4916                            u5711 25AC  
                          u5631 2410                            u5535 222C                            u5471 2128  
                          u5391 3A94                            u6271 44A2                            u6191 4386  
                          u7311 0768                            u7231 0660                            u6431 529A  
                          u6511 53C8                            u7151 4C8A                            u7071 4B5C  
                          u8111 157E                            u8031 1330                            u8015 12D4  
                          u4920 51D0                            u4840 50EA                            u4760 49F6  
                          u4680 492C                            u5720 25DA                            u5640 2436  
                          u5480 2146                            u6280 44EC                            u7400 0952  
                          u7320 07B0                            u7240 0690                            u6440 52C8  
                          u6360 5822                            u5800 5FCA                            u6600 3CEE  
                          u6520 53EE                            u7160 4CC0                            u7080 4B80  
                          u8200 1860                            u8040 1366                            u4921 51CC  
                          u4841 50E6                            u4761 49F2                            u4681 4928  
                          u5721 25D6                            u5641 2432                            u5625 23C2  
                          u5545 2260                            u5481 2142                            u6281 44E8  
                          u7401 094E                            u7321 07AC                            u7241 068C  
                          u6441 52C4                            u6361 581E                            u6337 5784  
                          u5801 5FC6                            u6601 3CEA                            u6521 53EA  
                          u7161 4CBC                            u7081 4B7C                            u8201 185C  
                          u8041 1362                            u4930 51FE                            u4850 5100  
                          u4770 4A2E                            u4690 4942                            u5730 25FE  
                          u5650 2446                            u5570 230A                            u5490 2160  
                          u6370 4594                            u6290 4516                            u7410 097A  
                          u7330 07D2                            u7250 06BC                            u6450 52E4  
                          u5810 5FF2                            u6610 3D04                            u6530 5422  
                          u7170 4D06                            u7090 4BC6                            u8210 18A8  
                          u8130 15D4                            u8050 13F6                            u4931 51F8  
                          u4851 50FC                            u4587 5C4C                            u4771 4A2A  
                          u4691 493E                            u5731 25FA                            u5651 2442  
                          u5555 2286                            u5491 215C                            u6371 4590  
                          u6291 4512                            u7411 0976                            u7331 07CE  
                          u7251 06B8                            u6451 52E0                            u5811 5FEE  
                          u6611 3D00                            u6531 541E                            u7171 4D02  
                          u7091 4BC2                            u8211 18A4                            u8131 15D0  
                          u8051 13F2                            u4940 5200                            u4860 5114  
                          u4780 4A4E                            u5740 2628                            u5580 233A  
                          u6380 45AE                            u8300 1AEE                            u7420 09B4  
                          u7340 0824                            u7260 06E0                            u5900 4190  
                          u5820 3FCE                            u6460 5314                            u6700 3DD8  
                          u6620 3D18                            u6540 544A                            u7180 4D3E  
                          u8220 197C                            u8140 1610                            u8060 1410  
                          u4861 5110                            u4781 4A4A                            u5741 2624  
                          u5581 2336                            u5565 22AC                            u6381 45AA  
                          u8301 1AEA                            u7421 09B0                            u7341 0820  
                          u7261 06DC                            u5901 418C                            u5821 3FCA  
                          u6461 5310                            u6357 57F4                            u6701 3DD4  
                          u6621 3D14                            u6541 5446                            u7181 4D3A  
                          u8221 1978                            u8141 160C                            u8125 15AE  
                          u8061 140C                            u4790 4A6E                            u4950 4E04  
                          u5750 2656                            u5590 2360                            u6390 45CA  
                          u7510 0C44                            u7430 0A24                            u7350 0892  
                          u7270 06F0                            u5910 41B2                            u5830 3FFE  
                          u6470 5326                            u6710 3DE8                            u6630 3D2A  
                          u6550 3C2E                            u7190 4D50                            u8230 19B2  
                          u8150 1682                            u8070 1440                            u4791 4A6A  
                          u4951 4E00                            u5751 2652                            u5591 235C  
                          u5575 2300                            u6391 45C6                            u7511 0C40  
                          u7431 0A20                            u7351 088E                            u7271 06EC  
                          u5911 41AE                            u5831 3FFA                            u6471 5322  
                          u6711 3DE4                            u6631 3D26                            u6551 3C2A  
                          u7191 4D4C                            u8231 19AE                            u8151 167E  
                          u8071 143C                            u4880 513C                            u4960 4E66  
                          u5760 2680                            u8240 607A                            u8400 1E62  
                          u8320 1B48                            u7600 0FAA                            u7520 0CA6  
                          u7440 0A42                            u7360 08CA                            u7280 06FE  
                          u5920 4214                            u5840 401A                            u6800 3F0C  
                          u6720 3DF8                            u6640 3D5C                            u6560 3C4A  
                          u6480 5E20                            u8160 16FE                            u8080 1492  
                          u4881 5138                            u4961 4E62                            u5761 267C  
                          u5665 244E                            u8241 6076                            u8401 1E5E  
                          u8321 1B44                            u7521 0CA2                            u7505 0BEE  
                          u7441 0A3E                            u7361 08C6                            u7281 06FA  
                          u5921 4210                            u5841 4016                            u6801 3F08  
                          u6721 3DF4                            u6641 3D58                            u6561 3C46  
                          u6481 5E1C                            u8161 16FA                            u8081 148E  
                          u4890 517A                            u4970 4EDA                            u5770 26AA  
                          u8250 6098                            u8410 1E90                            u8330 1BD2  
                          u7610 0FDA                            u7530 0CCA                            u7450 0ABE  
                          u7370 0910                            u7290 0748                            u5850 4042  
                          u6810 3F28                            u6730 3E1A                            u6650 3D70  
                          u6570 3CB4                            u6490 5352                            u8090 14F2  
                          u4891 5176                            u4875 5116                            u4971 4ED6  
                          u5771 26A6                            u5675 2472                            u8251 6094  
                          u8411 1E8C                            u8331 1BCE                            u8315 1B12  
                          u7611 0FD6                            u7531 0CC6                            u7451 0ABA  
                          u7371 090C                            u7291 0744                            u5851 403E  
                          u6811 3F24                            u6731 3E16                            u6651 3D6C  
                          u6571 3CB0                            u6491 534E                            u8091 14EE  
                          u8500 618A                            u4980 4F06                            u5684 2492  
                          u7700 4FE4                            u8420 1EC2                            u8340 1CB4  
                          u8260 1A0C                            u6900 5636                            u7620 103C  
                          u7540 0CEA                            u7460 0B04                            u7380 092A  
                          u5860 407A                            u6820 3F46                            u6740 3E62  
                          u6660 3D80                            u6580 3CC6                            u5780 5E9C  
                          u8180 17A0                            u8501 6186                            u4981 4F02  
                          u5685 248C                            u7701 4FE0                            u8421 1EBE  
                          u8341 1CB0                            u8261 1A08                            u6901 5632  
                          u7621 1038                            u7605 0FA0                            u7541 0CE6  
                          u7461 0B00                            u7381 0926                            u5861 4076  
                          u6821 3F42                            u6741 3E5E                            u6661 3D7C  
                          u6581 3CC2                            u5781 5E98                            u8181 179C  
                          u4990 5AAA                            u8430 1F3C                            u8350 1D00  
                          u8270 1A2C                            u6910 5648                            u7630 105A  
                          u7550 0DB8                            u7470 0B56                            u7390 093C  
                          u7710 590E                            u5950 2BC4                            u5870 40A2  
                          u6830 3F62                            u6750 3E76                            u6670 3D90  
                          u6590 3CD8                            u5790 5ED6                            u8190 17C4  
                          u4991 5AA6                            u5695 24E2                            u8431 1F38  
                          u8351 1CFC                            u8271 1A28                            u6911 5644  
                          u7631 1056                            u7551 0DB4                            u7471 0B52  
                          u7391 0938                            u7711 590A                            u5951 2BC0  
                          u5935 4224                            u5871 409E                            u6831 3F5E  
                          u6751 3E72                            u6671 3D8C                            u6591 3CD4  
                          u5791 5ED2                            u8191 17C0                            u8175 1752  
                          u8440 1F86                            u8360 1D30                            u8280 1A5A  
                          u6920 54A6                            u7640 108E                            u7560 0DD6  
                          u7480 0B90                            u7720 593A                            u5960 2BE4  
                          u5880 4140                            u6840 3F78                            u6760 3E86  
                          u6680 3DA0                            u7800 30CE                            u8441 1F82  
                          u8361 1D2C                            u8281 1A56                            u6921 54A2  
                          u7641 108A                            u7561 0DD2                            u7481 0B8C  
                          u7721 5936                            u5961 2BE0                            u5945 4270  
                          u5881 413C                            u6841 3F74                            u6761 3E82  
                          u6681 3D9C                            u7801 30CA                            u8450 1FD2  
                          u8370 1D92                            u8290 1A74                            u6930 54D0  
                          u6850 5586                            u7650 10C2                            u7490 0BD2  
                          u7730 5956                            u5970 2C08                            u5890 4160  
                          u6770 3E9C                            u6690 3DC8                            u7810 30DE  
                          u8451 1FCE                            u8371 1D8E                            u8291 1A70  
                          u6931 54CC                            u6851 5582                            u7651 10BE  
                          u7491 0BCE                            u7731 5952                            u5971 2C04  
                          u5891 415C                            u6771 3E98                            u6691 3DC4  
                          u7811 30DA                            u8460 2006                            u8380 1DB0  
                          u6940 551A                            u6860 55B0                            u7660 10F2  
                          u7580 0E62                            u7740 5986                            u5980 2C3C  
                          u6780 3EAC                            u7900 32F4                            u7820 30F0  
                          u8381 1DAC                            u6941 5516                            u6861 55AC  
                          u7661 10EE                            u7581 0E5E                            u7741 5982  
                          u5981 2C38                            u6781 3EA8                            u7901 32F0  
                          u7821 30EC                            u8470 2056                            u8390 1DFC  
                          u6950 5564                            u6870 55CC                            u7670 1122  
                          u7590 0EC8                            u7750 5996                            u5990 2C64  
                          u6790 3EE2                            u7910 330A                            u7830 312C  
                          u8471 2052                            u8391 1DF8                            u6951 5560  
                          u6871 55C8                            u7671 111E                            u7591 0EC4  
                          u7575 0E20                            u7751 5992                            u5991 2C60  
                          u6791 3EDE                            u7911 3306                            u7831 3128  
                          u6960 583E                            u7680 4F88                            u8480 2086  
                          u6880 55E8                            u7920 3324                            u7840 3142  
                          u7760 3032                            u8800 47BE                            u6961 583A  
                          u7681 4F84                            u8481 2082                            u8465 1FFC  
                          u6881 55E4                            u7921 3320                            u7841 313E  
                          u7761 302E                            u8801 47BA                            u6970 5858  
                          u7690 4FA2                            u8490 20D8                            u6890 5624  
                          u7930 3338                            u7850 3156                            u7770 3076  
                          u8810 47F2                            u6971 5854                            u7691 4F9E  
                          u8491 20D4                            u6891 5620                            u7931 3334  
                          u7851 3152                            u7771 3072                            u8811 47EE  
                          u6980 5880                            u7940 3346                            u7860 3164  
                          u7780 30A2                            u8820 4802                            u6981 587C  
                          u7941 3342                            u7861 3160                            u7781 309E  
                          u8821 47FE                            u6990 58B8                            u7950 3394  
                          u7870 3226                            u7790 30B4                            u8830 481A  
                          u6991 58B4                            u7951 3390                            u7871 3222  
                          u7791 30B0                            u8831 4816                            u7880 3272  
                          u7960 11CC                            u8840 4870                            u7881 326E  
                          u7961 11C8                            u8841 486C                            u7890 32DA  
                          u7970 11EC                            u8850 4888                            u8907 5F72  
                          u7891 32D6                            u7971 11E8                            u8851 4884  
                          u7980 120A                            u8860 4904                            u8917 5D74  
                          u7981 1206                            u8861 4900                            u7990 126C  
                          u8790 47A4                            u7991 1268                            u8791 47A0  
                          u8877 48E4                            u8887 43D8                            u8897 44F6  
                          _Fsid 00F8                            _Stat 00FD                            _main 475C  
                  find_volume@i 00B5                            fsr0h 0FEA                            fsr1h 0FE2  
                          indf0 0FEF                            fsr2h 0FDA                            fsr0l 0FE9  
                          indf1 0FE7                            indf2 0FDF                            fsr1l 0FE1  
                          fsr2l 0FD9                   disk_ioctl@cmd 0011                   disk_ioctl@csd 0020  
                 disk_read@buff 0011                __end_of_ADC_Read 619E                   disk_ioctl@res 0035  
                 disk_ioctl@ptr 0037                   disk_read@pdrv 0019                            prodh 0FF4  
                          prodl 0FF3                  ??_get_ldnumber 0003                            start 0000  
        __end_of_SPI_Initialize 6214              disk_initialize@cmd 0019                    ?_follow_path 0085  
            disk_initialize@ocr 0013                    ___param_bank 0000              disk_initialize@tmr 001B  
               create_name@path 000A                create_chain@clst 0058                     _sync_window 4DE6  
 __end_of_OSCILLATOR_Initialize 6220                           ?_main 0001                 __end_of___lldiv 5D4A  
                         _LATC2 7C5A                           _TRISC 0F94                 __end_of_f_close 60A6  
                         _FatFs 0120                 __end_of_chk_chr 6004                 __end_of_f_lseek 2112  
           ___lmul@multiplicand 0005                 __end_of_f_mount 59B2                    ___send_cmd@n 0009  
               __end_of_dir_sdi 42B4                 __end_of_f_write 19EC                 __end_of_get_fat 384E  
               __end_of_mem_cmp 5EE0                 __end_of_mem_cpy 5824                 __end_of_mem_set 6126  
                  main@open_res 00F3                   find_volume@br 0080                   find_volume@fs 00B8  
                 find_volume@pt 009A                __end_of_SPI_Open 6204                  disk_ioctl@buff 0012  
                disk_read@count 0017                           tablat 0FF5                  disk_ioctl@pdrv 0030  
                         plusw2 0FDB                 __end_of_put_fat 2B94                           status 0FD8  
               __end_of_sync_fs 475C                   main@adc_value 00F0                   get_ldnumber@i 0007  
               ?_SPI_Initialize 0001                 __initialization 60A6             disk_initialize@pdrv 0012  
                  __end_of_main 4908                    clust2sect@fs 000D                          ??_main 00EE  
                 __activetblptr 0002        __end_of_SPI_Exchange8bit 61F4                          _ADCON0 0FC2  
                        _ADCON1 0FC1                          _ADCON2 0FC0                          _ADRESH 0FC4  
                        _ADRESL 0FC3                          _SSPADD 0FC8                          _TRISA0 7C90  
                        _TRISE0 7CB0                          _TRISD2 7CAA                          _TRISE1 7CB1  
                        _SSPBUF 0FC9            __end_of_dir_register 5752                __end_of_check_fs 556C  
              __end_of_deselect 622A                __end_of_dir_find 5450                __end_of_dir_next 301E  
                  ?_move_window 0030            __end_of_create_chain 3C02                __end_of_ld_clust 5E6E  
                        ___lmul 5EE0                       ??___lldiv 0009                          _f_open 301E  
                        _f_sync 4F6A                       ??_f_close 004B                  find_volume@fmt 00B7  
                        clear_0 60C0                          clear_1 60D2                  find_volume@rfs 0045  
                     ??_chk_chr 0004                  find_volume@vol 00A0                          _select 6150  
                     ??_f_lseek 0080                          isa$std 0001                       ??_f_mount 0054  
                     ??_dir_sdi 0058                       ??_f_write 0073                       ??_get_fat 0041  
                        main@bw 00F6                __end_of_send_cmd 605C                       ??_mem_cmp 0006  
                     ??_mem_cpy 0007                       ??_mem_set 0007                 disk_ioctl@csize 0031  
              __end_of_validate 58EC            __end_of_get_ldnumber 5676                       ?_ADC_Read 0001  
                  __mediumconst 0000                 disk_read@sector 0013                          tblptrh 0FF7  
                        tblptrl 0FF6                          tblptru 0FF8                __end_of_st_clust 6150  
                     ??_put_fat 0045                 xmit_datablock@i 0007                       ??_sync_fs 003B  
            rcvr_datablock@buff 0002               _SYSTEM_Initialize 622A                      __accesstop 0080  
       __end_of__initialization 60E4                  disk_write@buff 0011                  get_ldnumber@tp 0006  
                get_ldnumber@tt 0009                  disk_write@pdrv 001A                   _FatFs@ff$F447 00FA  
            ?_SYSTEM_Initialize 0001                   ___rparam_used 0001                  __pcstackCOMRAM 0001  
                  __pidataBANK0 6234             ??_SYSTEM_Initialize 0001                      ___send_cmd 5B3A  
                     ?_SPI_Open 0001                      ??_ADC_Read 0003       __end_of_SYSTEM_Initialize 6234  
                    __pbssBANK0 00F8                      __pbssBANK1 0100                         ?___lmul 0001  
                       ?_f_open 00BA                         ?_f_sync 0044               ??_disk_initialize 0011  
                  ?_sync_window 001B                  ___lmul@product 0009                         ?_select 0001  
                    ??_SPI_Open 0001                       ?_check_fs 003B                      _disk_ioctl 2112  
                follow_path@dir 0087                  follow_path@res 008A                      _disk_write 4908  
                   send_cmd@cmd 000F                       ?_deselect 0001                     send_cmd@arg 000B  
                   send_cmd@res 0010                  remove_chain@fs 0056                       ?_dir_find 0080  
                     ?_dir_next 006D                         _SSPCON1 0FC6                       ?_ld_clust 0001  
                       _SSPSTAT 0FC7                      _clust2sect 59B2                sync_window@wsect 002C  
              ??_SPI_Initialize 0001                   ?_remove_chain 0056               __end_of_dir_alloc 532E  
                     ?_send_cmd 000B                         __Hparam 0000                  ___send_cmd@cmd 000A  
                ___send_cmd@arg 0004                  ___send_cmd@res 0008                         __Lparam 0000  
                     ?_validate 0002               __end_of_disk_read 5202                      f_close@res 004B  
                     ?_st_clust 0001                     ?___send_cmd 0004                         ___lldiv 5CA6  
                    check_fs@fs 003B                    __psmallconst 0600                         _f_close 605C  
                       __pcinit 60A6                         _chk_chr 5FA8             _disk_initialize$348 0017  
                       _f_lseek 19EC                         __ramtop 0600                         _f_mount 58EC  
                       __ptext0 475C                         __ptext1 119E                         __ptext2 301E  
                       __ptext3 4AB2                         __ptext4 4C56                         __ptext5 5DE6  
                       __ptext6 532E                         __ptext7 5E6E                         __ptext8 3C02  
                       __ptext9 5FA8                         _dir_sdi 3F8C                     validate@fil 0008  
                       _f_write 119E                     validate@obj 0002                         _get_fat 3470  
                    chk_chr@chr 0002                    _dir_register 5676                      chk_chr@str 0001  
                       _mem_cmp 5E6E                         _mem_cpy 5752           _OSCILLATOR_Initialize 6214  
                       _mem_set 60EE                      ??_check_fs 0041                 find_volume@path 0046  
               find_volume@nrsv 00A2                 find_volume@stat 00AC        ??_PIN_MANAGER_Initialize 0001  
                  _create_chain 384E                      ??_deselect 0002                      ??_dir_find 0080  
             ?_SPI_Exchange8bit 0001                         _put_fat 2704                      ??_dir_next 0070  
                       main@res 00F2                      f_lseek@bcs 0099                      ??_ld_clust 0005  
                       _sync_fs 4576                      f_lseek@ofs 006F                      f_lseek@res 0090  
          end_of_initialization 60E4              ??_SPI_Exchange8bit 0001            SPI_Exchange8bit@data 0001  
                    f_open@mode 00BD                      f_open@path 00BC                  ??_remove_chain 005C  
                 __Lmediumconst 0000                 disk_status@pdrv 0001                  _rcvr_datablock 5D4A  
               ___lldiv@divisor 0005                      f_mount@cfs 0055                      f_mount@res 0054  
                    ??_send_cmd 000F                      f_mount@opt 0053                      f_mount@vol 0058  
               ___lldiv@counter 000D                    _get_ldnumber 556C                      ??_validate 0004  
                       postdec1 0FE5                         postdec2 0FDD                         postinc0 0FEE  
                       postinc1 0FE6                         postinc2 0FDE                      ??_st_clust 0007  
                move_window@res 003A                      _wait_ready 5F4A                      dir_alloc@n 0086  
              remove_chain@clst 0058                      dir_find@dp 0080                       _PORTDbits 0F83  
               _create_name$838 000D                      dir_sdi@idx 0056                      dir_next@dp 006D  
                   ?_disk_ioctl 0011             rcvr_datablock@token 0008                      f_write@btw 0070  
                    f_write@res 0080                     ?_disk_write 0011                      get_fat@val 004B  
               get_ldnumber@vol 0004                 disk_write@count 0017                     ?_clust2sect 000D  
        __end_of_rcvr_datablock 5DE6                   ??_create_name 000B                disk_initialize@n 001D  
                    ld_clust@cl 000B                      ld_clust@fs 0001                   ??_find_volume 0048  
                 ??_disk_status 0001                  _xmit_datablock 5BFC                  __end_of___lmul 5F4A  
                   st_clust@dir 0001                  __end_of_f_open 3470                  __end_of_f_sync 50C6  
                clust2sect@clst 000F          ?_OSCILLATOR_Initialize 0001                  __end_of_select 617A  
           start_initialization 60A6                      mem_cmp@cnt 0004                      mem_cmp@dst 0001  
                    mem_cmp@src 0003                      mem_cpy@cnt 0005                     put_fat@clst 003D  
                    mem_cpy@dst 0001                      mem_cpy@src 0003                 ?_rcvr_datablock 0002  
               _disk_initialize 42B4                      mem_set@cnt 0005                      mem_set@dst 0001  
                    mem_set@val 0003          __end_of_xmit_datablock 5CA6                   ??_follow_path 0080  
           __end_of_create_name 3F8C                        ??___lmul 0009                        ??_f_open 00BE  
                      ??_f_sync 0046                     ?_wait_ready 0001                     __pdataBANK0 00FD  
           __end_of_find_volume 119E             __end_of_disk_status 61BC                        ??_select 0004  
          __end_of_remove_chain 4C56               rcvr_datablock@btr 0004               rcvr_datablock@tmr 0006  
                   __pbssBIGRAM 0120                   __pcstackBANK0 0080                    check_fs@sect 003D  
               _find_volume$942 0090                 _find_volume$943 0094          _PIN_MANAGER_Initialize 61BC  
               ?_xmit_datablock 0004                    ??___send_cmd 0008                       _dir_alloc 5202  
                      ?___lldiv 0001                        ?_f_close 0049                       _disk_read 50C6  
                      ?_chk_chr 0001                   follow_path@dp 0085                        ?_f_lseek 006D  
                 follow_path@ns 0089             __end_of_follow_path 4DE6                        ?_f_mount 0050  
                      ?_dir_sdi 0055                        ?_f_write 006D                        ?_get_fat 003B  
                   __smallconst 0600                        ?_mem_cmp 0001                        ?_mem_cpy 0001  
                      ?_mem_set 0001                        _ADC_Read 617A                       f_close@fp 0049  
                      ?_put_fat 003B         __end_of_disk_initialize 4576                        ?_sync_fs 0039  
                   _get_fat$588 0049               find_volume@fasize 00AD              __end_of___send_cmd 5BFC  
                   _create_name 3C02                       f_lseek@fp 006D                        _LATEbits 0F8D  
             find_volume@szbfat 0096                       f_open@dir 00D7                       f_open@res 00D6  
                     f_open@sfn 00C2               find_volume@sysect 009C                     _find_volume 063A  
                   _disk_status 619E                   ??_move_window 0036                       f_mount@fs 0050  
                     f_mount@rp 0057                 follow_path@path 0086                   move_window@fs 0030  
                     dir_find@c 0081                      ?_dir_alloc 0080                 remove_chain@res 0060  
               remove_chain@nxt 0061                       f_sync@dir 0047                       f_sync@res 0046  
                     dir_sdi@ic 005F                       dir_sdi@dp 0055                       dir_next@c 0078  
                     dir_next@i 007A                      ?_disk_read 0011                       f_write@cc 0087  
                     f_write@bw 0072                       f_write@fp 006D                        _SPI_Open 61F4  
                     get_fat@bc 0053                       get_fat@fs 003B                       get_fat@wc 004F  
                    _ADCON0bits 0FC2                        _CardType 00FC                       main@flame 00F5  
                  ??_disk_ioctl 0014                       main@smoke 00F4                    ??_disk_write 0019  
                  f_lseek@ifptr 0091                    f_lseek@nsect 0095                      st_clust@cl 0003  
                  ??_clust2sect 0013               ___lmul@multiplier 0001                      put_fat@res 0053  
                    put_fat@val 0041               move_window@sector 0032                 dir_next@stretch 006E  
                      __Hrparam 0000                        __Lrparam 0000                     _follow_path 4C56  
            __end_of_disk_ioctl 2704              __end_of_disk_write 4AB2         ??_OSCILLATOR_Initialize 0001  
           __end_of_move_window 5B3A              __end_of_clust2sect 5A78                        _check_fs 5450  
           xmit_datablock@token 0006                ??_rcvr_datablock 0006                 dir_register@res 008B  
                      _deselect 6220                        __ptext10 5676                        __ptext11 5752  
                      __ptext20 6204                        __ptext12 5202                        __ptext21 5450  
                      __ptext13 3F8C                        __ptext30 4F6A                        __ptext22 19EC  
                      __ptext14 2B94                        __ptext31 5824                        __ptext23 384E  
                      __ptext15 58EC                        __ptext40 5BFC                        __ptext32 619E  
                      __ptext24 2704                        __ptext16 063A                        __ptext41 50C6  
                      __ptext33 4576                        __ptext25 3470                        __ptext17 556C  
                      __ptext50 61BC                        __ptext42 6004                        __ptext34 60EE  
                      __ptext26 59B2                        __ptext18 42B4                        __ptext51 6214  
                      __ptext43 5B3A                        __ptext35 2112                        __ptext27 5EE0  
                      __ptext19 61F4                        __ptext52 617A                        __ptext44 6150  
                      __ptext36 6126                        __ptext28 5CA6                        __ptext45 5F4A  
                      __ptext37 5A78                        __ptext29 605C                        __ptext46 6220  
                      __ptext38 4DE6                        __ptext47 5D4A                        __ptext39 4908  
                      __ptext48 61DA                        __ptext49 622A                        _dir_find 532E  
                      _dir_next 2B94                   dir_alloc@nent 0081                ?_disk_initialize 0001  
                      _ld_clust 5DE6                  sync_window@res 0029                      sync_fs@res 0043  
                  _remove_chain 4AB2                find_volume@bsect 00B1                find_volume@nclst 00A8  
              find_volume@tsect 00A4                find_volume@wmode 0047                        f_open@dj 00D9  
                      f_open@cl 00CE                        f_open@fp 00BA                        f_open@dw 00D2  
                      _send_cmd 6004                        _validate 5824                        isa$xinst 0000  
                      f_sync@fp 0044                     ??_dir_alloc 0083                        _st_clust 6126  
                      get_fat@p 0051                    ??_wait_ready 0002                   ??_sync_window 001D  
                   ??_disk_read 0019                   _disk_read$358 001A                     f_lseek@clst 009D  
                      mem_cmp@d 0008                     _OSCTUNEbits 0F9B                        mem_cmp@r 000A  
                      mem_cmp@s 000C                       put_fat@bc 0051                        mem_cpy@d 0009  
                     put_fat@fs 003B                        mem_cpy@s 000B                        mem_set@d 0007  
                 wait_ready@tmr 0002              xmit_datablock@buff 0004              xmit_datablock@resp 0009  
                dir_register@dp 0089                ??_xmit_datablock 0007              __end_of_wait_ready 5FA8  
              ___lldiv@dividend 0001         ?_PIN_MANAGER_Initialize 0001                    dir_alloc@res 0088  
                 sync_window@fs 001B                   sync_window@nf 002A                     f_mount@path 0052  
                     sync_fs@fs 0039                      _OSCCONbits 0FD3                     _move_window 5A78  
              _SPI_Exchange8bit 61DA                        put_fat@p 0054                   ?_dir_register 0089  
                   dir_alloc@dp 0080                ___lldiv@quotient 0009                     dir_find@dir 0082  
           __end_of_sync_window 4F6A                     dir_find@res 0084                   ?_create_chain 0056  
                   _SSPCON1bits 0FC6                    dir_next@clst 007C                     dir_sdi@clst 0065  
__end_of_PIN_MANAGER_Initialize 61DA                     dir_sdi@sect 0061                    ?_create_name 0009  
                  f_write@csect 0082                    f_write@wbuff 0081                     f_write@buff 006F  
                   f_write@clst 0089                     f_write@sect 0083                    ?_find_volume 0045  
                   f_write@wcnt 008D                   ?_get_ldnumber 0001                    ?_disk_status 0001  
                   _put_fat$614 004D                     _put_fat$615 004F  
